<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若尧</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-26T15:16:55.203Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Cary</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react和vue的比较</title>
    <link href="http://yoursite.com/2018/03/26/react-vue/"/>
    <id>http://yoursite.com/2018/03/26/react-vue/</id>
    <published>2018-03-26T09:27:45.000Z</published>
    <updated>2018-03-26T15:16:55.203Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-相比较jquery"><a href="#1-相比较jquery" class="headerlink" title="1.相比较jquery"></a>1.相比较jquery</h3><p>jquery是使用选择器（$）选取DOM对象，对其进行赋值、取值、事件绑定等操作，<br>其实和原生的javascript的区别只在于可以更方便的选取和操作DOM对象,还有jquery更好的封装性，兼容性。<br>比如说添加个事件监听：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果用js需要做兼容</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.addEventListener != <span class="string">"undefined"</span>) &#123; </span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mousedown"</span>,XXX,<span class="literal">true</span>); <span class="comment">//google</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line"><span class="built_in">document</span>.attachEvent(<span class="string">"onmousedown"</span>,XXX); <span class="comment">//IE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用jquery纯dom操作，太多的浏览器事件会导致监听混乱/项目不好维护/占用很大的内存。<br>而且它在客观上没有推动开发者了解和使用抽象程度更高的领域。<br>包括但不限于数据结构，设计模式，数据流，抽象数据类型，抽象过程等。</p><p>而Vue.js 专注于 MVVM 模型的 ViewModel 层，通过数据驱动视图。<br>模块化的开发，组件式的思想，更加高效，更加友好<br>Vue已经解决了之前jQuery很多痛点：<br>1.无需担心DOM回调，这种复杂性已经被封装。Vue的生命周期挂钩将允许更精确的控制，如果它需要。<br>2.在数据属性counter和它渲染输出DOM节点之间有一个明显的之间的链接。<br>3.我们没有模棱两可的API方法需要查找或记住。不同的功能被很好的组织和分层在Vue构造函数对象中，<br>或能通过指令直接应用到模板中的DOM节点，这些指令提供更多的易于理解的上下文。</p><p>比如 React ，一开始就必须接受 view = f (state) 的思想。<br>几乎稍微深入的使用，就会开始思考数据的互传，进而是单向数据流，最后深入到各种数据流方案的讨论和选择。</p><p>持续集成：项目上线并不是完事大吉了，后续我们还要面临需求迭代、bug修复、合作甚至交接等其他问题。<br>因此一个可持续集成的工程化项目架构就显得尤为重要，项目架构和技术栈的选择往往是密不可分的，但二者并不存在必然关系。<br>比如在没有ES6的年代，我们依然可以使用RequireJS或者seajs来达到js的模块化，<br>没有webpack，我们还可以依靠Grunt或者gulp来构建我们的项目。</p><h3 id="2-vue和react的优化"><a href="#2-vue和react的优化" class="headerlink" title="2.vue和react的优化"></a>2.vue和react的优化</h3><p>React 的 Virtual DOM 也不是不需要优化的。<br>复杂的应用里你有两个选择：</p><ol><li>手动添加 shouldComponentUpdate 来避免不需要的 vdom re-render；</li><li>Components 尽可能都用 pureRenderMixin，然后采用 Flux 结构 + Immutable.js。</li></ol><p>Vue采用依赖追踪，默认就是优化状态，通过Object.defineProperty的getter/setter来追踪数据，改了多少数据，就触发多少更新。</p><h3 id="3-开发风格不同"><a href="#3-开发风格不同" class="headerlink" title="3.开发风格不同"></a>3.开发风格不同</h3><p>react采用jsx语法 + inline style，把html和css整合进javascript，<br>在逻辑表达上比模版的清晰，但是复杂逻辑很容易写出凌乱的render函数。</p><p>vue采用单文件.vue的模版语法，还是熟悉的html，js，css，且方便使用sass/less。</p><h3 id="4-数据流不同"><a href="#4-数据流不同" class="headerlink" title="4.数据流不同"></a>4.数据流不同</h3><p>react采用单向数据流，所有state的修改都要通过setState方法，<br>在执行setState的时候，react不是立即更新state，只是把新的state存到一个队列batchUpdate，<br>然后再批处理，其中会经过shouldComponentUpdate来判断是否重新渲染，<br>如果是，react会进行state合并，生成新的state和props，重新render视图；<br>如果不是，react仍然会更新state，但是不会再render。<br>相当于于把setState看作是重新render的一次请求而不是立即更新的指令。</p><p>vue采用双向数据流，可以随意修改state，但有些限制。<br>vue的限制：（需要使用Vue.set(object, key, value)方法）<br>（1）不能检测到对象属性的添加和删除<br>（2）不能检测通过索引设置数组的值<br>（3）不能检测直接修改数组的长度 （用splice方法替代）</p><h3 id="5-原理不同"><a href="#5-原理不同" class="headerlink" title="5.原理不同"></a>5.原理不同</h3><p>react把每个组件当成一个状态机，组件内部通过state来维护组件状态的变化，<br>当状态改变的时候，通过虚拟dom来增量并且高效的更新真是dom。</p><p>vue通过Object.defineProperty的getter/setter来追踪数据,每个组件实例都有watcher，<br>当依赖项的setter被调用时，会通知watcher重新计算，致使组件更新。</p><h3 id="6-使用场景不同"><a href="#6-使用场景不同" class="headerlink" title="6.使用场景不同"></a>6.使用场景不同</h3><p>react的生态系统要大于vue，适合大规模多人协作的复杂项目。<br>vue使用在小项目上会更加灵活，简单。</p><h3 id="7-redux和vuex"><a href="#7-redux和vuex" class="headerlink" title="7.redux和vuex"></a>7.redux和vuex</h3><p>redux数据流的顺序是：<br>view层调用store.dispatch发起action<br>-&gt; store接收action（action传入reducer，reducer返回一个新的state）<br>-&gt; 通知store.subscribe订阅的重新渲染函数</p><p>vuex根据vue的特性改进了redux，以mutations取代reducer，只需在mutation里改变state的值，也无需订阅重新渲染函数<br>vuex数据流的顺序：<br>view层调用store.commit提交对应的请求到store中对应的mutation<br>-&gt; store改变（vue检测数据变化自动渲染）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-相比较jquery&quot;&gt;&lt;a href=&quot;#1-相比较jquery&quot; class=&quot;headerlink&quot; title=&quot;1.相比较jquery&quot;&gt;&lt;/a&gt;1.相比较jquery&lt;/h3&gt;&lt;p&gt;jquery是使用选择器（$）选取DOM对象，对其进行赋值、取值、事
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>IM即时聊天项目</title>
    <link href="http://yoursite.com/2018/03/19/pro-im/"/>
    <id>http://yoursite.com/2018/03/19/pro-im/</id>
    <published>2018-03-19T02:29:47.000Z</published>
    <updated>2018-03-22T09:34:07.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p><a href="http://120.78.155.16:8080/" target="_blank" rel="noopener">移动端测试地址</a></p><h3 id="依赖简介"><a href="#依赖简介" class="headerlink" title="依赖简介"></a>依赖简介</h3><ul><li><p>web端：vue,vuex,vue-router,axios,mint-ui,sass</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相关依赖</span></span><br><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"axios"</span>: <span class="string">"^0.17.0"</span>, <span class="comment">//异步请求</span></span><br><span class="line">  <span class="string">"clipboard"</span>: <span class="string">"^1.7.1"</span>, <span class="comment">//复制剪切板</span></span><br><span class="line">  <span class="string">"echarts"</span>: <span class="string">"^3.8.5"</span>, <span class="comment">//百度图表</span></span><br><span class="line">  <span class="string">"js-md5"</span>: <span class="string">"^0.7.2"</span>, <span class="comment">//md5加密</span></span><br><span class="line">  <span class="string">"mint-ui"</span>: <span class="string">"^2.2.9"</span>, <span class="comment">//移动端ui框架</span></span><br><span class="line">  <span class="string">"vue"</span>: <span class="string">"^2.0.1"</span>, <span class="comment">//vue</span></span><br><span class="line">  <span class="string">"vue-awesome-swiper"</span>: <span class="string">"^2.3.8"</span>, <span class="comment">//图片浏览组件</span></span><br><span class="line">  <span class="string">"vue-cropper"</span>: <span class="string">"^0.2.5"</span>, <span class="comment">//图片裁剪上传</span></span><br><span class="line">  <span class="string">"vue-navigation"</span>: <span class="string">"^1.1.1"</span>, <span class="comment">//路由管理</span></span><br><span class="line">  <span class="string">"vue-touch"</span>: <span class="string">"^2.0.0-beta.4"</span>, <span class="comment">//移动端</span></span><br><span class="line">  <span class="string">"vuex"</span>: <span class="string">"^2.0.0"</span>, <span class="comment">//状态管理</span></span><br><span class="line">  <span class="string">"whatwg-fetch"</span>: <span class="string">"^1.0.0"</span> <span class="comment">//兼容fetch</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>app端：react-native,react,redux,react-navigation</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相关依赖</span></span><br><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"jcore-react-native"</span>: <span class="string">"^1.2.5"</span>, <span class="comment">//极光推送相关</span></span><br><span class="line">    <span class="string">"jpush-react-native"</span>: <span class="string">"^2.1.11"</span>, <span class="comment">//极光推送相关</span></span><br><span class="line">    <span class="string">"js-md5"</span>: <span class="string">"^0.7.3"</span>, <span class="comment">//md5加密</span></span><br><span class="line">    <span class="string">"prop-types"</span>: <span class="string">"^15.6.1"</span>, <span class="comment">//prop type检查</span></span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"16.2.0"</span>, <span class="comment">//react</span></span><br><span class="line">    <span class="string">"react-native"</span>: <span class="string">"0.52.2"</span>, <span class="comment">//react-native</span></span><br><span class="line">    <span class="string">"react-native-check-box"</span>: <span class="string">"^2.1.0"</span>, <span class="comment">//兼容ios checkbox</span></span><br><span class="line">    <span class="string">"react-native-elements"</span>: <span class="string">"^0.19.0"</span>, <span class="comment">//elements ui库</span></span><br><span class="line">    <span class="string">"react-native-image-crop-picker"</span>: <span class="string">"^0.19.3"</span>,<span class="comment">//图片裁剪选取组件</span></span><br><span class="line">    <span class="string">"react-native-photo-browser"</span>: <span class="string">"^0.4.0"</span>, <span class="comment">//图片浏览组件</span></span><br><span class="line">    <span class="string">"react-native-picker"</span>: <span class="string">"^4.3.5"</span>, <span class="comment">//时间等等选择器</span></span><br><span class="line">    <span class="string">"react-native-popup-menu"</span>: <span class="string">"^0.12.2"</span>,<span class="comment">//popup弹窗组件</span></span><br><span class="line">    <span class="string">"react-native-push-notification"</span>: <span class="string">"^3.0.2"</span>,<span class="comment">//本地推送组件</span></span><br><span class="line">    <span class="string">"react-native-svg"</span>: <span class="string">"^6.2.2"</span>, <span class="comment">//使用svg的组件</span></span><br><span class="line">    <span class="string">"react-native-swipe-list-view"</span>: <span class="string">"^1.0.5"</span>, <span class="comment">//侧滑删除组件</span></span><br><span class="line">    <span class="string">"react-native-swipeable"</span>: <span class="string">"^0.6.0"</span>, <span class="comment">//侧滑删除组件</span></span><br><span class="line">    <span class="string">"react-native-vector-icons"</span>: <span class="string">"^4.5.0"</span>,<span class="comment">//icon组件</span></span><br><span class="line">    <span class="string">"react-native-wechat"</span>: <span class="string">"^1.9.9"</span>,<span class="comment">//微信相关接口组件</span></span><br><span class="line">    <span class="string">"react-navigation"</span>: <span class="string">"^1.4.0"</span>,<span class="comment">//路由控制</span></span><br><span class="line">    <span class="string">"react-redux"</span>: <span class="string">"^5.0.7"</span>,<span class="comment">//状态管理</span></span><br><span class="line">    <span class="string">"redux"</span>: <span class="string">"^3.7.2"</span>, <span class="comment">//状态管理</span></span><br><span class="line">    <span class="string">"redux-persist"</span>: <span class="string">"^5.9.1"</span>, <span class="comment">//redux数据持久化中间件</span></span><br><span class="line">    <span class="string">"redux-thunk"</span>: <span class="string">"^2.2.0"</span>, <span class="comment">//异步redux中间件</span></span><br><span class="line">    <span class="string">"whatwg-fetch"</span>: <span class="string">"^2.0.3"</span> <span class="comment">//兼容fetch</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>后台管理系统： vue,vuex,vue-router,axios,elementUI</p></li></ul><h3 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h3><p>web端和app端公用接口，统一功能，后台管理系统多为表格。<br>以社群功能为主，包括创建社群，社群管理，群里可发布话题和活动，话题管理，活动管理，话题是基于websocket实现文字表情图片等多人聊天，<br>群权限分为群主管理员成员，相关权限功能：密码，发布权限，审核权限，禁言等等。<br>另外几块是私聊消息，系统消息，好友模块，用户模块。</p><h3 id="图片简介"><a href="#图片简介" class="headerlink" title="图片简介"></a>图片简介</h3><p>考虑到又是一个没正式上线的项目,所以截下来放点图片好了</p><h5 id="首页社群web版："><a href="#首页社群web版：" class="headerlink" title="首页社群web版："></a>首页社群web版：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/1.jpg" alt="图片"></p><h5 id="群详情web版："><a href="#群详情web版：" class="headerlink" title="群详情web版："></a>群详情web版：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/2.jpg" alt="图片"></p><h5 id="话题群聊web版："><a href="#话题群聊web版：" class="headerlink" title="话题群聊web版："></a>话题群聊web版：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/3.jpg" alt="图片"></p><h5 id="活动详情web版："><a href="#活动详情web版：" class="headerlink" title="活动详情web版："></a>活动详情web版：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/4.jpg" alt="图片"></p><h5 id="私聊web版："><a href="#私聊web版：" class="headerlink" title="私聊web版："></a>私聊web版：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/5.jpg" alt="图片"></p><h5 id="消息列表app安卓："><a href="#消息列表app安卓：" class="headerlink" title="消息列表app安卓："></a>消息列表app安卓：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/6.jpg" alt="图片"></p><h5 id="系统消息app安卓："><a href="#系统消息app安卓：" class="headerlink" title="系统消息app安卓："></a>系统消息app安卓：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/7.jpg" alt="图片"></p><h5 id="好友列表app-ios："><a href="#好友列表app-ios：" class="headerlink" title="好友列表app ios："></a>好友列表app ios：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/8.jpg" alt="图片"></p><h5 id="个人中心app-ios："><a href="#个人中心app-ios：" class="headerlink" title="个人中心app ios："></a>个人中心app ios：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/9.jpg" alt="图片"></p><h5 id="后台管理登陆："><a href="#后台管理登陆：" class="headerlink" title="后台管理登陆："></a>后台管理登陆：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/10.jpg" alt="图片"></p><h5 id="后台管理某页面："><a href="#后台管理某页面：" class="headerlink" title="后台管理某页面："></a>后台管理某页面：</h5><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dapaijiadao/11.jpg" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://120.78.155.16:8080/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>react-navigation的用法</title>
    <link href="http://yoursite.com/2018/02/01/react-native-02/"/>
    <id>http://yoursite.com/2018/02/01/react-native-02/</id>
    <published>2018-02-01T06:39:50.000Z</published>
    <updated>2018-03-06T02:04:25.757Z</updated>
    
    <content type="html"><![CDATA[<p>(1)<a href="https://reactnavigation.org" target="_blank" rel="noopener">官方网站</a><br>(2)<a href="https://www.jianshu.com/p/2f575cc35780" target="_blank" rel="noopener">参考资料</a></p><h3 id="1-基本类型"><a href="#1-基本类型" class="headerlink" title="1.基本类型"></a>1.基本类型</h3><p>react-navigation分为三个部分。<br>StackNavigator类似顶部导航条，用来跳转页面和传递参数。<br>TabNavigator类似底部标签栏，用来区分模块。<br>DrawerNavigator抽屉，类似从App左侧滑出一个页面，在这里不做讲解。</p><h3 id="2-screenProps"><a href="#2-screenProps" class="headerlink" title="2.screenProps"></a>2.screenProps</h3><p>screenProps：react-navigation自带的一个属性，属于navigationOptions的一个属性，可以全局控制navigationOptions中的某些值，比如说你想做换肤功能，修改这个属性绝对是最简单的方式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 假设App就是项目中的入口文件，如果还不知道，可以看下Demo，在这里我将主题色通过screenProps属性修改成'red'</span><br><span class="line"><span class="tag">&lt;<span class="name">App</span> <span class="attr">screenProps</span>=<span class="string">&#123;&#123;themeColor:</span>'<span class="attr">red</span>'&#125;&#125;&gt;</span></span><br><span class="line"></span><br><span class="line">// 在页面中就可以通过screenProps来直接改变了，这个在Demo中的Test2里面</span><br><span class="line"></span><br><span class="line">static navigationOptions = (&#123;navigation,screenProps&#125;) =&gt; (&#123;</span><br><span class="line">        // 这里面的属性和App.js的navigationOptions是一样的。</span><br><span class="line">headerStyle:&#123;backgroundColor:screenProps?</span><br><span class="line">screenProps.themeColor:</span><br><span class="line">'#4ECBFC'&#125;,</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="3-TabNavigator"><a href="#3-TabNavigator" class="headerlink" title="3.TabNavigator"></a>3.TabNavigator</h3><p>安卓下用作底部导航栏显示图标需要配置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">tabBarPosition: <span class="string">'bottom'</span>,</span><br><span class="line">animationEnabled: <span class="literal">true</span>,</span><br><span class="line">configureTransition: <span class="function">(<span class="params">currentTransitionProps,nextTransitionProps</span>) =&gt;</span> (&#123;</span><br><span class="line">timing: Animated.spring,</span><br><span class="line">tension: <span class="number">1</span>,</span><br><span class="line">friction: <span class="number">35</span>,</span><br><span class="line">&#125;),</span><br><span class="line">swipeEnabled: <span class="literal">true</span>,</span><br><span class="line">tabBarOptions: &#123;</span><br><span class="line">showIcon: <span class="literal">true</span>  <span class="comment">//android下默认不显示图标</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-自定义导航栏"><a href="#4-自定义导航栏" class="headerlink" title="4.自定义导航栏"></a>4.自定义导航栏</h3><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> StackOptions = <span class="function">(<span class="params">&#123;navigation&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(navigation);</span><br><span class="line">    <span class="keyword">let</span> &#123;state,goBack&#125; = navigation;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用来判断是否隐藏或显示header</span></span><br><span class="line">    <span class="keyword">const</span> visible= state.params.isVisible;</span><br><span class="line">    <span class="keyword">let</span> header;</span><br><span class="line">    <span class="keyword">if</span> (visible === <span class="literal">true</span>)&#123;</span><br><span class="line">        header = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> headerStyle = &#123;<span class="attr">backgroundColor</span>:<span class="string">'#4ECBFC'</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> headerTitle = state.params.title;</span><br><span class="line">    <span class="keyword">const</span> headerTitleStyle = &#123;<span class="attr">fontSize</span>:FONT_SIZE(<span class="number">20</span>),<span class="attr">color</span>:<span class="string">'white'</span>,<span class="attr">fontWeight</span>:<span class="string">'500'</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> headerBackTitle = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> headerLeft = (</span><br><span class="line">        &lt;Button</span><br><span class="line">            isCustom=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">            customView=&#123;</span><br><span class="line">                            &lt;Icon</span><br><span class="line">                                name=<span class="string">'ios-arrow-back'</span></span><br><span class="line">                                size=&#123;<span class="number">30</span>&#125;</span><br><span class="line">                                color=<span class="string">'white'</span></span><br><span class="line">                                style=&#123;&#123;<span class="attr">marginLeft</span>:<span class="number">13</span>&#125;&#125;</span><br><span class="line">                            /&gt;</span><br><span class="line">                        &#125;</span><br><span class="line">            onPress=&#123;()=&gt;&#123;goBack()&#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> &#123;headerStyle,headerTitle,headerTitleStyle,headerBackTitle,headerLeft,header&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyApp = StackNavigator(&#123;</span><br><span class="line">    MyTab: &#123;</span><br><span class="line">        screen: MyTab,</span><br><span class="line">    &#125;,</span><br><span class="line">    Detail: &#123;</span><br><span class="line">        screen: Detail,</span><br><span class="line">        navigationOptions: <span class="function">(<span class="params">&#123;navigation&#125;</span>) =&gt;</span> StackOptions(&#123;navigation&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-二级界面隐藏Tabbar"><a href="#5-二级界面隐藏Tabbar" class="headerlink" title="5.二级界面隐藏Tabbar"></a>5.二级界面隐藏Tabbar</h3><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserTab = StackNavigator(&#123;</span><br><span class="line">UserCenter: &#123;</span><br><span class="line">screen: <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">UserCenter</span> <span class="attr">navigation</span>=<span class="string">&#123;navigation&#125;</span> /&gt;</span>),</span></span><br><span class="line"><span class="xml">path: '/userCenter',</span></span><br><span class="line"><span class="xml">navigationOptions: &#123;</span></span><br><span class="line"><span class="xml">headerTitle: '个人中心',</span></span><br><span class="line"><span class="xml">headerTintColor: Color.while,</span></span><br><span class="line"><span class="xml">headerStyle: styles.headerBg</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">Login: &#123;</span></span><br><span class="line">screen: (&#123; navigation &#125;) =&gt; (&lt;Login navigation=&#123;navigation&#125; /&gt;),</span><br><span class="line">path: '/login',</span><br><span class="line">navigationOptions: &#123;</span><br><span class="line">header: (&#123; navigation &#125;)=&gt;(&lt;ComHeader navigation=&#123;navigation&#125; title="登陆"/&gt;),</span><br><span class="line">tabBarVisible: false //隐藏tabbar</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="6-error-Invariant-Violation：view-config-not-found-for-name-hotGroups"><a href="#6-error-Invariant-Violation：view-config-not-found-for-name-hotGroups" class="headerlink" title="6.error: Invariant Violation：view config not found for name hotGroups"></a>6.error: Invariant Violation：view config not found for name hotGroups</h3><p>好像是没找到navigation。<br>感觉navigation的使用不太对，只能一层层传过去。<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> GroupTab = TabNavigator(</span><br><span class="line">&#123;</span><br><span class="line">hotGroups: &#123;</span><br><span class="line">screen: <span class="function">(<span class="params">&#123; navigation&#125;</span>) =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">hotGroups</span> <span class="attr">navigation</span>=<span class="string">&#123;navigation&#125;</span> /&gt;</span>),</span></span><br><span class="line"><span class="xml">path: '/hotGroups',</span></span><br><span class="line"><span class="xml">navigationOptions: &#123;</span></span><br><span class="line"><span class="xml">tabBarLabel: '推荐社群'</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">myGroups: &#123;</span></span><br><span class="line">screen: (&#123; navigation&#125;) =&gt; (&lt;myGroups navigation=&#123;navigation&#125; /&gt;),</span><br><span class="line">path: '/myGroups',</span><br><span class="line">navigationOptions: &#123;</span><br><span class="line">tabBarLabel: '我的社群'</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">tabBarPosition: 'top',</span><br><span class="line">animationEnabled: true,</span><br><span class="line">configureTransition: (currentTransitionProps,nextTransitionProps) =&gt; (&#123;</span><br><span class="line">timing: Animated.spring,</span><br><span class="line">tension: 1,</span><br><span class="line">friction: 35,</span><br><span class="line">&#125;),</span><br><span class="line">swipeEnabled: false,</span><br><span class="line">tabBarOptions: &#123;</span><br><span class="line">activeTintColor: Color.while,</span><br><span class="line">labelStyle: &#123;</span><br><span class="line">fontSize: 16</span><br><span class="line">&#125;,</span><br><span class="line">style: &#123;</span><br><span class="line">backgroundColor: Color.main</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="7-实现replace方法"><a href="#7-实现replace方法" class="headerlink" title="7.实现replace方法"></a>7.实现replace方法</h3><p>由于新版的react navigation似乎没有了replace方法，只能reset所有路由。<br>翻阅各种issues，找到一种可以用的方法：<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//routes.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; StackNavigator &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"><span class="keyword">const</span> HomeStack = StackNavigator(</span><br><span class="line">&#123;</span><br><span class="line">Web: &#123; <span class="attr">screen</span>: XXX, <span class="attr">path</span>: <span class="string">'/'</span> &#125;,</span><br><span class="line">Login: &#123; <span class="attr">screen</span>: XXX1 &#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//思路在于dispath一个type为replace的action，在原getStateForAction方法上重写</span></span><br><span class="line"><span class="keyword">const</span> prevGetStateForAction = HomeStack.router.getStateForAction;</span><br><span class="line">HomeStack.router.getStateForAction = <span class="function">(<span class="params">action, state</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (state &amp;&amp; action.type === <span class="string">"replace"</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> routes = state.routes.slice(<span class="number">0</span>, state.routes.length - <span class="number">1</span>);</span><br><span class="line">action.key =  <span class="string">`id-<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>-<span class="subst">$&#123;routes.length - <span class="number">1</span>&#125;</span>`</span>;</span><br><span class="line">routes.push(action);</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">...state,</span><br><span class="line">routes,</span><br><span class="line">index: routes.length - <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> prevGetStateForAction(action, state);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//XXX.js 页面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.props.navigation.dispatch(&#123;</span><br><span class="line">type: <span class="string">'replace'</span>,</span><br><span class="line">routeName: <span class="string">'Login'</span>,</span><br><span class="line">key: <span class="string">'Login'</span>,</span><br><span class="line">params: &#123;</span><br><span class="line">id: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/react-navigation/react-navigation/issues/802" target="_blank" rel="noopener">参考</a></p><h3 id="8-lazy"><a href="#8-lazy" class="headerlink" title="8.lazy"></a>8.lazy</h3><p>v1.0.0-beta.23 has a breaking change noted: “Drop the lazy option for TabNavigator”<br>lazy属性用不了，TabNavigator会一次性全部加载</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(1)&lt;a href=&quot;https://reactnavigation.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方网站&lt;/a&gt;&lt;br&gt;(2)&lt;a href=&quot;https://www.jianshu.com/p/2f575cc35780&quot; t
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>react-native踩坑中</title>
    <link href="http://yoursite.com/2018/01/29/react-native-01/"/>
    <id>http://yoursite.com/2018/01/29/react-native-01/</id>
    <published>2018-01-29T07:19:43.000Z</published>
    <updated>2018-03-22T08:14:22.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-react相关注意点"><a href="#1-react相关注意点" class="headerlink" title="1.react相关注意点"></a>1.react相关注意点</h3><p>（1）超过最大更新深度<br>error<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Maximum update depth exceeded. </span><br><span class="line">This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. </span><br><span class="line">React limits the number of nested updates to prevent infinite loops.</span><br></pre></td></tr></table></figure></p><p>(2)弃用PropTypes<br><a href="http://www.css88.com/react/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">文档</a><br>从 React v15.5 开始 ，React.PropTypes 助手函数已被弃用，我们建议使用 <a href="https://github.com/facebook/prop-types" target="_blank" rel="noopener">prop-types</a> 库 来定义contextTypes。</p><h3 id="2-配置极光推送"><a href="#2-配置极光推送" class="headerlink" title="2.配置极光推送"></a>2.配置极光推送</h3><p><a href="https://github.com/jpush/jpush-react-native" target="_blank" rel="noopener">官方插件</a><br>注：<br>（1）在项目的AndroidManifest.xml里面加上下面代码,注意下protectionLevel，这里是权限保护设置。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加通知权限，$&#123;ApplicationID&#125;替换成你的applicationID!--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">premission</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"$&#123;ApplicationID&#125;.permission.JPUSH_MESSAGE"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:protectionLevel</span>=<span class="string">"signature"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>（2）打开node_modules/jpush_react-native/android/src/AndroidManifest.xml，将所有的${applicationId}替换成你的包名。<br>或者通过android studio打开找到jpush_react-native项目下的AndroidManifest.xml。</p><p>(3) error:<br>Undefined is no a function evaluating cb(resultCode)</p><h3 id="3-配置iconfont"><a href="#3-配置iconfont" class="headerlink" title="3.配置iconfont"></a>3.配置iconfont</h3><p><a href="https://www.jianshu.com/p/96d5c66791c3" target="_blank" rel="noopener">配置阿里下载的iconfont</a></p><h3 id="4-run-ios闪退"><a href="#4-run-ios闪退" class="headerlink" title="4.run-ios闪退"></a>4.run-ios闪退</h3><p>用Xcode直接编译运行没有问题，<br>利用终端命令react-native run-ios 出现闪退问题。</p><p>解决方案：由于我使用翻墙软件，造成localhost不能识别本地ip。只需要退出翻墙软件即可正常运行。</p><h3 id="5-redux的使用"><a href="#5-redux的使用" class="headerlink" title="5.redux的使用"></a>5.redux的使用</h3><p><a href="https://www.jianshu.com/p/2c43860b0532" target="_blank" rel="noopener">参考</a><br>step1： //root.js<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import react-native</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"><span class="comment">// same for react-redux</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'./store/configure-store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./containers/app'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = configureStore()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Root</span><br></pre></td></tr></table></figure></p><p>step2:<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  AppRegistry</span><br><span class="line">&#125; = React</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Root <span class="keyword">from</span> <span class="string">'./root'</span></span><br><span class="line"></span><br><span class="line">AppRegistry.registerComponent(<span class="string">'soundreduxNative'</span>, () =&gt; Root)</span><br></pre></td></tr></table></figure></p><h3 id="6-redux-persist-数据持久化"><a href="#6-redux-persist-数据持久化" class="headerlink" title="6.redux-persist(数据持久化)"></a>6.redux-persist(数据持久化)</h3><p><a href="https://github.com/rt2zz/redux-persist" target="_blank" rel="noopener">官方文档</a><br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>; <span class="comment">//数据管理</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>; <span class="comment">//异步action</span></span><br><span class="line"><span class="keyword">import</span> &#123; persistStore, persistReducer &#125; <span class="keyword">from</span> <span class="string">'redux-persist'</span>; <span class="comment">//数据持久化</span></span><br><span class="line"><span class="keyword">import</span> &#123; AsyncStorage &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>; <span class="comment">//引入本地存储</span></span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'../reducers'</span>; <span class="comment">//引入combine后的reducer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//追踪action和state变化 http://www.redux.org.cn/docs/advanced/Middleware.html</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="function"><span class="params">store</span> =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> action === <span class="string">'function'</span>) <span class="built_in">console</span>.log(<span class="string">'dispatching a function'</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">'dispatching'</span>, action);</span><br><span class="line"><span class="keyword">let</span> result = next(action);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'next state'</span>, store.getState());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间件</span></span><br><span class="line"><span class="keyword">let</span> middlewares = [</span><br><span class="line">logger,</span><br><span class="line">thunk</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> createAppStore = applyMiddleware(...middlewares)(createStore);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置redux-persist</span></span><br><span class="line"><span class="keyword">const</span> persistConfig = &#123;</span><br><span class="line">key: <span class="string">'root'</span>,</span><br><span class="line">storage: AsyncStorage,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> persistedReducer = persistReducer(persistConfig, reducers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> store = createAppStore(persistedReducer)</span><br><span class="line"><span class="keyword">let</span> persistor = persistStore(store)</span><br><span class="line"><span class="keyword">return</span> &#123; store, persistor &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>似乎可以实现loading功能<br><figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PersistGate &#125; <span class="keyword">from</span> <span class="string">'redux-persist/lib/integration/react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'./store/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; store, persistor &#125; = configureStore();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Root <span class="keyword">from</span> <span class="string">'./root'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">&lt;PersistGate loading=&#123;<span class="literal">null</span>&#125; persistor=&#123;persistor&#125;&gt;</span><br><span class="line">&lt;Root /&gt;</span><br><span class="line">&lt;<span class="regexp">/PersistGate&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Provider&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></p><p>还有问题的话，回退到v4的版本 <a href="https://github.com/ninty90/react-native-redux-demo" target="_blank" rel="noopener">参考</a></p><h3 id="7-react-native中使用svg"><a href="#7-react-native中使用svg" class="headerlink" title="7.react-native中使用svg"></a>7.react-native中使用svg</h3><p><a href="https://github.com/react-native-community/react-native-svg" target="_blank" rel="noopener">react-native-svg</a><br><a href="https://github.com/vault-development/react-native-svg-uri" target="_blank" rel="noopener">react-native-svg-uri</a></p><p><a href="https://www.jianshu.com/p/7db2bc62c5ed" target="_blank" rel="noopener">参考</a></p><p>error:<br>(1)react-native 出现 No component found for view with name “RNSVG<em>*</em>”<br><a href="https://www.jianshu.com/p/b51b79ca14e7" target="_blank" rel="noopener">ios</a></p><p>(2)No ViewManager defined for class RNSVGPath<br>重启下项目。。</p><h3 id="8-react-native中Image的默认图片"><a href="#8-react-native中Image的默认图片" class="headerlink" title="8.react-native中Image的默认图片"></a>8.react-native中Image的默认图片</h3><p>在外层包一层ImageBackground</p><h3 id="9-配置react-native-image-crop-picker"><a href="#9-配置react-native-image-crop-picker" class="headerlink" title="9.配置react-native-image-crop-picker"></a>9.配置react-native-image-crop-picker</h3><p><a href="https://github.com/ivpusic/react-native-image-crop-picker" target="_blank" rel="noopener">文档</a><br><a href="https://www.jianshu.com/p/8420b08062c7" target="_blank" rel="noopener">翻译</a><br><a href="http://blog.csdn.net/sinat_17775997/article/details/74908864" target="_blank" rel="noopener">配置</a></p><h3 id="10-warning-enableEmptySections"><a href="#10-warning-enableEmptySections" class="headerlink" title="10.warning: enableEmptySections"></a>10.warning: enableEmptySections</h3><p>当升级完react-native的版本时，run-android的时候会报警告<br>Warning:In next release empty section headers will be rendered.<br>In this release you can use ‘enableEmptySections’ flag to render empty section headers<br>解决方法是：<br>在ListView下 加个 enableEmptySections = {true} 就可以解决了</p><h3 id="11-react-native-swipe-list-view在tabnavigate里渲染异常"><a href="#11-react-native-swipe-list-view在tabnavigate里渲染异常" class="headerlink" title="11.react-native-swipe-list-view在tabnavigate里渲染异常"></a>11.react-native-swipe-list-view在tabnavigate里渲染异常</h3><p>侧滑部分无法显示，后改用react-native-swipeable<br><a href="https://github.com/jshanson7/react-native-swipeable" target="_blank" rel="noopener">https://github.com/jshanson7/react-native-swipeable</a></p><h3 id="12-iOS模拟器突然变成了慢动作？"><a href="#12-iOS模拟器突然变成了慢动作？" class="headerlink" title="12.iOS模拟器突然变成了慢动作？"></a>12.iOS模拟器突然变成了慢动作？</h3><p>iOS模拟器有个slow animation的选项，其快捷键是commant + T，调试过程中容易误碰到。再按一次关闭这个选项即可。</p><h3 id="13-常见问题"><a href="#13-常见问题" class="headerlink" title="13.常见问题"></a>13.常见问题</h3><p>常见问题：<a href="http://bbs.reactnative.cn/topic/130/%E6%96%B0%E6%89%8B%E6%8F%90%E9%97%AE%E5%89%8D%E5%85%88%E6%9D%A5%E8%BF%99%E9%87%8C%E7%9C%8B%E7%9C%8B-react-native%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/2" target="_blank" rel="noopener">http://bbs.reactnative.cn/topic/130/%E6%96%B0%E6%89%8B%E6%8F%90%E9%97%AE%E5%89%8D%E5%85%88%E6%9D%A5%E8%BF%99%E9%87%8C%E7%9C%8B%E7%9C%8B-react-native%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/2</a></p><h3 id="14-Bridge桥接报错"><a href="#14-Bridge桥接报错" class="headerlink" title="14.Bridge桥接报错"></a>14.Bridge桥接报错</h3><p>可能是属于项目出问题，我这边遇到的是不能用cnpm来安装依赖</p><h3 id="15-android打包apk报错"><a href="#15-android打包apk报错" class="headerlink" title="15.android打包apk报错"></a>15.android打包apk报错</h3><p>（1）Lint found fatal errors while assembling a release target.<br>为了解决多个manifest中相同activity重复注册的问题，在build.gradle中增加以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">lintOptions &#123;</span><br><span class="line">          checkReleaseBuilds <span class="literal">false</span></span><br><span class="line">          <span class="comment">// Or, if you prefer, you can continue to check for errors in release builds,</span></span><br><span class="line">          <span class="comment">// but continue the build even when errors are found:</span></span><br><span class="line">          abortOnError <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)Execution failed for task ‘:app:bundleReleaseJsAndAssets’.<br>解决办法，命令行先执行 ./gradlew –stop然后执行 ./gradlew assembleRelease</p><h3 id="16-注意事项"><a href="#16-注意事项" class="headerlink" title="16.注意事项"></a>16.注意事项</h3><p>（1）安卓下时间格式不要 2018-02-12 12:12:12<br>最好是’/‘格式 time.replace(/-/g,  “/“)</p><p>(2)error: Cannot add a child that doesn’t have a YogaNode or parent node<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.state.sign &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> <span class="attr">Color.grey</span>,<span class="attr">textAlign:</span> '<span class="attr">right</span>'&#125;&#125;&gt;</span>&#123;this.state.sign.length&#125;/50<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现是在 this.state.sign变空的过程中，Text销毁触发的错误？<br>后改为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Text style=&#123;&#123;<span class="attr">color</span>: Color.grey,<span class="attr">textAlign</span>: <span class="string">'right'</span>&#125;&#125;&gt;&#123;<span class="keyword">this</span>.state.sign?<span class="keyword">this</span>.state.sign.length: <span class="number">0</span>&#125;/<span class="number">50</span>&lt;<span class="regexp">/Text&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-react相关注意点&quot;&gt;&lt;a href=&quot;#1-react相关注意点&quot; class=&quot;headerlink&quot; title=&quot;1.react相关注意点&quot;&gt;&lt;/a&gt;1.react相关注意点&lt;/h3&gt;&lt;p&gt;（1）超过最大更新深度&lt;br&gt;error&lt;br&gt;&lt;figur
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>js函数递归调用与数组全排列</title>
    <link href="http://yoursite.com/2018/01/22/js-fn-01/"/>
    <id>http://yoursite.com/2018/01/22/js-fn-01/</id>
    <published>2018-01-22T07:03:09.000Z</published>
    <updated>2018-01-22T08:07:40.557Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-递归的定义"><a href="#1-递归的定义" class="headerlink" title="1.递归的定义"></a>1.递归的定义</h3><p>递归就是函数自己调用自己。<br>递归需要有出口return，不然会栈溢出。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">fun()</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure></p><p>可以实现类似阶乘的算法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// func(n-1) 因为传递的参数是 n-1,那么就是求 (n-1) 的阶乘</span></span><br><span class="line">    <span class="keyword">return</span> n * func(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">func(<span class="number">5</span>) <span class="comment">//5*4*3*2*1</span></span><br></pre></td></tr></table></figure></p><p>还有斐波拉契数列: 1， 1， 2， 3， 5， 8， 13， 21<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span> (<span class="params">n</span>)</span>&#123;  </span><br><span class="line">  <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);    </span><br><span class="line">&#125;  </span><br><span class="line">fib(<span class="number">5</span>); <span class="comment">// 2+3 = 5</span></span><br></pre></td></tr></table></figure></p><h3 id="2-数组的全排列"><a href="#2-数组的全排列" class="headerlink" title="2.数组的全排列"></a>2.<a href="http://www.jb51.net/article/39291.htm" target="_blank" rel="noopener">数组的全排列</a></h3><p>A(3,3)=6<br>result: [1,2,3] —&gt;<br>[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]</p><p>####(1)递归交换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">全排列（递归交换）算法  </span></span><br><span class="line"><span class="comment">1、将第一个位置分别放置各个不同的元素；  </span></span><br><span class="line"><span class="comment">2、对剩余的位置进行全排列（递归）；  </span></span><br><span class="line"><span class="comment">3、递归出口为只对一个元素进行全排列。  </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr,i,j</span>) </span>&#123;  <span class="comment">//交换位置</span></span><br><span class="line">    <span class="keyword">if</span>(i!=j) &#123;  </span><br><span class="line">        <span class="keyword">var</span> temp=arr[i];  </span><br><span class="line">        arr[i]=arr[j];  </span><br><span class="line">        arr[j]=temp;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newArr = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">perm</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123; <span class="comment">//为第n个位置选择元素  </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=n;i&lt;arr.length;i++) &#123;  </span><br><span class="line">            swap(arr,i,n);  </span><br><span class="line">            <span class="keyword">if</span>(n+<span class="number">1</span>&lt;arr.length<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="comment">//判断数组中剩余的待全排列的元素是否大于1个  </span></span><br><span class="line">                fn(n+<span class="number">1</span>); <span class="comment">//从第n+1个下标进行全排列  </span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newArr)</span><br><span class="line">            newArr.push(arr); <span class="comment">//显示一组结果</span></span><br><span class="line">            &#125;   </span><br><span class="line">            swap(arr,i,n);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)(<span class="number">0</span>); </span><br><span class="line">    </span><br><span class="line">&#125;  </span><br><span class="line">perm([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br></pre></td></tr></table></figure></p><h4 id="2-递归链接"><a href="#2-递归链接" class="headerlink" title="(2).递归链接"></a>(2).递归链接</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">全排列（递归链接）算法  </span></span><br><span class="line"><span class="comment">1、设定源数组为输入数组，结果数组存放排列结果（初始化为空数组）；  </span></span><br><span class="line"><span class="comment">2、逐一将源数组的每个元素链接到结果数组中（生成新数组对象）；  </span></span><br><span class="line"><span class="comment">3、从原数组中删除被链接的元素（生成新数组对象）；  </span></span><br><span class="line"><span class="comment">4、将新的源数组和结果数组作为参数递归调用步骤2、3，直到源数组为空，则输出一个排列。  </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">perm</span>(<span class="params">arr</span>) </span>&#123; </span><br><span class="line"><span class="keyword">let</span> newArr = [];</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">source, result</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (source.length == <span class="number">0</span>)  </span><br><span class="line">            newArr.push(result) <span class="comment">//result;  </span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; source.length; i++)  </span><br><span class="line">                fn(source.slice(<span class="number">0</span>, i).concat(source.slice(i + <span class="number">1</span>)), result.concat(source[i]));  </span><br><span class="line">    &#125;)(arr, []);  </span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;  </span><br><span class="line">perm([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h4 id="3-递归回溯"><a href="#3-递归回溯" class="headerlink" title="(3).递归回溯"></a>(3).递归回溯</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">全排列（递归回溯）算法  </span></span><br><span class="line"><span class="comment">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span></span><br><span class="line"><span class="comment">2、建立递归函数，用来搜索第n个位置；  </span></span><br><span class="line"><span class="comment">3、第n个位置搜索方式与八皇后问题类似。  </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"P&lt;sub&gt;"</span> + ++count + <span class="string">"&lt;/sub&gt;: "</span> + arr + <span class="string">"&lt;br /&gt;"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params">index, n</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) <span class="comment">//判断是否已回溯到了第一个位置之前，即已经找到了所有位置排列  </span></span><br><span class="line">        <span class="keyword">if</span> (index[n] &lt; index.length - <span class="number">1</span>) &#123; <span class="comment">//还有下一个位置可选  </span></span><br><span class="line">            index[n]++; <span class="comment">//选择下一个位置  </span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//该匿名函数判断该位置是否已经被选择过  </span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++)  </span><br><span class="line">                    <span class="keyword">if</span> (index[i] == index[n]) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//已选择  </span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//未选择  </span></span><br><span class="line">            &#125;)())  </span><br><span class="line">                <span class="keyword">return</span> seek(index, n); <span class="comment">//重新找位置  </span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//找到  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//当前无位置可选，进行递归回溯  </span></span><br><span class="line">            index[n] = <span class="number">-1</span>; <span class="comment">//取消当前位置  </span></span><br><span class="line">            <span class="keyword">if</span> (seek(index, n - <span class="number">1</span>)) <span class="comment">//继续找上一个位置  </span></span><br><span class="line">                <span class="keyword">return</span> seek(index, n); <span class="comment">//重新找当前位置  </span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//已无位置可选  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">perm</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">new</span> <span class="built_in">Array</span>(arr.length);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; index.length; i++)  </span><br><span class="line">        index[i] = <span class="number">-1</span>; <span class="comment">//初始化所有位置为-1，以便++后为0  </span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; index.length - <span class="number">1</span>; i++)  </span><br><span class="line">        seek(index, i); <span class="comment">//先搜索前n-1个位置  </span></span><br><span class="line">    <span class="keyword">while</span> (seek(index, index.length - <span class="number">1</span>)) &#123; <span class="comment">//不断搜索第n个位置，即找到所有位置排列  </span></span><br><span class="line">        <span class="keyword">var</span> temp = [];  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; index.length; i++) <span class="comment">//将位置之转换为元素  </span></span><br><span class="line">            temp.push(arr[index[i]]);  </span><br><span class="line">        show(temp);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">perm([<span class="string">"e1"</span>, <span class="string">"e2"</span>, <span class="string">"e3"</span>, <span class="string">"e4"</span>]);</span><br></pre></td></tr></table></figure><h4 id="4-非递归回溯"><a href="#4-非递归回溯" class="headerlink" title="(4).非递归回溯"></a>(4).非递归回溯</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">全排列（非递归回溯）算法  </span></span><br><span class="line"><span class="comment">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span></span><br><span class="line"><span class="comment">2、第n个位置搜索方式与八皇后问题类似。  </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"P&lt;sub&gt;"</span> + ++count + <span class="string">"&lt;/sub&gt;: "</span> + arr + <span class="string">"&lt;br /&gt;"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params">index, n</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>, m = n; <span class="comment">//flag为找到位置排列的标志，m保存正在搜索哪个位置  </span></span><br><span class="line">    <span class="keyword">do</span> &#123;  </span><br><span class="line">        index[n]++;  </span><br><span class="line">        <span class="keyword">if</span> (index[n] == index.length) <span class="comment">//已无位置可用  </span></span><br><span class="line">            index[n--] = <span class="number">-1</span>; <span class="comment">//重置当前位置，回退到上一个位置  </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++)  </span><br><span class="line">                <span class="keyword">if</span> (index[i] == index[n]) <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;)()) <span class="comment">//该位置未被选择  </span></span><br><span class="line">            <span class="keyword">if</span> (m == n) <span class="comment">//当前位置搜索完成  </span></span><br><span class="line">                flag = <span class="literal">true</span>;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                n++;  </span><br><span class="line">    &#125; <span class="keyword">while</span> (!flag &amp;&amp; n &gt;= <span class="number">0</span>)  </span><br><span class="line">    <span class="keyword">return</span> flag;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">perm</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">new</span> <span class="built_in">Array</span>(arr.length);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; index.length; i++)  </span><br><span class="line">        index[i] = <span class="number">-1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; index.length - <span class="number">1</span>; i++)  </span><br><span class="line">        seek(index, i);  </span><br><span class="line">    <span class="keyword">while</span> (seek(index, index.length - <span class="number">1</span>)) &#123;  </span><br><span class="line">        <span class="keyword">var</span> temp = [];  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; index.length; i++)  </span><br><span class="line">            temp.push(arr[index[i]]);  </span><br><span class="line">        show(temp);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">perm([<span class="string">"e1"</span>, <span class="string">"e2"</span>, <span class="string">"e3"</span>, <span class="string">"e4"</span>]);</span><br></pre></td></tr></table></figure><h4 id="5-非递归求顺序"><a href="#5-非递归求顺序" class="headerlink" title="(5).非递归求顺序"></a>(5).非递归求顺序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">全排列（非递归求顺序）算法  </span></span><br><span class="line"><span class="comment">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span></span><br><span class="line"><span class="comment">2、按如下算法求全排列：  </span></span><br><span class="line"><span class="comment">设P是1～n(位置编号)的一个全排列：p = p1,p2...pn = p1,p2...pj-1,pj,pj+1...pk-1,pk,pk+1...pn  </span></span><br><span class="line"><span class="comment">(1)从排列的尾部开始，找出第一个比右边位置编号小的索引j（j从首部开始计算），即j = max&#123;i | pi &lt; pi+1&#125;  </span></span><br><span class="line"><span class="comment">(2)在pj的右边的位置编号中，找出所有比pj大的位置编号中最小的位置编号的索引k，即 k = max&#123;i | pi &gt; pj&#125;  </span></span><br><span class="line"><span class="comment">   pj右边的位置编号是从右至左递增的，因此k是所有大于pj的位置编号中索引最大的  </span></span><br><span class="line"><span class="comment">(3)交换pj与pk  </span></span><br><span class="line"><span class="comment">(4)再将pj+1...pk-1,pk,pk+1...pn翻转得到排列p' = p1,p2...pj-1,pj,pn...pk+1,pk,pk-1...pj+1  </span></span><br><span class="line"><span class="comment">(5)p'便是排列p的下一个排列  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">例如：  </span></span><br><span class="line"><span class="comment">24310是位置编号0～4的一个排列，求它下一个排列的步骤如下：  </span></span><br><span class="line"><span class="comment">(1)从右至左找出排列中第一个比右边数字小的数字2；  </span></span><br><span class="line"><span class="comment">(2)在该数字后的数字中找出比2大的数中最小的一个3；  </span></span><br><span class="line"><span class="comment">(3)将2与3交换得到34210；  </span></span><br><span class="line"><span class="comment">(4)将原来2（当前3）后面的所有数字翻转，即翻转4210，得30124；  </span></span><br><span class="line"><span class="comment">(5)求得24310的下一个排列为30124。  </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"P&lt;sub&gt;"</span> + ++count + <span class="string">"&lt;/sub&gt;: "</span> + arr + <span class="string">"&lt;br /&gt;"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> t = arr[i];  </span><br><span class="line">    arr[i] = arr[j];  </span><br><span class="line">    arr[j] = t;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">index</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = index.length - <span class="number">2</span>; j &gt;= <span class="number">0</span> &amp;&amp; index[j] &gt; index[j + <span class="number">1</span>]; j--)  </span><br><span class="line">        ; <span class="comment">//本循环从位置数组的末尾开始，找到第一个左边小于右边的位置，即j  </span></span><br><span class="line">    <span class="keyword">if</span> (j &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//已完成全部排列  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k = index.length - <span class="number">1</span>; index[k] &lt; index[j]; k--)  </span><br><span class="line">        ; <span class="comment">//本循环从位置数组的末尾开始，找到比j位置大的位置中最小的，即k  </span></span><br><span class="line">    swap(index, j, k);  </span><br><span class="line">    <span class="keyword">for</span> (j = j + <span class="number">1</span>, k = index.length - <span class="number">1</span>; j &lt; k; j++, k--)  </span><br><span class="line">        swap(index, j, k); <span class="comment">//本循环翻转j+1到末尾的所有位置  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">perm</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">new</span> <span class="built_in">Array</span>(arr.length);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; index.length; i++)  </span><br><span class="line">        index[i] = i;  </span><br><span class="line">    <span class="keyword">do</span> &#123;  </span><br><span class="line">        <span class="keyword">var</span> temp = [];  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; index.length; i++)  </span><br><span class="line">            temp.push(arr[index[i]]);  </span><br><span class="line">        show(temp);  </span><br><span class="line">    &#125; <span class="keyword">while</span> (sort(index));  </span><br><span class="line">&#125;  </span><br><span class="line">perm([<span class="string">"e1"</span>, <span class="string">"e2"</span>, <span class="string">"e3"</span>, <span class="string">"e4"</span>]);</span><br></pre></td></tr></table></figure><h4 id="6-非递归求模"><a href="#6-非递归求模" class="headerlink" title="(6).非递归求模"></a>(6).非递归求模</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">全排列（非递归求模）算法  </span></span><br><span class="line"><span class="comment">1、初始化存放全排列结果的数组result，与原数组的元素个数相等；  </span></span><br><span class="line"><span class="comment">2、计算n个元素全排列的总数，即n!；  </span></span><br><span class="line"><span class="comment">3、从&gt;=0的任意整数开始循环n!次，每次累加1，记为index；  </span></span><br><span class="line"><span class="comment">4、取第1个元素arr[0]，求1进制的表达最低位，即求index模1的值w，将第1个元素（arr[0]）插入result的w位置，并将index迭代为index\1；  </span></span><br><span class="line"><span class="comment">5、取第2个元素arr[1]，求2进制的表达最低位，即求index模2的值w，将第2个元素（arr[1]）插入result的w位置，并将index迭代为index\2；  </span></span><br><span class="line"><span class="comment">6、取第3个元素arr[2]，求3进制的表达最低位，即求index模3的值w，将第3个元素（arr[2]）插入result的w位置，并将index迭代为index\3；  </span></span><br><span class="line"><span class="comment">7、……  </span></span><br><span class="line"><span class="comment">8、直到取最后一个元素arr[arr.length-1]，此时求得一个排列；  </span></span><br><span class="line"><span class="comment">9、当index循环完成，便求得所有排列。  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">例：  </span></span><br><span class="line"><span class="comment">求4个元素["a", "b", "c", "d"]的全排列, 共循环4!=24次，可从任意&gt;=0的整数index开始循环，每次累加1，直到循环完index+23后结束；  </span></span><br><span class="line"><span class="comment">假设index=13（或13+24，13+2*24，13+3*24…），因为共4个元素，故迭代4次，则得到的这一个排列的过程为：  </span></span><br><span class="line"><span class="comment">第1次迭代，13/1，商=13，余数=0，故第1个元素插入第0个位置（即下标为0），得["a"]；  </span></span><br><span class="line"><span class="comment">第2次迭代，13/2, 商=6，余数=1，故第2个元素插入第1个位置（即下标为1），得["a", "b"]；  </span></span><br><span class="line"><span class="comment">第3次迭代，6/3, 商=2，余数=0，故第3个元素插入第0个位置（即下标为0），得["c", "a", "b"]；  </span></span><br><span class="line"><span class="comment">第4次迭代，2/4，商=0，余数=2, 故第4个元素插入第2个位置（即下标为2），得["c", "a", "d", "b"]；  </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"P&lt;sub&gt;"</span> + ++count + <span class="string">"&lt;/sub&gt;: "</span> + arr + <span class="string">"&lt;br /&gt;"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">perm</span>(<span class="params">arr</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(arr.length);  </span><br><span class="line">    <span class="keyword">var</span> fac = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= arr.length; i++)  </span><br><span class="line">        fac *= i;  </span><br><span class="line">    <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; fac; index++) &#123;  </span><br><span class="line">        <span class="keyword">var</span> t = index;  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= arr.length; i++) &#123;  </span><br><span class="line">            <span class="keyword">var</span> w = t % i;  </span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt; w; j--)  </span><br><span class="line">                result[j] = result[j - <span class="number">1</span>];  </span><br><span class="line">            result[w] = arr[i - <span class="number">1</span>];  </span><br><span class="line">            t = <span class="built_in">Math</span>.floor(t / i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        show(result);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">perm([<span class="string">"e1"</span>, <span class="string">"e2"</span>, <span class="string">"e3"</span>, <span class="string">"e4"</span>]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-递归的定义&quot;&gt;&lt;a href=&quot;#1-递归的定义&quot; class=&quot;headerlink&quot; title=&quot;1.递归的定义&quot;&gt;&lt;/a&gt;1.递归的定义&lt;/h3&gt;&lt;p&gt;递归就是函数自己调用自己。&lt;br&gt;递归需要有出口return，不然会栈溢出。&lt;br&gt;&lt;figure 
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js算法题</title>
    <link href="http://yoursite.com/2018/01/10/js-algorithm/"/>
    <id>http://yoursite.com/2018/01/10/js-algorithm/</id>
    <published>2018-01-10T09:19:16.000Z</published>
    <updated>2018-01-23T02:30:27.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Remove-String-Spaces"><a href="#1-Remove-String-Spaces" class="headerlink" title="1.Remove String Spaces"></a>1.Remove String Spaces</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noSpace</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Sort-array-by-string-length"><a href="#2-Sort-array-by-string-length" class="headerlink" title="2.Sort array by string length"></a>2.Sort array by string length</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortByLength</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Return an array containing the same strings, ordered from shortest to longest</span></span><br><span class="line">  <span class="keyword">return</span> array.sort((a,b) = &gt;a.length - b.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Handle-String"><a href="#3-Handle-String" class="headerlink" title="3.Handle String"></a>3.Handle String</h3><p>result：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">accum(<span class="string">"abcd"</span>);    <span class="comment">// "A-Bb-Ccc-Dddd"</span></span><br><span class="line">accum(<span class="string">"RqaEzty"</span>); <span class="comment">// "R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"</span></span><br><span class="line">accum(<span class="string">"cwAt"</span>);    <span class="comment">// "C-Ww-Aaa-Tttt"</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accum</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="comment">// your code</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="regexp">/^[A-Za-z]*$/</span>.test(s))&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = s.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">let</span> newArr = [];</span><br><span class="line">    arr.map(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> str = item.toUpperCase()</span><br><span class="line">        <span class="keyword">while</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">          str += item.toLowerCase();</span><br><span class="line">          index--</span><br><span class="line">        &#125;</span><br><span class="line">        newArr.push(str)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> newArr.join(<span class="string">'-'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accum</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.split(<span class="string">''</span>).map(<span class="function">(<span class="params">x,index</span>) =&gt;</span> x.toUpperCase()+<span class="built_in">Array</span>(index+<span class="number">1</span>).join(x.toLowerCase())).join(<span class="string">'-'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accum</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.split(<span class="string">''</span>).map(<span class="function">(<span class="params">c, i</span>) =&gt;</span> (c.toUpperCase() + c.toLowerCase().repeat(i))).join(<span class="string">'-'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-Handle-Arr"><a href="#4-Handle-Arr" class="headerlink" title="4.Handle Arr"></a>4.Handle Arr</h3><p>result：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&quot;az&quot;, &quot;toto&quot;, &quot;picaro&quot;, &quot;zone&quot;, &quot;kiwi&quot;] --&gt;</span><br><span class="line">[[&quot;az&quot;, &quot;toto picaro zone kiwi&quot;], </span><br><span class="line"> [&quot;az toto&quot;, &quot;picaro zone kiwi&quot;], </span><br><span class="line"> [&quot;az toto picaro&quot;, &quot;zone kiwi&quot;], </span><br><span class="line"> [&quot;az toto picaro zone&quot;, &quot;kiwi&quot;]]</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partlist</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">    <span class="keyword">let</span> newArr = [],</span><br><span class="line">        preArr = [],</span><br><span class="line">        copy = arr.slice(<span class="number">0</span>);<span class="comment">//copy arr</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">      <span class="keyword">let</span> newItem = [];</span><br><span class="line">      preArr.push(copy.shift());<span class="comment">// shift arr</span></span><br><span class="line">      newItem.push(preArr.join(<span class="string">' '</span>));</span><br><span class="line">      newItem.push(copy.join(<span class="string">' '</span>));</span><br><span class="line">      newArr.push(newItem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> partlist=<span class="function"><span class="params">a</span>=&gt;</span>a.map(<span class="function">(<span class="params">v,i</span>)=&gt;</span>[a.slice(<span class="number">0</span>,i).join(<span class="string">' '</span>),a.slice(i).join(<span class="string">' '</span>)]).slice(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><h3 id="5-Get-the-Middle-Character"><a href="#5-Get-the-Middle-Character" class="headerlink" title="5.Get the Middle Character"></a>5.Get the Middle Character</h3><p>result：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">runBF(&quot;test\0&quot;) should return &quot;es&quot;</span><br><span class="line"></span><br><span class="line">runBF(&quot;testing\0&quot;) should return &quot;t&quot;</span><br><span class="line"></span><br><span class="line">runBF(&quot;middle\0&quot;) should return &quot;dd&quot;</span><br><span class="line"></span><br><span class="line">runBF(&quot;A\0&quot;) should return &quot;A&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMiddle</span>(<span class="params">s</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="built_in">parseInt</span>(s.length/<span class="number">2</span>); <span class="comment">// 5/2 -&gt; 2</span></span><br><span class="line">  <span class="keyword">return</span> s.length % <span class="number">2</span>? s.substr(a,<span class="number">1</span>) : s.substr(a<span class="number">-1</span>,<span class="number">2</span>) <span class="comment">//odd:even</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMiddle</span>(<span class="params">s</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.substr(<span class="built_in">Math</span>.ceil(s.length / <span class="number">2</span> - <span class="number">1</span>), s.length % <span class="number">2</span> === <span class="number">0</span> ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-Vowel-Count"><a href="#6-Vowel-Count" class="headerlink" title="6.Vowel Count"></a>6.Vowel Count</h3><p>result:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getCount(<span class="string">'aeiou'</span>); <span class="comment">//5 a,e,i,o,u</span></span><br><span class="line">getCount(<span class="string">'abcde'</span>); <span class="comment">//2 a,e</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> vowelsCount = <span class="number">0</span>,</span><br><span class="line">      arr = [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'u'</span>];</span><br><span class="line">  str.split(<span class="string">''</span>).map(<span class="function"><span class="params">i</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.indexOf(i)&gt;=<span class="number">0</span>)&#123; <span class="comment">//arr.indexOf('i') -&gt; 2</span></span><br><span class="line">      vowelsCount++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> vowelsCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (str.match(<span class="regexp">/[aeiou]/ig</span>)||[]).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-Highest-and-Lowest"><a href="#7-Highest-and-Lowest" class="headerlink" title="7.Highest and Lowest"></a>7.Highest and Lowest</h3><p>result:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">highAndLow(<span class="string">"1 2 3 4 5"</span>); <span class="comment">// return "5 1"</span></span><br><span class="line">highAndLow(<span class="string">"1 2 -3 4 5"</span>); <span class="comment">// return "5 -3"</span></span><br><span class="line">highAndLow(<span class="string">"1 9 3 4 -5"</span>); <span class="comment">// return "9 -5"</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highAndLow</span>(<span class="params">numbers</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = numbers.split(<span class="string">" "</span>).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);<span class="comment">// sort arr</span></span><br><span class="line">  <span class="keyword">return</span> arr[arr.length<span class="number">-1</span>] + <span class="string">' '</span> + arr[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highAndLow</span>(<span class="params">numbers</span>)</span>&#123;</span><br><span class="line">  numbers = numbers.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.max(...numbers)&#125;</span> <span class="subst">$&#123;<span class="built_in">Math</span>.min(...numbers)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="8-Array-Diff"><a href="#8-Array-Diff" class="headerlink" title="8.Array Diff"></a>8.Array Diff</h3><p>result:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//It should remove all values from list a, which are present in list b.</span></span><br><span class="line">array_diff([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>]) <span class="comment">//return [2]</span></span><br><span class="line">array_diff([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>]) <span class="comment">//return [1,3]</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_diff</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="comment">// splice导致数组变化</span></span><br><span class="line"><span class="comment">//   a.map((j,i)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     if(b.indexOf(j) &gt;= 0)&#123;</span></span><br><span class="line"><span class="comment">//       a.splice(i,1)    </span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;) </span></span><br><span class="line"><span class="keyword">return</span> a.filter(<span class="function"><span class="params">e</span> =&gt;</span> b.indexOf(e)&lt;<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>other:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//includes判断数组是否有某元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">array_diff</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.filter(<span class="function"><span class="params">e</span> =&gt;</span> !b.includes(e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="9-Find-the-odd-int"><a href="#9-Find-the-odd-int" class="headerlink" title="9.Find the odd int"></a>9.Find the odd int</h3><p>result:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">findOdd([<span class="number">20</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">20</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">5</span>]) <span class="comment">//return 5</span></span><br><span class="line">findOdd([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">5</span>]); <span class="comment">//return -1</span></span><br><span class="line">findOdd([<span class="number">20</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">20</span>,<span class="number">4</span>,<span class="number">5</span>]); <span class="comment">//return 5</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findOdd</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//happy coding! </span></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;<span class="comment">//count obj</span></span><br><span class="line">  A.map(<span class="function"><span class="params">i</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j&lt;A.length;j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i==A[j])&#123;</span><br><span class="line">        obj[i] = obj[i]?obj[i]+<span class="number">1</span>:<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj[k]%<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(k)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异或位运算符，看不懂</span></span><br><span class="line"><span class="keyword">const</span> findOdd = <span class="function">(<span class="params">xs</span>) =&gt;</span> xs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a ^ b);</span><br></pre></td></tr></table></figure></p><h3 id="10-Persistent-Bugger"><a href="#10-Persistent-Bugger" class="headerlink" title="10.Persistent Bugger."></a>10.Persistent Bugger.</h3><p>result:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//which is the number of times you must multiply the digits in num until you reach a single digit.</span></span><br><span class="line">persistence(<span class="number">39</span>) === <span class="number">3</span> <span class="comment">// because 3*9 = 27, 2*7 = 14, 1*4=4  count:3</span></span><br><span class="line">                       <span class="comment">// and 4 has only one digit</span></span><br><span class="line">                       </span><br><span class="line">persistence(<span class="number">999</span>) === <span class="number">4</span> <span class="comment">// because 9*9*9 = 729, 7*2*9 = 126,  count:4</span></span><br><span class="line">                        <span class="comment">// 1*2*6 = 12, and finally 1*2 = 2</span></span><br><span class="line"></span><br><span class="line">persistence(<span class="number">4</span>) === <span class="number">0</span> <span class="comment">// because 4 is already a one-digit number count:0</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">persistence</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">   <span class="comment">//code me</span></span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">String</span>(num).length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">    num = <span class="built_in">String</span>(num).split(<span class="string">''</span>).map(<span class="built_in">Number</span>).reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a*b)</span><br><span class="line">    count++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> persistence = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;num&#125;</span>`</span>.length &gt; <span class="number">1</span> </span><br><span class="line">    ? <span class="number">1</span> + persistence(<span class="string">`<span class="subst">$&#123;num&#125;</span>`</span>.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * +b)) </span><br><span class="line">    : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="11-The-Supermarket-Queue"><a href="#11-The-Supermarket-Queue" class="headerlink" title="11.The Supermarket Queue"></a>11.The Supermarket Queue</h3><p>函数有两个输入变量：<br>客户：表示队列的正整数数组。每个整数表示一个客户，其值是它们需要检查的时间量。<br>N：一个正整数，结账柜台的数量。</p><p>函数应该返回一个整数，所需的总时间。<br>result:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">queueTime([<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="number">1</span>)</span><br><span class="line"><span class="comment">// should return 12</span></span><br><span class="line"><span class="comment">// because when n=1, the total time is just the sum of the times</span></span><br><span class="line"></span><br><span class="line">queueTime([<span class="number">10</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>], <span class="number">2</span>)</span><br><span class="line"><span class="comment">// should return 10</span></span><br><span class="line"><span class="comment">// because here n=2 and the 2nd, 3rd, and 4th people in the </span></span><br><span class="line"><span class="comment">// queue finish before the 1st person has finished.</span></span><br><span class="line"></span><br><span class="line">queueTime([<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>], <span class="number">2</span>)</span><br><span class="line"><span class="comment">// should return 12</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queueTime</span>(<span class="params">customers, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(customers.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> arr = customers.splice(<span class="number">0</span>,n).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line">  customers.map(<span class="function"><span class="params">i</span>=&gt;</span>&#123;</span><br><span class="line">    arr[<span class="number">0</span>] += i;</span><br><span class="line">    arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(...arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不需要截第一个数组，不需要排序，直接对最小的值加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queueTime</span>(<span class="params">customers, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> w = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> t <span class="keyword">of</span> customers) &#123;</span><br><span class="line">    <span class="keyword">let</span> idx = w.indexOf(<span class="built_in">Math</span>.min(...w));</span><br><span class="line">    w[idx] += t;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(...w);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="12-toWeirdCase"><a href="#12-toWeirdCase" class="headerlink" title="12.toWeirdCase"></a>12.toWeirdCase</h3><p>result: 大写小写大写小写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//even upper/ odd lower</span></span><br><span class="line">toWeirdCase( <span class="string">"String"</span> );<span class="comment">//=&gt; returns "StRiNg"</span></span><br><span class="line">toWeirdCase( <span class="string">"Weird string case"</span> );<span class="comment">//=&gt; returns "WeIrD StRiNg CaSe"</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toWeirdCase</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> string.split(<span class="string">' '</span>).map(<span class="function"><span class="params">k</span>=&gt;</span></span><br><span class="line">    k.split(<span class="string">''</span>).map(<span class="function">(<span class="params">e,i</span>)=&gt;</span>i%<span class="number">2</span>?e.toLowerCase():e.toUpperCase()).join(<span class="string">''</span>)</span><br><span class="line">  ).join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每匹配两个字母</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toWeirdCase</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> string.replace(<span class="regexp">/(\w&#123;1,2&#125;)/g</span>,(m)=&gt;m[<span class="number">0</span>].toUpperCase()+m.slice(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="13-Handle-Time"><a href="#13-Handle-Time" class="headerlink" title="13.Handle Time"></a>13.Handle Time</h3><p>result<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">humanReadable(<span class="number">60</span>) <span class="comment">//rerurn '00:01:00',</span></span><br><span class="line">humanReadable(<span class="number">86399</span>) <span class="comment">//return '23:59:59'</span></span><br><span class="line">humanReadable(<span class="number">359999</span>) <span class="comment">//return '99:59:59'</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">humanReadable</span>(<span class="params">seconds</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> zero = <span class="function"><span class="params">m</span> =&gt;</span> <span class="built_in">parseInt</span>(m)&lt;<span class="number">10</span>? <span class="string">'0'</span>+<span class="built_in">parseInt</span>(m):<span class="built_in">parseInt</span>(m);</span><br><span class="line">  <span class="keyword">if</span>(seconds&lt;<span class="number">60</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`00:00:<span class="subst">$&#123;zero(seconds)&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>( <span class="number">60</span>&lt;=seconds &amp;&amp; seconds&lt;<span class="number">60</span>*<span class="number">60</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`00:<span class="subst">$&#123;zero(seconds<span class="regexp">/60)&#125;:$&#123;zero(seconds%60)&#125;`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  &#125; else &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">    return `$&#123;zero(seconds/</span><span class="number">60</span><span class="regexp">/60)&#125;:$&#123;zero(parseInt(seconds/</span><span class="number">60</span>)%<span class="number">60</span>)&#125;</span>:<span class="subst">$&#123;zero(seconds%<span class="number">60</span>)&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//傻了，不用判断时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">humanReadable</span>(<span class="params">seconds</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pad = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> (x &lt; <span class="number">10</span>) ? <span class="string">"0"</span>+x : x; &#125;</span><br><span class="line">  <span class="keyword">return</span> pad(<span class="built_in">parseInt</span>(seconds / (<span class="number">60</span>*<span class="number">60</span>))) + <span class="string">":"</span> +</span><br><span class="line">         pad(<span class="built_in">parseInt</span>(seconds / <span class="number">60</span> % <span class="number">60</span>)) + <span class="string">":"</span> +</span><br><span class="line">         pad(seconds % <span class="number">60</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-Split-Strings"><a href="#14-Split-Strings" class="headerlink" title="14.Split Strings"></a>14.Split Strings</h3><p>result:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">solution(<span class="string">'abc'</span>) <span class="comment">// should return ['ab', 'c_']</span></span><br><span class="line">solution(<span class="string">'abcdef'</span>) <span class="comment">// should return ['ab', 'cd', 'ef']</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//偶数次会导致末尾多个空,直接用match更好</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> str.replace(<span class="regexp">/(\w&#123;1,2&#125;)/g</span>,m=&gt;m[<span class="number">1</span>]?m[<span class="number">0</span>]+m[<span class="number">1</span>]+<span class="string">'-'</span>:m[<span class="number">0</span>]+<span class="string">'_'</span>).split(<span class="string">'-'</span>).filter(<span class="function"><span class="params">i</span>=&gt;</span>i&amp;&amp;i.trim())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> (str + <span class="string">"_"</span>).match(<span class="regexp">/../g</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="15-Arrays-of-cats-and-dogs"><a href="#15-Arrays-of-cats-and-dogs" class="headerlink" title="15.Arrays of cats and dogs"></a>15.Arrays of cats and dogs</h3><p>result: Dog在n个节点内抓到Cat，return被抓的C<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//solve(['D','C','C','D','C'], 2) = 2, because the dog at index 0 (D0) catches C1 and D3 catches C4. </span></span><br><span class="line"><span class="comment">//solve(['C','C','D','D','C','D'], 2) = 3, because D2 catches C0, D3 catches C1 and D5 catches C4.</span></span><br><span class="line"><span class="comment">//solve(['C','C','D','D','C','D'], 1) = 2, because D2 catches C1, D3 catches C4. C0 cannot be caught because n == 1.</span></span><br><span class="line"><span class="comment">//solve(['D','C','D','D','C'], 1) = 2, too many dogs, so all cats get caught!</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solve</span>(<span class="params">arr,n</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"> arr.map(<span class="function">(<span class="params">k,i</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> start = i-n&gt;<span class="number">0</span>?i-n:<span class="number">0</span>;</span><br><span class="line">       catchRange = arr.slice(start,i+n+<span class="number">1</span>), <span class="comment">//be catched range</span></span><br><span class="line">       index = catchRange.indexOf(<span class="string">'D'</span>);<span class="comment">//the dog index</span></span><br><span class="line">   <span class="keyword">if</span>( k==<span class="string">'C'</span> &amp;&amp; index&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">     count++</span><br><span class="line">     arr[index+start] = <span class="string">''</span> <span class="comment">//the dog catch cat,let it go</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-Dont-drive-too-long"><a href="#16-Dont-drive-too-long" class="headerlink" title="16.Dont drive too long!"></a>16.Dont drive too long!</h3><p>result: Drive的时间<9小时 <figure="" class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dailyShedule = [ [<span class="string">"7:00-10:30"</span>,<span class="string">"Drive"</span>],</span><br><span class="line">                       [<span class="string">"10:30-10:45"</span>,<span class="string">"Rest"</span>],</span><br><span class="line">                       [<span class="string">"10:45-11:45"</span>,<span class="string">"Drive"</span>],</span><br><span class="line">                       [<span class="string">"11:45-12:15"</span>,<span class="string">"Rest"</span>],</span><br><span class="line">                       [<span class="string">"12:15-16:45"</span>,<span class="string">"Drive"</span>],</span><br><span class="line">                       [<span class="string">"16:45-20:15"</span>,<span class="string">"Work"</span>]]; </span><br><span class="line">           <span class="comment">//-&gt; should return false,9 hours of driving in total.</span></span><br></pre></td></tr></table></9小时></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldIBeTired</span>(<span class="params">dailyShedule</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> time = <span class="number">0</span></span><br><span class="line">  dailyShedule.map(<span class="function"><span class="params">i</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i[<span class="number">1</span>]==<span class="string">"Drive"</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> arr = i[<span class="number">0</span>].split(<span class="string">'-'</span>);</span><br><span class="line">      time += (arr[<span class="number">1</span>].split(<span class="string">':'</span>)[<span class="number">0</span>] - arr[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">0</span>])+ (arr[<span class="number">1</span>].split(<span class="string">':'</span>)[<span class="number">1</span>] - arr[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>])/<span class="number">60</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> time&gt;<span class="number">9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-Array-plus-array"><a href="#17-Array-plus-array" class="headerlink" title="17.Array plus array"></a>17.Array plus array</h3><p>result:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//arrayPlusArray([1, 2, 3], [4, 5, 6]), 21</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayPlusArray</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr1.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b) + arr2.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayPlusArray</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr1.concat(arr2).reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayPlusArray</span>(<span class="params">...arrays</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].concat(...arrays).reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="18-order-Array"><a href="#18-order-Array" class="headerlink" title="18.order Array"></a>18.order Array</h3><p>result:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//"56 65 74 100 99 68 86 180 90" </span></span><br><span class="line"><span class="comment">//ordered by numbers weights becomes: "100 180 90 56 65 74 68 86 99"</span></span><br><span class="line"><span class="comment">// 100-&gt;1+0+0 =1     56/65 -&gt; '56'&lt;'65'</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderWeight</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="function">(<span class="params">n</span>)=&gt;</span>n.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>(+a)+(+b))<span class="comment">//plus num</span></span><br><span class="line">    <span class="keyword">return</span> string.split(<span class="string">' '</span>).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn(a)==fn(b)?(a&gt;b?<span class="number">1</span>:<span class="number">-1</span>):fn(a)-fn(b)</span><br><span class="line">    &#125;).join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-Magic-Squares"><a href="#19-Magic-Squares" class="headerlink" title="19.Magic Squares"></a>19.Magic Squares</h3><p>result:<br>判断是否是数独<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">[<span class="number">8</span>, <span class="number">1</span>, <span class="number">6</span>] </span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">9</span>, <span class="number">2</span>]</span><br><span class="line">];  <span class="comment">//return true</span></span><br></pre></td></tr></table></figure></p><p>思路：把所有情况组成个新数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">magicSquare</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr[<span class="number">0</span>] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> newArr = [...arr],</span><br><span class="line">      flag = <span class="literal">true</span>,</span><br><span class="line">      len = arr.length,</span><br><span class="line">      sum = arr[<span class="number">0</span>].reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b);</span><br><span class="line">      arr[<span class="number">0</span>].map(<span class="function">(<span class="params">i,n</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> item = [];</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123; <span class="comment">//X</span></span><br><span class="line">          <span class="keyword">let</span> item2 = []</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j&lt;len; j++)&#123;</span><br><span class="line">            item2.push(arr[j][j])</span><br><span class="line">          &#125;</span><br><span class="line">          newArr.push(item2)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == len)&#123; <span class="comment">//X</span></span><br><span class="line">          <span class="keyword">let</span> item3 = []</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j&lt;len; j++)&#123;</span><br><span class="line">            item3.push(arr[j][n-j])</span><br><span class="line">          &#125;</span><br><span class="line">          newArr.push(item3)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j&lt;len; j++)&#123; <span class="comment">// |||</span></span><br><span class="line">          item.push(arr[j][n])</span><br><span class="line">        &#125;</span><br><span class="line">        newArr.push(item)</span><br><span class="line">      &#125;)</span><br><span class="line">      newArr.map(<span class="function"><span class="params">k</span>=&gt;</span>&#123;</span><br><span class="line">        flag = flag &amp;&amp; sum == k.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> flag</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="20-Sum-of-array-singles"><a href="#20-Sum-of-array-singles" class="headerlink" title="20.Sum of array singles"></a>20.Sum of array singles</h3><p>result:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeats([4,5,7,5,4,8]) = 15 </span></span><br><span class="line"><span class="comment">// because only the numbers 7 and 8 occur once, and their sum is 15.</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeats</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>*<span class="function">(<span class="params">[...<span class="keyword">new</span> <span class="built_in">Set</span>(arr</span>)].<span class="params">reduce</span>(<span class="params">(a,b</span>)=&gt;</span>a+b)) -  arr.reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>better:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filter 索引不变代表唯一，达到筛选效果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeats</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> arr.indexOf(v) === arr.lastIndexOf(v)).reduce(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="21-Sentence-Calculator"><a href="#21-Sentence-Calculator" class="headerlink" title="21.Sentence Calculator"></a>21.Sentence Calculator</h3><p>resule:<br>Lower case [a-z]: ‘a’=1, ‘b’=2, ‘c’=3, …, ‘z’=26<br>Upper case [A-Z]: ‘A’=2, ‘B’=4, ‘C’=6, …, ‘Z’=52<br>Digits [0-9] their numeric value: ‘0’=0, ‘1’=1, ‘2’=2, …, ‘9’=9<br>Other characters: 0 value<br>//lettersToNumbers(“I Love You”), 170<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lettersToNumbers</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  s.split(<span class="string">''</span>).map(<span class="function"><span class="params">i</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> num = i.charCodeAt();</span><br><span class="line">    <span class="keyword">if</span>(num&gt;<span class="number">64</span> &amp;&amp; num&lt;<span class="number">91</span>)&#123;</span><br><span class="line">      sum += (num<span class="number">-64</span>)*<span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>( num&gt;<span class="number">96</span> &amp;&amp; num&lt;<span class="number">123</span>)&#123;</span><br><span class="line">      sum += num<span class="number">-96</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>( num&gt;<span class="number">47</span> &amp;&amp; num&lt; <span class="number">58</span> ) &#123;</span><br><span class="line">      sum += +i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>better:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lettersToNumbers</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> key = <span class="function"><span class="params">c</span> =&gt;</span></span><br><span class="line">    /[a-z]/.test(c) ? c.charCodeAt() - <span class="number">96</span> :</span><br><span class="line">    /[A-Z]/.test(c) ? (c.charCodeAt() - <span class="number">64</span>) * <span class="number">2</span> :</span><br><span class="line">    /\d/.test(c) ? +c : <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> [...s].reduce(<span class="function">(<span class="params">s, v</span>) =&gt;</span> s + key(v), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Remove-String-Spaces&quot;&gt;&lt;a href=&quot;#1-Remove-String-Spaces&quot; class=&quot;headerlink&quot; title=&quot;1.Remove String Spaces&quot;&gt;&lt;/a&gt;1.Remove String Spac
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0中的eventBus</title>
    <link href="http://yoursite.com/2018/01/06/vue-01/"/>
    <id>http://yoursite.com/2018/01/06/vue-01/</id>
    <published>2018-01-06T02:40:58.000Z</published>
    <updated>2018-01-26T07:35:36.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>主要是在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。</p><h3 id="2-用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h3><p>bus.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure></p><p>兄弟组件 click.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"click"</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"doClick($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'common/js/bus.js'</span>;  </span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="undefined">data()&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">methods: &#123;  </span></span><br><span class="line"><span class="undefined">           doClick(event) &#123;  </span></span><br><span class="line"><span class="javascript">           Bus.$emit(<span class="string">'getTarget'</span>, event.target);   </span></span><br><span class="line"><span class="undefined">           &#125;  </span></span><br><span class="line"><span class="undefined">        &#125;  </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>兄弟组件 show.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'common/js/bus.js'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="undefined">data()&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">created() &#123;  </span></span><br><span class="line"><span class="javascript">Bus.$on(<span class="string">'getTarget'</span>, target =&gt; &#123;  </span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(target);  </span></span><br><span class="line"><span class="undefined">&#125;);  </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-问题"><a href="#3-问题" class="headerlink" title="3.问题"></a>3.问题</h3><p>（1）$emit时，必须已经$on，否则无法监听到事件。<br>（2）$on在组件销毁后不会自动解除绑定，若同一组件多次生成则会多次绑定事件，导致一次$emit，多次响应，需额外处理。<br>（3）数据非”长效”数据，无法保存，只在$emit后生效。</p><h3 id="4-特殊的eventBus"><a href="#4-特殊的eventBus" class="headerlink" title="4.特殊的eventBus"></a>4.特殊的eventBus</h3><p>bus.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">data()&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">val: <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line"><span class="keyword">this</span>.$on(<span class="string">'updateData'</span>,val=&gt;&#123;</span><br><span class="line"><span class="keyword">this</span>.val = val</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>数据发出组件 click.vue<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">'xxx/bus'</span></span><br><span class="line"><span class="comment">//触发在bus中已经绑定好的事件</span></span><br><span class="line">bus.$emit(<span class="string">'updateData'</span>, <span class="number">123</span>)</span><br></pre></td></tr></table></figure></p><p>数据接收组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;val&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">'xxx/bus'</span></span><br><span class="line"><span class="comment">//使用computed接收数据</span></span><br><span class="line">computed()&#123;</span><br><span class="line">val()&#123;</span><br><span class="line"><span class="keyword">return</span> bus.val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解决问题：<br>(1)数据在bus上存在，所以可以不需要组件同时存在。<br>(2)绑定监听都在bus上，不会重复绑定。<br>(3)数据可以长效存在。</p><p>这种eventBus可以达到简化版vuex的效果，通过$emit触发而不直接修改组件的值，是遵循vuex的架构。<br>组件不允许直接修改属于store实例的state，而应执行action来分发（dispatch）事件通知store去改变。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1.定义&quot;&gt;&lt;/a&gt;1.定义&lt;/h3&gt;&lt;p&gt;主要是在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>mac下android的环境变量配置</title>
    <link href="http://yoursite.com/2018/01/03/mac-android/"/>
    <id>http://yoursite.com/2018/01/03/mac-android/</id>
    <published>2018-01-03T02:14:04.000Z</published>
    <updated>2018-01-12T02:55:27.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mac下android的环境变量配置"><a href="#mac下android的环境变量配置" class="headerlink" title="mac下android的环境变量配置"></a><a href="https://stackoverflow.com/questions/19986214/setting-android-home-enviromental-variable-on-mac-os-x" target="_blank" rel="noopener">mac下android的环境变量配置</a></h2><p>Where the Android-SDK is installed depends on how you installed it.</p><h3 id="1-通过官网直接下载安装"><a href="#1-通过官网直接下载安装" class="headerlink" title="1.通过官网直接下载安装"></a>1.通过官网直接下载安装</h3><p>If you downloaded the SDK through their website and then dragged/dropped the Application to your Applications folder, it’s most likely here:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/ADT/sdk (as it is in your case).</span><br></pre></td></tr></table></figure></p><h3 id="2-通过Homebrew安装"><a href="#2-通过Homebrew安装" class="headerlink" title="2.通过Homebrew安装"></a>2.通过Homebrew安装</h3><p>If you installed the SDK using Homebrew (brew cask install android-sdk), then it’s located here:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/Caskroom/android-sdk/&#123;YOUR_SDK_VERSION_NUMBER&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-通过Android-Studio安装"><a href="#3-通过Android-Studio安装" class="headerlink" title="3.通过Android Studio安装"></a>3.通过Android Studio安装</h3><p>If the SDK was installed automatically as part of Android Studio then it’s located here:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/&#123;YOUR_USER_NAME&#125;/Library/Android/sdk</span><br></pre></td></tr></table></figure></p><p>知道sdk目录后<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure></p><p>按向下箭头-&gt;按i进入编辑模式<br>添加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=&#123;YOUR_PATH&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</span><br><span class="line"></span><br><span class="line">#注：中间用冒号隔开</span><br><span class="line">export PATH=$PATH:<span class="tag">&lt;<span class="name">PATH</span> <span class="attr">1</span>&gt;</span>:<span class="tag">&lt;<span class="name">PATH</span> <span class="attr">2</span>&gt;</span>:<span class="tag">&lt;<span class="name">PATH</span> <span class="attr">3</span>&gt;</span>:------:<span class="tag">&lt;<span class="name">PATH</span> <span class="attr">N</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后：ESC后 :wq 保存并退出。<br>更新变化：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mac下android的环境变量配置&quot;&gt;&lt;a href=&quot;#mac下android的环境变量配置&quot; class=&quot;headerlink&quot; title=&quot;mac下android的环境变量配置&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://stackoverflow.c
      
    
    </summary>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>weex小记</title>
    <link href="http://yoursite.com/2017/12/27/weex/"/>
    <id>http://yoursite.com/2017/12/27/weex/</id>
    <published>2017-12-27T09:10:25.000Z</published>
    <updated>2018-02-01T06:48:51.529Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-weex和浏览器的差异"><a href="#1-weex和浏览器的差异" class="headerlink" title="1.weex和浏览器的差异"></a>1.weex和浏览器的差异</h3><p>（1）weex中不存在window对象</p><h3 id="2-weex中使用scss"><a href="#2-weex中使用scss" class="headerlink" title="2.weex中使用scss"></a>2.<a href="http://blog.csdn.net/seafishyls/article/details/64444819" target="_blank" rel="noopener">weex中使用scss</a></h3><p>官方lang=”stylus”<br>使用scss则会报错: scss-loader not found<br>似乎weex-loader中会自动根据lang寻找对应的loader<br>然而scss使用的是sass-loader 造成了名称不对应的情况</p><p>可通过标签引入<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">src</span>=<span class="string">'./style.css'</span> /&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure></p><p>serve下@import同个文件，会造成px解析不对</p><h3 id="3-weex与vue-route"><a href="#3-weex与vue-route" class="headerlink" title="3.weex与vue-route"></a>3.weex与vue-route</h3><p>vue-router不能支持导航链接，只支持编程式导航</p><h3 id="4-weex选取图片"><a href="#4-weex选取图片" class="headerlink" title="4.weex选取图片"></a>4.<a href="https://github.com/voids/weex-image-crop-picker" target="_blank" rel="noopener">weex选取图片</a></h3><h3 id="5-weex-plugin-add-报错，安卓环境问题"><a href="#5-weex-plugin-add-报错，安卓环境问题" class="headerlink" title="5.weex plugin add * 报错，安卓环境问题"></a>5.weex plugin add <em>*</em> 报错，安卓环境问题</h3><p>could not find gradle wrapper within android sdk<br><a href="https://www.jianshu.com/p/5d925413c79f" target="_blank" rel="noopener">https://www.jianshu.com/p/5d925413c79f</a></p><h3 id="6-Couldn’t-find-preset-“env”-relative-to-directory"><a href="#6-Couldn’t-find-preset-“env”-relative-to-directory" class="headerlink" title="6.Couldn’t find preset “env” relative to directory"></a>6.Couldn’t find preset “env” relative to directory</h3><p><a href="https://www.cnblogs.com/ye-hcj/p/7070084.html" target="_blank" rel="noopener">https://www.cnblogs.com/ye-hcj/p/7070084.html</a></p><h2 id="弃坑，无极光推送相关插件。。"><a href="#弃坑，无极光推送相关插件。。" class="headerlink" title="弃坑，无极光推送相关插件。。"></a>弃坑，无极光推送相关插件。。</h2><h3 id="7-为什么app端的登陆验证需要在请求头加token"><a href="#7-为什么app端的登陆验证需要在请求头加token" class="headerlink" title="7.为什么app端的登陆验证需要在请求头加token"></a>7.为什么app端的登陆验证需要在请求头加token</h3><p>因为传统浏览器端的登陆验证是通过cookie的值，而app使用需要后端设置跨域：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Access-Control-Allow-Origin: '*',</span></span><br></pre></td></tr></table></figure></p><p>而带cookie请求需要设置credentials mode 为 ‘include’<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比如fetch需要设置 </span></span><br><span class="line">&#123; <span class="attr">credentials</span>: <span class="string">"include"</span> &#125;<span class="comment">//带cookie请求</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//axios需要设置</span></span><br><span class="line">&#123; <span class="attr">withCredentials</span>: <span class="literal">true</span>&#125; <span class="comment">//带cookie请求</span></span><br></pre></td></tr></table></figure></p><p>此时会报错<br>The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’ when the request’s credentials mode is ‘include’.</p><p>所以最后的解决方案是通过把登陆校验的值放在请求头里</p><h2 id="Cordova打包相关："><a href="#Cordova打包相关：" class="headerlink" title="Cordova打包相关："></a>Cordova打包相关：</h2><h3 id="8-打包的时候路由模式hash"><a href="#8-打包的时候路由模式hash" class="headerlink" title="8.打包的时候路由模式hash"></a>8.打包的时候路由模式hash</h3><h3 id="9-移动端字体兼容问题"><a href="#9-移动端字体兼容问题" class="headerlink" title="9.移动端字体兼容问题"></a>9.移动端字体兼容问题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//有兼容问题的字体图标加载顺序</span><br><span class="line">@font-face &#123;font-family: "iconfont";</span><br><span class="line">  src: url('iconfont.eot'); /* IE9*/</span><br><span class="line">  src: url('iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */</span><br><span class="line">  url('iconfont.woff') format('woff'), /* chrome、firefox */</span><br><span class="line">  url('iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</span><br><span class="line">  url('iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//移动端字体图标</span><br><span class="line">@font-face &#123;font-family: "iconfont";</span><br><span class="line">  src: url('../font/iconfont.eot'); /* IE9*/</span><br><span class="line">  src: url('../font/iconfont.svg#iconfont') format('svg'), /* iOS 4.1- */</span><br><span class="line">  url('../font/iconfont.woff') format('woff'), /* chrome、firefox */</span><br><span class="line">  url('../font/iconfont.ttf') format('truetype'); /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-Cordova-android-emulator-“cannot-read-property-‘replace’-of-undefined”"><a href="#10-Cordova-android-emulator-“cannot-read-property-‘replace’-of-undefined”" class="headerlink" title="10.Cordova android emulator “cannot read property ‘replace’ of undefined”"></a>10.Cordova android emulator “cannot read property ‘replace’ of undefined”</h3><p>Tracked it down to file /platforms/android/cordova/lib/emulator.js line 202:</p><p>var num = target.split(‘(API level ‘)1.replace(‘)’, ‘’);</p><p>Replace it with a regex search and extraction:</p><p>var num = target.match(/\d+/)[0];</p><h3 id="11-打包成app-fetch用不了的情况："><a href="#11-打包成app-fetch用不了的情况：" class="headerlink" title="11.打包成app fetch用不了的情况："></a>11.打包成app fetch用不了的情况：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install whatwg-fetch --save</span><br><span class="line">//文件中引入</span><br><span class="line">import 'whatwg-fetch';</span><br></pre></td></tr></table></figure><h3 id="12-打包app"><a href="#12-打包app" class="headerlink" title="12.打包app"></a>12.打包app</h3><p><a href="http://blog.csdn.net/fifteen718/article/details/64125953" target="_blank" rel="noopener">http://blog.csdn.net/fifteen718/article/details/64125953</a><br>assetsPublicPath: ‘./‘,  // 编译发布的根目录</p><p>index.html 引入的外部文件按绝对路径<br>&lt;%=htmlWebpackPlugin.options.ImgHost %&gt;static/xxx/xxx.js</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-weex和浏览器的差异&quot;&gt;&lt;a href=&quot;#1-weex和浏览器的差异&quot; class=&quot;headerlink&quot; title=&quot;1.weex和浏览器的差异&quot;&gt;&lt;/a&gt;1.weex和浏览器的差异&lt;/h3&gt;&lt;p&gt;（1）weex中不存在window对象&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="weex" scheme="http://yoursite.com/tags/weex/"/>
    
  </entry>
  
  <entry>
    <title>css的美化</title>
    <link href="http://yoursite.com/2017/10/30/css-better/"/>
    <id>http://yoursite.com/2017/10/30/css-better/</id>
    <published>2017-10-30T06:52:30.000Z</published>
    <updated>2017-11-17T08:02:10.075Z</updated>
    
    <content type="html"><![CDATA[<p>前言：能用css实现的效果就不用图片或者JS</p><h3 id="1-kissy的css-reset"><a href="#1-kissy的css-reset" class="headerlink" title="1.kissy的css reset"></a>1.kissy的css reset</h3><p>并引用一句话：reset 的目的不是让默认样式在所有浏览器下一致，而是减少默认样式有可能带来的问题。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 清除内外边距 **/</span></span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">hr</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="comment">/* structural elements 结构元素 */</span></span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="comment">/* list elements 列表元素 */</span></span><br><span class="line"><span class="selector-tag">pre</span>, <span class="comment">/* text formatting elements 文本格式元素 */</span></span><br><span class="line"><span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="comment">/* form elements 表单元素 */</span></span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">td</span> <span class="comment">/* table elements 表格元素 */</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 设置默认字体 **/</span></span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> <span class="comment">/* for ie */</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> tahoma, arial, \<span class="number">5</span>b8b\<span class="number">4</span>f53, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123; <span class="attribute">font-size</span>: <span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>: normal; &#125; <span class="comment">/* 将斜体扶正 */</span></span><br><span class="line"><span class="selector-tag">code</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">samp</span> &#123; <span class="attribute">font-family</span>: courier new, courier, monospace; &#125; <span class="comment">/* 统一等宽字体 */</span></span><br><span class="line"><span class="selector-tag">small</span> &#123; <span class="attribute">font-size</span>: <span class="number">12px</span>; &#125; <span class="comment">/* 小于 12px 的中文很难阅读，让 small 正常化 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 重置列表元素 **/</span></span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>: none; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 重置文本格式元素 **/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>: none; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>: underline; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 重置表单元素 **/</span></span><br><span class="line"><span class="selector-tag">legend</span> &#123; <span class="attribute">color</span>: <span class="number">#000</span>; &#125; <span class="comment">/* for ie6 */</span></span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>: <span class="number">0</span>; &#125; <span class="comment">/* img 搭车：让链接里的 img 无边框 */</span></span><br><span class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>: <span class="number">100%</span>; &#125; <span class="comment">/* 使得表单元素在 ie 下能继承字体大小 */</span></span><br><span class="line"><span class="comment">/* 注：optgroup 无法扶正 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 重置表格元素 **/</span></span><br><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>: collapse; <span class="attribute">border-spacing</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-checkbox的美化"><a href="#2-checkbox的美化" class="headerlink" title="2.checkbox的美化"></a>2.checkbox的美化</h3><p>隐藏checkbox，用i标签替代<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">i</span>&gt;</span>复选框<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">i</span>&gt;</span>复选框<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">i</span>&gt;</span>复选框禁用<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">disabled</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">i</span>&gt;</span>复选框禁用已选<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">i</span>&gt;</span>单选框<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"abc"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">i</span>&gt;</span>单选框<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"abc"</span> <span class="attr">disabled</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">i</span>&gt;</span>单选框禁用<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"def"</span> <span class="attr">disabled</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">i</span>&gt;</span>单选框禁用已选<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*checkbox美化*/</span></span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">2px</span> <span class="number">6px</span> <span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="checkbox"]</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span> + <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="checkbox"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">i</span>, <span class="selector-tag">input</span><span class="selector-attr">[type="radio"]</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#7AD847</span>; <span class="comment">/*颜色自改*/</span></span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#7AD847</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-inputFile的美化"><a href="#3-inputFile的美化" class="headerlink" title="3.inputFile的美化"></a>3.inputFile的美化</h3><p>设置input=[file]的透明度为0，然后重现a标签样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"file"</span>&gt;</span>选择文件</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.file</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#D0EEFF</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#99D3F5</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#1E88C7</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.file</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.file</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#AADFFD</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#78C3F3</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#004974</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-css画三角形"><a href="#4-css画三角形" class="headerlink" title="4.css画三角形"></a>4.css画三角形</h3><p><a href="http://www.jb51.net/article/42513.htm" target="_blank" rel="noopener">原地址</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#triangle-up</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-down</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-topleft</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-topright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-bottomleft</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#triangle-bottomright</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid red;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：能用css实现的效果就不用图片或者JS&lt;/p&gt;
&lt;h3 id=&quot;1-kissy的css-reset&quot;&gt;&lt;a href=&quot;#1-kissy的css-reset&quot; class=&quot;headerlink&quot; title=&quot;1.kissy的css reset&quot;&gt;&lt;/a&gt;1.kis
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>jQuery源码浅析</title>
    <link href="http://yoursite.com/2017/10/28/jquery/"/>
    <id>http://yoursite.com/2017/10/28/jquery/</id>
    <published>2017-10-28T00:22:47.000Z</published>
    <updated>2017-10-28T00:47:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-jQuery闭包结构"><a href="#1-jQuery闭包结构" class="headerlink" title="1.jQuery闭包结构"></a>1.jQuery闭包结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// jQuery 代码</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p>jQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。</p><p>还有另一种写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// jQuery 代码</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure></p><p>不足之处在于早期的环境中（ie8）,undefined的值可以被变量覆盖。<br>而且第一种写法有一个针对压缩优化细节：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩策略</span></span><br><span class="line"><span class="comment">// w -&gt; windwow , u -&gt; undefined</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">w, u</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><h3 id="2-jQuery无new构造"><a href="#2-jQuery无new构造" class="headerlink" title="2.jQuery无new构造"></a>2.jQuery无new构造</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无 new 构造</span></span><br><span class="line">$(<span class="string">'#test'</span>).text(<span class="string">'Test'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当然也可以使用 new,两种写法相同</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> $(<span class="string">'#test'</span>);</span><br><span class="line">test.text(<span class="string">'Test'</span>);</span><br></pre></td></tr></table></figure><p>jQuery内部实现的方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// The jQuery object is actually just the init constructor 'enhanced'</span></span><br><span class="line">        <span class="comment">// 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context, rootjQuery);</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用</span></span><br><span class="line">    jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">        <span class="comment">// 实例化化方法，这个方法可以称作 jQuery 对象构造器</span></span><br><span class="line">        init: <span class="function"><span class="keyword">function</span>(<span class="params">selector, context, rootjQuery</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这一句很关键，也很绕</span></span><br><span class="line">    <span class="comment">// jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数</span></span><br><span class="line">    <span class="comment">// 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例</span></span><br><span class="line">    <span class="comment">// 且实例还要能正确访问 jQuery 类原型上的属性与方法</span></span><br><span class="line">    <span class="comment">// jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype</span></span><br><span class="line">    <span class="comment">// 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法</span></span><br><span class="line">    jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line"> </span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><p>实例化方法存在的关系链：<br>(1)jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;<br>(2)new jQuery.fn.init() 相当于 new jQuery() ;<br>(3)jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。</p><h3 id="3-jQuery方法的重载"><a href="#3-jQuery方法的重载" class="headerlink" title="3.jQuery方法的重载"></a>3.jQuery方法的重载</h3><p>当我们实例化一个jquery对象时，他的内部实现有着9种不同的方法重载场景。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器</span></span><br><span class="line">jQuery([selector,[context]])</span><br><span class="line"><span class="comment">// 传入单个 DOM</span></span><br><span class="line">jQuery(element)</span><br><span class="line"><span class="comment">// 传入 DOM 数组</span></span><br><span class="line">jQuery(elementArray)</span><br><span class="line"><span class="comment">// 传入 JS 对象</span></span><br><span class="line">jQuery(object)</span><br><span class="line"><span class="comment">// 传入 jQuery 对象</span></span><br><span class="line">jQuery(jQuery object)</span><br><span class="line"><span class="comment">// 传入原始 HTML 的字符串来创建 DOM 元素</span></span><br><span class="line">jQuery(html,[ownerDocument])</span><br><span class="line">jQuery(html,[attributes])</span><br><span class="line"><span class="comment">// 传入空参数</span></span><br><span class="line">jQuery()</span><br><span class="line"><span class="comment">// 绑定一个在 DOM 文档载入完成后执行的函数</span></span><br><span class="line">jQuery(callback)</span><br></pre></td></tr></table></figure></p><h3 id="4-jQuery-fn-extend-与-jQuery-extend"><a href="#4-jQuery-fn-extend-与-jQuery-extend" class="headerlink" title="4.jQuery.fn.extend 与 jQuery.extend"></a>4.jQuery.fn.extend 与 jQuery.extend</h3><p>不同之处在于：</p><p><1><br>jQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法；</1></p><p>jQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn 上的方法（上文有提到，jQuery.fn = jQuery.prototype ）。 </p><p><2><br>使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），</2></p><p>而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。</p><p><3><br>在 jQuery.extend() 中，this 的指向是 jQuery 对象(或者说是 jQuery 类)，所以这里扩展在 jQuery 上；</3></p><p>在 jQuery.fn.extend() 中，this 的指向是 fn 对象，前面有提到 jQuery.fn = jQuery.prototype ，也就是这里增加的是原型方法，也就是对象方法。</p><h3 id="5-jQuery-的链式调用及回溯"><a href="#5-jQuery-的链式调用及回溯" class="headerlink" title="5.jQuery 的链式调用及回溯"></a>5.jQuery 的链式调用及回溯</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合</span></span><br><span class="line">$(<span class="string">'div'</span>).eq(<span class="number">0</span>).show().end().eq(<span class="number">1</span>).hide();</span><br></pre></td></tr></table></figure><p>其内部实现其实是依靠添加了 prevObject 这个属性,源码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">    <span class="comment">// 将一个 DOM 元素集合加入到 jQuery 栈</span></span><br><span class="line">    <span class="comment">// 此方法在 jQuery 的 DOM 操作中被频繁的使用, 如在 parent(), find(), filter() 中</span></span><br><span class="line">    <span class="comment">// pushStack() 方法通过改变一个 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</span></span><br><span class="line">    <span class="comment">// 当我们在链式调用 end() 方法后, 内部就返回当前 jQuery 对象的 prevObject 属性</span></span><br><span class="line">    pushStack: <span class="function"><span class="keyword">function</span>(<span class="params">elems</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 构建一个新的jQuery对象，无参的 this.constructor()，只是返回引用this</span></span><br><span class="line">        <span class="comment">// jQuery.merge 把 elems 节点合并到新的 jQuery 对象</span></span><br><span class="line">        <span class="comment">// this.constructor 就是 jQuery 的构造函数 jQuery.fn.init，所以 this.constructor() 返回一个 jQuery 对象</span></span><br><span class="line">        <span class="comment">// 由于 jQuery.merge 函数返回的对象是第二个函数附加到第一个上面，所以 ret 也是一个 jQuery 对象，这里可以解释为什么 pushStack 出入的 DOM 对象也可以用 CSS 方法进行操作</span></span><br><span class="line">        <span class="keyword">var</span> ret = jQuery.merge(<span class="keyword">this</span>.constructor(), elems);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 给返回的新 jQuery 对象添加属性 prevObject</span></span><br><span class="line">        <span class="comment">// 所以也就是为什么通过 prevObject 能取到上一个合集的引用了</span></span><br><span class="line">        ret.prevObject = <span class="keyword">this</span>;</span><br><span class="line">        ret.context = <span class="keyword">this</span>.context;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Return the newly-formed element set</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 回溯链式调用的上一个对象</span></span><br><span class="line">    end: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 回溯的关键是返回 prevObject 属性</span></span><br><span class="line">        <span class="comment">// 而 prevObject 属性保存了上一步操作的 jQuery 对象集合</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.prevObject || <span class="keyword">this</span>.constructor(<span class="literal">null</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取当前 jQuery 对象的第 i 个</span></span><br><span class="line">    eq: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// jQuery 对象集合的长度</span></span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.length,</span><br><span class="line">            j = +i + (i &lt; <span class="number">0</span> ? len : <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 利用 pushStack 返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pushStack(j &gt;= <span class="number">0</span> &amp;&amp; j &lt; len ? [<span class="keyword">this</span>[j]] : []);</span><br><span class="line">    &#125;, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总的来说，</p><p>1）end() 方法返回 prevObject 属性，这个属性记录了上一步操作的 jQuery 对象合集；</p><p>2）而 prevObject 属性由 pushStack() 方法生成，该方法将一个 DOM 元素集合加入到 jQuery 内部管理的一个栈中，通过改变 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</p><p>3）当我们在链式调用 end() 方法后，内部就返回当前 jQuery 对象的 prevObject 属性，完成回溯。</p><h3 id="6-jQuery-变量冲突处理"><a href="#6-jQuery-变量冲突处理" class="headerlink" title="6.jQuery 变量冲突处理"></a>6.jQuery 变量冲突处理</h3><p>当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span></span><br><span class="line">        <span class="comment">// Map over jQuery in case of overwrite</span></span><br><span class="line">        <span class="comment">// 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖</span></span><br><span class="line">        _jQuery = <span class="built_in">window</span>.jQuery,</span><br><span class="line">        _$ = <span class="built_in">window</span>.$;</span><br><span class="line"> </span><br><span class="line">    jQuery.extend(&#123;</span><br><span class="line">        <span class="comment">// noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了</span></span><br><span class="line">        <span class="comment">// 通过全名替代简写的方式来使用 jQuery</span></span><br><span class="line">        <span class="comment">// deep -- 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)</span></span><br><span class="line">        noConflict: <span class="function"><span class="keyword">function</span>(<span class="params">deep</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 判断全局 $ 变量是否等于 jQuery 变量</span></span><br><span class="line">            <span class="comment">// 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.$ === jQuery) &#123;</span><br><span class="line">                <span class="comment">// 此时 jQuery 别名 $ 失效</span></span><br><span class="line">                <span class="built_in">window</span>.$ = _$;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况</span></span><br><span class="line">            <span class="keyword">if</span> (deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery) &#123;</span><br><span class="line">                <span class="comment">// 如果 deep 为 true，此时 jQuery 失效</span></span><br><span class="line">                <span class="built_in">window</span>.jQuery = _jQuery;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()）</span></span><br><span class="line">            <span class="comment">// 像使用 $ 一样尽情使用它吧</span></span><br><span class="line">            <span class="keyword">return</span> jQuery;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-jQuery闭包结构&quot;&gt;&lt;a href=&quot;#1-jQuery闭包结构&quot; class=&quot;headerlink&quot; title=&quot;1.jQuery闭包结构&quot;&gt;&lt;/a&gt;1.jQuery闭包结构&lt;/h3&gt;&lt;figure class=&quot;highlight javascri
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>ie下相关兼容性问题</title>
    <link href="http://yoursite.com/2017/10/09/ie-bug/"/>
    <id>http://yoursite.com/2017/10/09/ie-bug/</id>
    <published>2017-10-09T07:21:42.000Z</published>
    <updated>2017-10-28T00:16:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://caniuse.com/" target="_blank" rel="noopener">CAN I USE</a></p><h3 id="1-Invalid-Date-new-Date-时间格式不对"><a href="#1-Invalid-Date-new-Date-时间格式不对" class="headerlink" title="1.Invalid Date,new Date()时间格式不对"></a>1.Invalid Date,new Date()时间格式不对</h3><p>当在IE/Firefox浏览器下，会遇到这种问题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2016-01-01 00:00:00'</span>)    <span class="comment">//却返回这个值Invalid Date，转换失败</span></span><br></pre></td></tr></table></figure></p><p>解决方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date=<span class="string">"2016-01-01 00:00:00"</span>;</span><br><span class="line">date=date.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/-/gm</span>) ,<span class="string">"/"</span>); 　　<span class="comment">//将所有的'-'转为'/'即可</span></span><br><span class="line"><span class="comment">//2016/01/01 00:00:00</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(date);<span class="comment">//这下就转换正确了Wed Jan 1 00:00:00 UTC+0800 2014</span></span><br></pre></td></tr></table></figure></p><p>以下列出了所有浏览器都支持的方式:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2011</span>, <span class="number">01</span>, <span class="number">07</span>); <span class="comment">// yyyy, mm-1, dd</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2011</span>, <span class="number">01</span>, <span class="number">07</span>, <span class="number">11</span>, <span class="number">05</span>, <span class="number">00</span>); <span class="comment">// yyyy, mm-1, dd, hh, mm, ss</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"02/07/2011"</span>); <span class="comment">// "mm/dd/yyyy"</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"02/07/2011 11:05:00"</span>); <span class="comment">// "mm/dd/yyyy hh:mm:ss"</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1297076700000</span>); <span class="comment">// milliseconds</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"Mon Feb 07 2011 11:05:00 GMT"</span>); <span class="comment">// ""Day Mon dd yyyy hh:mm:ss GMT/UTC</span></span><br></pre></td></tr></table></figure></p><h3 id="2-ie9下没有promise对象"><a href="#2-ie9下没有promise对象" class="headerlink" title="2.ie9下没有promise对象"></a>2.ie9下没有promise对象</h3><p>使用axios需要<a href="https://babeljs.io/docs/usage/polyfill/" target="_blank" rel="noopener">babel-polyfill</a>支持<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save babel-polyfill</span><br></pre></td></tr></table></figure></p><p>在webpack.config.js里：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: [<span class="string">"babel-polyfill"</span>, <span class="string">"./app/js"</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="3-ie8不支持forEach"><a href="#3-ie8不支持forEach" class="headerlink" title="3.ie8不支持forEach"></a>3.ie8不支持forEach</h3><p>拓展方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">Array</span>.prototype.forEach ) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params"> callback, thisArg </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> T, k;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">this</span> == <span class="literal">null</span> ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>( <span class="string">"this is null or not defined"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> O = <span class="built_in">Object</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> len = O.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">typeof</span> callback !== <span class="string">"function"</span> ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>( callback + <span class="string">" is not a function"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> ) &#123;</span><br><span class="line">      T = thisArg;</span><br><span class="line">    &#125;</span><br><span class="line">    k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( k &lt; len ) &#123;</span><br><span class="line">      <span class="keyword">var</span> kValue;</span><br><span class="line">      <span class="keyword">if</span> ( k <span class="keyword">in</span> O ) &#123;</span><br><span class="line">        kValue = O[ k ];</span><br><span class="line">        callback.call( T, kValue, k, O );</span><br><span class="line">      &#125;</span><br><span class="line">      k++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-对象不支持addEventListener属性或方法"><a href="#4-对象不支持addEventListener属性或方法" class="headerlink" title="4.对象不支持addEventListener属性或方法"></a>4.对象不支持addEventListener属性或方法</h3><p>jquery 2.x以上版本不支持ie8<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断IE7\8 兼容性检测</span></span><br><span class="line"><span class="keyword">var</span> isIE=!!<span class="built_in">window</span>.ActiveXObject;</span><br><span class="line"><span class="keyword">var</span> isIE6=isIE&amp;&amp;!<span class="built_in">window</span>.XMLHttpRequest;</span><br><span class="line"><span class="keyword">var</span> isIE8=isIE&amp;&amp;!!<span class="built_in">document</span>.documentMode;</span><br><span class="line"><span class="keyword">var</span> isIE7=isIE&amp;&amp;!isIE6&amp;&amp;!isIE8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isIE8 || isIE7)&#123;</span><br><span class="line">   li.attachEvent(<span class="string">"onclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   _marker.openInfoWindow(_iw);</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   li.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   _marker.openInfoWindow(_iw);</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://caniuse.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CAN I USE&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-Invalid-Date-new-Date-时间格式不对&quot;&gt;&lt;a href=&quot;#1-Invali
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="ie" scheme="http://yoursite.com/tags/ie/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题(基础)</title>
    <link href="http://yoursite.com/2017/08/29/js-interview/"/>
    <id>http://yoursite.com/2017/08/29/js-interview/</id>
    <published>2017-08-29T07:29:14.000Z</published>
    <updated>2018-03-26T07:34:27.268Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-js的数据类型相关"><a href="#1-js的数据类型相关" class="headerlink" title="1.js的数据类型相关"></a>1.js的数据类型相关</h3><p>(1)基本数据类型<br>Undefined、Null、Boolean、Number、String<br>(2)typeof返回哪些数据类型<br>Object、function、number、boolean、underfind、string<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">// 'object'</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">// 'object'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>); <span class="comment">// 'object' 包装对象,不要使用</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>) === <span class="number">123</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>判断Array要使用Array.isArray(arr);<br>判断null请使用myVar === null;<br>判断某个全局变量是否存在用typeof window.myVar === ‘undefined’;<br>null和undefined没有toString()方法;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123.</span>toString(); <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="number">123.</span>.toString(); <span class="comment">// '123', 注意是两个点！</span></span><br><span class="line">(<span class="number">123</span>).toString(); <span class="comment">// '123'</span></span><br></pre></td></tr></table></figure></p><h3 id="2-和-的区别"><a href="#2-和-的区别" class="headerlink" title="2.==和===的区别"></a>2.==和===的区别</h3><p>(1)==包含隐式类型转换，===类型不同则结果不同<br>(2)对于Array,Object等高级类型，==和===是没有区别的，进行“指针地址”比较<br>(3)==的隐式类型转换应遵循一下几条规则：<br>    <1>布尔值转数值 false-&gt;0,true-&gt;1<br>    <2>字符串和数值比较，先将字符串转数值 ‘false’-&gt;NaN<br>    <3>对象和其他比较，先调用对象valueOf()方法，用得到的基本类型值按照前面的规则进行比较。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> === <span class="literal">null</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">undefined</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">false</span> == <span class="string">'false'</span>  <span class="comment">//false  false-&gt;0 'false'-&gt;NaN</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">'0'</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="string">''</span> == <span class="string">'0'</span> <span class="comment">//false 不转</span></span><br><span class="line"><span class="number">0</span> == <span class="string">''</span> <span class="comment">//true ''-&gt;0</span></span><br><span class="line"><span class="number">0</span> == <span class="string">'0'</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="string">' \t\r\n '</span> == <span class="number">0</span>     <span class="comment">// true</span></span><br></pre></td></tr></table></figure></3></2></1></p><p>NaN与所有其他值都不等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//唯一能判断NaN的方法是通过isNaN()函数</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="3-null和undefined的区别"><a href="#3-null和undefined的区别" class="headerlink" title="3.null和undefined的区别"></a>3.null和undefined的区别</h3><p>(1)null表示一个空的值，转为数值时为0，多数情况用null<br>(2)undefined表示值未定义，转为数值时为NaN<br>(3)if里把null、undefined、0、NaN和空字符串’’视为false，其他值一概视为true<br>undefined：<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<br>null：<br>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p><h3 id="4-字符串相关"><a href="#4-字符串相关" class="headerlink" title="4.字符串相关"></a>4.字符串相关</h3><h4 id="4-1-如果字符串内部既包含’又包含”怎么办？"><a href="#4-1-如果字符串内部既包含’又包含”怎么办？" class="headerlink" title="4.1 如果字符串内部既包含’又包含”怎么办？"></a>4.1 如果字符串内部既包含’又包含”怎么办？</h4><p>可以用转义字符\来标识，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'I\'m \"OK\"!'</span>; <span class="comment">//I'm "OK"!</span></span><br></pre></td></tr></table></figure></p><p>转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\表示的字符就是\。</p><h4 id="4-2-多行字符串，之前用-n拼接，ES6用反引号"><a href="#4-2-多行字符串，之前用-n拼接，ES6用反引号" class="headerlink" title="4.2 多行字符串，之前用\n拼接，ES6用反引号``"></a>4.2 多行字符串，之前用\n拼接，ES6用反引号``</h4><h4 id="4-3-模板字符串"><a href="#4-3-模板字符串" class="headerlink" title="4.3 模板字符串"></a>4.3 模板字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//old</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">'你好, '</span> + name + <span class="string">', 你今年'</span> + age + <span class="string">'岁了!'</span>;</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年<span class="subst">$&#123;age&#125;</span>岁了!`</span>;</span><br></pre></td></tr></table></figure><h4 id="4-4-slice-substr和substring的区别"><a href="#4-4-slice-substr和substring的区别" class="headerlink" title="4.4 slice,substr和substring的区别"></a>4.4 slice,substr和substring的区别</h4><p>slice和substring接收的是起始位置和结束位置(不包括结束位置)，而substr接收的则是起始位置和所要返回的字符串长度。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="string">'hello world'</span>;</span><br><span class="line"></span><br><span class="line">test.substr(<span class="number">4</span>,<span class="number">7</span>) <span class="comment">//o world</span></span><br><span class="line">test.slice(<span class="number">4</span>,<span class="number">7</span>) <span class="comment">//o w</span></span><br><span class="line">test.substring(<span class="number">4</span>,<span class="number">7</span>) <span class="comment">//o w</span></span><br><span class="line">test.substring(<span class="number">7</span>,<span class="number">4</span>) <span class="comment">//o w  按大小排</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//负数时</span></span><br><span class="line">test.slice(<span class="number">-3</span>) <span class="comment">//rld  如果start为负数，则start=str.length+start。</span></span><br><span class="line">test.substring(<span class="number">-3</span>) <span class="comment">//hello world  直接将负数转成0</span></span><br><span class="line">test.substr(<span class="number">-3</span>) <span class="comment">//rld  如果start为负数，则start=str.length+start。</span></span><br><span class="line"></span><br><span class="line">test.slice(<span class="number">3</span>,<span class="number">-4</span>) <span class="comment">//lo w  如果end为负数，则end=str.length+end。</span></span><br><span class="line">test.substring(<span class="number">3</span>,<span class="number">-4</span>) <span class="comment">//hel  直接将负数转成0</span></span><br><span class="line">test.substr(<span class="number">3</span>,<span class="number">-4</span>) <span class="comment">//空字符串  如果end为负数，则转为0。</span></span><br></pre></td></tr></table></figure></p><h3 id="5-数组相关"><a href="#5-数组相关" class="headerlink" title="5.数组相关"></a>5.数组相关</h3><h4 id="5-1-Array的length-索引赋值会导致Array的变化"><a href="#5-1-Array的length-索引赋值会导致Array的变化" class="headerlink" title="5.1 Array的length/索引赋值会导致Array的变化"></a>5.1 Array的length/索引赋值会导致Array的变化</h4><h4 id="5-2-slice"><a href="#5-2-slice" class="headerlink" title="5.2 slice()"></a>5.2 slice()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>];</span><br><span class="line">arr.slice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span></span><br><span class="line">arr.slice(<span class="number">3</span>); <span class="comment">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span></span><br></pre></td></tr></table></figure><h4 id="5-3-splice"><a href="#5-3-splice" class="headerlink" title="5.3 splice()"></a>5.3 splice()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Yahoo'</span>, <span class="string">'AOL'</span>, <span class="string">'Excite'</span>, <span class="string">'Oracle'</span>];</span><br><span class="line"><span class="comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></span><br><span class="line"><span class="comment">// 只删除,不添加:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// ['Google', 'Facebook']</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Oracle']</span></span><br><span class="line"><span class="comment">// 只添加,不删除:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></span><br></pre></td></tr></table></figure><h4 id="5-4-split-和join"><a href="#5-4-split-和join" class="headerlink" title="5.4 split()和join()"></a>5.4 split()和join()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'A-B-C-1-2-3'</span>.split(<span class="string">"-"</span>)    <span class="comment">//['A', 'B', 'C', 1, 2, 3]</span></span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].join(<span class="string">'-'</span>); <span class="comment">// 'A-B-C-1-2-3'</span></span><br></pre></td></tr></table></figure><h4 id="5-5-map-reduce-filter"><a href="#5-5-map-reduce-filter" class="headerlink" title="5.5 map(),reduce(),filter()"></a>5.5 map(),reduce(),filter()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">arr.map(<span class="function"><span class="params">x</span> =&gt;</span> x*x); <span class="comment">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line">arr.map(<span class="built_in">String</span>); <span class="comment">// ['1', '2', '3', '4', '5', '6', '7', '8', '9']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//reduce</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line">arr2.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y); <span class="comment">// 25</span></span><br><span class="line">arr2.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x*<span class="number">10</span> + y) ;<span class="comment">//13579</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//filter</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="string">'A'</span>, <span class="string">'  '</span>];</span><br><span class="line">arr3.filter(<span class="function"><span class="params">s</span> =&gt;</span> s &amp;&amp; s.trim()); <span class="comment">// ['A', 'B', 'C'] 除空字符串</span></span><br><span class="line">arr3.filter(<span class="function">(<span class="params">ele, index, self</span>) =&gt;</span> self.indexOf(ele) === index); </span><br><span class="line"><span class="comment">//["A", "", "B", null, undefined, "  "] 去重</span></span><br><span class="line"><span class="comment">//参数表示某元素，元素的位置和数组本身</span></span><br></pre></td></tr></table></figure><h3 id="6-for…in和for…of的区别"><a href="#6-for…in和for…of的区别" class="headerlink" title="6.for…in和for…of的区别"></a>6.for…in和for…of的区别</h3><p>(1)for…of是ES6提出用来遍历iterable类型的,只循环集合本身的元素<br>(2)for…in是遍历对象的属性名称<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line">a.name = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="comment">//for...in包括name,但Array的length却不包括</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> a) &#123;</span><br><span class="line">    alert(x); <span class="comment">// '0', '1', '2', 'name'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123;</span><br><span class="line">    alert(x); <span class="comment">// 'A', 'B', 'C'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更好的用forEach(iterable内置方法)</span></span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// element: 指向当前元素的值</span></span><br><span class="line">    <span class="comment">// index: 指向当前索引</span></span><br><span class="line">    <span class="comment">// array: 指向Array对象本身</span></span><br><span class="line">    alert(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>(3)forEach对Set和map的区别：<br>Set没有索引，因此回调函数的前两个参数都是元素本身；<br>Map的回调函数参数依次为value、key和map本身</p><h3 id="7-函数相关"><a href="#7-函数相关" class="headerlink" title="7.函数相关"></a>7.函数相关</h3><h4 id="7-1-arguments对象"><a href="#7-1-arguments对象" class="headerlink" title="7.1 arguments对象"></a>7.1 arguments对象</h4><p>只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<br>arguments类似Array但它不是一个Array。<br>arguments最常用于判断传入参数的个数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    alert(x); <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        alert(<span class="built_in">arguments</span>[i]); <span class="comment">// 10, 20, 30</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure></p><p>arguments.callee返回此arguments对象所在的当前函数引用。<br>在使用函数递归调用时推荐使用arguments.callee代替函数名本身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a==<span class="number">1</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> a + <span class="built_in">arguments</span>.callee(--a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mm = count(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>ES6引入rest参数也能返回所有参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> rest)&#123;</span><br><span class="line">     sum += i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>) <span class="comment">//10</span></span><br></pre></td></tr></table></figure></p><h4 id="7-2-this对象的理解"><a href="#7-2-this对象的理解" class="headerlink" title="7.2 this对象的理解"></a>7.2 this对象的理解</h4><p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</p><h4 id="7-3-call-和-apply-的区别和作用"><a href="#7-3-call-和-apply-的区别和作用" class="headerlink" title="7.3 call() 和 apply() 的区别和作用"></a>7.3 call() 和 apply() 的区别和作用</h4><p>作用是控制this的指向。<br>apply()函数有两个参数：第一个参数是需要绑定的this变量，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。<br>如：function.apply(this,[1,2,3]);<br>call()的第一个参数是需要绑定的this变量，后续是实例传入的参数序列。<br>如：function.call(this,1,2,3);</p><p>利用apply()，我们还可以动态改变函数的行为。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统计一下代码一共调用了多少次parseInt()</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> oldParseInt = <span class="built_in">parseInt</span>; <span class="comment">// 保存原函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.parseInt = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    count += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> oldParseInt.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用原函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试:</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>);</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'20'</span>);</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'30'</span>);</span><br><span class="line">count; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><h4 id="7-4-闭包"><a href="#7-4-闭包" class="headerlink" title="7.4 闭包"></a>7.4 闭包</h4><p>当函数里嵌套函数时，内部的函数可以访问外部函数里的变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个匿名函数并立刻执行</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;)(<span class="number">3</span>); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure></p><h4 id="8-JSON的了解"><a href="#8-JSON的了解" class="headerlink" title="8 JSON的了解"></a>8 JSON的了解</h4><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。<br>它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。<br>格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’}<br>JSON.stringify() //序列化成JSON格式的字符串,第二个参数(array)用于控制筛选对象的键值<br>JSON.parse() //反序列化成JavaScript对象</p><h4 id="9-对象相关"><a href="#9-对象相关" class="headerlink" title="9 对象相关"></a>9 对象相关</h4><h3 id="9-1-new操作符具体干了什么"><a href="#9-1-new操作符具体干了什么" class="headerlink" title="9.1 new操作符具体干了什么"></a>9.1 new操作符具体干了什么</h3><p>（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>（2）属性和方法被加入到 this 引用的对象中。<br>（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。<br>用new创建的对象还从原型上获得了一个constructor属性，它指向构造函数本身。</p><h3 id="9-2-JavaScript如何实现继承"><a href="#9-2-JavaScript如何实现继承" class="headerlink" title="9.2 JavaScript如何实现继承"></a>9.2 JavaScript如何实现继承</h3><p>一般使用构造函数与原型混合方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'wang'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();<span class="comment">//继承了Parent，通过原型</span></span><br><span class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Child();</span><br><span class="line">alert(demo.age);</span><br><span class="line">alert(demo.name);<span class="comment">//得到被继承的属性</span></span><br></pre></td></tr></table></figure></p><p>更好的继承,通过引入空函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    F.prototype = Parent.prototype;</span><br><span class="line">    Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Child.prototype.constructor = Child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="10-你有哪些性能优化的方法"><a href="#10-你有哪些性能优化的方法" class="headerlink" title="10.你有哪些性能优化的方法"></a>10.你有哪些性能优化的方法</h3><p>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。<br>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数<br>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。<br>（4） 当需要设置的样式很多时设置className而不是直接操作style。<br>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。<br>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。<br>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p><h3 id="11-ajax过程"><a href="#11-ajax过程" class="headerlink" title="11.ajax过程"></a>11.ajax过程</h3><p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.<br>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.<br>(3)设置响应HTTP请求状态变化的函数.<br>(4)发送HTTP请求.<br>(5)获取异步调用返回的数据.<br>(6)使用JavaScript和DOM实现局部刷新.</p><h3 id="12-AMD和CMD的区别"><a href="#12-AMD和CMD的区别" class="headerlink" title="12.AMD和CMD的区别"></a>12.AMD和CMD的区别</h3><p>AMD（异步模块定义） 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD（通用模块定义） 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>（1）AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行。<br>（2）CMD 推崇依赖就近，AMD 推崇依赖前置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)</span><br><span class="line">   a.doSomething()   </span><br><span class="line">   <span class="comment">// 此处略去 100 行   </span></span><br><span class="line">   <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>) <span class="comment">// 依赖可以就近书写   </span></span><br><span class="line">   b.doSomething()   <span class="comment">// ... &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AMD 默认推荐的是</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;  </span><br><span class="line"><span class="comment">// 依赖必须一开始就写好    </span></span><br><span class="line">a.doSomething()    </span><br><span class="line"><span class="comment">// 此处略去 100 行    </span></span><br><span class="line">b.doSomething()    </span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>(3)AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。<br>CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。</p><h3 id="13-从输入URL到页面加载发生了什么"><a href="#13-从输入URL到页面加载发生了什么" class="headerlink" title="13.从输入URL到页面加载发生了什么?"></a>13.从输入URL到页面加载发生了什么?</h3><p>(1)DNS解析 域名解析成ip地址<br>递归查询的过程，本地域名服务器-&gt;根域名服务器-&gt;顶级域名服务器，得到ip后缓存到本地。<br>DNS的负载均衡，又称DNS的重定向，CDN(Content Delivery Network)就是利用DNS的重定向技术，<br>DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求</p><p>(2)与WEB服务器建立TCP连接（三次握手）</p><p>(3)浏览器发送HTTP请求</p><p>(4)服务器响应请求：查找客户端请求的资源，并返回响应报文。<br>响应报文中包括一个重要的信息——状态码<br>2xx（成功）<br>    200响应成功，<br>3xx （重定向）<br>    301（永久移动）请求的网页已永久移动到新位置，<br>    302（临时移动）<br>    304 使用缓存<br>4xx（请求错误）<br>    400（错误请求） 服务器不理解请求的语法。<br>    401（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>    403（禁止） 服务器拒绝请求。<br>    404（未找到） 服务器找不到请求的网页。<br>5xx（服务器错误）<br>    500（服务器内部错误） 服务器遇到错误，无法完成请求<br>    503（服务不可用） 服务器目前无法使用（由于超载或停机维护）</p><p>(5)服务器返回相应文件给浏览器。</p><p>(6)Tcp连接释放(四次挥手)。<br>为什么多发一次包？TCP连接是全双工的，因此每个方向要单独关闭。</p><p>(7)浏览器对HTML文件进行解析构建DOM树 ，构建渲染树 ，js根据DomAPI操作执行绑定事件等，页面显示完成。<br>由于是基于单线程的事件轮询，所以会被脚本，样式阻塞。<br>一旦解析器被阻塞，浏览器就会收到绘制请求。</p><h3 id="14-浏览器缓存机制"><a href="#14-浏览器缓存机制" class="headerlink" title="14.浏览器缓存机制"></a>14.浏览器缓存机制</h3><p>强缓存：<br>用户发送的请求，直接从客户端缓存中获取，不发送请求到服务器，不与服务器发生交互行为。<br>协商缓存：<br>用户发送的请求，发送到服务器后，由服务器判定是否从缓存中获取资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-js的数据类型相关&quot;&gt;&lt;a href=&quot;#1-js的数据类型相关&quot; class=&quot;headerlink&quot; title=&quot;1.js的数据类型相关&quot;&gt;&lt;/a&gt;1.js的数据类型相关&lt;/h3&gt;&lt;p&gt;(1)基本数据类型&lt;br&gt;Undefined、Null、Boolea
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化-缓存</title>
    <link href="http://yoursite.com/2017/08/15/web-cache/"/>
    <id>http://yoursite.com/2017/08/15/web-cache/</id>
    <published>2017-08-15T01:53:25.000Z</published>
    <updated>2017-09-19T13:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-sessionStorage"><a href="#1-sessionStorage" class="headerlink" title="1.sessionStorage"></a>1.sessionStorage</h3><p>关闭页面自动回收，页面刷新不会清除，不可跨页面交互。</p><h3 id="2-userData"><a href="#2-userData" class="headerlink" title="2.userData"></a>2.userData</h3><p>早期IE用的存储方案。<br>单个文件大小限制是128kb，一个域名下总共可以保存1024kb;<br>在受限站点里这两个值分别是64kb和640kb;</p><h3 id="3-Cookie"><a href="#3-Cookie" class="headerlink" title="3.Cookie"></a>3.Cookie</h3><p>优点：兼容性最好，几乎所有的浏览器都支持。<br>缺点：大小有限制，而且每次发送请求，请求头里都会带着Cookie一起发过去，现在基本大多数登陆的合法性验证都是用cookie验证的。</p><h3 id="4-openDatabase"><a href="#4-openDatabase" class="headerlink" title="4.openDatabase"></a>4.openDatabase</h3><p>完整的前端数据库<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dataBase;</span><br><span class="line"><span class="keyword">this</span>.createDatabase = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dataBase = openDatabase(<span class="string">"teacher"</span>, <span class="string">"1.0"</span>, <span class="string">"教师表"</span>, <span class="number">1024</span> * <span class="number">1024</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">    <span class="keyword">if</span> (!dataBase) &#123;</span><br><span class="line">        alert(<span class="string">"数据库创建失败！"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">"数据库创建成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.createTable = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dataBase.transaction(<span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">        context.executeSql(</span><br><span class="line">            <span class="string">"create table if not exists teacher (id REAL UNIQUE, name TEXT)"</span>, [],</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">context, result</span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">'创建teacher表成功'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">context, error</span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">'创建teacher表失败:'</span> + error.message);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.insertData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dataBase.transaction(<span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">        context.executeSql(</span><br><span class="line">            <span class="string">"insert into teacher (id, name) values(?, ?)"</span>, [<span class="string">"1"</span>, <span class="string">'aa老师'</span>],</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'添加数据成功'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">context, error</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'添加数据失败: '</span> + error.message);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    dataBase.transaction(<span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">        context.executeSql(</span><br><span class="line">            <span class="string">"insert into teacher (id, name) values(?, ?)"</span>, [<span class="string">"2"</span>, <span class="string">'bb老师'</span>],</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'添加数据成功'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">context, error</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'添加数据失败: '</span> + error.message);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    dataBase.transaction(<span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">        context.executeSql(</span><br><span class="line">            <span class="string">"insert into teacher (id, name) values(?, ?)"</span>, [<span class="string">"3"</span>, <span class="string">'cc老师'</span>],</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'添加数据成功'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">context, error</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'添加数据失败: '</span> + error.message);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.queryData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dataBase.transaction(<span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">        context.executeSql(</span><br><span class="line">            <span class="string">"select * from teacher"</span>, [],</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">context, result</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">                <span class="built_in">console</span>.log(context);</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">context, error</span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">'查询失败: '</span> + error.message);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除表</span></span><br><span class="line"><span class="keyword">this</span>.dropTable = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dataBase.transaction(<span class="function"><span class="keyword">function</span>(<span class="params">tx</span>) </span>&#123;</span><br><span class="line">        tx.executeSql(<span class="string">'drop table teacher'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-localstorage"><a href="#5-localstorage" class="headerlink" title="5.localstorage"></a>5.localstorage</h3><p>优点：兼容性中等，操作简单，就是key-value形式，几乎现代的浏览器都支持。<br>缺点：存在大小限制(5M)，IE9,IE10不支持。不跨浏览器，不跨域名。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem(<span class="string">"keyl"</span>, <span class="string">"valuel"</span>);</span><br><span class="line"></span><br><span class="line">localStorage.clear();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-sessionStorage&quot;&gt;&lt;a href=&quot;#1-sessionStorage&quot; class=&quot;headerlink&quot; title=&quot;1.sessionStorage&quot;&gt;&lt;/a&gt;1.sessionStorage&lt;/h3&gt;&lt;p&gt;关闭页面自动回收，页面刷新不
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="cookie" scheme="http://yoursite.com/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>javascript 设计模式</title>
    <link href="http://yoursite.com/2017/07/27/js-design/"/>
    <id>http://yoursite.com/2017/07/27/js-design/</id>
    <published>2017-07-27T08:27:35.000Z</published>
    <updated>2017-09-19T13:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-模板方法模式"><a href="#1-模板方法模式" class="headerlink" title="1.模板方法模式"></a>1.模板方法模式</h3><p>定义一个操作中的算法骨架，将一些步骤延迟到子类中。<br>模板方法使用继承来改变算法的一部分，而策略模式用委托来改变整个算法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泡咖啡</span></span><br><span class="line"><span class="keyword">var</span> Coffee = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Coffee.prototype.boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.brewCoffee = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用沸水冲泡咖啡'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.addSugarAndMilk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加糖和牛奶'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.boilWater();</span><br><span class="line">    <span class="keyword">this</span>.brewCoffee();</span><br><span class="line">    <span class="keyword">this</span>.pourInCup();</span><br><span class="line">    <span class="keyword">this</span>.addSugarAndMilk();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泡茶</span></span><br><span class="line"><span class="keyword">var</span> Tea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Tea.prototype.boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.steepTea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用沸水浸泡茶叶'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把茶水倒进杯子'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.addLemon = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加柠檬'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.boilWater();</span><br><span class="line">    <span class="keyword">this</span>.steepTea();</span><br><span class="line">    <span class="keyword">this</span>.pourInCup();</span><br><span class="line">    <span class="keyword">this</span>.addLemon();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line">coffee.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> Tea();</span><br><span class="line">tea.init();</span><br></pre></td></tr></table></figure></p><p>模板方法重构：分离共同点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饮料(父类)</span></span><br><span class="line"><span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Beverage.prototype.boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Beverage.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写该方法'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Beverage.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写该方法'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Beverage.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写该方法'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Beverage.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//钩子方法，是否加调料</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">Beverage.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.boilWater();</span><br><span class="line">    <span class="keyword">this</span>.brew();</span><br><span class="line">    <span class="keyword">this</span>.pourInCup();</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.customerWantsCondiments())&#123;</span><br><span class="line">        <span class="keyword">this</span>.addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泡咖啡</span></span><br><span class="line"><span class="keyword">var</span> Coffee = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Coffee.prototype = <span class="keyword">new</span> Beverage();</span><br><span class="line">Coffee.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用沸水冲泡咖啡'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加糖和牛奶'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泡茶</span></span><br><span class="line"><span class="keyword">var</span> Tea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">Tea.prototype = <span class="keyword">new</span> Beverage();</span><br><span class="line">Tea.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用沸水浸泡茶叶'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把茶水倒进杯子'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加柠檬'</span>);</span><br><span class="line">&#125;</span><br><span class="line">Tea.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.confirm(<span class="string">'请问需要加调料吗？'</span>);<span class="comment">//是否加调料</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line">coffee.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tea = <span class="keyword">new</span> Tea();</span><br><span class="line">tea.init();</span><br></pre></td></tr></table></figure></p><h3 id="2-策略模式"><a href="#2-策略模式" class="headerlink" title="2.策略模式"></a>2.策略模式</h3><p>定义一系列算法，一个个封装起来，并且可以相互替换。<br>模式作用：</p><ul><li>（1）所有的这些算法都是做相同的事情，只是实现不同。</li><li>（2）以相同的方式调用所有的方法，减少各种算法类与使用算法类之间的耦合。</li><li>（3）单独定义算法类，方便单元测试<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//年终奖 = 考核等级*基本工资</span></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">level,salary</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(level === <span class="string">'S'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary*<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(level === <span class="string">'A'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary*<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(level === <span class="string">'B'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">calculateBonus(<span class="string">'S'</span>,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li></ul><p>策略模式代码重构：<br>方便代码扩展，不会使主函数越来越庞大，核心逻辑不需修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    S:<span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary*<span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    A:<span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary*<span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    B:<span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary*<span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    C:<span class="function"><span class="keyword">function</span>(<span class="params">salary</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary*<span class="number">1.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span>(<span class="params">level,salary</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;;</span><br><span class="line">calculateBonus(<span class="string">'S'</span>,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure></p><h3 id="3-中介者模式"><a href="#3-中介者模式" class="headerlink" title="3.中介者模式"></a>3.中介者模式</h3><p>用一个中介对象来封装一系列的对象交互。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Plane = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Plane.prototype.send = <span class="function"><span class="keyword">function</span>(<span class="params">msg,to</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">'发送了信息'</span>)</span><br><span class="line">    tower.send(msg,to);</span><br><span class="line">&#125;</span><br><span class="line">Plane.prototype.receive = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'[接受到]'</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中介对象</span></span><br><span class="line"><span class="keyword">var</span> tower = &#123;</span><br><span class="line">    all:&#123;&#125;,</span><br><span class="line">    register: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.all[t.name] = t; </span><br><span class="line">    &#125;,</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span>(<span class="params">msg,to</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.all[to.name].receive(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plane1 = <span class="keyword">new</span> Plane(<span class="string">'plane1'</span>);</span><br><span class="line"><span class="keyword">var</span> plane2 = <span class="keyword">new</span> Plane(<span class="string">'plane2'</span>);</span><br><span class="line">tower.register(plane1);</span><br><span class="line">tower.register(plane2);</span><br><span class="line"><span class="comment">//飞机1通过塔台发送消息给飞机2</span></span><br><span class="line">plane1.send(<span class="string">'我马上降落，还有200米'</span>，plane2);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-模板方法模式&quot;&gt;&lt;a href=&quot;#1-模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;1.模板方法模式&quot;&gt;&lt;/a&gt;1.模板方法模式&lt;/h3&gt;&lt;p&gt;定义一个操作中的算法骨架，将一些步骤延迟到子类中。&lt;br&gt;模板方法使用继承来改变算法的一部分
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js星级评分的实现</title>
    <link href="http://yoursite.com/2017/07/26/js-star/"/>
    <id>http://yoursite.com/2017/07/26/js-star/</id>
    <published>2017-07-26T02:17:05.000Z</published>
    <updated>2017-09-19T13:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-第一种写法"><a href="#1-第一种写法" class="headerlink" title="1.第一种写法"></a>1.第一种写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span>, <span class="selector-tag">ul</span> , <span class="selector-tag">li</span> &#123;<span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>: none;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.rating</span> &#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">34px</span>;<span class="attribute">margin</span>: <span class="number">100px</span> auto;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.rating-item</span>&#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        width: 34px;</span></span><br><span class="line"><span class="undefined">        height: 34px;</span></span><br><span class="line"><span class="undefined">        background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) no-repeat;</span></span><br><span class="line"><span class="undefined">        cursor: pointer;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--index.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"rating"</span> <span class="attr">id</span>=<span class="string">"rating"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"rating-item"</span> <span class="attr">title</span>=<span class="string">"很不好"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"rating-item"</span> <span class="attr">title</span>=<span class="string">"不好"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"rating-item"</span> <span class="attr">title</span>=<span class="string">"一般"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"rating-item"</span> <span class="attr">title</span>=<span class="string">"好"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"rating-item"</span> <span class="attr">title</span>=<span class="string">"很好"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">2</span>,</span><br><span class="line">    $rating = $(<span class="string">'#rating'</span>),</span><br><span class="line">    $item = $rating.find(<span class="string">'.rating-item'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//点亮</span></span><br><span class="line"><span class="keyword">var</span> lightOn=<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">   $item.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(index&lt;num)&#123;</span><br><span class="line">         $(<span class="keyword">this</span>).css(<span class="string">'background-position'</span>,<span class="string">'0 -40px'</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         $(<span class="keyword">this</span>).css(<span class="string">'background-position'</span>,<span class="string">'0 0'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">lightOn(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">//事件绑定</span></span><br><span class="line">$item.on(<span class="string">'mouseover'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   lightOn($(<span class="keyword">this</span>).index()+<span class="number">1</span>)</span><br><span class="line">&#125;).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    num = $(<span class="keyword">this</span>).index()+<span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line">$rating.on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    lightOn(num);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>（1）改进代码：</p><ul><li>1.闭包防止全局变量污染</li><li>2.事件委托防止多次绑定事件</li><li>3.代码复用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//闭包</span></span><br><span class="line"><span class="keyword">var</span> rating = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//点亮，这个函数是通用的</span></span><br><span class="line">    <span class="keyword">var</span> lightOn=<span class="function"><span class="keyword">function</span>(<span class="params">$item,num</span>)</span>&#123;</span><br><span class="line">       $item.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(index&lt;num)&#123;</span><br><span class="line">             $(<span class="keyword">this</span>).css(<span class="string">'background-position'</span>,<span class="string">'0 -40px'</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             $(<span class="keyword">this</span>).css(<span class="string">'background-position'</span>,<span class="string">'0 0'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码复用</span></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">el,num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $rating = $(el),</span><br><span class="line">            $item = $rating.find(<span class="string">'.rating-item'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        lightOn($item,num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//事件委托，将子元素事件委托给父元素</span></span><br><span class="line">        $rating.on(<span class="string">'mouseover'</span>,<span class="string">'.rating-item'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           lightOn($item,$(<span class="keyword">this</span>).index()+<span class="number">1</span>) </span><br><span class="line">        &#125;).on(<span class="string">'click'</span>,<span class="string">'.rating-item'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            num = $(<span class="keyword">this</span>).index()+<span class="number">1</span></span><br><span class="line">        &#125;).on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            lightOn($item,num);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//jQuery插件</span></span><br><span class="line">    $.fn.extend(&#123;</span><br><span class="line">        rating: <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                init(<span class="keyword">this</span>,num);    </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        init: init</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">rating.init(<span class="string">'#rating'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//raring.init('#rating2',3);//第二个评分</span></span><br><span class="line">$(<span class="string">'#rating2'</span>).rating(<span class="number">4</span>);<span class="comment">//jquery插件调用</span></span><br></pre></td></tr></table></figure></li></ul><p>（2）设计模式<br>封装一个函数是复用代码，使用一个设计模式是复用他人的经验</p><ul><li><1>创建型模式，就是对创建对象进行封装。如单例，抽象工厂，建造者，工厂，原型。</1></li><li><2>结构型模式，主要解决类之间的耦合关系。如适配器，桥接，装饰，组合，外观，享元，代理。</2></li><li><3>行为型模式，是对象之间的常用交流模式。如模板方法，命令，迭代器，观察者，中介者，备忘录，解释器，状态，策略，责任链，访问者。</3></li></ul><p>（3）模板方法模式<br>需求：点亮半颗星星<br>再次扩展<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rating = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//点亮整颗</span></span><br><span class="line">  <span class="keyword">var</span> LightEntire = <span class="function"><span class="keyword">function</span>(<span class="params">el,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = $(el);</span><br><span class="line">    <span class="keyword">this</span>.$item = <span class="keyword">this</span>.$el.find(<span class="string">'.rating-item'</span>);</span><br><span class="line">    <span class="keyword">this</span>.opts = options;</span><br><span class="line">  &#125;;</span><br><span class="line">  LightEntire.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lightOn(<span class="keyword">this</span>.opts.num);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.opts.readOnly)&#123;</span><br><span class="line">        <span class="keyword">this</span>.bindEvent();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  LightEntire.prototype.lightOn = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    num = <span class="built_in">parseInt</span>(num);</span><br><span class="line">    <span class="keyword">this</span>.$item.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;num)&#123;</span><br><span class="line">           $(<span class="keyword">this</span>).css(<span class="string">'background-position'</span>,<span class="string">'0 -40px'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $(<span class="keyword">this</span>).css(<span class="string">'background-position'</span>,<span class="string">'0 0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  LightEntire.prototype.bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">        itemLength = self.$item.length;</span><br><span class="line">    self.$el.on(<span class="string">'mouseover'</span>,<span class="string">'.rating-item'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = $(<span class="keyword">this</span>).index()+self.add;</span><br><span class="line">        self.lightOn(num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//短路符，先判断传入的是否函数。call改变this指向</span></span><br><span class="line">        (<span class="keyword">typeof</span> self.opts.select === <span class="string">'function'</span>) &amp;&amp; self.opts.select.call(<span class="keyword">this</span> ,num, itemLength)</span><br><span class="line">        <span class="comment">//触发select事件</span></span><br><span class="line">        self.$el.trigger(<span class="string">'select'</span>,[num,itemLength])</span><br><span class="line">    &#125;).on(<span class="string">'click'</span>,<span class="string">'.rating-item'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       self.opts.num = $(<span class="keyword">this</span>).index()+self.add;</span><br><span class="line"></span><br><span class="line">       (<span class="keyword">typeof</span> self.opts.chosen === <span class="string">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class="keyword">this</span> ,self.opts.num, itemLength)</span><br><span class="line">    </span><br><span class="line">         self.$el.trigger(<span class="string">'chosen'</span>,[self.opts.num,itemLength])</span><br><span class="line">    &#125;).on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        self.lightOn(self.opts.num);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//点亮半颗</span></span><br><span class="line">  <span class="keyword">var</span> LightHalf = <span class="function"><span class="keyword">function</span>(<span class="params">el,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = $(el);</span><br><span class="line">    <span class="keyword">this</span>.$item = <span class="keyword">this</span>.$el.find(<span class="string">'.rating-item'</span>);</span><br><span class="line">    <span class="keyword">this</span>.opts = options;</span><br><span class="line">    <span class="keyword">this</span>.add = <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  LightHalf.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.lightOn(<span class="keyword">this</span>.opts.num);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.opts.readOnly)&#123;</span><br><span class="line">        <span class="keyword">this</span>.bindEvent();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  LightHalf.prototype.lightOn = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="built_in">parseInt</span>(num),</span><br><span class="line">        isHalf = count!==num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.$item.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;num)&#123;</span><br><span class="line">           $(<span class="keyword">this</span>).css(<span class="string">'background-position'</span>,<span class="string">'0 -40px'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $(<span class="keyword">this</span>).css(<span class="string">'background-position'</span>,<span class="string">'0 0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isHalf)&#123;</span><br><span class="line">            <span class="keyword">this</span>.$item.eq(count).css(<span class="string">'background-position'</span>,<span class="string">'0 -80px'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  LightHalf.prototype.bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">        itemLength = self.$item.length;</span><br><span class="line"></span><br><span class="line">    self.$el.on(<span class="string">'mousemove'</span>,<span class="string">'.rating-item'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(e.pageX-$<span class="keyword">this</span>.offset().left &lt; $<span class="keyword">this</span>.width()/<span class="number">2</span>)&#123;<span class="comment">//半颗</span></span><br><span class="line">            self.add = <span class="number">0.5</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//整颗</span></span><br><span class="line">            self.add = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num = $<span class="keyword">this</span>.index() + self.add;</span><br><span class="line"></span><br><span class="line">        self.lightOn(num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//短路符，先判断传入的是否函数。call改变this指向</span></span><br><span class="line">        (<span class="keyword">typeof</span> self.opts.select === <span class="string">'function'</span>) &amp;&amp; self.opts.select.call(<span class="keyword">this</span> ,num, itemLength)</span><br><span class="line">        <span class="comment">//触发select事件</span></span><br><span class="line">        self.$el.trigger(<span class="string">'select'</span>,[num,itemLength])</span><br><span class="line"></span><br><span class="line">    &#125;).on(<span class="string">'click'</span>,<span class="string">'.rating-item'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       self.opts.num = $(<span class="keyword">this</span>).index() + self.add;</span><br><span class="line"></span><br><span class="line">       (<span class="keyword">typeof</span> self.opts.chosen === <span class="string">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class="keyword">this</span> ,self.opts.num, itemLength)</span><br><span class="line">    </span><br><span class="line">       self.$el.trigger(<span class="string">'chosen'</span>,[self.opts.num,itemLength])</span><br><span class="line">    &#125;).on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        self.lightOn(self.opts.num);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//默认参数</span></span><br><span class="line">  <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">    mode: <span class="string">'LightEntire'</span>,<span class="comment">//半颗 LightHalf</span></span><br><span class="line">    num: <span class="number">0</span>,</span><br><span class="line">    readOnly: <span class="literal">false</span>,</span><br><span class="line">    select: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    chosen: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//做个映射</span></span><br><span class="line">  <span class="keyword">var</span> mode = &#123;</span><br><span class="line">    <span class="string">'LightEntire'</span> : LightEntire,</span><br><span class="line">    <span class="string">'LightHalf'</span> : LightHalf</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">el,options</span>)</span>&#123;</span><br><span class="line">    options = $.extend(&#123;&#125;,defaults,options);</span><br><span class="line">    <span class="keyword">if</span>(!mode[options.mode])&#123;<span class="comment">//容错</span></span><br><span class="line">        options.mode = <span class="string">'LightEntire'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//new LightEntire(el,options).init();</span></span><br><span class="line">    <span class="comment">//new LightHalf(el,options).init();</span></span><br><span class="line">    <span class="keyword">new</span> mode[options.mode](el,options).init();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    init: init</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">rating.init(<span class="string">'#rating'</span>,&#123;</span><br><span class="line">    mode: <span class="string">'LightHalf'</span>,</span><br><span class="line">  num : <span class="number">2.5</span>,</span><br><span class="line">  <span class="comment">// select : function(num, total) &#123;</span></span><br><span class="line">  <span class="comment">//    console.log(this)</span></span><br><span class="line">  <span class="comment">//    console.log(num + '/' + total)</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">'#rating'</span>).on(<span class="string">'select'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e,num,total</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num + <span class="string">'/'</span> +total)</span><br><span class="line">&#125;).on(<span class="string">'chosen'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e,num,total</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num + <span class="string">'/'</span> +total)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>抽象出父类,实现继承<br>完善初始化,增加选完后解绑事件<br>完善jQuery插件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rating = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//原型链继承 不需要构造函数里的东西，如果构造函数里东西多，会影响性能</span></span><br><span class="line">    <span class="comment">//LightEntire.prototype = new Light();</span></span><br><span class="line">    <span class="comment">//继承 改造</span></span><br><span class="line">    <span class="keyword">var</span> extend = <span class="function"><span class="keyword">function</span>(<span class="params">subClass,superClass</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;<span class="comment">//构造函数是空的</span></span><br><span class="line">        F.prototype = superClass.prototype;</span><br><span class="line">        subClass.prototype = <span class="keyword">new</span> F();</span><br><span class="line">        subClass.prototype.construtor = subClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//点亮 父类</span></span><br><span class="line">  <span class="keyword">var</span> Light = <span class="function"><span class="keyword">function</span>(<span class="params">el,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = $(el);</span><br><span class="line">    <span class="keyword">this</span>.$item = <span class="keyword">this</span>.$el.find(<span class="string">'.rating-item'</span>);</span><br><span class="line">    <span class="keyword">this</span>.opts = options;</span><br><span class="line">    <span class="keyword">this</span>.add = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.selectEvent = <span class="string">'mouseover'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  Light.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lightOn(<span class="keyword">this</span>.opts.num);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.opts.readOnly)&#123;</span><br><span class="line">            <span class="keyword">this</span>.bindEvent();</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  Light.prototype.lightOn = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    num = <span class="built_in">parseInt</span>(num);</span><br><span class="line">    <span class="keyword">this</span>.$item.each(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;num)&#123;</span><br><span class="line">           $(<span class="keyword">this</span>).css(<span class="string">'background-position'</span>,<span class="string">'0 -40px'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           $(<span class="keyword">this</span>).css(<span class="string">'background-position'</span>,<span class="string">'0 0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  Light.prototype.bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">        itemLength = self.$item.length;</span><br><span class="line">    <span class="comment">//事件处理</span></span><br><span class="line">    self.$el.on(<span class="keyword">this</span>.selectEvent,<span class="string">'.rating-item'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>),</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不同的方法需要子类里重写</span></span><br><span class="line">        self.select(e,$<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        num = $(<span class="keyword">this</span>).index()+self.add;</span><br><span class="line">        self.lightOn(num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//短路符，先判断传入的是否函数。call改变this指向</span></span><br><span class="line">        (<span class="keyword">typeof</span> self.opts.select === <span class="string">'function'</span>) &amp;&amp; self.opts.select.call(<span class="keyword">this</span> ,num, itemLength)</span><br><span class="line">        <span class="comment">//触发select事件</span></span><br><span class="line">        self.$el.trigger(<span class="string">'select'</span>,[num,itemLength])</span><br><span class="line">    &#125;).on(<span class="string">'click'</span>,<span class="string">'.rating-item'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       self.opts.num = $(<span class="keyword">this</span>).index()+self.add;</span><br><span class="line"></span><br><span class="line">       (<span class="keyword">typeof</span> self.opts.chosen === <span class="string">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class="keyword">this</span> ,self.opts.num, itemLength)</span><br><span class="line">    </span><br><span class="line">       self.$el.trigger(<span class="string">'chosen'</span>,[self.opts.num,itemLength])</span><br><span class="line">    &#125;).on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       self.lightOn(self.opts.num);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">  Light.prototype.select = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'子类必须重写此方法'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  Light.prototype.unbindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el.off();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//点亮整颗</span></span><br><span class="line">  <span class="keyword">var</span> LightEntire = <span class="function"><span class="keyword">function</span>(<span class="params">el,options</span>)</span>&#123;</span><br><span class="line">    Light.call(<span class="keyword">this</span>,el,options)</span><br><span class="line">    <span class="keyword">this</span>.selectEvent = <span class="string">'mouseover'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  extend(LightEntire,Light);<span class="comment">//继承原型里的方法</span></span><br><span class="line">  LightEntire.prototype.lightOn = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    Light.prototype.lightOn.call(<span class="keyword">this</span>,num)</span><br><span class="line">  &#125;;</span><br><span class="line">  LightEntire.prototype.select = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    self.add = <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//点亮半颗</span></span><br><span class="line">  <span class="keyword">var</span> LightHalf = <span class="function"><span class="keyword">function</span>(<span class="params">el,options</span>)</span>&#123;</span><br><span class="line">    Light.call(<span class="keyword">this</span>,el,options);</span><br><span class="line">    <span class="keyword">this</span>.selectEvent = <span class="string">'mousemove'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  extend(LightHalf,Light);<span class="comment">//继承原型里的方法</span></span><br><span class="line">  LightHalf.prototype.lightOn = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="built_in">parseInt</span>(num),</span><br><span class="line">        isHalf = count!==num;</span><br><span class="line"></span><br><span class="line">    Light.prototype.lightOn.call(<span class="keyword">this</span>,count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isHalf)&#123;</span><br><span class="line">       <span class="keyword">this</span>.$item.eq(count).css(<span class="string">'background-position'</span>,<span class="string">'0 -80px'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  LightHalf.prototype.select = <span class="function"><span class="keyword">function</span>(<span class="params">e,$this</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.pageX-$<span class="keyword">this</span>.offset().left &lt; $<span class="keyword">this</span>.width()/<span class="number">2</span>)&#123;<span class="comment">//半颗</span></span><br><span class="line">        <span class="keyword">this</span>.add = <span class="number">0.5</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//整颗</span></span><br><span class="line">        <span class="keyword">this</span>.add = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//默认参数</span></span><br><span class="line">  <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">    mode: <span class="string">'LightEntire'</span>,<span class="comment">//半颗 LightHalf</span></span><br><span class="line">    num: <span class="number">0</span>,</span><br><span class="line">    readOnly: <span class="literal">false</span>,</span><br><span class="line">    select: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    chosen: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//做个映射</span></span><br><span class="line">  <span class="keyword">var</span> mode = &#123;</span><br><span class="line">    <span class="string">'LightEntire'</span> : LightEntire,</span><br><span class="line">    <span class="string">'LightHalf'</span> : LightHalf</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">el,option</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $el = $(el),</span><br><span class="line">        rating = $el.data(<span class="string">'rating'</span>),</span><br><span class="line">        options = $.extend(&#123;&#125;,defaults,<span class="keyword">typeof</span> option === <span class="string">'object'</span> &amp;&amp; option);</span><br><span class="line">    <span class="keyword">if</span>(!mode[options.mode])&#123;<span class="comment">//容错</span></span><br><span class="line">        options.mode = <span class="string">'LightEntire'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//new LightEntire(el,options).init();</span></span><br><span class="line">    <span class="comment">//new LightHalf(el,options).init();</span></span><br><span class="line">    <span class="comment">//防止重复调用时重复实例化（单例模式）</span></span><br><span class="line">    <span class="keyword">if</span>(!rating)&#123;</span><br><span class="line">        $el.data(<span class="string">'rating'</span>,(rating = <span class="keyword">new</span> mode[options.mode](el,options)));</span><br><span class="line">        rating.init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如option是字符串，执行以字符串相应的方法</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> option === <span class="string">'string'</span>) rating[option]()</span><br><span class="line">    </span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jQuery插件</span></span><br><span class="line">    $.fn.extend(&#123;</span><br><span class="line">        rating: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                init(<span class="keyword">this</span>,option);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    init: init</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">rating.init(<span class="string">'#rating'</span>,&#123;</span><br><span class="line">  mode: <span class="string">'LightHalf'</span>,</span><br><span class="line">  num : <span class="number">2.5</span>,</span><br><span class="line">  <span class="comment">// select : function(num, total) &#123;</span></span><br><span class="line">  <span class="comment">//    console.log(this)</span></span><br><span class="line">  <span class="comment">//    console.log(num + '/' + total)</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">  chosen: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    rating.init(<span class="string">'#rating'</span>,<span class="string">'unbindEvent'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#rating'</span>).on(<span class="string">'select'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e,num,total</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num + <span class="string">'/'</span> +total)</span><br><span class="line">&#125;).on(<span class="string">'chosen'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e,num,total</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num + <span class="string">'/'</span> +total)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#rating2'</span>).rating(&#123;</span><br><span class="line">  mode: <span class="string">'LightEntire'</span>,</span><br><span class="line">  num : <span class="number">4</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#rating2'</span>).on(<span class="string">'chosen'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).rating(<span class="string">'unbindEvent'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star1.html" target="_blank" rel="noopener">最终源码</a></p><h3 id="2-第二种写法"><a href="#2-第二种写法" class="headerlink" title="2.第二种写法"></a>2.第二种写法</h3><p>通过控制宽度来点亮星星，相比第一种扩展了星星个数可控<br>style:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rating</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">165px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rating-display</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x <span class="number">0</span> -<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rating-mask</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rating-item</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>html动态生成<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"rating"</span> <span class="attr">class</span>=<span class="string">"rating"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class="rating-display"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;ul class="rating-mask"&gt;</span></span><br><span class="line"><span class="comment">        &lt;li class="rating-item"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">        &lt;li class="rating-item"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">        &lt;li class="rating-item"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">        &lt;li class="rating-item"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">        &lt;li class="rating-item"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;/ul&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>javascript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rating = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//评分</span></span><br><span class="line">    <span class="keyword">var</span> Rating = <span class="function"><span class="keyword">function</span>(<span class="params">el,options</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$el = $(el);</span><br><span class="line">        <span class="keyword">this</span>.opts = $.extend(&#123;&#125;,Rating.DEFAULTS, options);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//半颗星星需求</span></span><br><span class="line">        <span class="keyword">this</span>.opts.total *= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">this</span>.opts.num *= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.itemWidth = <span class="number">33</span>/<span class="number">2</span>;<span class="comment">//星星默认宽度</span></span><br><span class="line">        <span class="keyword">this</span>.displayWidth = <span class="keyword">this</span>.opts.num*<span class="keyword">this</span>.itemWidth;<span class="comment">//展示层默认宽度</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Rating.DEFAULTS = &#123;</span><br><span class="line">        total : <span class="number">5</span>,</span><br><span class="line">        num : <span class="number">2</span>,</span><br><span class="line">        readOnly : <span class="literal">false</span>,</span><br><span class="line">        select : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        chosen : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">    &#125;;</span><br><span class="line">    Rating.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.buildHTML();</span><br><span class="line">        <span class="keyword">this</span>.setCSS();</span><br><span class="line">        <span class="comment">//if(!this.opts.readOnly)&#123;</span></span><br><span class="line">            <span class="keyword">this</span>.bindEvent();</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Rating.prototype.buildHTML = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//创建html</span></span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">''</span>;</span><br><span class="line">        html += <span class="string">'&lt;div class="rating-display"&gt;&lt;/div&gt;&lt;ul class="rating-mask"&gt;'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="keyword">this</span>.opts.total;i++)&#123;</span><br><span class="line">            html += <span class="string">'&lt;li class="rating-item"&gt;&lt;/li&gt;'</span></span><br><span class="line">        &#125;</span><br><span class="line">        html +=<span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.$el.html(html);</span><br><span class="line">    &#125;;</span><br><span class="line">    Rating.prototype.setCSS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//设置CSS</span></span><br><span class="line">        <span class="keyword">this</span>.$el.width(<span class="keyword">this</span>.opts.total*<span class="keyword">this</span>.itemWidth);</span><br><span class="line">        <span class="keyword">this</span>.$display = <span class="keyword">this</span>.$el.find(<span class="string">'.rating-display'</span>);</span><br><span class="line">        <span class="keyword">this</span>.$display.width(<span class="keyword">this</span>.displayWidth);</span><br><span class="line">        <span class="keyword">this</span>.$el.find(<span class="string">'.rating-item'</span>).width(<span class="keyword">this</span>.itemWidth);</span><br><span class="line">    &#125;;</span><br><span class="line">    Rating.prototype.bindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//绑定事件</span></span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">        self.$el.on(<span class="string">'mouseover'</span>,<span class="string">'.rating-item'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> count = $(<span class="keyword">this</span>).index() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            self.$display.width(count*self.itemWidth);</span><br><span class="line"></span><br><span class="line">            (<span class="keyword">typeof</span> self.opts.select === <span class="string">'function'</span>) &amp;&amp; self.opts.select.call(<span class="keyword">this</span>,count,self.opts.total);</span><br><span class="line">            self.$el.trigger(<span class="string">'select'</span>,[count,self.opts.total]);</span><br><span class="line">        &#125;).on(<span class="string">'click'</span>,<span class="string">'.rating-item'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> count = $(<span class="keyword">this</span>).index() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            self.displayWidth = count*self.itemWidth;</span><br><span class="line">            (<span class="keyword">typeof</span> self.opts.chosen === <span class="string">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class="keyword">this</span>,count,self.opts.total);</span><br><span class="line">            self.$el.trigger(<span class="string">'chosen'</span>,[count,self.opts.total]);</span><br><span class="line">        &#125;).on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            self.$display.width(self.displayWidth);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    Rating.prototype.unbindEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//解绑事件</span></span><br><span class="line">        <span class="keyword">this</span>.$el.off();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">el,option</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $el = $(el),</span><br><span class="line">            rating = $el.data(<span class="string">'rating'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!rating)&#123;</span><br><span class="line">            $el.data(<span class="string">'rating'</span>,</span><br><span class="line">                (rating = <span class="keyword">new</span> Rating(el,<span class="keyword">typeof</span> option === <span class="string">'object'</span> &amp;&amp;option))</span><br><span class="line">            );</span><br><span class="line">            rating.init();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> option === <span class="string">'string'</span>)rating[option]();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//jQuery插件</span></span><br><span class="line">    $.fn.extend(&#123;</span><br><span class="line">        rating: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                init(<span class="keyword">this</span>,option)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        init: init</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#rating'</span>).rating(&#123;</span><br><span class="line">    total: <span class="number">7</span>,</span><br><span class="line">    num: <span class="number">4</span>,</span><br><span class="line">    chosen: <span class="function"><span class="keyword">function</span>(<span class="params">count,total</span>)</span>&#123;</span><br><span class="line">        rating.init(<span class="string">'#rating'</span>,<span class="string">'unbindEvent'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// rating.init('#rating',&#123;</span></span><br><span class="line"><span class="comment">//  total : 6,</span></span><br><span class="line"><span class="comment">//  num: 3,</span></span><br><span class="line"><span class="comment">//  // select: function(count,total)&#123;</span></span><br><span class="line"><span class="comment">//  //  console.log(this);</span></span><br><span class="line"><span class="comment">//  //  console.log(count + '/' + total);</span></span><br><span class="line"><span class="comment">//  // &#125;</span></span><br><span class="line"><span class="comment">//  chosen: function(count,total)&#123;</span></span><br><span class="line"><span class="comment">//      rating.init('#rating','unbindEvent')</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br></pre></td></tr></table></figure></p><p>策略模式重构代码<br>策略模式：定义一系列算法，一个个封装起来，并且可以相互替换<br>只需评分前增加策略类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//策略</span></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    entire: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    half: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    quarter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//评分</span></span><br><span class="line"><span class="keyword">var</span> Rating = <span class="function"><span class="keyword">function</span>(<span class="params">el,options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el = $(el);</span><br><span class="line">    <span class="keyword">this</span>.opts = $.extend(&#123;&#125;,Rating.DEFAULTS, options);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!strategies[<span class="keyword">this</span>.opts.mode])&#123;<span class="comment">//容错判断</span></span><br><span class="line">        <span class="keyword">this</span>.opts.mode = <span class="string">'entire'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.ratio = strategies[<span class="keyword">this</span>.opts.mode]();</span><br><span class="line">    <span class="keyword">this</span>.opts.total *= <span class="keyword">this</span>.ratio;</span><br><span class="line">    <span class="keyword">this</span>.opts.num *= <span class="keyword">this</span>.ratio;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.itemWidth = <span class="number">33</span>/<span class="keyword">this</span>.ratio;<span class="comment">//星星默认宽度</span></span><br><span class="line">    <span class="keyword">this</span>.displayWidth = <span class="keyword">this</span>.opts.num*<span class="keyword">this</span>.itemWidth;<span class="comment">//展示层默认宽度</span></span><br><span class="line">&#125;;</span><br><span class="line">Rating.DEFAULTS = &#123;</span><br><span class="line">    mode: <span class="string">'entire'</span>,</span><br><span class="line">    total : <span class="number">5</span>,</span><br><span class="line">    num : <span class="number">2</span>,</span><br><span class="line">    readOnly : <span class="literal">false</span>,</span><br><span class="line">    select : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    chosen : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star2.html" target="_blank" rel="noopener">源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-第一种写法&quot;&gt;&lt;a href=&quot;#1-第一种写法&quot; class=&quot;headerlink&quot; title=&quot;1.第一种写法&quot;&gt;&lt;/a&gt;1.第一种写法&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ionic APP开发相关踩坑</title>
    <link href="http://yoursite.com/2017/06/15/ionic/"/>
    <id>http://yoursite.com/2017/06/15/ionic/</id>
    <published>2017-06-15T08:47:08.000Z</published>
    <updated>2017-09-19T13:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-配置各种环境参考资料"><a href="#1-配置各种环境参考资料" class="headerlink" title="1.配置各种环境参考资料"></a>1.配置各种环境参考资料</h3><p>（1）<a href="http://reactnative.cn/docs/0.45/getting-started.html" target="_blank" rel="noopener">React Native 开发文档</a><br>注：搭建android环境，sdk，之前搞了很久，忘记记录了。。<br>（2）<a href="https://angular.cn/" target="_blank" rel="noopener">angular 中文文档</a><br>（3）<a href="http://ionicframework.com/docs" target="_blank" rel="noopener">ionic 文档</a><br>（4）<a href="http://www.pc6.com/softview/SoftView_421983.html" target="_blank" rel="noopener">Gradle构建工具v3.3下载</a><br>注：是一个android打包工具，需要配置环境变量，官网下载太慢<br>（5）<a href="http://www.jianshu.com/p/9595eccac3d1" target="_blank" rel="noopener">Ionic打包过程下载Gradle失败的解决方法</a><br>注：暂时没遇到，上次打包了半小时</p><h3 id="2-ionic-基本功能配置"><a href="#2-ionic-基本功能配置" class="headerlink" title="2.ionic 基本功能配置"></a>2.ionic 基本功能配置</h3><p>（1）<a href="http://www.cnblogs.com/zsl123/p/6425489.html" target="_blank" rel="noopener">ionic2 中隐藏子页面tabs选项卡的三种方法</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.module.ts 找到</span></span><br><span class="line">imports: [</span><br><span class="line">    IonicModule.forRoot(MyApp,&#123;</span><br><span class="line">      tabsHideOnSubPages: <span class="string">'true'</span>         <span class="comment">//隐藏全部子页面tabs</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure></p><p>（2）ionic2 返回键文字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.module.ts 默认是'back'</span></span><br><span class="line">imports: [</span><br><span class="line">    IonicModule.forRoot(MyApp,&#123;</span><br><span class="line">      backButtonText: <span class="string">''</span>, <span class="comment">//返回按钮文字</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure></p><p>（3）<a href="http://blog.csdn.net/malonely/article/details/52777369" target="_blank" rel="noopener">ionic 自定义tabs样式</a><br>注：主要是scss<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//tabs.html</span><br><span class="line"><span class="tag">&lt;<span class="name">ion-tabs</span> <span class="attr">tabsPlacement</span>=<span class="string">"bottom"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"tab1Root"</span> <span class="attr">tabTitle</span>=<span class="string">"tab1"</span> <span class="attr">tabIcon</span>=<span class="string">"tab-tab1"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"tab2Root"</span> <span class="attr">tabTitle</span>=<span class="string">"tab2"</span> <span class="attr">tabIcon</span>=<span class="string">"tab-tab2"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"tab3Root"</span> <span class="attr">tabTitle</span>=<span class="string">"tab3"</span> <span class="attr">tabIcon</span>=<span class="string">"tab-tab3"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//tabs.scss</span><br><span class="line"><span class="selector-class">.ion-tab-icon-base</span> &#123;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">32px</span>;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">32px</span>;  </span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">4px</span> <span class="number">2px</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="selector-class">.ion-tab-icon-md-base</span> &#123;  </span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">0</span> <span class="meta">!important</span>;  </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">32px</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">$tabImageName: 'tab1' 'tab2' 'tab3';  </span><br><span class="line">@<span class="keyword">for</span> $i from <span class="number">1</span> to <span class="number">4</span> &#123;  </span><br><span class="line">  //for ios  </span><br><span class="line">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </span><br><span class="line">    @<span class="keyword">extend</span> .ion-tab-icon-base;  </span><br><span class="line">    content: url("../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png");  </span><br><span class="line">  &#125;  </span><br><span class="line">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125;-outline &#123;  </span><br><span class="line">    @<span class="keyword">extend</span> .ion-tab-icon-base;  </span><br><span class="line">    content: url("../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png");  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  // for android  </span><br><span class="line">  <span class="selector-class">.tabs-md</span> <span class="selector-class">.tab-button</span><span class="selector-attr">[aria-selected=true]</span> &#123;  </span><br><span class="line">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </span><br><span class="line">      @<span class="keyword">extend</span> .ion-tab-icon-md-base;  </span><br><span class="line">      content: url("../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png");  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="selector-class">.tabs-md</span> <span class="selector-class">.tab-button</span><span class="selector-attr">[aria-selected=false]</span> &#123;  </span><br><span class="line">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </span><br><span class="line">      @<span class="keyword">extend</span> .ion-tab-icon-md-base;  </span><br><span class="line">      content: url("../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png");  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-配置各种环境参考资料&quot;&gt;&lt;a href=&quot;#1-配置各种环境参考资料&quot; class=&quot;headerlink&quot; title=&quot;1.配置各种环境参考资料&quot;&gt;&lt;/a&gt;1.配置各种环境参考资料&lt;/h3&gt;&lt;p&gt;（1）&lt;a href=&quot;http://reactnative
      
    
    </summary>
    
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
      <category term="cordova" scheme="http://yoursite.com/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>用js替换jQuery</title>
    <link href="http://yoursite.com/2017/04/18/user-Js/"/>
    <id>http://yoursite.com/2017/04/18/user-Js/</id>
    <published>2017-04-18T02:56:11.000Z</published>
    <updated>2017-10-28T00:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-获取元素"><a href="#1-获取元素" class="headerlink" title="1.获取元素"></a>1.获取元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(<span class="string">'.xxx'</span>);  <span class="comment">//class获取  </span></span><br><span class="line">$(<span class="string">'#xxx'</span>);  <span class="comment">//id获取  </span></span><br><span class="line">$(<span class="string">'.xxx.ccc'</span>);  <span class="comment">//同时包含xxx和ccc  </span></span><br><span class="line">$(<span class="string">'.xxx,.zzz'</span>); <span class="comment">//多选  </span></span><br><span class="line">$(<span class="string">'.xxx div'</span>); <span class="comment">//子类  </span></span><br><span class="line">$(<span class="string">'.xxx p:first'</span>); <span class="comment">//第一个P元素  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript （querySelectorAll）</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.xxx'</span>);  <span class="comment">//class获取  </span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#xxx'</span>);<span class="comment">//id获取  </span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.xxx.ccc'</span>);<span class="comment">//同时包含xxx和ccc  </span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.xxx,.ccc'</span>);<span class="comment">//多选  </span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.xxx div'</span>);<span class="comment">//子类  </span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.xxx p:first-child'</span>);<span class="comment">//第一个P元素</span></span><br></pre></td></tr></table></figure><h3 id="2-操作class"><a href="#2-操作class" class="headerlink" title="2.操作class"></a>2.操作class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(<span class="string">'.xxx'</span>).addClass(<span class="string">'class_name'</span>);</span><br><span class="line">$(<span class="string">'.xxx'</span>).removeClass(<span class="string">'class_name'</span>); </span><br><span class="line">$(<span class="string">'.xxx'</span>).toggleClass(<span class="string">'class_name'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">el.classList.add(<span class="string">'class_name'</span>);</span><br><span class="line">el.classList.remove(<span class="string">'class_name'</span>);</span><br><span class="line">el.classList.toggle(<span class="string">'class_name'</span>);</span><br></pre></td></tr></table></figure><h3 id="3-是否包含某个class"><a href="#3-是否包含某个class" class="headerlink" title="3.是否包含某个class"></a>3.是否包含某个class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(<span class="string">'.xxx'</span>).hasClass(<span class="string">'class_name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">el.classList.contains(<span class="string">'class_name'</span>);</span><br></pre></td></tr></table></figure><p>上面是HTML5提供的新的方法，如果你非要为了兼容所谓的IE，可以用下面的这些<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否包含class    </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">o, n</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\b'</span>+n+<span class="string">'\\b'</span>).test(o.className);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">//添加class    </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">o, n</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(!hasClass(o, n)) o.className+=<span class="string">' '</span>+n;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">//删除class    </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delClass</span>(<span class="params">o, n</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(hasClass(o, n))&#123;  </span><br><span class="line">        o.className = o.className.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(?:^|\\s)'</span>+n+<span class="string">'(?=\\s|$)'</span>), <span class="string">''</span>).replace(<span class="regexp">/^\s*|\s*$/g</span>, <span class="string">''</span>);  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="4-插入HTML"><a href="#4-插入HTML" class="headerlink" title="4.插入HTML"></a>4.插入HTML</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(el).before(htmlString);  </span><br><span class="line">$(parent).append(el);  </span><br><span class="line">$(el).after(htmlString);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">parent.appendChild(el);  </span><br><span class="line">el.insertBefore(NewDom,ele);  </span><br><span class="line">ele.insertAdjacentHTML(<span class="string">"beforeend"</span>, <span class="string">'&lt;li&gt;内容&lt;/li&gt;'</span>);</span><br></pre></td></tr></table></figure><h3 id="5-获取节点"><a href="#5-获取节点" class="headerlink" title="5.获取节点"></a>5.获取节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(<span class="string">'.xxx'</span>).children();</span><br><span class="line">$(<span class="string">'.xxx'</span>).prev();</span><br><span class="line">$(<span class="string">'.xxx'</span>).next(); </span><br><span class="line">$(<span class="string">'.xxx'</span>).parent();</span><br><span class="line">$(ele).siblings();</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">ele.children;</span><br><span class="line"><span class="keyword">var</span> prev = ele.previousElementSibling || ele.previousSibling;  </span><br><span class="line"><span class="keyword">var</span> next = ele.nextElementSibling || ele.nextSibling;</span><br><span class="line">ele.parentNode;</span><br><span class="line"><span class="comment">//上下节点</span></span><br><span class="line"><span class="keyword">var</span> siblings = <span class="built_in">Array</span>.prototype.slice.call(el.parentNode.children);  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = siblings.length; i--;) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (siblings[i] === el) &#123;  </span><br><span class="line">        siblings.splice(i, <span class="number">1</span>);  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;;  </span><br><span class="line">;[].forEach.call(el.parentNode.children, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(child !== el);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="6-循环节点"><a href="#6-循环节点" class="headerlink" title="6.循环节点"></a>6.循环节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>)</span>&#123;  </span><br><span class="line">    <span class="comment">//xxx  </span></span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">[].forEach.call(ele,<span class="function"><span class="keyword">function</span>(<span class="params">el,i</span>)</span>&#123;  </span><br><span class="line">    <span class="comment">//xxx  </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="7-克隆节点"><a href="#7-克隆节点" class="headerlink" title="7.克隆节点"></a>7.克隆节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(<span class="string">'.xxx'</span>).clone(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">ele.cloneNode(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="8-操作节点"><a href="#8-操作节点" class="headerlink" title="8.操作节点"></a>8.操作节点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line"><span class="keyword">var</span> ele = $(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</span><br><span class="line">$(ele).remove();</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> ele = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">parent.removeChild(ele);<span class="comment">//父节点开始删除</span></span><br></pre></td></tr></table></figure><h3 id="9-获取、设置、删除属性"><a href="#9-获取、设置、删除属性" class="headerlink" title="9.获取、设置、删除属性"></a>9.获取、设置、删除属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(ele).attr(name,value) <span class="comment">//设置  </span></span><br><span class="line">$(ele).attr(name) <span class="comment">//获取  </span></span><br><span class="line">$(ele).removeAttr(name) <span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">ele.setAttribute(name,value);<span class="comment">//设置  </span></span><br><span class="line">ele.getAttribute(name);<span class="comment">//获取  </span></span><br><span class="line">ele.removeAttribute(name);<span class="comment">//删除</span></span><br></pre></td></tr></table></figure><h3 id="10-Data属性"><a href="#10-Data属性" class="headerlink" title="10.Data属性"></a>10.Data属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(<span class="string">"body"</span>).data(<span class="string">"foo"</span>, <span class="number">52</span>);  <span class="comment">//设置  </span></span><br><span class="line">$(<span class="string">"body"</span>).data(<span class="string">"foo"</span>);  <span class="comment">//获取  </span></span><br><span class="line">$(<span class="string">"body"</span>).removeData(<span class="string">"foo"</span>);  <span class="comment">//删除 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">ele.dataset.foo = <span class="number">52</span>  <span class="comment">//设置  </span></span><br><span class="line">ele.dataset.foo  <span class="comment">//获取  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//也可通过attribute方法来设置获取和删除  </span></span><br><span class="line">ele.setAttribute(<span class="string">'data-foo'</span>, <span class="number">52</span>);<span class="comment">//设置  </span></span><br><span class="line">ele.getAttribute(<span class="string">'data-foo'</span>); <span class="comment">//获取  </span></span><br><span class="line">ele.removeAttribute(<span class="string">'data-foo'</span>);<span class="comment">//删除</span></span><br></pre></td></tr></table></figure><h3 id="11-操作内容"><a href="#11-操作内容" class="headerlink" title="11.操作内容"></a>11.操作内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line"><span class="keyword">var</span> html = $(ele).html();</span><br><span class="line">$(el).empty();</span><br><span class="line">$(ele).text();</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> html = ele.innerHTML;</span><br><span class="line">el.innerHTML = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> txt = ele.textContent || ele.innerText;</span><br></pre></td></tr></table></figure><h3 id="12-操作CSS"><a href="#12-操作CSS" class="headerlink" title="12.操作CSS"></a>12.操作CSS</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(ele).css(<span class="string">'height'</span>,<span class="string">'300px'</span>);  </span><br><span class="line">$(ele).css(&#123;  </span><br><span class="line">    height:<span class="number">300</span>  </span><br><span class="line">&#125;);</span><br><span class="line">$(obj).css(<span class="string">'marginLeft'</span>);<span class="comment">//获取CSS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">ele.style.height = <span class="string">'300px'</span>;  </span><br><span class="line">ele.style.cssText = <span class="string">'height:200px;color:red;left:100px;'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(obj.currentStyle)&#123;  </span><br><span class="line">        <span class="keyword">return</span> obj.currentStyle[attr];  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> getComputedStyle(obj,<span class="literal">null</span>)[attr];  </span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="13-显示隐藏"><a href="#13-显示隐藏" class="headerlink" title="13.显示隐藏"></a>13.显示隐藏</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(el).show();  </span><br><span class="line">$(el).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">el.style.display = <span class="string">''</span>;  </span><br><span class="line">el.style.display = <span class="string">'none'</span>;</span><br></pre></td></tr></table></figure><h3 id="14-元素的高度（宽度同理）-height"><a href="#14-元素的高度（宽度同理）-height" class="headerlink" title="14.元素的高度（宽度同理）[height]"></a>14.元素的高度（宽度同理）[height]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(ele).height();</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">height</span>(<span class="params">el</span>)</span>&#123;      </span><br><span class="line">    <span class="keyword">var</span> _height = el.clientHeight;      </span><br><span class="line">    <span class="keyword">var</span> style = el.currentStyle || getComputedStyle(el);        </span><br><span class="line">    <span class="keyword">return</span> _height - (<span class="built_in">parseInt</span>(style.paddingTop) + <span class="built_in">parseInt</span>(style.paddingBottom));      </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>元素的内高度（宽度同理）[height + padding]<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(ele).innerHeight(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">ele.clientHeight;</span><br></pre></td></tr></table></figure></p><p>元素的外高度（宽度同理）[height + padding + border]<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(ele).outerHeight();</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">ele.offsetWidth;</span><br></pre></td></tr></table></figure></p><p>元素的外高度（宽度同理）[height + padding + border + margin]<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(ele).outerHeight(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerHeight</span>(<span class="params">el</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> style = el.currentStyle || getComputedStyle(el);    </span><br><span class="line">    <span class="keyword">var</span> height = el.offsetHeight + <span class="built_in">parseInt</span>(style.marginTop) + <span class="built_in">parseInt</span>(style.marginBottom);    </span><br><span class="line">    <span class="keyword">return</span> height;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="15-元素的位置"><a href="#15-元素的位置" class="headerlink" title="15.元素的位置"></a>15.元素的位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(ele).position().left;  </span><br><span class="line">$(ele).position().top;  </span><br><span class="line">  </span><br><span class="line">$(ele).offset().left;  </span><br><span class="line">$(ele).offset().top;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line">ele.offsetLeft;  </span><br><span class="line">ele.offsetTop;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getposi</span>(<span class="params">obj</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> t = <span class="number">0</span>,l = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">while</span>(obj)&#123;    </span><br><span class="line">        t+=obj.offsetTop;    </span><br><span class="line">        l+=obj.offsetLeft;    </span><br><span class="line">        obj = obj.offsetParent;    </span><br><span class="line">    &#125;;    </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">top</span>:t,<span class="attr">left</span>:l&#125;;    </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="comment">//getposi(ele).left  </span></span><br><span class="line"><span class="comment">//getposi(ele).top  </span></span><br><span class="line">ele.getBoundingClientRect().top + <span class="built_in">window</span>.pageYOffset;  </span><br><span class="line">ele.getBoundingClientRect().bottom + <span class="built_in">window</span>.pageYOffset;  </span><br><span class="line">ele.getBoundingClientRect().left + <span class="built_in">window</span>.pageYOffset;  </span><br><span class="line">ele.getBoundingClientRect().right + <span class="built_in">window</span>.pageXOffset;</span><br></pre></td></tr></table></figure><h3 id="16-Document事件"><a href="#16-Document事件" class="headerlink" title="16.Document事件"></a>16.Document事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// ready </span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">window</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// load  </span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="comment">//添加事件  </span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(ele).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="comment">//绑定事件  </span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="comment">//ready</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// Code  </span></span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//load</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// Code  </span></span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//添加事件</span></span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="comment">//XXX  </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//绑定事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">        <span class="comment">//xxx    </span></span><br><span class="line">&#125;,<span class="literal">false</span>);    </span><br><span class="line">  </span><br><span class="line">[].forEach.call(ele,<span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;  </span><br><span class="line">    o.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">            <span class="comment">//xxx    </span></span><br><span class="line">    &#125;,<span class="literal">false</span>);    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="17-获取数据类型"><a href="#17-获取数据类型" class="headerlink" title="17.获取数据类型"></a>17.获取数据类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$.type(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj).replace(<span class="regexp">/^\[object (.+)\]$/</span>, <span class="string">"$1"</span>).toLowerCase();  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="18-判断是否为数组"><a href="#18-判断是否为数组" class="headerlink" title="18.判断是否为数组"></a>18.判断是否为数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$.isArray(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">v</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(v) === <span class="string">'[object Array]'</span>;     </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="19-去除字符串两端的空格"><a href="#19-去除字符串两端的空格" class="headerlink" title="19.去除字符串两端的空格"></a>19.去除字符串两端的空格</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$.trim(string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="comment">//去除两端空格  </span></span><br><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> reExtraSpace = <span class="regexp">/^\s*(.*?)\s+$/</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(reExtraSpace, <span class="string">"$1"</span>)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/***扩展一下***/</span>  </span><br><span class="line"><span class="comment">//去除左边空格  </span></span><br><span class="line"><span class="built_in">String</span>.prototype.ltrim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace( <span class="regexp">/^(\s*|　*)/</span>, <span class="string">""</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//去除右边空格  </span></span><br><span class="line"><span class="built_in">String</span>.prototype.rtrim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace( <span class="regexp">/(\s*|　*)$/</span>, <span class="string">""</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//替换全部  </span></span><br><span class="line"><span class="built_in">String</span>.prototype.replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">s1, s2</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(s1, <span class="string">"gm"</span>), s2)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//去除所有空格，需要配合上面的替换全部  </span></span><br><span class="line"><span class="built_in">String</span>.prototype.trimAll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> reExtraSpace = <span class="regexp">/\s*(.*?)\s+/</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replaceAll(reExtraSpace, <span class="string">"$1"</span>)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-Cookie"><a href="#20-Cookie" class="headerlink" title="20.Cookie"></a>20.Cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$.cookie(<span class="string">'cookie'</span>); <span class="comment">// 读取 cookie  </span></span><br><span class="line">$.cookie(<span class="string">'cookie'</span>, <span class="string">'value'</span>); <span class="comment">// 存储 cookie  </span></span><br><span class="line">$.cookie(<span class="string">'cookie'</span>, <span class="string">'value'</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;); <span class="comment">// 存储一个带7天期限的 cookie  </span></span><br><span class="line">$.cookie(<span class="string">'cookie'</span>, <span class="string">''</span>, &#123; <span class="attr">expires</span>: <span class="number">-1</span> &#125;); <span class="comment">// 删除 cookie  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> json = &#123;&#125;,d;  </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>] ==’string’)&#123;  </span><br><span class="line">        json[<span class="built_in">arguments</span>[<span class="number">0</span>]] = <span class="built_in">arguments</span>[<span class="number">1</span>];  </span><br><span class="line">        d = <span class="built_in">arguments</span>[<span class="number">2</span>]  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> <span class="built_in">arguments</span>[<span class="number">0</span>])&#123;  </span><br><span class="line">            json.i = <span class="built_in">arguments</span>[<span class="number">0</span>][i]  </span><br><span class="line">            d = <span class="built_in">arguments</span>[<span class="number">1</span>];  </span><br><span class="line">        &#125;;  </span><br><span class="line">    &#125;;        </span><br><span class="line">    <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Date</span>();  </span><br><span class="line">    t.setDate(t.getDate()+d);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> json)&#123;  </span><br><span class="line">        <span class="built_in">document</span>.cookie = j+’=’+json[j]+<span class="string">';expires=’+t;  </span></span><br><span class="line"><span class="string">    &#125;;  </span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function getCookie(n)&#123;  </span></span><br><span class="line"><span class="string">    var a = document.cookie.split(‘; ‘);  </span></span><br><span class="line"><span class="string">    for(var i=0;i&lt;a.length;i++)&#123;  </span></span><br><span class="line"><span class="string">        var a2 = a[i].split(‘=’);  </span></span><br><span class="line"><span class="string">        if(a2[0]==n)&#123;  </span></span><br><span class="line"><span class="string">            return a2[1];  </span></span><br><span class="line"><span class="string">        &#125;;  </span></span><br><span class="line"><span class="string">    &#125;;  </span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function removeCookie(n)&#123;  </span></span><br><span class="line"><span class="string">    setCookie(n,null,-1);  </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="21-Ajax"><a href="#21-Ajax" class="headerlink" title="21.Ajax"></a>21.Ajax</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jquery</span></span><br><span class="line">$.ajax(&#123;  </span><br><span class="line">    type: <span class="string">'POST'</span>,  </span><br><span class="line">    url: <span class="string">'/my/url'</span>,  </span><br><span class="line">    data: data  </span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">request.open(<span class="string">'POST'</span>, <span class="string">'/my/url'</span>, <span class="literal">true</span>);  </span><br><span class="line">request.send(data);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-获取元素&quot;&gt;&lt;a href=&quot;#1-获取元素&quot; class=&quot;headerlink&quot; title=&quot;1.获取元素&quot;&gt;&lt;/a&gt;1.获取元素&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>小记项目app</title>
    <link href="http://yoursite.com/2017/03/15/pro-note/"/>
    <id>http://yoursite.com/2017/03/15/pro-note/</id>
    <published>2017-03-15T09:22:24.000Z</published>
    <updated>2017-09-19T13:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记账app项目"><a href="#记账app项目" class="headerlink" title="记账app项目"></a>记账app项目</h2><hr><p>完成时间：2017.02 - 2017.02<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p><h2 id="目前安卓版下载地址"><a href="#目前安卓版下载地址" class="headerlink" title="目前安卓版下载地址"></a><a href="https://fir.im/zehf" target="_blank" rel="noopener">目前安卓版下载地址</a></h2><h2 id="贴一些图好了"><a href="#贴一些图好了" class="headerlink" title="贴一些图好了"></a>贴一些图好了</h2><h3 id="首页，本地存储，vue组件："><a href="#首页，本地存储，vue组件：" class="headerlink" title="首页，本地存储，vue组件："></a>首页，本地存储，vue组件：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/1.png" alt="图片"></p><h3 id="用户界面："><a href="#用户界面：" class="headerlink" title="用户界面："></a>用户界面：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/2.png" alt="图片"></p><h3 id="支出记账页面，vue组件实现键盘："><a href="#支出记账页面，vue组件实现键盘：" class="headerlink" title="支出记账页面，vue组件实现键盘："></a>支出记账页面，vue组件实现键盘：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/3.png" alt="图片"></p><h3 id="收入记账页面："><a href="#收入记账页面：" class="headerlink" title="收入记账页面："></a>收入记账页面：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/4.png" alt="图片"></p><h3 id="调用api里的时间选择："><a href="#调用api里的时间选择：" class="headerlink" title="调用api里的时间选择："></a>调用api里的时间选择：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/5.png" alt="图片"></p><h3 id="备注界面，调用键盘："><a href="#备注界面，调用键盘：" class="headerlink" title="备注界面，调用键盘："></a>备注界面，调用键盘：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/6.png" alt="图片"></p><h3 id="按月查看，日历是vue组件："><a href="#按月查看，日历是vue组件：" class="headerlink" title="按月查看，日历是vue组件："></a>按月查看，日历是vue组件：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/7.png" alt="图片"></p><h3 id="饼图，canvas画圆环："><a href="#饼图，canvas画圆环：" class="headerlink" title="饼图，canvas画圆环："></a>饼图，canvas画圆环：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/8.png" alt="图片"></p><h3 id="折线图，调用官方api："><a href="#折线图，调用官方api：" class="headerlink" title="折线图，调用官方api："></a>折线图，调用官方api：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/9.png" alt="图片"></p><h3 id="分类操作页面："><a href="#分类操作页面：" class="headerlink" title="分类操作页面："></a>分类操作页面：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/10.png" alt="图片"></p><h3 id="导出邮箱页面："><a href="#导出邮箱页面：" class="headerlink" title="导出邮箱页面："></a>导出邮箱页面：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/11.png" alt="图片"></p><h3 id="账户安全页面："><a href="#账户安全页面：" class="headerlink" title="账户安全页面："></a>账户安全页面：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/12.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;记账app项目&quot;&gt;&lt;a href=&quot;#记账app项目&quot; class=&quot;headerlink&quot; title=&quot;记账app项目&quot;&gt;&lt;/a&gt;记账app项目&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;完成时间：2017.02 - 2017.02&lt;br&gt;核心技术：apicloud,jquer
      
    
    </summary>
    
    
      <category term="project" scheme="http://yoursite.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>ES6入门</title>
    <link href="http://yoursite.com/2017/03/03/ES6-01/"/>
    <id>http://yoursite.com/2017/03/03/ES6-01/</id>
    <published>2017-03-03T06:56:23.000Z</published>
    <updated>2017-09-19T13:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>总结于：<a href="http://es6.ruanyifeng.com/#docs/" target="_blank" rel="noopener">ECMAScript6入门</a></p><h3 id="1-Babel转码器"><a href="#1-Babel转码器" class="headerlink" title="1 Babel转码器"></a>1 Babel转码器</h3><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转码前</span></span><br><span class="line">input.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转码后</span></span><br><span class="line">input.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="2-let和const"><a href="#2-let和const" class="headerlink" title="2 let和const"></a>2 let和const</h3><h4 id="2-1-let命令"><a href="#2-1-let命令" class="headerlink" title="2.1 let命令"></a>2.1 let命令</h4><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p><p>for循环的计数器，就很合适使用let命令。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="comment">//ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure></p><p>注：(1)let不存在变量提升<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>(2)暂时性死区<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="comment">//不受作用域外部影响</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3)不允许重复声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arg; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> arg; <span class="comment">// 不报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(4)let实际上为 JavaScript 新增了块级作用域。<br>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE 写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块级作用域写法</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> tmp = ...;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-2-const命令"><a href="#2-2-const命令" class="headerlink" title="2.2 const命令"></a>2.2 const命令</h4><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。<br>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: "foo" is read-only</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果真的想将对象冻结，应该使用Object.freeze方法。</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line"><span class="comment">// 常规模式时，下面一行不起作用；</span></span><br><span class="line"><span class="comment">// 严格模式时，该行会报错</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></p><h3 id="3-变量的解构赋值"><a href="#3-变量的解构赋值" class="headerlink" title="3 变量的解构赋值"></a>3 变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><h4 id="3-1-数组的解构赋值"><a href="#3-1-数组的解构赋值" class="headerlink" title="3.1 数组的解构赋值"></a>3.1 数组的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span><br><span class="line">third <span class="comment">// "baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</span><br><span class="line">x <span class="comment">// "a"</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h4 id="3-2-对象的解构赋值"><a href="#3-2-对象的解构赋值" class="headerlink" title="3.2 对象的解构赋值"></a>3.2 对象的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line"><span class="keyword">let</span> &#123;foo&#125; = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;; <span class="comment">// SyntaxError: Duplicate declaration "foo"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。</span></span><br><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line">(&#123;foo&#125; = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;); <span class="comment">// 成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//嵌套</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  p: [</span><br><span class="line">    <span class="string">'Hello'</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">'World'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br></pre></td></tr></table></figure><h4 id="3-3-字符串的解构赋值"><a href="#3-3-字符串的解构赋值" class="headerlink" title="3.3 字符串的解构赋值"></a>3.3 字符串的解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line">a <span class="comment">// "h"</span></span><br><span class="line">b <span class="comment">// "e"</span></span><br><span class="line">c <span class="comment">// "l"</span></span><br><span class="line">d <span class="comment">// "l"</span></span><br><span class="line">e <span class="comment">// "o"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对length属性解构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</span><br><span class="line">len <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="4-字符串的扩展"><a href="#4-字符串的扩展" class="headerlink" title="4 字符串的扩展"></a>4 字符串的扩展</h3><h4 id="4-1-includes-startsWith-endsWith"><a href="#4-1-includes-startsWith-endsWith" class="headerlink" title="4.1 includes(), startsWith(), endsWith()"></a>4.1 includes(), startsWith(), endsWith()</h4><p>includes()：返回布尔值，表示是否找到了参数字符串。<br>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。<br>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这三个方法都支持第二个参数，表示开始搜索的位置。</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</span><br><span class="line"></span><br><span class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true</span></span><br><span class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></span><br><span class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h4 id="4-2-repeat-表示将原字符串重复n次。"><a href="#4-2-repeat-表示将原字符串重复n次。" class="headerlink" title="4.2 repeat() 表示将原字符串重复n次。"></a>4.2 repeat() 表示将原字符串重复n次。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></span><br><span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></span><br><span class="line"><span class="string">'na'</span>.repeat(<span class="number">0</span>) <span class="comment">// ""</span></span><br><span class="line"><span class="string">'na'</span>.repeat(<span class="literal">NaN</span>) <span class="comment">// ""</span></span><br><span class="line"><span class="string">'na'</span>.repeat(<span class="number">-1</span>)<span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure><h4 id="4-3-padStart-，padEnd"><a href="#4-3-padStart-，padEnd" class="headerlink" title="4.3 padStart()，padEnd()"></a>4.3 padStart()，padEnd()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。</span></span><br><span class="line"><span class="string">'1'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000001"</span></span><br><span class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000012"</span></span><br><span class="line"><span class="string">'123456'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000123456"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个用途是提示字符串格式。</span></span><br><span class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-MM-12"</span></span><br><span class="line"><span class="string">'09-12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-09-12"</span></span><br></pre></td></tr></table></figure><h4 id="4-4-模板字符串"><a href="#4-4-模板字符串" class="headerlink" title="4.4 模板字符串"></a>4.4 模板字符串</h4><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。<br>它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串中嵌入变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>,   </span></span><br><span class="line"><span class="string">how are you <span class="subst">$&#123;time&#125;</span>?`</span>   </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="string">`<span class="subst">$&#123;obj.x + obj.y&#125;</span>`</span><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">`foo <span class="subst">$&#123;fn()&#125;</span> bar`</span><span class="comment">// foo Hello World bar</span></span><br></pre></td></tr></table></figure></p><p>模板字符串甚至还能嵌套。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tmpl = <span class="function"><span class="params">addrs</span> =&gt;</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;table&gt;</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;addrs.map(addr =&gt; <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  `</span>).join(<span class="string">''</span>)&#125;</span></span></span><br><span class="line"><span class="string">  &lt;/table&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="comment">//使用方法</span></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">'&lt;Jane&gt;'</span>, <span class="attr">last</span>: <span class="string">'Bond'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">'Lars'</span>, <span class="attr">last</span>: <span class="string">'&lt;Croft&gt;'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(tmpl(data));</span><br><span class="line"><span class="comment">// &lt;table&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class="line"><span class="comment">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class="line"><span class="comment">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// &lt;/table&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'return '</span> + <span class="string">'`Hello $&#123;name&#125;!`'</span>;</span><br><span class="line"><span class="keyword">let</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'name'</span>, str);</span><br><span class="line">func(<span class="string">'Jack'</span>) <span class="comment">// "Hello Jack!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'(name) =&gt; `Hello $&#123;name&#125;!`'</span>;</span><br><span class="line"><span class="keyword">let</span> func = <span class="built_in">eval</span>.call(<span class="literal">null</span>, str);</span><br><span class="line">func(<span class="string">'Jack'</span>) <span class="comment">// "Hello Jack!"</span></span><br></pre></td></tr></table></figure></p><h3 id="5-函数的扩展"><a href="#5-函数的扩展" class="headerlink" title="5.函数的扩展"></a>5.函数的扩展</h3><h4 id="5-1-函数的默认值"><a href="#5-1-函数的默认值" class="headerlink" title="5.1 函数的默认值"></a>5.1 函数的默认值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通常情况下，定义了默认值的参数，应该是函数的尾参数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">'World'</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="string">'Hello'</span>) <span class="comment">// Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的 length 属性：将返回没有指定默认值的参数个数。</span></span><br><span class="line">log.length <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="5-2-rest参数（形式为…变量名）"><a href="#5-2-rest参数（形式为…变量名）" class="headerlink" title="5.2 rest参数（形式为…变量名）"></a>5.2 rest参数（形式为…变量名）</h4><p>函数的length属性，不包括 rest 参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><h4 id="5-3-箭头函数"><a href="#5-3-箭头函数" class="headerlink" title="5.3 箭头函数"></a>5.3 箭头函数</h4><p>箭头左边是参数，右边是返回值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>箭头函数有几个使用注意点。</p><p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p><p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p><p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p><p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//嵌套的箭头函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">into</span>: <span class="function"><span class="keyword">function</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">after</span>: <span class="function"><span class="keyword">function</span> (<span class="params">afterValue</span>) </span>&#123;</span><br><span class="line">      array.splice(array.indexOf(afterValue) + <span class="number">1</span>, <span class="number">0</span>, value);</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">  &#125;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">insert(<span class="number">2</span>).into([<span class="number">1</span>, <span class="number">3</span>]).after(<span class="number">1</span>); <span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> insert = <span class="function">(<span class="params">value</span>) =&gt;</span> (&#123;<span class="attr">into</span>: <span class="function">(<span class="params">array</span>) =&gt;</span> (&#123;<span class="attr">after</span>: <span class="function">(<span class="params">afterValue</span>) =&gt;</span> &#123;</span><br><span class="line">  array.splice(array.indexOf(afterValue) + <span class="number">1</span>, <span class="number">0</span>, value);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;&#125;)&#125;);</span><br><span class="line"></span><br><span class="line">insert(<span class="number">2</span>).into([<span class="number">1</span>, <span class="number">3</span>]).after(<span class="number">1</span>); <span class="comment">//[1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="5-4-尾调用优化"><a href="#5-4-尾调用优化" class="headerlink" title="5.4 尾调用优化"></a>5.4 尾调用优化</h4><p>尾调用指某个函数的最后一步是调用另一个函数<br>“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。<br>如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尾递归<br>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p><p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。<br>但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</p><h3 id="6-数组的扩展"><a href="#6-数组的扩展" class="headerlink" title="6.数组的扩展"></a>6.数组的扩展</h3><h4 id="6-1-扩展运算符（…）"><a href="#6-1-扩展运算符（…）" class="headerlink" title="6.1 扩展运算符（…）"></a>6.1 扩展运算符（…）</h4><p>该运算符主要用于函数调用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f.apply(<span class="literal">null</span>, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">f(...args);</span><br></pre></td></tr></table></figure></p><p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5的 写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.push(...arr2);</span><br></pre></td></tr></table></figure></p><p>扩展运算符的应用：</p><p><1>合并数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].concat(more)</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的合并数组</span></span><br><span class="line">arr1.concat(arr2, arr3);</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3]</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure></1></p><p><2>与解构赋值结合<br>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">first <span class="comment">// 1</span></span><br><span class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [];</span><br><span class="line">first <span class="comment">// undefined</span></span><br><span class="line">rest  <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</span><br><span class="line">first  <span class="comment">// "foo"</span></span><br><span class="line">rest   <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [...butLast, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></2></p><p><3>字符串<br>扩展运算符还可以将字符串转为真正的数组。<br>能够正确识别32位的Unicode字符。<br>正确返回字符串长度的函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="string">'hello'</span>]</span><br><span class="line"><span class="comment">// [ "h", "e", "l", "l", "o" ]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">length</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...str].length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">length(<span class="string">'x\uD83D\uDE80y'</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></3></p><h4 id="6-2-Array-from"><a href="#6-2-Array-from" class="headerlink" title="6.2 Array.from()"></a>6.2 Array.from()</h4><p>Array.from方法用于将两类对象转为真正的数组：<br>类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NodeList对象</span></span><br><span class="line"><span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</span><br><span class="line"><span class="built_in">Array</span>.from(ps).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>扩展运算符（…）也可以将某些数据结构转为数组。<br>区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p><p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike, x =&gt; x * x);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</span><br><span class="line"><span class="comment">// [1, 4, 9]</span></span><br></pre></td></tr></table></figure></p><p>下面的例子是取出一组DOM节点的文本内容。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> spans = <span class="built_in">document</span>.querySelectorAll(<span class="string">'span.name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// map()</span></span><br><span class="line"><span class="keyword">let</span> names1 = <span class="built_in">Array</span>.prototype.map.call(spans, s =&gt; s.textContent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.from()</span></span><br><span class="line"><span class="keyword">let</span> names2 = <span class="built_in">Array</span>.from(spans, s =&gt; s.textContent)</span><br></pre></td></tr></table></figure></p><p>下面的例子将数组中布尔值为false的成员转为0。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, , <span class="number">2</span>, , <span class="number">3</span>], (n) =&gt; n || <span class="number">0</span>)</span><br><span class="line"><span class="comment">// [1, 0, 2, 0, 3]</span></span><br></pre></td></tr></table></figure></p><h4 id="6-3-Array-of"><a href="#6-3-Array-of" class="headerlink" title="6.3 Array.of()"></a>6.3 Array.of()</h4><p>Array.of方法用于将一组值，转换为数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>).length <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><h4 id="6-4-数组实例的-find-和-findIndex"><a href="#6-4-数组实例的-find-和-findIndex" class="headerlink" title="6.4 数组实例的 find() 和 findIndex()"></a>6.4 数组实例的 find() 和 findIndex()</h4><p>数组实例的find方法，用于找出第一个符合条件的数组成员。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">// -5</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><h4 id="6-5-数组实例的fill"><a href="#6-5-数组实例的fill" class="headerlink" title="6.5 数组实例的fill()"></a>6.5 数组实例的fill()</h4><p>fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</span><br><span class="line"><span class="comment">// [7, 7, 7]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// ['a', 7, 'c']</span></span><br></pre></td></tr></table></figure></p><h4 id="6-6-数组实例的-entries-，keys-和-values"><a href="#6-6-数组实例的-entries-，keys-和-values" class="headerlink" title="6.6 数组实例的 entries()，keys() 和 values()"></a>6.6 数组实例的 entries()，keys() 和 values()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 'a'</span></span><br><span class="line"><span class="comment">// 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 "a"</span></span><br><span class="line"><span class="comment">// 1 "b"</span></span><br></pre></td></tr></table></figure><h3 id="7-对象的扩展"><a href="#7-对象的扩展" class="headerlink" title="7.对象的扩展"></a>7.对象的扩展</h3><h4 id="7-1-Object-is"><a href="#7-1-Object-is" class="headerlink" title="7.1 Object.is()"></a>7.1 Object.is()</h4><p>与严格比较运算符（===）的行为基本一致。<br>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h4 id="7-2-Object-assign"><a href="#7-2-Object-assign" class="headerlink" title="7.2 Object.assign()"></a>7.2 Object.assign()</h4><p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。<br>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure></p><p>Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。<br>Object.assign方法实行的是浅拷贝，而不是深拷贝。</p><p>Object.assign方法有很多用处。</p><p><1>为对象添加属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;x, y&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></1></p><p><2>为对象添加方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class="line">  someMethod(arg1, arg2) &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;,</span><br><span class="line">  anotherMethod() &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于下面的写法</span></span><br><span class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br><span class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></2></p><p><3>克隆对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></3></p><p><4>合并多个对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge =</span><br><span class="line">  (target, ...sources) =&gt; <span class="built_in">Object</span>.assign(target, ...sources);</span><br></pre></td></tr></table></figure></4></p><p><5>为属性指定默认值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DEFAULTS = &#123;</span><br><span class="line">  logLevel: <span class="number">0</span>,</span><br><span class="line">  outputFormat: <span class="string">'html'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processContent</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</span><br><span class="line">  <span class="built_in">console</span>.log(options);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></5></p><h4 id="7-3-属性的可枚举性"><a href="#7-3-属性的可枚举性" class="headerlink" title="7.3 属性的可枚举性"></a>7.3 属性的可枚举性</h4><p>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<br>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    value: 123,</span></span><br><span class="line"><span class="comment">//    writable: true,</span></span><br><span class="line"><span class="comment">//    enumerable: true, 可枚举性</span></span><br><span class="line"><span class="comment">//    configurable: true</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure></p><p>ES5 有三个操作会忽略enumerable为false的属性。<br>  for…in循环：只遍历对象自身的和继承的可枚举的属性<br>  Object.keys()：返回对象自身的所有可枚举的属性的键名<br>  JSON.stringify()：只串行化对象自身的可枚举的属性<br>ES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。<br>尽量不要用for…in循环，而用Object.keys()代替。</p><h4 id="7-4-属性的遍历"><a href="#7-4-属性的遍历" class="headerlink" title="7.4 属性的遍历"></a>7.4 属性的遍历</h4><p>ES6 一共有5种方法可以遍历对象的属性。</p><p><1>for…in</1></p><p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p><p><2>Object.keys(obj)</2></p><p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。</p><p><3>Object.getOwnPropertyNames(obj)</3></p><p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。</p><p><4>Object.getOwnPropertySymbols(obj)</4></p><p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。</p><p><5>Reflect.ownKeys(obj)</5></p><p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。</p><h4 id="7-5-proto属性"><a href="#7-5-proto属性" class="headerlink" title="7.5 proto属性"></a>7.5 <strong>proto</strong>属性</h4><p>无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的<br>Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proto = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</span><br><span class="line"></span><br><span class="line">proto.y = <span class="number">20</span>;</span><br><span class="line">proto.z = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">obj.x <span class="comment">// 10</span></span><br><span class="line">obj.y <span class="comment">// 20</span></span><br><span class="line">obj.z <span class="comment">// 40</span></span><br></pre></td></tr></table></figure></p><h4 id="7-6-Object-keys-，Object-values-，Object-entries"><a href="#7-6-Object-keys-，Object-values-，Object-entries" class="headerlink" title="7.6 Object.keys()，Object.values()，Object.entries()"></a>7.6 Object.keys()，Object.values()，Object.entries()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="comment">// ["foo", "baz"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.values(obj)</span><br><span class="line"><span class="comment">// ["bar", 42]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.entries(obj)</span><br><span class="line"><span class="comment">// [ ["foo", "bar"], ["baz", 42] ]</span></span><br></pre></td></tr></table></figure><h4 id="7-7-Null-传导运算符"><a href="#7-7-Null-传导运算符" class="headerlink" title="7.7 Null 传导运算符"></a>7.7 Null 传导运算符</h4><p>如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。<br>比如，要读取message.body.user.firstName，安全的写法是写成下面这样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = (message</span><br><span class="line">  &amp;&amp; message.body</span><br><span class="line">  &amp;&amp; message.body.user</span><br><span class="line">  &amp;&amp; message.body.user.firstName) || <span class="string">'default'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”</span></span><br><span class="line"><span class="keyword">const</span> firstName = message?.body?.user?.firstName || <span class="string">'default'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="8-Symbol"><a href="#8-Symbol" class="headerlink" title="8.Symbol"></a>8.Symbol</h3><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</span><br><span class="line"></span><br><span class="line">s1 <span class="comment">// Symbol(foo)</span></span><br><span class="line">s2 <span class="comment">// Symbol(bar)</span></span><br><span class="line"></span><br><span class="line">s1.toString() <span class="comment">// "Symbol(foo)"</span></span><br><span class="line">s2.toString() <span class="comment">// "Symbol(bar)"</span></span><br></pre></td></tr></table></figure></p><p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><p>Symbol.for():重新使用同一个Symbol值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">s1 === s2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。</p><p>Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s1) <span class="comment">// "foo"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><h3 id="9-Set和Map"><a href="#9-Set和Map" class="headerlink" title="9.Set和Map"></a>9.Set和Map</h3><h4 id="9-1-Set类似于数组，但是成员的值都是唯一的，没有重复的值。"><a href="#9-1-Set类似于数组，但是成员的值都是唯一的，没有重复的值。" class="headerlink" title="9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。"></a>9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...set]</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">items.size <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除数组的重复成员</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> unique = [...new <span class="built_in">Set</span>(arr)];<span class="comment">// [3, 5, 2]</span></span><br></pre></td></tr></table></figure><p>Set的操作方法：<br>  add(value)：添加某个值，返回Set结构本身。<br>  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>  has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>  clear()：清除所有成员，没有返回值。</p><p>Set的遍历方法：<br>  keys()：返回键名的遍历器<br>  values()：返回键值的遍历器<br>  entries()：返回键值对的遍历器<br>  forEach()：使用回调函数遍历每个成员</p><h4 id="9-2-WeakSet："><a href="#9-2-WeakSet：" class="headerlink" title="9.2 WeakSet："></a>9.2 WeakSet：</h4><p>  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。<br>  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br>  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p><h4 id="9-3-Map"><a href="#9-3-Map" class="headerlink" title="9.3 Map"></a>9.3 Map</h4><p>Map类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">p</span>: <span class="string">'Hello World'</span>&#125;;</span><br><span class="line"></span><br><span class="line">m.set(o, <span class="string">'content'</span>)</span><br><span class="line">m.get(o) <span class="comment">// "content"</span></span><br><span class="line"></span><br><span class="line">m.has(o) <span class="comment">// true</span></span><br><span class="line">m.delete(o) <span class="comment">// true</span></span><br><span class="line">m.has(o) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h4 id="9-4-WeakMap"><a href="#9-4-WeakMap" class="headerlink" title="9.4 WeakMap"></a>9.4 WeakMap</h4><p>  WeakMap与Map的区别有两点。<br>  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。</p><h3 id="10-Promise"><a href="#10-Promise" class="headerlink" title="10.Promise"></a>10.Promise</h3><h4 id="10-1-Promise对象有以下两个特点："><a href="#10-1-Promise对象有以下两个特点：" class="headerlink" title="10.1 Promise对象有以下两个特点："></a>10.1 Promise对象有以下两个特点：</h4><p><1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。</1></p><p><2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></2></p><h4 id="10-2-Promise-all"><a href="#10-2-Promise-all" class="headerlink" title="10.2 Promise.all()"></a>10.2 Promise.all()</h4><p>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个Promise对象的数组</span></span><br><span class="line"><span class="keyword">var</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getJSON(<span class="string">'/post/'</span> + id + <span class="string">".json"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span> (<span class="params">posts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Promise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。</p><h4 id="10-3-Promise-resolve"><a href="#10-3-Promise-resolve" class="headerlink" title="10.3 Promise.resolve"></a>10.3 Promise.resolve</h4><p>作用是将现有对象转化为Promise对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'foo'</span>))</span><br></pre></td></tr></table></figure></p><h4 id="10-4-应用于加载图片"><a href="#10-4-应用于加载图片" class="headerlink" title="10.4 应用于加载图片"></a>10.4 应用于加载图片</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadImage = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">    image.onload  = resolve;</span><br><span class="line">    image.onerror = reject;</span><br><span class="line">    image.src = path;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="11-Iterator"><a href="#11-Iterator" class="headerlink" title="11.Iterator"></a>11.Iterator</h3><h4 id="11-1-Iterator-的作用有三个："><a href="#11-1-Iterator-的作用有三个：" class="headerlink" title="11.1 Iterator 的作用有三个："></a>11.1 Iterator 的作用有三个：</h4><p>一是为各种数据结构，提供一个统一的、简便的访问接口；<br>二是使得数据结构的成员能够按某种次序排列；<br>三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</p><p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组的Symbol.iterator属性</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'a', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'b', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'c', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></p><p>原生具备 Iterator 接口的数据结构如下。<br>    Array<br>    Map<br>    Set<br>    String<br>    TypedArray<br>    函数的 arguments 对象</p><h4 id="11-2-for…of循环"><a href="#11-2-for…of循环" class="headerlink" title="11.2 for…of循环"></a>11.2 for…of循环</h4><p>一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// red green blue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空对象obj部署了数组arr的Symbol.iterator属性</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj[<span class="built_in">Symbol</span>.iterator] = arr[<span class="built_in">Symbol</span>.iterator].bind(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// red green blue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for…in循环读取键名，for…of循环读取键值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 0 1 2 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// a b c d</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>计算生成的数据结构 entries(),keys(),values()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure></p><p>与其他遍历语法的比较<br>for:最原始的写法，较为麻烦<br>forEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。<br>for…in:主要用于遍历对象，不适合遍历数组，for…in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。<br>    某些情况下，for…in循环会以任意顺序遍历键名。</p><h3 id="12-Generator"><a href="#12-Generator" class="headerlink" title="12.Generator"></a>12.Generator</h3><h4 id="12-1-Generator-函数是一个状态机，封装了多个内部状态。"><a href="#12-1-Generator-函数是一个状态机，封装了多个内部状态。" class="headerlink" title="12.1 Generator 函数是一个状态机，封装了多个内部状态。"></a>12.1 Generator 函数是一个状态机，封装了多个内部状态。</h4><p>形式上，Generator 函数是一个普通函数，但是有两个特征。<br>一是，function关键字与函数名之间有一个星号；<br>二是，函数体内部使用yield表达式，定义不同的内部状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该函数有三个状态：hello，world 和 return 语句（结束执行）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'world'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象</span></span><br><span class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</span><br><span class="line"></span><br><span class="line">hw.next()</span><br><span class="line"><span class="comment">// &#123; value: 'hello', done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next()</span><br><span class="line"><span class="comment">// &#123; value: 'world', done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next()</span><br><span class="line"><span class="comment">// &#123; value: 'ending', done: true &#125;</span></span><br><span class="line"></span><br><span class="line">hw.next()</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="12-2-与-Iterator-接口的关系"><a href="#12-2-与-Iterator-接口的关系" class="headerlink" title="12.2 与 Iterator 接口的关系"></a>12.2 与 Iterator 接口的关系</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myIterable = &#123;&#125;;</span><br><span class="line">myIterable[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...myIterable] <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="12-3-Generator-prototype-return"><a href="#12-3-Generator-prototype-return" class="headerlink" title="12.3 Generator.prototype.return()"></a>12.3 Generator.prototype.return()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"></span><br><span class="line">g.next()        <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.return(<span class="string">'foo'</span>) <span class="comment">// &#123; value: "foo", done: true &#125;</span></span><br><span class="line">g.next()        <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h4 id="12-4-yield-表达式"><a href="#12-4-yield-表达式" class="headerlink" title="12.4 yield* 表达式"></a>12.4 yield* 表达式</h4><p>用来在一个 Generator 函数里面执行另一个 Generator 函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* foo();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> foo()) &#123;</span><br><span class="line">    <span class="keyword">yield</span> v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> bar())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "x"</span></span><br><span class="line"><span class="comment">// "a"</span></span><br><span class="line"><span class="comment">// "b"</span></span><br><span class="line"><span class="comment">// "y"</span></span><br></pre></td></tr></table></figure></p><h4 id="12-5-应用"><a href="#12-5-应用" class="headerlink" title="12.5 应用"></a>12.5 应用</h4><p>通过 Generator 函数部署 Ajax 操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> request(<span class="string">"http://some.url"</span>);</span><br><span class="line">  <span class="keyword">var</span> resp = <span class="built_in">JSON</span>.parse(result);</span><br><span class="line">    <span class="built_in">console</span>.log(resp.value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  makeAjaxCall(url, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    it.next(response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = main();</span><br><span class="line">it.next();</span><br></pre></td></tr></table></figure></p><p>控制流管理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多步操作</span></span><br><span class="line">step1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</span><br><span class="line">  step2(value1, <span class="function"><span class="keyword">function</span>(<span class="params">value2</span>) </span>&#123;</span><br><span class="line">    step3(value2, <span class="function"><span class="keyword">function</span>(<span class="params">value3</span>) </span>&#123;</span><br><span class="line">      step4(value3, <span class="function"><span class="keyword">function</span>(<span class="params">value4</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Do something with value4</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//采用 Promise 改写上面的代码。</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(step1)</span><br><span class="line">  .then(step2)</span><br><span class="line">  .then(step3)</span><br><span class="line">  .then(step4)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">value4</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with value4</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Handle any error from step1 through step4</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .done();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Generator 函数可以进一步改善代码运行流程。（同步操作）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">longRunningTask</span>(<span class="params">value1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> value2 = <span class="keyword">yield</span> step1(value1);</span><br><span class="line">    <span class="keyword">var</span> value3 = <span class="keyword">yield</span> step2(value2);</span><br><span class="line">    <span class="keyword">var</span> value4 = <span class="keyword">yield</span> step3(value3);</span><br><span class="line">    <span class="keyword">var</span> value5 = <span class="keyword">yield</span> step4(value4);</span><br><span class="line">    <span class="comment">// Do something with value4</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// Handle any error from step1 through step4</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="13-async函数"><a href="#13-async函数" class="headerlink" title="13.async函数"></a>13.async函数</h3><p>async函数是Generator 函数的语法糖<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fileName, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) reject(error);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gen = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> f1 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/fstab'</span>);</span><br><span class="line">  <span class="keyword">var</span> f2 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/shells'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写成async函数，就是下面这样。</span></span><br><span class="line"><span class="keyword">var</span> asyncReadFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> f1 = <span class="keyword">await</span> readFile(<span class="string">'/etc/fstab'</span>);</span><br><span class="line">  <span class="keyword">var</span> f2 = <span class="keyword">await</span> readFile(<span class="string">'/etc/shells'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>async函数对 Generator 函数的改进，体现在以下四点:</p><p><1>内置执行器<br>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。<br>var result = asyncReadFile();</1></p><p><2>更好的语义</2></p><p><3>更广的适用性</3></p><p><4>返回值是Promise</4></p><p>基本用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStockPriceByName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> symbol = <span class="keyword">await</span> getStockSymbol(name);</span><br><span class="line">  <span class="keyword">var</span> stockPrice = <span class="keyword">await</span> getStockPrice(symbol);</span><br><span class="line">  <span class="keyword">return</span> stockPrice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStockPriceByName(<span class="string">'goog'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>实例：按顺序完成异步操作：</p><p><1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logInOrder</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 远程读取所有URL</span></span><br><span class="line">  <span class="keyword">const</span> textPromises = urls.map(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(url).then(<span class="function"><span class="params">response</span> =&gt;</span> response.text());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 按次序输出</span></span><br><span class="line">  textPromises.reduce(<span class="function">(<span class="params">chain, textPromise</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> chain.then(<span class="function"><span class="params">()</span> =&gt;</span> textPromise)</span><br><span class="line">      .then(<span class="function"><span class="params">text</span> =&gt;</span> <span class="built_in">console</span>.log(text));</span><br><span class="line">  &#125;, <span class="built_in">Promise</span>.resolve());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></1></p><p><2>async 函数实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logInOrder</span>(<span class="params">urls</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 并发读取远程URL</span></span><br><span class="line">  <span class="keyword">const</span> textPromises = urls.map(<span class="keyword">async</span> url =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">return</span> response.text();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 按次序输出</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> textPromise <span class="keyword">of</span> textPromises) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> textPromise);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></2></p><h3 id="14-Class"><a href="#14-Class" class="headerlink" title="14.Class"></a>14.Class</h3><h4 id="14-1-简介"><a href="#14-1-简介" class="headerlink" title="14.1 简介"></a>14.1 简介</h4><p>class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成实例对象的传统方法是通过构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//类的所有方法都定义在类的prototype属性上面</span></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="14-2-Class-的静态方法"><a href="#14-2-Class-的静态方法" class="headerlink" title="14.2 Class 的静态方法"></a>14.2 Class 的静态方法</h4><p>加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> classMethod() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.classMethod() <span class="comment">// 'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line">foo.classMethod()</span><br><span class="line"><span class="comment">// TypeError: foo.classMethod is not a function</span></span><br></pre></td></tr></table></figure></p><p>父类的静态方法，可以被子类继承。</p><h4 id="14-3-Class的继承"><a href="#14-3-Class的继承" class="headerlink" title="14.3 Class的继承"></a>14.3 Class的继承</h4><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</span><br><span class="line">    <span class="keyword">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 调用父类的toString()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><1>子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。</1></p><p><2>子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B.__proto__ === A <span class="comment">// true</span></span><br><span class="line">B.prototype.__proto__ === A.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure></2></p><h3 id="15-Decorator"><a href="#15-Decorator" class="headerlink" title="15.Decorator"></a>15.Decorator</h3><p>修饰器（Decorator）是一个函数，用来修改类的行为。<br>修饰器本质就是编译时执行的函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@testable</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestableClass</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target.isTestable = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyTestableClass.isTestable <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">isTestable</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    target.isTestable = isTestable;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@testable(<span class="literal">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestableClass</span> </span>&#123;&#125;</span><br><span class="line">MyTestableClass.isTestable <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">@testable(<span class="literal">false</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</span><br><span class="line">MyClass.isTestable <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总结于：&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ECMAScript6入门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-Babel转码器&quot;&gt;&lt;a href=&quot;#1-Babel
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
