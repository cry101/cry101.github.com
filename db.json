{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/again/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/again/source/css/app.scss","path":"css/app.scss","modified":0,"renderable":1},{"_id":"themes/again/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/again/source/images/alipay.svg","path":"images/alipay.svg","modified":0,"renderable":1},{"_id":"themes/again/source/images/alipayImage.jpg","path":"images/alipayImage.jpg","modified":0,"renderable":1},{"_id":"themes/again/source/images/banner-small.png","path":"images/banner-small.png","modified":0,"renderable":1},{"_id":"themes/again/source/images/like.svg","path":"images/like.svg","modified":0,"renderable":1},{"_id":"themes/again/source/images/wechatImage.jpg","path":"images/wechatImage.jpg","modified":0,"renderable":1},{"_id":"themes/again/source/images/wechat.svg","path":"images/wechat.svg","modified":0,"renderable":1},{"_id":"themes/again/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/again/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/again/source/images/banner-large.png","path":"images/banner-large.png","modified":0,"renderable":1},{"_id":"themes/again/source/js/lion/OrbitControls.js","path":"js/lion/OrbitControls.js","modified":0,"renderable":1},{"_id":"themes/again/source/js/lion/index.js","path":"js/lion/index.js","modified":0,"renderable":1},{"_id":"themes/again/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/again/source/js/lion/three.min.js","path":"js/lion/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/again/README.md","hash":"1f18f0ad1d756064190934c4b86bcd33de371fc9","modified":1484124980841},{"_id":"themes/again/_config.yml","hash":"6a71e923b2cb03600cab6a6792ad1bf626775e57","modified":1484381319185},{"_id":"source/_posts/JSON.md","hash":"1df8cefd8f571e7ea3d387cd11bf9f272db35b0c","modified":1484360468527},{"_id":"source/_posts/ES6-01.md","hash":"feea5213f7e4da785fb4c968617ef602a43f6b0d","modified":1499999847906},{"_id":"source/_posts/ajax.md","hash":"5aef0aa5654cb3431e37df65ee2932d56736de08","modified":1487238610703},{"_id":"source/_posts/css-name.md","hash":"0a2f9d77f81ad7368184c3beef2830b57306c5a4","modified":1484560128936},{"_id":"source/_posts/css3.md","hash":"08c3f760a3d389362cbd6880ec535ac778a3bd5a","modified":1487311000069},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1484186922720},{"_id":"source/_posts/ionic.md","hash":"f949caabfde27e7d97f9eaba0bab88bf75d1a268","modified":1497578774236},{"_id":"source/_posts/pro-comic.md","hash":"016a400a1840678e2747a707e5fd7840a5b8f68b","modified":1487067834576},{"_id":"source/_posts/pro-note.md","hash":"299e2f869af635f743d6810e1f7b7b069557b76a","modified":1489572481557},{"_id":"source/_posts/pro-novel.md","hash":"f28d5f8193c304e72fc944aa7b26abd949b6d9d2","modified":1487126443535},{"_id":"source/_posts/time.md","hash":"c4c498b5373d00397cd62c6721b25e79c65fc357","modified":1484560813820},{"_id":"source/_posts/vue-calendar.md","hash":"67ba2eac5f6f03ee5ae33c45831187d8ad4527a1","modified":1487149492142},{"_id":"source/_posts/vue-keybord.md","hash":"4a71b863115358dc3f4bb5e6587606d749f7c815","modified":1487131074440},{"_id":"source/about/index.md","hash":"49ef418e125fd87ebbe2ea105a32142f3d1d0904","modified":1489569960113},{"_id":"themes/again/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1484186922731},{"_id":"themes/again/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1484186922731},{"_id":"themes/again/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1484186922731},{"_id":"themes/again/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1484186922731},{"_id":"themes/again/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1484186922733},{"_id":"themes/again/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1484186922733},{"_id":"themes/again/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1484186922733},{"_id":"themes/again/layout/index.ejs","hash":"c21e8be054477a0e2d7f6f4461d707df047b863f","modified":1494918649923},{"_id":"themes/again/layout/archive.ejs","hash":"eede5af91dd42b43b52c8c731b6d0c2ccd650c7f","modified":1484124980918},{"_id":"themes/again/layout/layout.ejs","hash":"bdc8b3401957fd6cc5f755a82ac37a3636793197","modified":1484124980925},{"_id":"themes/again/layout/page.ejs","hash":"db7b6c2f588f0718be4df6d2060a11451f6697df","modified":1484363439439},{"_id":"themes/again/source/favicon.ico","hash":"f84b82fad39e908ee2e907ae734af8302d323fa1","modified":1484300485828},{"_id":"themes/again/layout/post.ejs","hash":"1fdab0b6bdfc8ef27cac9865105abaa35ca2d608","modified":1484359391214},{"_id":"themes/again/layout/_partial/archive.ejs","hash":"9b487c55e1e116d6af69fd4075ed223acb379d16","modified":1484124980849},{"_id":"themes/again/layout/_partial/article.ejs","hash":"9a701e3835a6197d48f6751f65296e8a182f0047","modified":1484380788158},{"_id":"themes/again/layout/_partial/donate.ejs","hash":"7ced9fb1c900c09449ae6744dc83d206d2d071b1","modified":1484381327232},{"_id":"themes/again/layout/_partial/head.ejs","hash":"9c496889ce76afda5360fbb491d370e633c75241","modified":1484124980870},{"_id":"themes/again/layout/_partial/footer.ejs","hash":"02d6bf11925cebbd93d049f7d31a6a1abeeb3ae5","modified":1484293616738},{"_id":"themes/again/layout/_partial/header.ejs","hash":"27b8693e2bf1dda20f14429e8e5f2b2eb41420ff","modified":1484124980875},{"_id":"themes/again/layout/_partial/index.ejs","hash":"cb1547c15bba855291c5e79c36537d5c89453389","modified":1487239611597},{"_id":"themes/again/layout/_partial/lion.ejs","hash":"8c9476ba7d744329968d0704922f450841e370f4","modified":1494918701698},{"_id":"themes/again/layout/_partial/nav.ejs","hash":"e21ac2de96b04847dec240146cc378ca82949868","modified":1484124980885},{"_id":"themes/again/layout/_widget/back-to-home.ejs","hash":"fce1d7e5d0e756bfb9f85eb8750ea4c501346834","modified":1484124980891},{"_id":"themes/again/layout/_widget/disqus.ejs","hash":"d0dcef6da1b180ff0956fd05ab7bdfdfa4bc9a26","modified":1484124980898},{"_id":"themes/again/layout/_widget/duoshuo.ejs","hash":"02a3585542ef6efe7617d255324ea4bf6949a1cd","modified":1484359434113},{"_id":"themes/again/layout/_widget/paginator.ejs","hash":"00cb3b763b0a16275b31b3c529940e54911438c5","modified":1484124980901},{"_id":"themes/again/layout/_widget/sharing.ejs","hash":"2e878a4f47481111e50ae36c1edd433801a393e8","modified":1484380826707},{"_id":"themes/again/layout/_widget/twitter.ejs","hash":"b5b550e641e6fa19c2c9aafc297fae09e131aa82","modified":1484124980913},{"_id":"themes/again/source/css/_base.scss","hash":"39b306334454160f81d346e8c5a61f9ea38eccd4","modified":1484124980939},{"_id":"themes/again/source/css/_font.scss","hash":"e6983e9d3519811f5402f78447f32f6d1dd589e0","modified":1487301177691},{"_id":"themes/again/source/css/_variables.scss","hash":"c4b667d397a324a5acc02ef5fc5886ad3d76496f","modified":1486711004848},{"_id":"themes/again/source/css/app.scss","hash":"f0966d1a5fe93bc566b83e60882db3cba0e534e6","modified":1487301137444},{"_id":"themes/again/source/css/style.css","hash":"341bf6ca0457f53b9c916d4442ec4f32f448954e","modified":1494918252221},{"_id":"themes/again/source/images/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1475309794000},{"_id":"themes/again/source/images/alipayImage.jpg","hash":"236d8f8c2de9aba23fc740132a26a09348218e41","modified":1484381451216},{"_id":"themes/again/source/images/banner-small.png","hash":"4b87b439bbf9507f7bed53d7c2c1a22e07a064e8","modified":1484124981006},{"_id":"themes/again/source/images/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1475309794000},{"_id":"themes/again/source/images/wechatImage.jpg","hash":"2a8d16e81913a8580d8fcc36684d9fbb98c47afc","modified":1484381550253},{"_id":"themes/again/source/images/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1475309794000},{"_id":"themes/again/source/js/app.js","hash":"c67676c1d631261682dc34ca572c3f68d47e2bd3","modified":1484124981011},{"_id":"themes/again/source/js/jquery.min.js","hash":"3fe9d8acaaec99fc8a3f0e90ed66d5057da2de4e","modified":1469094601163},{"_id":"themes/again/source/css/_helper/grid.scss","hash":"7d7a8197de56b03acd4cf92d6c75a8973508f7e6","modified":1484124980945},{"_id":"themes/again/source/css/_helper/index.scss","hash":"d0d8d144f7323fee4924583ec0f0104abfffb752","modified":1484124980948},{"_id":"themes/again/source/css/_partial/archive.scss","hash":"30b4d07563a2c65e8762449c04defc6d1b0b82df","modified":1484124980952},{"_id":"themes/again/source/css/_partial/article.scss","hash":"120a6821df911403f6537bc6905dd0869e55a08a","modified":1487303293108},{"_id":"themes/again/source/css/_partial/footer.scss","hash":"5e6af6777b05040924494671fab7a1b4b48144a7","modified":1484124980961},{"_id":"themes/again/source/css/_partial/header.scss","hash":"c60275ca6738c9591618bd44edf77309037a513c","modified":1484124980965},{"_id":"themes/again/source/css/_partial/index.scss","hash":"2437fd2b77aaa34465f47936132b0207ac1faaa3","modified":1487239662515},{"_id":"themes/again/source/css/_partial/nav.scss","hash":"6d81502770628887d9a4796b3ba32296faa9c9fb","modified":1494918876100},{"_id":"themes/again/source/css/_partial/page.scss","hash":"5d120ccf23c50649002ffc456de9b19df63161e2","modified":1487298492283},{"_id":"themes/again/source/css/_partial/partials.scss","hash":"9f4d33c8bb1da9310f719bed613a2a876a203bb3","modified":1484124980980},{"_id":"themes/again/source/css/_widget/back-to-home.scss","hash":"93e787f0886a6e2cced153e2b7f967f4fcd4973b","modified":1484124980987},{"_id":"themes/again/source/css/_widget/index.scss","hash":"4bb796898dc77b75cd8aeefe42d4c6fe2ff64696","modified":1484124980993},{"_id":"themes/again/source/css/_widget/highlight.scss","hash":"15f8e3da4587e60f388dda29ff0d462457750bd6","modified":1488525451279},{"_id":"themes/again/source/css/_widget/sharing.scss","hash":"e9c95d23c8eb6c250a77b9b3fa6d1eeb6997ec80","modified":1484124980997},{"_id":"themes/again/source/images/banner-large.png","hash":"3e91a135ca4c446301995aedc998784e035d485a","modified":1484124981004},{"_id":"themes/again/source/js/lion/OrbitControls.js","hash":"77287bfdd626f9de5fd640f7d638c28d878ab756","modified":1483979815660},{"_id":"themes/again/source/js/lion/index.js","hash":"3ec1e6bba7853b8ae30e0556424312e67dec57fa","modified":1494929098816},{"_id":"themes/again/source/images/avatar.png","hash":"6c143e811bebd7e506f6990f6847abf481c1abdb","modified":1484300216433},{"_id":"themes/again/source/js/lion/three.min.js","hash":"82bd3d89db3fb2b5eca8cf12cd8358fa7c2fd4cc","modified":1494918301253}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-01-13T07:48:56.000Z","_content":"# about me \n------\n\n陈若尧~前端开发工程师~2015年毕业工作至今\n\n* 也许你关心年龄，92年\n* 也许你关心学历，本科\n* 也许你关心院校，福建农林大学\n* 也许你一见钟情要联系我呢？919907366@qq.com\n\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢往下看\n\n------\n### what can I coding ?\nFamiliar with:\n* Html5 , Css3 , Javascript , JQuery/Zepto , Ajax;\n* Vue , Vuex , Vue-router ;\n* Bootstrap , Swiper , Leafletjs(javascript library maps) , ArtTemplate/EJS(js template);\n* Appcan , Apicloud , Html5 Hybrid App;\n* Responsive layout , Module/Component Development;\n* Webpack , Npm , Git , Svn;\n\nknow little:\n* ES6;\n* Canvas;\n* React , AngularJS;\n* Sass , Less;\n* Grunt , Yeoman , Bower;\n\n------\n### What have I done ?\n#### 0.SEO网站开发 2015.06 - 2015.09\n* 切切图，做做模板，搭搭phpcms，网址似乎已经废弃。\n\n#### 1.app项目  2015.10 - 2016.05\n* 使用appcan参与3个Hybrid App的前端开发和版本迭代，属于外运系统的货代版，船东版，仓储版，包括app页面，app后台交互和app项目逻辑。\n\n#### 2.宇琦财经app项目  2016.06 - 2016.07\n* 基于apicloud平台，功能较为简单，下拉刷新，收藏，历史记录，股票接口等等。\n\n#### 3.[易旅程](http://www.91elc.com/)官网开发  2016.07 - 2016.10\n* 主要用到: jquery,bootstrap,leafletjs,google maps,ajax,page插件(简单封装)\n* 负责前端部分，包括响应式页面，jsp模板修改，地图交互，ajax数据交互，分页，swiper滚动等等。\n\n#### 4.漫画君/趣漫画app开发  2016.11 - 2016.12\n* 阅读漫画的app，基于apicloud平台。\n* 基于jquery,Aui,vue,artTemplate等等开发。\n* [点击查看截图](https://cry101.github.io/2017/02/14/pro-comic/)\n* [目前安卓版下载地址](https://fir.im/5mgp)\n\n#### 5.一本小说app开发  2017.01 - 2017.01\n* 下载/阅读小说的app，基于apicloud平台。\n* 基于jquery,Aui,vue,artTemplate等等开发。\n* [点击查看截图](https://cry101.github.io/2017/02/11/pro-novel/)\n* [目前安卓版下载地址](https://fir.im/zehf)\n\n#### 6.小记app开发  2017.02 - 2017.02\n* 记账app，基于apicloud平台。\n* 基于jquery,Aui,vue,artTemplate等等开发。\n* [点击查看截图](https://cry101.github.io/2017/03/15/pro-note/)\n* [目前安卓版下载地址](https://fir.im/mejd)\n\n#### 7.仿[cuberto](http://cuberto.com/)，单页面应用  2017.02 - 2017.03\n* vue全家桶。\n* 项目一些canvas星空，svg字母是从原网站copy过来的，我招了我不会。。\n* [源码地址](https://github.com/cry101/vue-cuberto)，暂时搁置。\n\n\n\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢看完，原谅我放荡不羁的简历。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-01-13 15:48:56\n---\n# about me \n------\n\n陈若尧~前端开发工程师~2015年毕业工作至今\n\n* 也许你关心年龄，92年\n* 也许你关心学历，本科\n* 也许你关心院校，福建农林大学\n* 也许你一见钟情要联系我呢？919907366@qq.com\n\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢往下看\n\n------\n### what can I coding ?\nFamiliar with:\n* Html5 , Css3 , Javascript , JQuery/Zepto , Ajax;\n* Vue , Vuex , Vue-router ;\n* Bootstrap , Swiper , Leafletjs(javascript library maps) , ArtTemplate/EJS(js template);\n* Appcan , Apicloud , Html5 Hybrid App;\n* Responsive layout , Module/Component Development;\n* Webpack , Npm , Git , Svn;\n\nknow little:\n* ES6;\n* Canvas;\n* React , AngularJS;\n* Sass , Less;\n* Grunt , Yeoman , Bower;\n\n------\n### What have I done ?\n#### 0.SEO网站开发 2015.06 - 2015.09\n* 切切图，做做模板，搭搭phpcms，网址似乎已经废弃。\n\n#### 1.app项目  2015.10 - 2016.05\n* 使用appcan参与3个Hybrid App的前端开发和版本迭代，属于外运系统的货代版，船东版，仓储版，包括app页面，app后台交互和app项目逻辑。\n\n#### 2.宇琦财经app项目  2016.06 - 2016.07\n* 基于apicloud平台，功能较为简单，下拉刷新，收藏，历史记录，股票接口等等。\n\n#### 3.[易旅程](http://www.91elc.com/)官网开发  2016.07 - 2016.10\n* 主要用到: jquery,bootstrap,leafletjs,google maps,ajax,page插件(简单封装)\n* 负责前端部分，包括响应式页面，jsp模板修改，地图交互，ajax数据交互，分页，swiper滚动等等。\n\n#### 4.漫画君/趣漫画app开发  2016.11 - 2016.12\n* 阅读漫画的app，基于apicloud平台。\n* 基于jquery,Aui,vue,artTemplate等等开发。\n* [点击查看截图](https://cry101.github.io/2017/02/14/pro-comic/)\n* [目前安卓版下载地址](https://fir.im/5mgp)\n\n#### 5.一本小说app开发  2017.01 - 2017.01\n* 下载/阅读小说的app，基于apicloud平台。\n* 基于jquery,Aui,vue,artTemplate等等开发。\n* [点击查看截图](https://cry101.github.io/2017/02/11/pro-novel/)\n* [目前安卓版下载地址](https://fir.im/zehf)\n\n#### 6.小记app开发  2017.02 - 2017.02\n* 记账app，基于apicloud平台。\n* 基于jquery,Aui,vue,artTemplate等等开发。\n* [点击查看截图](https://cry101.github.io/2017/03/15/pro-note/)\n* [目前安卓版下载地址](https://fir.im/mejd)\n\n#### 7.仿[cuberto](http://cuberto.com/)，单页面应用  2017.02 - 2017.03\n* vue全家桶。\n* 项目一些canvas星空，svg字母是从原网站copy过来的，我招了我不会。。\n* [源码地址](https://github.com/cry101/vue-cuberto)，暂时搁置。\n\n\n\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢看完，原谅我放荡不羁的简历。","updated":"2017-03-15T09:26:00.113Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj539gyyp000fegy72iu3aqyf","content":"<h1 id=\"about-me\"><a href=\"#about-me\" class=\"headerlink\" title=\"about me\"></a>about me</h1><hr>\n<p>陈若尧~前端开发工程师~2015年毕业工作至今</p>\n<ul>\n<li>也许你关心年龄，92年</li>\n<li>也许你关心学历，本科</li>\n<li>也许你关心院校，福建农林大学</li>\n<li>也许你一见钟情要联系我呢？919907366@qq.com</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢往下看</p>\n<hr>\n<h3 id=\"what-can-I-coding\"><a href=\"#what-can-I-coding\" class=\"headerlink\" title=\"what can I coding ?\"></a>what can I coding ?</h3><p>Familiar with:</p>\n<ul>\n<li>Html5 , Css3 , Javascript , JQuery/Zepto , Ajax;</li>\n<li>Vue , Vuex , Vue-router ;</li>\n<li>Bootstrap , Swiper , Leafletjs(javascript library maps) , ArtTemplate/EJS(js template);</li>\n<li>Appcan , Apicloud , Html5 Hybrid App;</li>\n<li>Responsive layout , Module/Component Development;</li>\n<li>Webpack , Npm , Git , Svn;</li>\n</ul>\n<p>know little:</p>\n<ul>\n<li>ES6;</li>\n<li>Canvas;</li>\n<li>React , AngularJS;</li>\n<li>Sass , Less;</li>\n<li>Grunt , Yeoman , Bower;</li>\n</ul>\n<hr>\n<h3 id=\"What-have-I-done\"><a href=\"#What-have-I-done\" class=\"headerlink\" title=\"What have I done ?\"></a>What have I done ?</h3><h4 id=\"0-SEO网站开发-2015-06-2015-09\"><a href=\"#0-SEO网站开发-2015-06-2015-09\" class=\"headerlink\" title=\"0.SEO网站开发 2015.06 - 2015.09\"></a>0.SEO网站开发 2015.06 - 2015.09</h4><ul>\n<li>切切图，做做模板，搭搭phpcms，网址似乎已经废弃。</li>\n</ul>\n<h4 id=\"1-app项目-2015-10-2016-05\"><a href=\"#1-app项目-2015-10-2016-05\" class=\"headerlink\" title=\"1.app项目  2015.10 - 2016.05\"></a>1.app项目  2015.10 - 2016.05</h4><ul>\n<li>使用appcan参与3个Hybrid App的前端开发和版本迭代，属于外运系统的货代版，船东版，仓储版，包括app页面，app后台交互和app项目逻辑。</li>\n</ul>\n<h4 id=\"2-宇琦财经app项目-2016-06-2016-07\"><a href=\"#2-宇琦财经app项目-2016-06-2016-07\" class=\"headerlink\" title=\"2.宇琦财经app项目  2016.06 - 2016.07\"></a>2.宇琦财经app项目  2016.06 - 2016.07</h4><ul>\n<li>基于apicloud平台，功能较为简单，下拉刷新，收藏，历史记录，股票接口等等。</li>\n</ul>\n<h4 id=\"3-易旅程官网开发-2016-07-2016-10\"><a href=\"#3-易旅程官网开发-2016-07-2016-10\" class=\"headerlink\" title=\"3.易旅程官网开发  2016.07 - 2016.10\"></a>3.<a href=\"http://www.91elc.com/\" target=\"_blank\" rel=\"external\">易旅程</a>官网开发  2016.07 - 2016.10</h4><ul>\n<li>主要用到: jquery,bootstrap,leafletjs,google maps,ajax,page插件(简单封装)</li>\n<li>负责前端部分，包括响应式页面，jsp模板修改，地图交互，ajax数据交互，分页，swiper滚动等等。</li>\n</ul>\n<h4 id=\"4-漫画君-趣漫画app开发-2016-11-2016-12\"><a href=\"#4-漫画君-趣漫画app开发-2016-11-2016-12\" class=\"headerlink\" title=\"4.漫画君/趣漫画app开发  2016.11 - 2016.12\"></a>4.漫画君/趣漫画app开发  2016.11 - 2016.12</h4><ul>\n<li>阅读漫画的app，基于apicloud平台。</li>\n<li>基于jquery,Aui,vue,artTemplate等等开发。</li>\n<li><a href=\"https://cry101.github.io/2017/02/14/pro-comic/\" target=\"_blank\" rel=\"external\">点击查看截图</a></li>\n<li><a href=\"https://fir.im/5mgp\" target=\"_blank\" rel=\"external\">目前安卓版下载地址</a></li>\n</ul>\n<h4 id=\"5-一本小说app开发-2017-01-2017-01\"><a href=\"#5-一本小说app开发-2017-01-2017-01\" class=\"headerlink\" title=\"5.一本小说app开发  2017.01 - 2017.01\"></a>5.一本小说app开发  2017.01 - 2017.01</h4><ul>\n<li>下载/阅读小说的app，基于apicloud平台。</li>\n<li>基于jquery,Aui,vue,artTemplate等等开发。</li>\n<li><a href=\"https://cry101.github.io/2017/02/11/pro-novel/\" target=\"_blank\" rel=\"external\">点击查看截图</a></li>\n<li><a href=\"https://fir.im/zehf\" target=\"_blank\" rel=\"external\">目前安卓版下载地址</a></li>\n</ul>\n<h4 id=\"6-小记app开发-2017-02-2017-02\"><a href=\"#6-小记app开发-2017-02-2017-02\" class=\"headerlink\" title=\"6.小记app开发  2017.02 - 2017.02\"></a>6.小记app开发  2017.02 - 2017.02</h4><ul>\n<li>记账app，基于apicloud平台。</li>\n<li>基于jquery,Aui,vue,artTemplate等等开发。</li>\n<li><a href=\"https://cry101.github.io/2017/03/15/pro-note/\" target=\"_blank\" rel=\"external\">点击查看截图</a></li>\n<li><a href=\"https://fir.im/mejd\" target=\"_blank\" rel=\"external\">目前安卓版下载地址</a></li>\n</ul>\n<h4 id=\"7-仿cuberto，单页面应用-2017-02-2017-03\"><a href=\"#7-仿cuberto，单页面应用-2017-02-2017-03\" class=\"headerlink\" title=\"7.仿cuberto，单页面应用  2017.02 - 2017.03\"></a>7.仿<a href=\"http://cuberto.com/\" target=\"_blank\" rel=\"external\">cuberto</a>，单页面应用  2017.02 - 2017.03</h4><ul>\n<li>vue全家桶。</li>\n<li>项目一些canvas星空，svg字母是从原网站copy过来的，我招了我不会。。</li>\n<li><a href=\"https://github.com/cry101/vue-cuberto\" target=\"_blank\" rel=\"external\">源码地址</a>，暂时搁置。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢看完，原谅我放荡不羁的简历。</p>\n","excerpt":"","more":"<h1 id=\"about-me\"><a href=\"#about-me\" class=\"headerlink\" title=\"about me\"></a>about me</h1><hr>\n<p>陈若尧~前端开发工程师~2015年毕业工作至今</p>\n<ul>\n<li>也许你关心年龄，92年</li>\n<li>也许你关心学历，本科</li>\n<li>也许你关心院校，福建农林大学</li>\n<li>也许你一见钟情要联系我呢？919907366@qq.com</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢往下看</p>\n<hr>\n<h3 id=\"what-can-I-coding\"><a href=\"#what-can-I-coding\" class=\"headerlink\" title=\"what can I coding ?\"></a>what can I coding ?</h3><p>Familiar with:</p>\n<ul>\n<li>Html5 , Css3 , Javascript , JQuery/Zepto , Ajax;</li>\n<li>Vue , Vuex , Vue-router ;</li>\n<li>Bootstrap , Swiper , Leafletjs(javascript library maps) , ArtTemplate/EJS(js template);</li>\n<li>Appcan , Apicloud , Html5 Hybrid App;</li>\n<li>Responsive layout , Module/Component Development;</li>\n<li>Webpack , Npm , Git , Svn;</li>\n</ul>\n<p>know little:</p>\n<ul>\n<li>ES6;</li>\n<li>Canvas;</li>\n<li>React , AngularJS;</li>\n<li>Sass , Less;</li>\n<li>Grunt , Yeoman , Bower;</li>\n</ul>\n<hr>\n<h3 id=\"What-have-I-done\"><a href=\"#What-have-I-done\" class=\"headerlink\" title=\"What have I done ?\"></a>What have I done ?</h3><h4 id=\"0-SEO网站开发-2015-06-2015-09\"><a href=\"#0-SEO网站开发-2015-06-2015-09\" class=\"headerlink\" title=\"0.SEO网站开发 2015.06 - 2015.09\"></a>0.SEO网站开发 2015.06 - 2015.09</h4><ul>\n<li>切切图，做做模板，搭搭phpcms，网址似乎已经废弃。</li>\n</ul>\n<h4 id=\"1-app项目-2015-10-2016-05\"><a href=\"#1-app项目-2015-10-2016-05\" class=\"headerlink\" title=\"1.app项目  2015.10 - 2016.05\"></a>1.app项目  2015.10 - 2016.05</h4><ul>\n<li>使用appcan参与3个Hybrid App的前端开发和版本迭代，属于外运系统的货代版，船东版，仓储版，包括app页面，app后台交互和app项目逻辑。</li>\n</ul>\n<h4 id=\"2-宇琦财经app项目-2016-06-2016-07\"><a href=\"#2-宇琦财经app项目-2016-06-2016-07\" class=\"headerlink\" title=\"2.宇琦财经app项目  2016.06 - 2016.07\"></a>2.宇琦财经app项目  2016.06 - 2016.07</h4><ul>\n<li>基于apicloud平台，功能较为简单，下拉刷新，收藏，历史记录，股票接口等等。</li>\n</ul>\n<h4 id=\"3-易旅程官网开发-2016-07-2016-10\"><a href=\"#3-易旅程官网开发-2016-07-2016-10\" class=\"headerlink\" title=\"3.易旅程官网开发  2016.07 - 2016.10\"></a>3.<a href=\"http://www.91elc.com/\">易旅程</a>官网开发  2016.07 - 2016.10</h4><ul>\n<li>主要用到: jquery,bootstrap,leafletjs,google maps,ajax,page插件(简单封装)</li>\n<li>负责前端部分，包括响应式页面，jsp模板修改，地图交互，ajax数据交互，分页，swiper滚动等等。</li>\n</ul>\n<h4 id=\"4-漫画君-趣漫画app开发-2016-11-2016-12\"><a href=\"#4-漫画君-趣漫画app开发-2016-11-2016-12\" class=\"headerlink\" title=\"4.漫画君/趣漫画app开发  2016.11 - 2016.12\"></a>4.漫画君/趣漫画app开发  2016.11 - 2016.12</h4><ul>\n<li>阅读漫画的app，基于apicloud平台。</li>\n<li>基于jquery,Aui,vue,artTemplate等等开发。</li>\n<li><a href=\"https://cry101.github.io/2017/02/14/pro-comic/\">点击查看截图</a></li>\n<li><a href=\"https://fir.im/5mgp\">目前安卓版下载地址</a></li>\n</ul>\n<h4 id=\"5-一本小说app开发-2017-01-2017-01\"><a href=\"#5-一本小说app开发-2017-01-2017-01\" class=\"headerlink\" title=\"5.一本小说app开发  2017.01 - 2017.01\"></a>5.一本小说app开发  2017.01 - 2017.01</h4><ul>\n<li>下载/阅读小说的app，基于apicloud平台。</li>\n<li>基于jquery,Aui,vue,artTemplate等等开发。</li>\n<li><a href=\"https://cry101.github.io/2017/02/11/pro-novel/\">点击查看截图</a></li>\n<li><a href=\"https://fir.im/zehf\">目前安卓版下载地址</a></li>\n</ul>\n<h4 id=\"6-小记app开发-2017-02-2017-02\"><a href=\"#6-小记app开发-2017-02-2017-02\" class=\"headerlink\" title=\"6.小记app开发  2017.02 - 2017.02\"></a>6.小记app开发  2017.02 - 2017.02</h4><ul>\n<li>记账app，基于apicloud平台。</li>\n<li>基于jquery,Aui,vue,artTemplate等等开发。</li>\n<li><a href=\"https://cry101.github.io/2017/03/15/pro-note/\">点击查看截图</a></li>\n<li><a href=\"https://fir.im/mejd\">目前安卓版下载地址</a></li>\n</ul>\n<h4 id=\"7-仿cuberto，单页面应用-2017-02-2017-03\"><a href=\"#7-仿cuberto，单页面应用-2017-02-2017-03\" class=\"headerlink\" title=\"7.仿cuberto，单页面应用  2017.02 - 2017.03\"></a>7.仿<a href=\"http://cuberto.com/\">cuberto</a>，单页面应用  2017.02 - 2017.03</h4><ul>\n<li>vue全家桶。</li>\n<li>项目一些canvas星空，svg字母是从原网站copy过来的，我招了我不会。。</li>\n<li><a href=\"https://github.com/cry101/vue-cuberto\">源码地址</a>，暂时搁置。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢看完，原谅我放荡不羁的简历。</p>\n"}],"Post":[{"title":"JSON.parse 和 JSON.stringify","date":"2017-01-14T02:15:12.000Z","_content":"\n\n### 1.parse用于从一个字符串中解析出json对象,如\n\n```javascript\nvar str = '{\"name\":\"huangxiaojian\",\"age\":\"23\"}'\n```\n结果：\n\n```javascript\nJSON.parse(str)\n\nObject\n\nage: \"23\"\nname: \"huangxiaojian\"\n__proto__: Object\n```\n\n注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。\n\n\n\n### 2.stringify()用于从一个对象解析出字符串，如\n```javascript\nvar a = {a:1,b:2}\n```\n结果：\n```javascript\nJSON.stringify(a)\n\n\"{\"a\":1,\"b\":2}\" \n```","source":"_posts/JSON.md","raw":"---\ntitle: JSON.parse 和 JSON.stringify\ndate: 2017-01-14 10:15:12\ntags:\n---\n\n\n### 1.parse用于从一个字符串中解析出json对象,如\n\n```javascript\nvar str = '{\"name\":\"huangxiaojian\",\"age\":\"23\"}'\n```\n结果：\n\n```javascript\nJSON.parse(str)\n\nObject\n\nage: \"23\"\nname: \"huangxiaojian\"\n__proto__: Object\n```\n\n注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。\n\n\n\n### 2.stringify()用于从一个对象解析出字符串，如\n```javascript\nvar a = {a:1,b:2}\n```\n结果：\n```javascript\nJSON.stringify(a)\n\n\"{\"a\":1,\"b\":2}\" \n```","slug":"JSON","published":1,"updated":"2017-01-14T02:21:08.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyxq0000egy7u3m44ygw","content":"<h3 id=\"1-parse用于从一个字符串中解析出json对象-如\"><a href=\"#1-parse用于从一个字符串中解析出json对象-如\" class=\"headerlink\" title=\"1.parse用于从一个字符串中解析出json对象,如\"></a>1.parse用于从一个字符串中解析出json对象,如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'&#123;\"name\":\"huangxiaojian\",\"age\":\"23\"&#125;'</span></div></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(str)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span></div><div class=\"line\"></div><div class=\"line\">age: <span class=\"string\">\"23\"</span></div><div class=\"line\">name: <span class=\"string\">\"huangxiaojian\"</span></div><div class=\"line\">__proto__: <span class=\"built_in\">Object</span></div></pre></td></tr></table></figure>\n<p>注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。</p>\n<h3 id=\"2-stringify-用于从一个对象解析出字符串，如\"><a href=\"#2-stringify-用于从一个对象解析出字符串，如\" class=\"headerlink\" title=\"2.stringify()用于从一个对象解析出字符串，如\"></a>2.stringify()用于从一个对象解析出字符串，如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(a)</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>a<span class=\"string\">\":1,\"</span>b<span class=\"string\">\":2&#125;\"</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"1-parse用于从一个字符串中解析出json对象-如\"><a href=\"#1-parse用于从一个字符串中解析出json对象-如\" class=\"headerlink\" title=\"1.parse用于从一个字符串中解析出json对象,如\"></a>1.parse用于从一个字符串中解析出json对象,如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'&#123;\"name\":\"huangxiaojian\",\"age\":\"23\"&#125;'</span></div></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(str)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span></div><div class=\"line\"></div><div class=\"line\">age: <span class=\"string\">\"23\"</span></div><div class=\"line\">name: <span class=\"string\">\"huangxiaojian\"</span></div><div class=\"line\">__proto__: <span class=\"built_in\">Object</span></div></pre></td></tr></table></figure>\n<p>注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。</p>\n<h3 id=\"2-stringify-用于从一个对象解析出字符串，如\"><a href=\"#2-stringify-用于从一个对象解析出字符串，如\" class=\"headerlink\" title=\"2.stringify()用于从一个对象解析出字符串，如\"></a>2.stringify()用于从一个对象解析出字符串，如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(a)</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>a<span class=\"string\">\":1,\"</span>b<span class=\"string\">\":2&#125;\"</span></div></pre></td></tr></table></figure></p>\n"},{"title":"ES6-01","date":"2017-03-03T06:56:23.000Z","_content":"\n总结于：[ECMAScript6入门](http://es6.ruanyifeng.com/#docs/)\n### 1.Babel转码器\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。\n```javascript\n// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n```\n### 2.let命令\nES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。\n\nfor循环的计数器，就很合适使用let命令。\n```javascript\nfor (let i = 0; i < 10; i++) {}\n\nconsole.log(i);\n//ReferenceError: i is not defined\n```\n注：(1)let不存在变量提升\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n(2)暂时性死区\n```javascript\nvar tmp = 123;\n//不受作用域外部影响\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n```\n(3)不允许重复声明\n```javascript\nfunction func(arg) {\n  let arg; // 报错\n}\n\nfunction func(arg) {\n  {\n    let arg; // 不报错\n  }\n}\n```\n(4)let实际上为 JavaScript 新增了块级作用域。\n块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。\n```javascript\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n```\n\n### const命令\nconst声明一个只读的常量。一旦声明，常量的值就不能改变。\nconst的作用域与let命令相同：只在声明所在的块级作用域内有效。\nconst实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。\n```javascript\nconst foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n\n//如果真的想将对象冻结，应该使用Object.freeze方法。\nconst foo = Object.freeze({});\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n```\n\n### 3.变量的解构赋值\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n(1))数组的解构赋值：\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n```\n\n(2)对象的解构赋值\n```javascript\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet foo;\nlet {foo} = {foo: 1}; // SyntaxError: Duplicate declaration \"foo\"\n\n//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。\nlet foo;\n({foo} = {foo: 1}); // 成功\n\n//嵌套\nlet obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nlet { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n\n```\n\n(3)字符串的解构赋值\n```javascript\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\n//对length属性解构赋值\nlet {length : len} = 'hello';\nlen // 5\n```\n\n### 4.字符串的扩展\n(1)includes(), startsWith(), endsWith()\nincludes()：返回布尔值，表示是否找到了参数字符串。\nstartsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\nendsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n```javascript\n//这三个方法都支持第二个参数，表示开始搜索的位置。\nvar s = 'Hello world!';\n\ns.includes('o') // true\n\ns.startsWith('world', 6) // true\ns.endsWith('Hello', 5) // true\ns.includes('Hello', 6) // false\n```\n\n(2)repeat() 表示将原字符串重复n次。\n```javascript\n'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n'na'.repeat(NaN) // \"\"\n'na'.repeat(-1)// RangeError\n```\n\n(3)padStart()，padEnd()\n```javascript\n//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。\n'1'.padStart(10, '0') // \"0000000001\"\n'12'.padStart(10, '0') // \"0000000012\"\n'123456'.padStart(10, '0') // \"0000123456\"\n\n//另一个用途是提示字符串格式。\n'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n```\n\n(4)模板字符串\n模板字符串（template string）是增强版的字符串，用反引号（`）标识。\n它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\n```javascript\n// 字符串中嵌入变量\nvar name = \"Bob\", time = \"today\";\n`Hello ${name},   \nhow are you ${time}?`   \n\nvar obj = {x: 1, y: 2};\n`${obj.x + obj.y}`// 3\n\nfunction fn() {\n  return \"Hello World\";\n}\n`foo ${fn()} bar`// foo Hello World bar\n\n```\n模板字符串甚至还能嵌套。\n```javascript\nconst tmpl = addrs => `\n  <table>\n  ${addrs.map(addr => `\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n  `).join('')}\n  </table>\n`;\n//使用方法\nconst data = [\n    { first: '<Jane>', last: 'Bond' },\n    { first: 'Lars', last: '<Croft>' },\n];\n\nconsole.log(tmpl(data));\n// <table>\n//\n//   <tr><td><Jane></td></tr>\n//   <tr><td>Bond</td></tr>\n//\n//   <tr><td>Lars</td></tr>\n//   <tr><td><Croft></td></tr>\n//\n// </table>\n\n```\n\n如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。\n```javascript\n// 写法一\nlet str = 'return ' + '`Hello ${name}!`';\nlet func = new Function('name', str);\nfunc('Jack') // \"Hello Jack!\"\n\n// 写法二\nlet str = '(name) => `Hello ${name}!`';\nlet func = eval.call(null, str);\nfunc('Jack') // \"Hello Jack!\"\n```\n\n### 5.函数的扩展\n(1)函数的默认值\n```javascript\n//通常情况下，定义了默认值的参数，应该是函数的尾参数。\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\n\n//函数的 length 属性：将返回没有指定默认值的参数个数。\nlog.length //1\n\n```\n\n(2)rest参数（形式为...变量名）\n函数的length属性，不包括 rest 参数。\n```javascript\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n```\n\n(3)箭头函数\n箭头左边是参数，右边是返回值\n```javascript\nvar f = v => v;\n//等同于\nvar f = function(v) {\n  return v;\n};\n```\n箭头函数有几个使用注意点。\n\n（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n\n（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n\n（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。\n\n（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。\n\n```javascript\n//嵌套的箭头函数\nfunction insert(value) {\n  return {into: function (array) {\n    return {after: function (afterValue) {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n//等同于\nlet insert = (value) => ({into: (array) => ({after: (afterValue) => {\n  array.splice(array.indexOf(afterValue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n```\n\n(4)尾调用优化\n尾调用指某个函数的最后一步是调用另一个函数\n“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。\n如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。\n```javascript\nfunction f(x){\n  return g(x);\n}\n```\n\n尾递归\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。\n但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n\n\n### 6.数组的扩展\n(1)扩展运算符是三个点（...）\n该运算符主要用于函数调用。\n```javascript\n// ES5 的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf(...args);\n```\n另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）\n```javascript\n// ES5的 写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6 的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n```\n扩展运算符的应用：\n<1>合并数组\n```javascript\n// ES5\n[1, 2].concat(more)\n// ES6\n[1, 2, ...more]\n\nvar arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];\n\n// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n```\n<2>与解构赋值结合\n如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n```javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n\nconst [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n```\n<3>字符串\n扩展运算符还可以将字符串转为真正的数组。\n能够正确识别32位的Unicode字符。\n正确返回字符串长度的函数\n```javascript\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\nfunction length(str) {\n  return [...str].length;\n}\n\nlength('x\\uD83D\\uDE80y') // 3\n```\n\n\n(2)Array.from()\nArray.from方法用于将两类对象转为真正的数组：\n类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。\n```javascript\n// NodeList对象\nlet ps = document.querySelectorAll('p');\nArray.from(ps).forEach(function (p) {\n  console.log(p);\n});\n\n// arguments对象\nfunction foo() {\n  var args = Array.from(arguments);\n  // ...\n}\n```\n扩展运算符（...）也可以将某些数据结构转为数组。\n区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。\n\nArray.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。\n```javascript\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n```\n下面的例子是取出一组DOM节点的文本内容。\n```javascript\nlet spans = document.querySelectorAll('span.name');\n\n// map()\nlet names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n// Array.from()\nlet names2 = Array.from(spans, s => s.textContent)\n```\n下面的例子将数组中布尔值为false的成员转为0。\n```javascript\nArray.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n```\n\n(3)Array.of() \nArray.of方法用于将一组值，转换为数组。\n```javascript\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n```\n\n(4)数组实例的 find() 和 findIndex()\n数组实例的find方法，用于找出第一个符合条件的数组成员。\n```javascript\n[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n```\n\n(5)数组实例的fill()\nfill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n```javascript\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n```\n\n\n(6)数组实例的 entries()，keys() 和 values()\n```javascript\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n\n### 7.对象的扩展\n(1)Object.is()\n与严格比较运算符（===）的行为基本一致。\n不同之处只有两个：一是+0不等于-0，二是NaN等于自身。\n```javascript\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n```\n(2)Object.assign()\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。\n由于undefined和null无法转成对象，所以如果它们作为参数，就会报错\n```javascript\nvar target = { a: 1 };\n\nvar source1 = { b: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n```\nObject.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。\nObject.assign方法实行的是浅拷贝，而不是深拷贝。\n\nObject.assign方法有很多用处。\n<1>为对象添加属性\n```javascript\nclass Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n```\n<2>为对象添加方法\n```javascript\nObject.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    ···\n  },\n  anotherMethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  ···\n};\nSomeClass.prototype.anotherMethod = function () {\n  ···\n};\n```\n<3>克隆对象\n```javascript\nfunction clone(origin) {\n  return Object.assign({}, origin);\n}\n```\n<4>合并多个对象\n```javascript\nconst merge =\n  (target, ...sources) => Object.assign(target, ...sources);\n```\n<5>为属性指定默认值\n```javascript\nconst DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n```\n\n(3)属性的可枚举性\n对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。\nObject.getOwnPropertyDescriptor方法可以获取该属性的描述对象。\n```javascript\nlet obj = { foo: 123 };\nObject.getOwnPropertyDescriptor(obj, 'foo')\n//  {\n//    value: 123,\n//    writable: true,\n//    enumerable: true, 可枚举性\n//    configurable: true\n//  }\n```\nES5 有三个操作会忽略enumerable为false的属性。\n  for...in循环：只遍历对象自身的和继承的可枚举的属性\n  Object.keys()：返回对象自身的所有可枚举的属性的键名\n  JSON.stringify()：只串行化对象自身的可枚举的属性\nES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。\n尽量不要用for...in循环，而用Object.keys()代替。\n\n\n(4)属性的遍历\nES6 一共有5种方法可以遍历对象的属性。\n\n<1>for...in\n\nfor...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。\n\n<2>Object.keys(obj)\n\nObject.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。\n\n<3>Object.getOwnPropertyNames(obj)\n\nObject.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。\n\n<4>Object.getOwnPropertySymbols(obj)\n\nObject.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。\n\n<5>Reflect.ownKeys(obj)\n\nReflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。\n\n\n(5)__proto__属性\n无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的\nObject.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。\n```javascript\nlet proto = {};\nlet obj = { x: 10 };\nObject.setPrototypeOf(obj, proto);\n\nproto.y = 20;\nproto.z = 40;\n\nobj.x // 10\nobj.y // 20\nobj.z // 40\n```\n\n\n(6)Object.keys()，Object.values()，Object.entries() \n```javascript\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n\nObject.values(obj)\n// [\"bar\", 42]\n\nObject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n```\n\n(7)Null 传导运算符\n如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。\n比如，要读取message.body.user.firstName，安全的写法是写成下面这样。\n```javascript\nconst firstName = (message\n  && message.body\n  && message.body.user\n  && message.body.user.firstName) || 'default';\n\n//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”\nconst firstName = message?.body?.user?.firstName || 'default';\n```\n\n\n### 8.Symbol\nES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。\n它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。\n```javascript\nvar s1 = Symbol('foo');\nvar s2 = Symbol('bar');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n```\nObject.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\n\nSymbol.for():重新使用同一个Symbol值\n```javascript\nvar s1 = Symbol.for('foo');\nvar s2 = Symbol.for('foo');\n\ns1 === s2 // true\n```\nSymbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。\n\nSymbol.keyFor方法返回一个已登记的 Symbol 类型值的key。\n```javascript\nvar s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nvar s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n```\n\n\n### 9.Set和Map\n(1)Set类似于数组，但是成员的值都是唯一的，没有重复的值。\n```javascript\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n\n// 去除数组的重复成员\nlet arr = [3, 5, 2, 2, 5, 5];\nlet unique = [...new Set(arr)];// [3, 5, 2]\n```\nSet的操作方法：\n  add(value)：添加某个值，返回Set结构本身。\n  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n  has(value)：返回一个布尔值，表示该值是否为Set的成员。\n  clear()：清除所有成员，没有返回值。\n\nSet的遍历方法：\n  keys()：返回键名的遍历器\n  values()：返回键值的遍历器\n  entries()：返回键值对的遍历器\n  forEach()：使用回调函数遍历每个成员\n\n(2)WeakSet：\n  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。\n  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。\n  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。\n\n(3)Map\nMap类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n```javascript\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\n\n(4)WeakMap\n  WeakMap与Map的区别有两点。\n  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。\n  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。\n\n\n\n### 10.Promise \n(1)Promise对象有以下两个特点：\n<1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。\n<2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。\n```javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n```\n\n(2)Promise.all()\nPromise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n```javascript\n// 生成一个Promise对象的数组\nvar promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n```\n\nPromise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。\n\n\n(3)Promise.resolve\n作用是将现有对象转化为Promise对象\n```javascript\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n(4)应用于加载图片\n```javascript\nconst preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n```\n\n\n### 11.Iterator \n(1)Iterator 的作用有三个：\n一是为各种数据结构，提供一个统一的、简便的访问接口；\n二是使得数据结构的成员能够按某种次序排列；\n三是ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。\n\nES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历\n```javascript\n//数组的Symbol.iterator属性\nlet arr = ['a', 'b', 'c'];\nlet iter = arr[Symbol.iterator]();\n\niter.next() // { value: 'a', done: false }\niter.next() // { value: 'b', done: false }\niter.next() // { value: 'c', done: false }\niter.next() // { value: undefined, done: true }\n```\n原生具备 Iterator 接口的数据结构如下。\n    Array\n    Map\n    Set\n    String\n    TypedArray\n    函数的 arguments 对象\n\n\n(2)for...of循环\n一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for...of循环遍历它的成员。\n```javascript\nconst arr = ['red', 'green', 'blue'];\n\nfor(let v of arr) {\n  console.log(v); // red green blue\n}\n\n//空对象obj部署了数组arr的Symbol.iterator属性\nconst obj = {};\nobj[Symbol.iterator] = arr[Symbol.iterator].bind(arr);\n\nfor(let v of obj) {\n  console.log(v); // red green blue\n}\n```\nfor...in循环读取键名，for...of循环读取键值。\n```javascript\nvar arr = ['a', 'b', 'c', 'd'];\n\nfor (let a in arr) {\n  console.log(a); // 0 1 2 3\n}\n\nfor (let a of arr) {\n  console.log(a); // a b c d\n}\n```\n计算生成的数据结构 entries(),keys(),values()\n```javascript\nlet arr = ['a', 'b', 'c'];\nfor (let pair of arr.entries()) {\n  console.log(pair);\n}\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n```\n\n与其他遍历语法的比较\nfor:最原始的写法，较为麻烦\nforEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。\nfor...in:主要用于遍历对象，不适合遍历数组，for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。\n    某些情况下，for...in循环会以任意顺序遍历键名。\n\n\n### 12.Generator\n(1)Generator 函数是一个状态机，封装了多个内部状态。\n形式上，Generator 函数是一个普通函数，但是有两个特征。\n一是，function关键字与函数名之间有一个星号；\n二是，函数体内部使用yield表达式，定义不同的内部状态 \n```javascript\n//该函数有三个状态：hello，world 和 return 语句（结束执行）\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象\nvar hw = helloWorldGenerator();\n\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n\n(2)与 Iterator 接口的关系\n```javascript\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n```\n\n(3)Generator.prototype.return()\n```javascript\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n```\n\n(4)yield* 表达式\n用来在一个 Generator 函数里面执行另一个 Generator 函数。\n```javascript\nfunction* foo() {\n  yield 'a';\n  yield 'b';\n}\n\nfunction* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n```\n\n(5)应用\n通过 Generator 函数部署 Ajax 操作\n```javascript\nfunction* main() {\n  var result = yield request(\"http://some.url\");\n  var resp = JSON.parse(result);\n    console.log(resp.value);\n}\n//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的\nfunction request(url) {\n  makeAjaxCall(url, function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n```\n控制流管理\n```javascript\n//多步操作\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n\n//采用 Promise 改写上面的代码。\nPromise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();\n\n//Generator 函数可以进一步改善代码运行流程。（同步操作）\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n```\n\n### 13.async函数\nasync函数是Generator 函数的语法糖\n```javascript\nvar fs = require('fs');\n\nvar readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) reject(error);\n      resolve(data);\n    });\n  });\n};\n\nvar gen = function* () {\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n//写成async函数，就是下面这样。\nvar asyncReadFile = async function () {\n  var f1 = await readFile('/etc/fstab');\n  var f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\nasync函数对 Generator 函数的改进，体现在以下四点:\n<1>内置执行器\nGenerator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。\nvar result = asyncReadFile();\n<2>更好的语义\n<3>更广的适用性\n<4>返回值是Promise\n\n基本用法：\n```javascript\nasync function getStockPriceByName(name) {\n  var symbol = await getStockSymbol(name);\n  var stockPrice = await getStockPrice(symbol);\n  return stockPrice;\n}\n\ngetStockPriceByName('goog').then(function (result) {\n  console.log(result);\n});\n```\n实例：按顺序完成异步操作：\n<1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）\n```javascript\nfunction logInOrder(urls) {\n  // 远程读取所有URL\n  const textPromises = urls.map(url => {\n    return fetch(url).then(response => response.text());\n  });\n\n  // 按次序输出\n  textPromises.reduce((chain, textPromise) => {\n    return chain.then(() => textPromise)\n      .then(text => console.log(text));\n  }, Promise.resolve());\n}\n```\n<2>async 函数实现\n```javascript\nasync function logInOrder(urls) {\n  // 并发读取远程URL\n  const textPromises = urls.map(async url => {\n    const response = await fetch(url);\n    return response.text();\n  });\n\n  // 按次序输出\n  for (const textPromise of textPromises) {\n    console.log(await textPromise);\n  }\n}\n```\n### 14.Class\n(1).简介\nclass写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n```javascript\n//生成实例对象的传统方法是通过构造函数\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n\n//ES6写法\n//定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  //类的所有方法都定义在类的prototype属性上面\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```\n\n(2).Class 的静态方法\n加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用\n```javascript\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nFoo.classMethod() // 'hello'\n\nvar foo = new Foo();\nfoo.classMethod()\n// TypeError: foo.classMethod is not a function\n```\n父类的静态方法，可以被子类继承。\n\n(3)Class的继承\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。\n```javascript\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```\n\n<1>子类的__proto__属性，表示构造函数的继承，总是指向父类。\n<2>子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。\n```javascript\nclass A {\n}\n\nclass B extends A {\n}\n\nB.__proto__ === A // true\nB.prototype.__proto__ === A.prototype // true\n```\n\n\n### 15.Decorator\n修饰器（Decorator）是一个函数，用来修改类的行为。\n修饰器本质就是编译时执行的函数。\n```javascript\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n```\n\n如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。\n```javascript\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n```\n\n","source":"_posts/ES6-01.md","raw":"---\ntitle: ES6-01\ndate: 2017-03-03 14:56:23\ntags:\n---\n\n总结于：[ECMAScript6入门](http://es6.ruanyifeng.com/#docs/)\n### 1.Babel转码器\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。\n```javascript\n// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n```\n### 2.let命令\nES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。\n\nfor循环的计数器，就很合适使用let命令。\n```javascript\nfor (let i = 0; i < 10; i++) {}\n\nconsole.log(i);\n//ReferenceError: i is not defined\n```\n注：(1)let不存在变量提升\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n(2)暂时性死区\n```javascript\nvar tmp = 123;\n//不受作用域外部影响\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n```\n(3)不允许重复声明\n```javascript\nfunction func(arg) {\n  let arg; // 报错\n}\n\nfunction func(arg) {\n  {\n    let arg; // 不报错\n  }\n}\n```\n(4)let实际上为 JavaScript 新增了块级作用域。\n块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。\n```javascript\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n```\n\n### const命令\nconst声明一个只读的常量。一旦声明，常量的值就不能改变。\nconst的作用域与let命令相同：只在声明所在的块级作用域内有效。\nconst实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。\n```javascript\nconst foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n\n//如果真的想将对象冻结，应该使用Object.freeze方法。\nconst foo = Object.freeze({});\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n```\n\n### 3.变量的解构赋值\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n(1))数组的解构赋值：\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n```\n\n(2)对象的解构赋值\n```javascript\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet foo;\nlet {foo} = {foo: 1}; // SyntaxError: Duplicate declaration \"foo\"\n\n//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。\nlet foo;\n({foo} = {foo: 1}); // 成功\n\n//嵌套\nlet obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nlet { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n\n```\n\n(3)字符串的解构赋值\n```javascript\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\n//对length属性解构赋值\nlet {length : len} = 'hello';\nlen // 5\n```\n\n### 4.字符串的扩展\n(1)includes(), startsWith(), endsWith()\nincludes()：返回布尔值，表示是否找到了参数字符串。\nstartsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\nendsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n```javascript\n//这三个方法都支持第二个参数，表示开始搜索的位置。\nvar s = 'Hello world!';\n\ns.includes('o') // true\n\ns.startsWith('world', 6) // true\ns.endsWith('Hello', 5) // true\ns.includes('Hello', 6) // false\n```\n\n(2)repeat() 表示将原字符串重复n次。\n```javascript\n'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n'na'.repeat(NaN) // \"\"\n'na'.repeat(-1)// RangeError\n```\n\n(3)padStart()，padEnd()\n```javascript\n//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。\n'1'.padStart(10, '0') // \"0000000001\"\n'12'.padStart(10, '0') // \"0000000012\"\n'123456'.padStart(10, '0') // \"0000123456\"\n\n//另一个用途是提示字符串格式。\n'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n```\n\n(4)模板字符串\n模板字符串（template string）是增强版的字符串，用反引号（`）标识。\n它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\n```javascript\n// 字符串中嵌入变量\nvar name = \"Bob\", time = \"today\";\n`Hello ${name},   \nhow are you ${time}?`   \n\nvar obj = {x: 1, y: 2};\n`${obj.x + obj.y}`// 3\n\nfunction fn() {\n  return \"Hello World\";\n}\n`foo ${fn()} bar`// foo Hello World bar\n\n```\n模板字符串甚至还能嵌套。\n```javascript\nconst tmpl = addrs => `\n  <table>\n  ${addrs.map(addr => `\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n  `).join('')}\n  </table>\n`;\n//使用方法\nconst data = [\n    { first: '<Jane>', last: 'Bond' },\n    { first: 'Lars', last: '<Croft>' },\n];\n\nconsole.log(tmpl(data));\n// <table>\n//\n//   <tr><td><Jane></td></tr>\n//   <tr><td>Bond</td></tr>\n//\n//   <tr><td>Lars</td></tr>\n//   <tr><td><Croft></td></tr>\n//\n// </table>\n\n```\n\n如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。\n```javascript\n// 写法一\nlet str = 'return ' + '`Hello ${name}!`';\nlet func = new Function('name', str);\nfunc('Jack') // \"Hello Jack!\"\n\n// 写法二\nlet str = '(name) => `Hello ${name}!`';\nlet func = eval.call(null, str);\nfunc('Jack') // \"Hello Jack!\"\n```\n\n### 5.函数的扩展\n(1)函数的默认值\n```javascript\n//通常情况下，定义了默认值的参数，应该是函数的尾参数。\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\n\n//函数的 length 属性：将返回没有指定默认值的参数个数。\nlog.length //1\n\n```\n\n(2)rest参数（形式为...变量名）\n函数的length属性，不包括 rest 参数。\n```javascript\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n```\n\n(3)箭头函数\n箭头左边是参数，右边是返回值\n```javascript\nvar f = v => v;\n//等同于\nvar f = function(v) {\n  return v;\n};\n```\n箭头函数有几个使用注意点。\n\n（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n\n（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n\n（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。\n\n（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。\n\n```javascript\n//嵌套的箭头函数\nfunction insert(value) {\n  return {into: function (array) {\n    return {after: function (afterValue) {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n//等同于\nlet insert = (value) => ({into: (array) => ({after: (afterValue) => {\n  array.splice(array.indexOf(afterValue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n```\n\n(4)尾调用优化\n尾调用指某个函数的最后一步是调用另一个函数\n“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。\n如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。\n```javascript\nfunction f(x){\n  return g(x);\n}\n```\n\n尾递归\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。\n但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n\n\n### 6.数组的扩展\n(1)扩展运算符是三个点（...）\n该运算符主要用于函数调用。\n```javascript\n// ES5 的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf(...args);\n```\n另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）\n```javascript\n// ES5的 写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6 的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n```\n扩展运算符的应用：\n<1>合并数组\n```javascript\n// ES5\n[1, 2].concat(more)\n// ES6\n[1, 2, ...more]\n\nvar arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];\n\n// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n```\n<2>与解构赋值结合\n如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n```javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n\nconst [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n```\n<3>字符串\n扩展运算符还可以将字符串转为真正的数组。\n能够正确识别32位的Unicode字符。\n正确返回字符串长度的函数\n```javascript\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\nfunction length(str) {\n  return [...str].length;\n}\n\nlength('x\\uD83D\\uDE80y') // 3\n```\n\n\n(2)Array.from()\nArray.from方法用于将两类对象转为真正的数组：\n类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。\n```javascript\n// NodeList对象\nlet ps = document.querySelectorAll('p');\nArray.from(ps).forEach(function (p) {\n  console.log(p);\n});\n\n// arguments对象\nfunction foo() {\n  var args = Array.from(arguments);\n  // ...\n}\n```\n扩展运算符（...）也可以将某些数据结构转为数组。\n区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。\n\nArray.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。\n```javascript\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n```\n下面的例子是取出一组DOM节点的文本内容。\n```javascript\nlet spans = document.querySelectorAll('span.name');\n\n// map()\nlet names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n// Array.from()\nlet names2 = Array.from(spans, s => s.textContent)\n```\n下面的例子将数组中布尔值为false的成员转为0。\n```javascript\nArray.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n```\n\n(3)Array.of() \nArray.of方法用于将一组值，转换为数组。\n```javascript\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n```\n\n(4)数组实例的 find() 和 findIndex()\n数组实例的find方法，用于找出第一个符合条件的数组成员。\n```javascript\n[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n```\n\n(5)数组实例的fill()\nfill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n```javascript\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n```\n\n\n(6)数组实例的 entries()，keys() 和 values()\n```javascript\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n\n### 7.对象的扩展\n(1)Object.is()\n与严格比较运算符（===）的行为基本一致。\n不同之处只有两个：一是+0不等于-0，二是NaN等于自身。\n```javascript\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n```\n(2)Object.assign()\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。\n由于undefined和null无法转成对象，所以如果它们作为参数，就会报错\n```javascript\nvar target = { a: 1 };\n\nvar source1 = { b: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n```\nObject.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。\nObject.assign方法实行的是浅拷贝，而不是深拷贝。\n\nObject.assign方法有很多用处。\n<1>为对象添加属性\n```javascript\nclass Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n```\n<2>为对象添加方法\n```javascript\nObject.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    ···\n  },\n  anotherMethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  ···\n};\nSomeClass.prototype.anotherMethod = function () {\n  ···\n};\n```\n<3>克隆对象\n```javascript\nfunction clone(origin) {\n  return Object.assign({}, origin);\n}\n```\n<4>合并多个对象\n```javascript\nconst merge =\n  (target, ...sources) => Object.assign(target, ...sources);\n```\n<5>为属性指定默认值\n```javascript\nconst DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n```\n\n(3)属性的可枚举性\n对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。\nObject.getOwnPropertyDescriptor方法可以获取该属性的描述对象。\n```javascript\nlet obj = { foo: 123 };\nObject.getOwnPropertyDescriptor(obj, 'foo')\n//  {\n//    value: 123,\n//    writable: true,\n//    enumerable: true, 可枚举性\n//    configurable: true\n//  }\n```\nES5 有三个操作会忽略enumerable为false的属性。\n  for...in循环：只遍历对象自身的和继承的可枚举的属性\n  Object.keys()：返回对象自身的所有可枚举的属性的键名\n  JSON.stringify()：只串行化对象自身的可枚举的属性\nES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。\n尽量不要用for...in循环，而用Object.keys()代替。\n\n\n(4)属性的遍历\nES6 一共有5种方法可以遍历对象的属性。\n\n<1>for...in\n\nfor...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。\n\n<2>Object.keys(obj)\n\nObject.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。\n\n<3>Object.getOwnPropertyNames(obj)\n\nObject.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。\n\n<4>Object.getOwnPropertySymbols(obj)\n\nObject.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。\n\n<5>Reflect.ownKeys(obj)\n\nReflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。\n\n\n(5)__proto__属性\n无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的\nObject.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。\n```javascript\nlet proto = {};\nlet obj = { x: 10 };\nObject.setPrototypeOf(obj, proto);\n\nproto.y = 20;\nproto.z = 40;\n\nobj.x // 10\nobj.y // 20\nobj.z // 40\n```\n\n\n(6)Object.keys()，Object.values()，Object.entries() \n```javascript\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n\nObject.values(obj)\n// [\"bar\", 42]\n\nObject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n```\n\n(7)Null 传导运算符\n如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。\n比如，要读取message.body.user.firstName，安全的写法是写成下面这样。\n```javascript\nconst firstName = (message\n  && message.body\n  && message.body.user\n  && message.body.user.firstName) || 'default';\n\n//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”\nconst firstName = message?.body?.user?.firstName || 'default';\n```\n\n\n### 8.Symbol\nES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。\n它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。\n```javascript\nvar s1 = Symbol('foo');\nvar s2 = Symbol('bar');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n```\nObject.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\n\nSymbol.for():重新使用同一个Symbol值\n```javascript\nvar s1 = Symbol.for('foo');\nvar s2 = Symbol.for('foo');\n\ns1 === s2 // true\n```\nSymbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。\n\nSymbol.keyFor方法返回一个已登记的 Symbol 类型值的key。\n```javascript\nvar s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nvar s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n```\n\n\n### 9.Set和Map\n(1)Set类似于数组，但是成员的值都是唯一的，没有重复的值。\n```javascript\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n\n// 去除数组的重复成员\nlet arr = [3, 5, 2, 2, 5, 5];\nlet unique = [...new Set(arr)];// [3, 5, 2]\n```\nSet的操作方法：\n  add(value)：添加某个值，返回Set结构本身。\n  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n  has(value)：返回一个布尔值，表示该值是否为Set的成员。\n  clear()：清除所有成员，没有返回值。\n\nSet的遍历方法：\n  keys()：返回键名的遍历器\n  values()：返回键值的遍历器\n  entries()：返回键值对的遍历器\n  forEach()：使用回调函数遍历每个成员\n\n(2)WeakSet：\n  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。\n  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。\n  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。\n\n(3)Map\nMap类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n```javascript\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\n\n(4)WeakMap\n  WeakMap与Map的区别有两点。\n  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。\n  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。\n\n\n\n### 10.Promise \n(1)Promise对象有以下两个特点：\n<1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。\n<2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。\n```javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n```\n\n(2)Promise.all()\nPromise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n```javascript\n// 生成一个Promise对象的数组\nvar promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n```\n\nPromise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。\n\n\n(3)Promise.resolve\n作用是将现有对象转化为Promise对象\n```javascript\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n(4)应用于加载图片\n```javascript\nconst preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n```\n\n\n### 11.Iterator \n(1)Iterator 的作用有三个：\n一是为各种数据结构，提供一个统一的、简便的访问接口；\n二是使得数据结构的成员能够按某种次序排列；\n三是ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。\n\nES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历\n```javascript\n//数组的Symbol.iterator属性\nlet arr = ['a', 'b', 'c'];\nlet iter = arr[Symbol.iterator]();\n\niter.next() // { value: 'a', done: false }\niter.next() // { value: 'b', done: false }\niter.next() // { value: 'c', done: false }\niter.next() // { value: undefined, done: true }\n```\n原生具备 Iterator 接口的数据结构如下。\n    Array\n    Map\n    Set\n    String\n    TypedArray\n    函数的 arguments 对象\n\n\n(2)for...of循环\n一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for...of循环遍历它的成员。\n```javascript\nconst arr = ['red', 'green', 'blue'];\n\nfor(let v of arr) {\n  console.log(v); // red green blue\n}\n\n//空对象obj部署了数组arr的Symbol.iterator属性\nconst obj = {};\nobj[Symbol.iterator] = arr[Symbol.iterator].bind(arr);\n\nfor(let v of obj) {\n  console.log(v); // red green blue\n}\n```\nfor...in循环读取键名，for...of循环读取键值。\n```javascript\nvar arr = ['a', 'b', 'c', 'd'];\n\nfor (let a in arr) {\n  console.log(a); // 0 1 2 3\n}\n\nfor (let a of arr) {\n  console.log(a); // a b c d\n}\n```\n计算生成的数据结构 entries(),keys(),values()\n```javascript\nlet arr = ['a', 'b', 'c'];\nfor (let pair of arr.entries()) {\n  console.log(pair);\n}\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n```\n\n与其他遍历语法的比较\nfor:最原始的写法，较为麻烦\nforEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。\nfor...in:主要用于遍历对象，不适合遍历数组，for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。\n    某些情况下，for...in循环会以任意顺序遍历键名。\n\n\n### 12.Generator\n(1)Generator 函数是一个状态机，封装了多个内部状态。\n形式上，Generator 函数是一个普通函数，但是有两个特征。\n一是，function关键字与函数名之间有一个星号；\n二是，函数体内部使用yield表达式，定义不同的内部状态 \n```javascript\n//该函数有三个状态：hello，world 和 return 语句（结束执行）\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象\nvar hw = helloWorldGenerator();\n\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n\n(2)与 Iterator 接口的关系\n```javascript\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n```\n\n(3)Generator.prototype.return()\n```javascript\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n```\n\n(4)yield* 表达式\n用来在一个 Generator 函数里面执行另一个 Generator 函数。\n```javascript\nfunction* foo() {\n  yield 'a';\n  yield 'b';\n}\n\nfunction* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n```\n\n(5)应用\n通过 Generator 函数部署 Ajax 操作\n```javascript\nfunction* main() {\n  var result = yield request(\"http://some.url\");\n  var resp = JSON.parse(result);\n    console.log(resp.value);\n}\n//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的\nfunction request(url) {\n  makeAjaxCall(url, function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n```\n控制流管理\n```javascript\n//多步操作\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n\n//采用 Promise 改写上面的代码。\nPromise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();\n\n//Generator 函数可以进一步改善代码运行流程。（同步操作）\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n```\n\n### 13.async函数\nasync函数是Generator 函数的语法糖\n```javascript\nvar fs = require('fs');\n\nvar readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) reject(error);\n      resolve(data);\n    });\n  });\n};\n\nvar gen = function* () {\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n//写成async函数，就是下面这样。\nvar asyncReadFile = async function () {\n  var f1 = await readFile('/etc/fstab');\n  var f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\nasync函数对 Generator 函数的改进，体现在以下四点:\n<1>内置执行器\nGenerator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。\nvar result = asyncReadFile();\n<2>更好的语义\n<3>更广的适用性\n<4>返回值是Promise\n\n基本用法：\n```javascript\nasync function getStockPriceByName(name) {\n  var symbol = await getStockSymbol(name);\n  var stockPrice = await getStockPrice(symbol);\n  return stockPrice;\n}\n\ngetStockPriceByName('goog').then(function (result) {\n  console.log(result);\n});\n```\n实例：按顺序完成异步操作：\n<1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）\n```javascript\nfunction logInOrder(urls) {\n  // 远程读取所有URL\n  const textPromises = urls.map(url => {\n    return fetch(url).then(response => response.text());\n  });\n\n  // 按次序输出\n  textPromises.reduce((chain, textPromise) => {\n    return chain.then(() => textPromise)\n      .then(text => console.log(text));\n  }, Promise.resolve());\n}\n```\n<2>async 函数实现\n```javascript\nasync function logInOrder(urls) {\n  // 并发读取远程URL\n  const textPromises = urls.map(async url => {\n    const response = await fetch(url);\n    return response.text();\n  });\n\n  // 按次序输出\n  for (const textPromise of textPromises) {\n    console.log(await textPromise);\n  }\n}\n```\n### 14.Class\n(1).简介\nclass写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n```javascript\n//生成实例对象的传统方法是通过构造函数\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n\n//ES6写法\n//定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  //类的所有方法都定义在类的prototype属性上面\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```\n\n(2).Class 的静态方法\n加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用\n```javascript\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nFoo.classMethod() // 'hello'\n\nvar foo = new Foo();\nfoo.classMethod()\n// TypeError: foo.classMethod is not a function\n```\n父类的静态方法，可以被子类继承。\n\n(3)Class的继承\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。\n```javascript\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```\n\n<1>子类的__proto__属性，表示构造函数的继承，总是指向父类。\n<2>子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。\n```javascript\nclass A {\n}\n\nclass B extends A {\n}\n\nB.__proto__ === A // true\nB.prototype.__proto__ === A.prototype // true\n```\n\n\n### 15.Decorator\n修饰器（Decorator）是一个函数，用来修改类的行为。\n修饰器本质就是编译时执行的函数。\n```javascript\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n```\n\n如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。\n```javascript\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n```\n\n","slug":"ES6-01","published":1,"updated":"2017-07-14T02:37:27.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyxu0001egy7iv3jxd0c","content":"<p>总结于：<a href=\"http://es6.ruanyifeng.com/#docs/\" target=\"_blank\" rel=\"external\">ECMAScript6入门</a></p>\n<h3 id=\"1-Babel转码器\"><a href=\"#1-Babel转码器\" class=\"headerlink\" title=\"1.Babel转码器\"></a>1.Babel转码器</h3><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 转码前</span></div><div class=\"line\">input.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item + <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 转码后</span></div><div class=\"line\">input.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-let命令\"><a href=\"#2-let命令\" class=\"headerlink\" title=\"2.let命令\"></a>2.let命令</h3><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>\n<p>for循环的计数器，就很合适使用let命令。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(i);</div><div class=\"line\"><span class=\"comment\">//ReferenceError: i is not defined</span></div></pre></td></tr></table></figure></p>\n<p>注：(1)let不存在变量提升<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// let 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</div></pre></td></tr></table></figure></p>\n<p>(2)暂时性死区<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"comment\">//不受作用域外部影响</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3)不允许重复声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 报错</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 不报错</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(4)let实际上为 JavaScript 新增了块级作用域。<br>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IIFE 写法</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 块级作用域写法</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h3><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。<br>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为 foo 添加一个属性，可以成功</span></div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div><div class=\"line\">foo.prop <span class=\"comment\">// 123</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将 foo 指向另一个对象，就会报错</span></div><div class=\"line\">foo = &#123;&#125;; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//如果真的想将对象冻结，应该使用Object.freeze方法。</span></div><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</div><div class=\"line\"><span class=\"comment\">// 常规模式时，下面一行不起作用；</span></div><div class=\"line\"><span class=\"comment\">// 严格模式时，该行会报错</span></div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-变量的解构赋值\"><a href=\"#3-变量的解构赋值\" class=\"headerlink\" title=\"3.变量的解构赋值\"></a>3.变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。<br>(1))数组的解构赋值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</div><div class=\"line\">foo <span class=\"comment\">// 1</span></div><div class=\"line\">bar <span class=\"comment\">// 2</span></div><div class=\"line\">baz <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</div><div class=\"line\">third <span class=\"comment\">// \"baz\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\">head <span class=\"comment\">// 1</span></div><div class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>];</div><div class=\"line\">x <span class=\"comment\">// \"a\"</span></div><div class=\"line\">y <span class=\"comment\">// undefined</span></div><div class=\"line\">z <span class=\"comment\">// []</span></div></pre></td></tr></table></figure></p>\n<p>(2)对象的解构赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;; <span class=\"comment\">// SyntaxError: Duplicate declaration \"foo\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。</span></div><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\">(&#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;); <span class=\"comment\">// 成功</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//嵌套</span></div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">p</span>: [</div><div class=\"line\">    <span class=\"string\">'Hello'</span>,</div><div class=\"line\">    &#123; <span class=\"attr\">y</span>: <span class=\"string\">'World'</span> &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</div><div class=\"line\">x <span class=\"comment\">// \"Hello\"</span></div><div class=\"line\">y <span class=\"comment\">// \"World\"</span></div></pre></td></tr></table></figure></p>\n<p>(3)字符串的解构赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</div><div class=\"line\">a <span class=\"comment\">// \"h\"</span></div><div class=\"line\">b <span class=\"comment\">// \"e\"</span></div><div class=\"line\">c <span class=\"comment\">// \"l\"</span></div><div class=\"line\">d <span class=\"comment\">// \"l\"</span></div><div class=\"line\">e <span class=\"comment\">// \"o\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//对length属性解构赋值</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</div><div class=\"line\">len <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"4-字符串的扩展\"><a href=\"#4-字符串的扩展\" class=\"headerlink\" title=\"4.字符串的扩展\"></a>4.字符串的扩展</h3><p>(1)includes(), startsWith(), endsWith()<br>includes()：返回布尔值，表示是否找到了参数字符串。<br>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。<br>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这三个方法都支持第二个参数，表示开始搜索的位置。</span></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\"></div><div class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>(2)repeat() 表示将原字符串重复n次。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></div><div class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>) <span class=\"comment\">// \"hellohello\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>) <span class=\"comment\">// \"\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">NaN</span>) <span class=\"comment\">// \"\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-1</span>)<span class=\"comment\">// RangeError</span></div></pre></td></tr></table></figure></p>\n<p>(3)padStart()，padEnd()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。</span></div><div class=\"line\"><span class=\"string\">'1'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000001\"</span></div><div class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000012\"</span></div><div class=\"line\"><span class=\"string\">'123456'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000123456\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//另一个用途是提示字符串格式。</span></div><div class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></div><div class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></div></pre></td></tr></table></figure></p>\n<p>(4)模板字符串<br>模板字符串（template string）是增强版的字符串，用反引号（`）标识。<br>它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串中嵌入变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Bob\"</span>, time = <span class=\"string\">\"today\"</span>;</div><div class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>,   </span></div><div class=\"line\">how are you <span class=\"subst\">$&#123;time&#125;</span>?`   </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;;</div><div class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;obj.x + obj.y&#125;</span>`</span><span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"string\">`foo <span class=\"subst\">$&#123;fn()&#125;</span> bar`</span><span class=\"comment\">// foo Hello World bar</span></div></pre></td></tr></table></figure></p>\n<p>模板字符串甚至还能嵌套。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> tmpl = <span class=\"function\"><span class=\"params\">addrs</span> =&gt;</span> <span class=\"string\">`</span></div><div class=\"line\">  &lt;table&gt;</div><div class=\"line\">  <span class=\"subst\">$&#123;addrs.map(addr =&gt; <span class=\"string\">`</span></span></div><div class=\"line\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class=\"line\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class=\"line\">  `).join(<span class=\"string\">''</span>)&#125;</div><div class=\"line\">  &lt;/table&gt;</div><div class=\"line\">`;</div><div class=\"line\"><span class=\"comment\">//使用方法</span></div><div class=\"line\"><span class=\"keyword\">const</span> data = [</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'&lt;Jane&gt;'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Bond'</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'Lars'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'&lt;Croft&gt;'</span> &#125;,</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(tmpl(data));</div><div class=\"line\"><span class=\"comment\">// &lt;table&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// &lt;/table&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写法一</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'return '</span> + <span class=\"string\">'`Hello $&#123;name&#125;!`'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'name'</span>, str);</div><div class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 写法二</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'(name) =&gt; `Hello $&#123;name&#125;!`'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"built_in\">eval</span>.call(<span class=\"literal\">null</span>, str);</div><div class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"5-函数的扩展\"><a href=\"#5-函数的扩展\" class=\"headerlink\" title=\"5.函数的扩展\"></a>5.函数的扩展</h3><p>(1)函数的默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通常情况下，定义了默认值的参数，应该是函数的尾参数。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">'World'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// Hello World</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//函数的 length 属性：将返回没有指定默认值的参数个数。</span></div><div class=\"line\">log.length <span class=\"comment\">//1</span></div></pre></td></tr></table></figure></p>\n<p>(2)rest参数（形式为…变量名）<br>函数的length属性，不包括 rest 参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</div><div class=\"line\">    sum += val;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure></p>\n<p>(3)箭头函数<br>箭头左边是参数，右边是返回值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> v;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>箭头函数有几个使用注意点。</p>\n<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>\n<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>\n<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>\n<p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//嵌套的箭头函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">into</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">after</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">afterValue</span>) </span>&#123;</div><div class=\"line\">      array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</div><div class=\"line\">      <span class=\"keyword\">return</span> array;</div><div class=\"line\">    &#125;&#125;;</div><div class=\"line\">  &#125;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"><span class=\"keyword\">let</span> insert = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> (&#123;<span class=\"attr\">into</span>: <span class=\"function\">(<span class=\"params\">array</span>) =&gt;</span> (&#123;<span class=\"attr\">after</span>: <span class=\"function\">(<span class=\"params\">afterValue</span>) =&gt;</span> &#123;</div><div class=\"line\">  array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</div><div class=\"line\">  <span class=\"keyword\">return</span> array;</div><div class=\"line\">&#125;&#125;)&#125;);</div><div class=\"line\"></div><div class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></div></pre></td></tr></table></figure>\n<p>(4)尾调用优化<br>尾调用指某个函数的最后一步是调用另一个函数<br>“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。<br>如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> g(x);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>尾递归<br>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>\n<p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。<br>但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</p>\n<h3 id=\"6-数组的扩展\"><a href=\"#6-数组的扩展\" class=\"headerlink\" title=\"6.数组的扩展\"></a>6.数组的扩展</h3><p>(1)扩展运算符是三个点（…）<br>该运算符主要用于函数调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5 的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">f(...args);</div></pre></td></tr></table></figure></p>\n<p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5的 写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6 的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">arr1.push(...arr2);</div></pre></td></tr></table></figure></p>\n<p>扩展运算符的应用：</p>\n<p><1>合并数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more)</div><div class=\"line\"><span class=\"comment\">// ES6</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES5的合并数组</span></div><div class=\"line\">arr1.concat(arr2, arr3);</div><div class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的合并数组</span></div><div class=\"line\">[...arr1, ...arr2, ...arr3]</div><div class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div></pre></td></tr></table></figure></1></p>\n<p><2>与解构赋值结合<br>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">first <span class=\"comment\">// 1</span></div><div class=\"line\">rest  <span class=\"comment\">// [2, 3, 4, 5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [];</div><div class=\"line\">first <span class=\"comment\">// undefined</span></div><div class=\"line\">rest  <span class=\"comment\">// []</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"string\">\"foo\"</span>];</div><div class=\"line\">first  <span class=\"comment\">// \"foo\"</span></div><div class=\"line\">rest   <span class=\"comment\">// []</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [...butLast, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure></2></p>\n<p><3>字符串<br>扩展运算符还可以将字符串转为真正的数组。<br>能够正确识别32位的Unicode字符。<br>正确返回字符串长度的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[...<span class=\"string\">'hello'</span>]</div><div class=\"line\"><span class=\"comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [...str].length;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">length(<span class=\"string\">'x\\uD83D\\uDE80y'</span>) <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure></3></p>\n<p>(2)Array.from()<br>Array.from方法用于将两类对象转为真正的数组：<br>类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// NodeList对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> ps = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'p'</span>);</div><div class=\"line\"><span class=\"built_in\">Array</span>.from(ps).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(p);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// arguments对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>扩展运算符（…）也可以将某些数据结构转为数组。<br>区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p>\n<p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike, x =&gt; x * x);</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (x) =&gt; x * x)</div><div class=\"line\"><span class=\"comment\">// [1, 4, 9]</span></div></pre></td></tr></table></figure></p>\n<p>下面的例子是取出一组DOM节点的文本内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> spans = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'span.name'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// map()</span></div><div class=\"line\"><span class=\"keyword\">let</span> names1 = <span class=\"built_in\">Array</span>.prototype.map.call(spans, s =&gt; s.textContent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Array.from()</span></div><div class=\"line\"><span class=\"keyword\">let</span> names2 = <span class=\"built_in\">Array</span>.from(spans, s =&gt; s.textContent)</div></pre></td></tr></table></figure></p>\n<p>下面的例子将数组中布尔值为false的成员转为0。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, , <span class=\"number\">2</span>, , <span class=\"number\">3</span>], (n) =&gt; n || <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// [1, 0, 2, 0, 3]</span></div></pre></td></tr></table></figure></p>\n<p>(3)Array.of()<br>Array.of方法用于将一组值，转换为数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>).length <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<p>(4)数组实例的 find() 和 findIndex()<br>数组实例的find方法，用于找出第一个符合条件的数组成员。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">-5</span>, <span class=\"number\">10</span>].find(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n &lt; <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// -5</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</div><div class=\"line\">&#125;) <span class=\"comment\">// 10</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</div><div class=\"line\">&#125;) <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<p>(5)数组实例的fill()<br>fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>)</div><div class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// ['a', 7, 'c']</span></div></pre></td></tr></table></figure></p>\n<p>(6)数组实例的 entries()，keys() 和 values()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(index);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 'a'</span></div><div class=\"line\"><span class=\"comment\">// 'b'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0 \"a\"</span></div><div class=\"line\"><span class=\"comment\">// 1 \"b\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"7-对象的扩展\"><a href=\"#7-对象的扩展\" class=\"headerlink\" title=\"7.对象的扩展\"></a>7.对象的扩展</h3><p>(1)Object.is()<br>与严格比较运算符（===）的行为基本一致。<br>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span> <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>(2)Object.assign()<br>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。<br>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</div><div class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></div></pre></td></tr></table></figure></p>\n<p>Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。<br>Object.assign方法实行的是浅拷贝，而不是深拷贝。</p>\n<p>Object.assign方法有很多用处。</p>\n<p><1>为对象添加属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;x, y&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></1></p>\n<p><2>为对象添加方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.assign(SomeClass.prototype, &#123;</div><div class=\"line\">  someMethod(arg1, arg2) &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;,</div><div class=\"line\">  anotherMethod() &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于下面的写法</span></div><div class=\"line\">SomeClass.prototype.someMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</div><div class=\"line\">  ···</div><div class=\"line\">&#125;;</div><div class=\"line\">SomeClass.prototype.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  ···</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></2></p>\n<p><3>克隆对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, origin);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></3></p>\n<p><4>合并多个对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> merge =</div><div class=\"line\">  <span class=\"function\">(<span class=\"params\">target, ...sources</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(target, ...sources);</div></pre></td></tr></table></figure></4></p>\n<p><5>为属性指定默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> DEFAULTS = &#123;</div><div class=\"line\">  <span class=\"attr\">logLevel</span>: <span class=\"number\">0</span>,</div><div class=\"line\">  <span class=\"attr\">outputFormat</span>: <span class=\"string\">'html'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processContent</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">  options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(options);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></5></p>\n<p>(3)属性的可枚举性<br>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<br>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'foo'</span>)</div><div class=\"line\"><span class=\"comment\">//  &#123;</span></div><div class=\"line\"><span class=\"comment\">//    value: 123,</span></div><div class=\"line\"><span class=\"comment\">//    writable: true,</span></div><div class=\"line\"><span class=\"comment\">//    enumerable: true, 可枚举性</span></div><div class=\"line\"><span class=\"comment\">//    configurable: true</span></div><div class=\"line\"><span class=\"comment\">//  &#125;</span></div></pre></td></tr></table></figure></p>\n<p>ES5 有三个操作会忽略enumerable为false的属性。<br>  for…in循环：只遍历对象自身的和继承的可枚举的属性<br>  Object.keys()：返回对象自身的所有可枚举的属性的键名<br>  JSON.stringify()：只串行化对象自身的可枚举的属性<br>ES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。<br>尽量不要用for…in循环，而用Object.keys()代替。</p>\n<p>(4)属性的遍历<br>ES6 一共有5种方法可以遍历对象的属性。</p>\n<p><1>for…in</1></p>\n<p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p>\n<p><2>Object.keys(obj)</2></p>\n<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。</p>\n<p><3>Object.getOwnPropertyNames(obj)</3></p>\n<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。</p>\n<p><4>Object.getOwnPropertySymbols(obj)</4></p>\n<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。</p>\n<p><5>Reflect.ownKeys(obj)</5></p>\n<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。</p>\n<p>(5)<strong>proto</strong>属性<br>无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的<br>Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> proto = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, proto);</div><div class=\"line\"></div><div class=\"line\">proto.y = <span class=\"number\">20</span>;</div><div class=\"line\">proto.z = <span class=\"number\">40</span>;</div><div class=\"line\"></div><div class=\"line\">obj.x <span class=\"comment\">// 10</span></div><div class=\"line\">obj.y <span class=\"comment\">// 20</span></div><div class=\"line\">obj.z <span class=\"comment\">// 40</span></div></pre></td></tr></table></figure></p>\n<p>(6)Object.keys()，Object.values()，Object.entries()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\"><span class=\"comment\">// [\"foo\", \"baz\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</div><div class=\"line\"><span class=\"comment\">// [\"bar\", 42]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.entries(obj)</div><div class=\"line\"><span class=\"comment\">// [ [\"foo\", \"bar\"], [\"baz\", 42] ]</span></div></pre></td></tr></table></figure></p>\n<p>(7)Null 传导运算符<br>如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。<br>比如，要读取message.body.user.firstName，安全的写法是写成下面这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> firstName = (message</div><div class=\"line\">  &amp;&amp; message.body</div><div class=\"line\">  &amp;&amp; message.body.user</div><div class=\"line\">  &amp;&amp; message.body.user.firstName) || <span class=\"string\">'default'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”</span></div><div class=\"line\"><span class=\"keyword\">const</span> firstName = message?.body?.user?.firstName || <span class=\"string\">'default'</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"8-Symbol\"><a href=\"#8-Symbol\" class=\"headerlink\" title=\"8.Symbol\"></a>8.Symbol</h3><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'bar'</span>);</div><div class=\"line\"></div><div class=\"line\">s1 <span class=\"comment\">// Symbol(foo)</span></div><div class=\"line\">s2 <span class=\"comment\">// Symbol(bar)</span></div><div class=\"line\"></div><div class=\"line\">s1.toString() <span class=\"comment\">// \"Symbol(foo)\"</span></div><div class=\"line\">s2.toString() <span class=\"comment\">// \"Symbol(bar)\"</span></div></pre></td></tr></table></figure></p>\n<p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p>\n<p>Symbol.for():重新使用同一个Symbol值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</div><div class=\"line\"></div><div class=\"line\">s1 === s2 <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。</p>\n<p>Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"foo\"</span>);</div><div class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s1) <span class=\"comment\">// \"foo\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"foo\"</span>);</div><div class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s2) <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"9-Set和Map\"><a href=\"#9-Set和Map\" class=\"headerlink\" title=\"9.Set和Map\"></a>9.Set和Map</h3><p>(1)Set类似于数组，但是成员的值都是唯一的，没有重复的值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 例一</span></div><div class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>]);</div><div class=\"line\">[...set]</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 例二</span></div><div class=\"line\"><span class=\"keyword\">const</span> items = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</div><div class=\"line\">items.size <span class=\"comment\">// 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 去除数组的重复成员</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> unique = [...new <span class=\"built_in\">Set</span>(arr)];<span class=\"comment\">// [3, 5, 2]</span></div></pre></td></tr></table></figure></p>\n<p>Set的操作方法：<br>  add(value)：添加某个值，返回Set结构本身。<br>  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>  has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>  clear()：清除所有成员，没有返回值。</p>\n<p>Set的遍历方法：<br>  keys()：返回键名的遍历器<br>  values()：返回键值的遍历器<br>  entries()：返回键值对的遍历器<br>  forEach()：使用回调函数遍历每个成员</p>\n<p>(2)WeakSet：<br>  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。<br>  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br>  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p>\n<p>(3)Map<br>Map类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\"><span class=\"keyword\">const</span> o = &#123;<span class=\"attr\">p</span>: <span class=\"string\">'Hello World'</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">m.set(o, <span class=\"string\">'content'</span>)</div><div class=\"line\">m.get(o) <span class=\"comment\">// \"content\"</span></div><div class=\"line\"></div><div class=\"line\">m.has(o) <span class=\"comment\">// true</span></div><div class=\"line\">m.delete(o) <span class=\"comment\">// true</span></div><div class=\"line\">m.has(o) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>(4)WeakMap<br>  WeakMap与Map的区别有两点。<br>  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。</p>\n<h3 id=\"10-Promise\"><a href=\"#10-Promise\" class=\"headerlink\" title=\"10.Promise\"></a>10.Promise</h3><p>(1)Promise对象有以下两个特点：</p>\n<p><1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。</1></p>\n<p><2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ... some code</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</div><div class=\"line\">    resolve(value);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    reject(error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</span></div><div class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// failure</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></2></p>\n<p>(2)Promise.all()<br>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 生成一个Promise对象的数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> promises = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> getJSON(<span class=\"string\">'/post/'</span> + id + <span class=\"string\">\".json\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all(promises).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Promise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。</p>\n<p>(3)Promise.resolve<br>作用是将现有对象转化为Promise对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">'foo'</span>))</div></pre></td></tr></table></figure></p>\n<p>(4)应用于加载图片<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> preloadImage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">    image.onload  = resolve;</div><div class=\"line\">    image.onerror = reject;</div><div class=\"line\">    image.src = path;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"11-Iterator\"><a href=\"#11-Iterator\" class=\"headerlink\" title=\"11.Iterator\"></a>11.Iterator</h3><p>(1)Iterator 的作用有三个：<br>一是为各种数据结构，提供一个统一的、简便的访问接口；<br>二是使得数据结构的成员能够按某种次序排列；<br>三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</p>\n<p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//数组的Symbol.iterator属性</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> iter = arr[<span class=\"built_in\">Symbol</span>.iterator]();</div><div class=\"line\"></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'a', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'b', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'c', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>原生具备 Iterator 接口的数据结构如下。<br>    Array<br>    Map<br>    Set<br>    String<br>    TypedArray<br>    函数的 arguments 对象</p>\n<p>(2)for…of循环<br>一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// red green blue</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//空对象obj部署了数组arr的Symbol.iterator属性</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</div><div class=\"line\">obj[<span class=\"built_in\">Symbol</span>.iterator] = arr[<span class=\"built_in\">Symbol</span>.iterator].bind(arr);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> obj) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// red green blue</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>for…in循环读取键名，for…of循环读取键值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 0 1 2 3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// a b c d</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>计算生成的数据结构 entries(),keys(),values()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pair <span class=\"keyword\">of</span> arr.entries()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(pair);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// [0, 'a']</span></div><div class=\"line\"><span class=\"comment\">// [1, 'b']</span></div><div class=\"line\"><span class=\"comment\">// [2, 'c']</span></div></pre></td></tr></table></figure></p>\n<p>与其他遍历语法的比较<br>for:最原始的写法，较为麻烦<br>forEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。<br>for…in:主要用于遍历对象，不适合遍历数组，for…in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。<br>    某些情况下，for…in循环会以任意顺序遍历键名。</p>\n<h3 id=\"12-Generator\"><a href=\"#12-Generator\" class=\"headerlink\" title=\"12.Generator\"></a>12.Generator</h3><p>(1)Generator 函数是一个状态机，封装了多个内部状态。<br>形式上，Generator 函数是一个普通函数，但是有两个特征。<br>一是，function关键字与函数名之间有一个星号；<br>二是，函数体内部使用yield表达式，定义不同的内部状态<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//该函数有三个状态：hello，world 和 return 语句（结束执行）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator();</div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'hello', done: false &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'world', done: false &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'ending', done: true &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>(2)与 Iterator 接口的关系<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myIterable = &#123;&#125;;</div><div class=\"line\">myIterable[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">[...myIterable] <span class=\"comment\">// [1, 2, 3]</span></div></pre></td></tr></table></figure></p>\n<p>(3)Generator.prototype.return()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = gen();</div><div class=\"line\"></div><div class=\"line\">g.next()        <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></div><div class=\"line\">g.return(<span class=\"string\">'foo'</span>) <span class=\"comment\">// &#123; value: \"foo\", done: true &#125;</span></div><div class=\"line\">g.next()        <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>(4)yield* 表达式<br>用来在一个 Generator 函数里面执行另一个 Generator 函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* foo();</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> v;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> bar())&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// \"x\"</span></div><div class=\"line\"><span class=\"comment\">// \"a\"</span></div><div class=\"line\"><span class=\"comment\">// \"b\"</span></div><div class=\"line\"><span class=\"comment\">// \"y\"</span></div></pre></td></tr></table></figure></p>\n<p>(5)应用<br>通过 Generator 函数部署 Ajax 操作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">yield</span> request(<span class=\"string\">\"http://some.url\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse(result);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(resp.value);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  makeAjaxCall(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    it.next(response);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = main();</div><div class=\"line\">it.next();</div></pre></td></tr></table></figure></p>\n<p>控制流管理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//多步操作</span></div><div class=\"line\">step1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">  step2(value1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) </span>&#123;</div><div class=\"line\">    step3(value2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) </span>&#123;</div><div class=\"line\">      step4(value3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//采用 Promise 改写上面的代码。</span></div><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(step1)</div><div class=\"line\">  .then(step2)</div><div class=\"line\">  .then(step3)</div><div class=\"line\">  .then(step4)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  .done();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Generator 函数可以进一步改善代码运行流程。（同步操作）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">longRunningTask</span>(<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value2 = <span class=\"keyword\">yield</span> step1(value1);</div><div class=\"line\">    <span class=\"keyword\">var</span> value3 = <span class=\"keyword\">yield</span> step2(value2);</div><div class=\"line\">    <span class=\"keyword\">var</span> value4 = <span class=\"keyword\">yield</span> step3(value3);</div><div class=\"line\">    <span class=\"keyword\">var</span> value5 = <span class=\"keyword\">yield</span> step4(value4);</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"13-async函数\"><a href=\"#13-async函数\" class=\"headerlink\" title=\"13.async函数\"></a>13.async函数</h3><p>async函数是Generator 函数的语法糖<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (error) reject(error);</div><div class=\"line\">      resolve(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//写成async函数，就是下面这样。</span></div><div class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>async函数对 Generator 函数的改进，体现在以下四点:</p>\n<p><1>内置执行器<br>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。<br>var result = asyncReadFile();</1></p>\n<p><2>更好的语义</2></p>\n<p><3>更广的适用性</3></p>\n<p><4>返回值是Promise</4></p>\n<p>基本用法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStockPriceByName</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> symbol = <span class=\"keyword\">await</span> getStockSymbol(name);</div><div class=\"line\">  <span class=\"keyword\">var</span> stockPrice = <span class=\"keyword\">await</span> getStockPrice(symbol);</div><div class=\"line\">  <span class=\"keyword\">return</span> stockPrice;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getStockPriceByName(<span class=\"string\">'goog'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>实例：按顺序完成异步操作：</p>\n<p><1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logInOrder</span>(<span class=\"params\">urls</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 远程读取所有URL</span></div><div class=\"line\">  <span class=\"keyword\">const</span> textPromises = urls.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(url).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.text());</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 按次序输出</span></div><div class=\"line\">  textPromises.reduce(<span class=\"function\">(<span class=\"params\">chain, textPromise</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> chain.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> textPromise)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">text</span> =&gt;</span> <span class=\"built_in\">console</span>.log(text));</div><div class=\"line\">  &#125;, <span class=\"built_in\">Promise</span>.resolve());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></1></p>\n<p><2>async 函数实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logInOrder</span>(<span class=\"params\">urls</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 并发读取远程URL</span></div><div class=\"line\">  <span class=\"keyword\">const</span> textPromises = urls.map(<span class=\"keyword\">async</span> url =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</div><div class=\"line\">    <span class=\"keyword\">return</span> response.text();</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 按次序输出</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> textPromise <span class=\"keyword\">of</span> textPromises) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> textPromise);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></2></p>\n<h3 id=\"14-Class\"><a href=\"#14-Class\" class=\"headerlink\" title=\"14.Class\"></a>14.Class</h3><p>(1).简介<br>class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//生成实例对象的传统方法是通过构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">  <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ES6写法</span></div><div class=\"line\"><span class=\"comment\">//定义类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//类的所有方法都定义在类的prototype属性上面</span></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(2).Class 的静态方法<br>加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> classMethod() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Foo.classMethod() <span class=\"comment\">// 'hello'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">foo.classMethod()</div><div class=\"line\"><span class=\"comment\">// TypeError: foo.classMethod is not a function</span></div></pre></td></tr></table></figure></p>\n<p>父类的静态方法，可以被子类继承。</p>\n<p>(3)Class的继承<br>子类必须在constructor方法中调用super方法，否则新建实例时会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y, color) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(x, y); <span class=\"comment\">// 调用父类的constructor(x, y)</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color + <span class=\"string\">' '</span> + <span class=\"keyword\">super</span>.toString(); <span class=\"comment\">// 调用父类的toString()</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><1>子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。</1></p>\n<p><2>子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">B.__proto__ === A <span class=\"comment\">// true</span></div><div class=\"line\">B.prototype.__proto__ === A.prototype <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></2></p>\n<h3 id=\"15-Decorator\"><a href=\"#15-Decorator\" class=\"headerlink\" title=\"15.Decorator\"></a>15.Decorator</h3><p>修饰器（Decorator）是一个函数，用来修改类的行为。<br>修饰器本质就是编译时执行的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@testable</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">  target.isTestable = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">isTestable</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">    target.isTestable = isTestable;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@testable(<span class=\"literal\">true</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</div><div class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">@testable(<span class=\"literal\">false</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</div><div class=\"line\">MyClass.isTestable <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>总结于：<a href=\"http://es6.ruanyifeng.com/#docs/\">ECMAScript6入门</a></p>\n<h3 id=\"1-Babel转码器\"><a href=\"#1-Babel转码器\" class=\"headerlink\" title=\"1.Babel转码器\"></a>1.Babel转码器</h3><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 转码前</span></div><div class=\"line\">input.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item + <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 转码后</span></div><div class=\"line\">input.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-let命令\"><a href=\"#2-let命令\" class=\"headerlink\" title=\"2.let命令\"></a>2.let命令</h3><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>\n<p>for循环的计数器，就很合适使用let命令。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(i);</div><div class=\"line\"><span class=\"comment\">//ReferenceError: i is not defined</span></div></pre></td></tr></table></figure></p>\n<p>注：(1)let不存在变量提升<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// let 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</div></pre></td></tr></table></figure></p>\n<p>(2)暂时性死区<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"comment\">//不受作用域外部影响</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3)不允许重复声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 报错</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 不报错</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(4)let实际上为 JavaScript 新增了块级作用域。<br>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IIFE 写法</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 块级作用域写法</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"const命令\"><a href=\"#const命令\" class=\"headerlink\" title=\"const命令\"></a>const命令</h3><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。<br>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为 foo 添加一个属性，可以成功</span></div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div><div class=\"line\">foo.prop <span class=\"comment\">// 123</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将 foo 指向另一个对象，就会报错</span></div><div class=\"line\">foo = &#123;&#125;; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//如果真的想将对象冻结，应该使用Object.freeze方法。</span></div><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</div><div class=\"line\"><span class=\"comment\">// 常规模式时，下面一行不起作用；</span></div><div class=\"line\"><span class=\"comment\">// 严格模式时，该行会报错</span></div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-变量的解构赋值\"><a href=\"#3-变量的解构赋值\" class=\"headerlink\" title=\"3.变量的解构赋值\"></a>3.变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。<br>(1))数组的解构赋值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</div><div class=\"line\">foo <span class=\"comment\">// 1</span></div><div class=\"line\">bar <span class=\"comment\">// 2</span></div><div class=\"line\">baz <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</div><div class=\"line\">third <span class=\"comment\">// \"baz\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\">head <span class=\"comment\">// 1</span></div><div class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>];</div><div class=\"line\">x <span class=\"comment\">// \"a\"</span></div><div class=\"line\">y <span class=\"comment\">// undefined</span></div><div class=\"line\">z <span class=\"comment\">// []</span></div></pre></td></tr></table></figure></p>\n<p>(2)对象的解构赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;; <span class=\"comment\">// SyntaxError: Duplicate declaration \"foo\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。</span></div><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\">(&#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;); <span class=\"comment\">// 成功</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//嵌套</span></div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">p</span>: [</div><div class=\"line\">    <span class=\"string\">'Hello'</span>,</div><div class=\"line\">    &#123; <span class=\"attr\">y</span>: <span class=\"string\">'World'</span> &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</div><div class=\"line\">x <span class=\"comment\">// \"Hello\"</span></div><div class=\"line\">y <span class=\"comment\">// \"World\"</span></div></pre></td></tr></table></figure></p>\n<p>(3)字符串的解构赋值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</div><div class=\"line\">a <span class=\"comment\">// \"h\"</span></div><div class=\"line\">b <span class=\"comment\">// \"e\"</span></div><div class=\"line\">c <span class=\"comment\">// \"l\"</span></div><div class=\"line\">d <span class=\"comment\">// \"l\"</span></div><div class=\"line\">e <span class=\"comment\">// \"o\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//对length属性解构赋值</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</div><div class=\"line\">len <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"4-字符串的扩展\"><a href=\"#4-字符串的扩展\" class=\"headerlink\" title=\"4.字符串的扩展\"></a>4.字符串的扩展</h3><p>(1)includes(), startsWith(), endsWith()<br>includes()：返回布尔值，表示是否找到了参数字符串。<br>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。<br>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这三个方法都支持第二个参数，表示开始搜索的位置。</span></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\"></div><div class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>(2)repeat() 表示将原字符串重复n次。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></div><div class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>) <span class=\"comment\">// \"hellohello\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>) <span class=\"comment\">// \"\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">NaN</span>) <span class=\"comment\">// \"\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-1</span>)<span class=\"comment\">// RangeError</span></div></pre></td></tr></table></figure></p>\n<p>(3)padStart()，padEnd()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。</span></div><div class=\"line\"><span class=\"string\">'1'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000001\"</span></div><div class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000012\"</span></div><div class=\"line\"><span class=\"string\">'123456'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000123456\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//另一个用途是提示字符串格式。</span></div><div class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></div><div class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></div></pre></td></tr></table></figure></p>\n<p>(4)模板字符串<br>模板字符串（template string）是增强版的字符串，用反引号（`）标识。<br>它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串中嵌入变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Bob\"</span>, time = <span class=\"string\">\"today\"</span>;</div><div class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>,   </div><div class=\"line\">how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span>   </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;;</div><div class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;obj.x + obj.y&#125;</span>`</span><span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"string\">`foo <span class=\"subst\">$&#123;fn()&#125;</span> bar`</span><span class=\"comment\">// foo Hello World bar</span></div></pre></td></tr></table></figure></p>\n<p>模板字符串甚至还能嵌套。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> tmpl = <span class=\"function\"><span class=\"params\">addrs</span> =&gt;</span> <span class=\"string\">`</div><div class=\"line\">  &lt;table&gt;</div><div class=\"line\">  <span class=\"subst\">$&#123;addrs.map(addr =&gt; <span class=\"string\">`</div><div class=\"line\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class=\"line\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class=\"line\">  `</span>).join(<span class=\"string\">''</span>)&#125;</span></div><div class=\"line\">  &lt;/table&gt;</div><div class=\"line\">`</span>;</div><div class=\"line\"><span class=\"comment\">//使用方法</span></div><div class=\"line\"><span class=\"keyword\">const</span> data = [</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'&lt;Jane&gt;'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Bond'</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'Lars'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'&lt;Croft&gt;'</span> &#125;,</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(tmpl(data));</div><div class=\"line\"><span class=\"comment\">// &lt;table&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// &lt;/table&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写法一</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'return '</span> + <span class=\"string\">'`Hello $&#123;name&#125;!`'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'name'</span>, str);</div><div class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 写法二</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'(name) =&gt; `Hello $&#123;name&#125;!`'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"built_in\">eval</span>.call(<span class=\"literal\">null</span>, str);</div><div class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"5-函数的扩展\"><a href=\"#5-函数的扩展\" class=\"headerlink\" title=\"5.函数的扩展\"></a>5.函数的扩展</h3><p>(1)函数的默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通常情况下，定义了默认值的参数，应该是函数的尾参数。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">'World'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// Hello World</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//函数的 length 属性：将返回没有指定默认值的参数个数。</span></div><div class=\"line\">log.length <span class=\"comment\">//1</span></div></pre></td></tr></table></figure></p>\n<p>(2)rest参数（形式为…变量名）<br>函数的length属性，不包括 rest 参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</div><div class=\"line\">    sum += val;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure></p>\n<p>(3)箭头函数<br>箭头左边是参数，右边是返回值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> v;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>箭头函数有几个使用注意点。</p>\n<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>\n<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>\n<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>\n<p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//嵌套的箭头函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">into</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">after</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">afterValue</span>) </span>&#123;</div><div class=\"line\">      array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</div><div class=\"line\">      <span class=\"keyword\">return</span> array;</div><div class=\"line\">    &#125;&#125;;</div><div class=\"line\">  &#125;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"><span class=\"keyword\">let</span> insert = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> (&#123;<span class=\"attr\">into</span>: <span class=\"function\">(<span class=\"params\">array</span>) =&gt;</span> (&#123;<span class=\"attr\">after</span>: <span class=\"function\">(<span class=\"params\">afterValue</span>) =&gt;</span> &#123;</div><div class=\"line\">  array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</div><div class=\"line\">  <span class=\"keyword\">return</span> array;</div><div class=\"line\">&#125;&#125;)&#125;);</div><div class=\"line\"></div><div class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></div></pre></td></tr></table></figure>\n<p>(4)尾调用优化<br>尾调用指某个函数的最后一步是调用另一个函数<br>“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。<br>如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> g(x);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>尾递归<br>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>\n<p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。<br>但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</p>\n<h3 id=\"6-数组的扩展\"><a href=\"#6-数组的扩展\" class=\"headerlink\" title=\"6.数组的扩展\"></a>6.数组的扩展</h3><p>(1)扩展运算符是三个点（…）<br>该运算符主要用于函数调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5 的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">f(...args);</div></pre></td></tr></table></figure></p>\n<p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5的 写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6 的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">arr1.push(...arr2);</div></pre></td></tr></table></figure></p>\n<p>扩展运算符的应用：</p>\n<p><1>合并数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more)</div><div class=\"line\"><span class=\"comment\">// ES6</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES5的合并数组</span></div><div class=\"line\">arr1.concat(arr2, arr3);</div><div class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的合并数组</span></div><div class=\"line\">[...arr1, ...arr2, ...arr3]</div><div class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div></pre></td></tr></table></figure></p>\n<p><2>与解构赋值结合<br>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">first <span class=\"comment\">// 1</span></div><div class=\"line\">rest  <span class=\"comment\">// [2, 3, 4, 5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [];</div><div class=\"line\">first <span class=\"comment\">// undefined</span></div><div class=\"line\">rest  <span class=\"comment\">// []</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"string\">\"foo\"</span>];</div><div class=\"line\">first  <span class=\"comment\">// \"foo\"</span></div><div class=\"line\">rest   <span class=\"comment\">// []</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [...butLast, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure></p>\n<p><3>字符串<br>扩展运算符还可以将字符串转为真正的数组。<br>能够正确识别32位的Unicode字符。<br>正确返回字符串长度的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[...<span class=\"string\">'hello'</span>]</div><div class=\"line\"><span class=\"comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [...str].length;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">length(<span class=\"string\">'x\\uD83D\\uDE80y'</span>) <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure></p>\n<p>(2)Array.from()<br>Array.from方法用于将两类对象转为真正的数组：<br>类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// NodeList对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> ps = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'p'</span>);</div><div class=\"line\"><span class=\"built_in\">Array</span>.from(ps).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(p);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// arguments对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>扩展运算符（…）也可以将某些数据结构转为数组。<br>区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p>\n<p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike, x =&gt; x * x);</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (x) =&gt; x * x)</div><div class=\"line\"><span class=\"comment\">// [1, 4, 9]</span></div></pre></td></tr></table></figure></p>\n<p>下面的例子是取出一组DOM节点的文本内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> spans = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'span.name'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// map()</span></div><div class=\"line\"><span class=\"keyword\">let</span> names1 = <span class=\"built_in\">Array</span>.prototype.map.call(spans, s =&gt; s.textContent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Array.from()</span></div><div class=\"line\"><span class=\"keyword\">let</span> names2 = <span class=\"built_in\">Array</span>.from(spans, s =&gt; s.textContent)</div></pre></td></tr></table></figure></p>\n<p>下面的例子将数组中布尔值为false的成员转为0。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, , <span class=\"number\">2</span>, , <span class=\"number\">3</span>], (n) =&gt; n || <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// [1, 0, 2, 0, 3]</span></div></pre></td></tr></table></figure></p>\n<p>(3)Array.of()<br>Array.of方法用于将一组值，转换为数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>).length <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<p>(4)数组实例的 find() 和 findIndex()<br>数组实例的find方法，用于找出第一个符合条件的数组成员。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">-5</span>, <span class=\"number\">10</span>].find(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n &lt; <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// -5</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</div><div class=\"line\">&#125;) <span class=\"comment\">// 10</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</div><div class=\"line\">&#125;) <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<p>(5)数组实例的fill()<br>fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>)</div><div class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// ['a', 7, 'c']</span></div></pre></td></tr></table></figure></p>\n<p>(6)数组实例的 entries()，keys() 和 values()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(index);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 'a'</span></div><div class=\"line\"><span class=\"comment\">// 'b'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0 \"a\"</span></div><div class=\"line\"><span class=\"comment\">// 1 \"b\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"7-对象的扩展\"><a href=\"#7-对象的扩展\" class=\"headerlink\" title=\"7.对象的扩展\"></a>7.对象的扩展</h3><p>(1)Object.is()<br>与严格比较运算符（===）的行为基本一致。<br>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span> <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>(2)Object.assign()<br>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。<br>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</div><div class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></div></pre></td></tr></table></figure></p>\n<p>Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。<br>Object.assign方法实行的是浅拷贝，而不是深拷贝。</p>\n<p>Object.assign方法有很多用处。</p>\n<p><1>为对象添加属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;x, y&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><2>为对象添加方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.assign(SomeClass.prototype, &#123;</div><div class=\"line\">  someMethod(arg1, arg2) &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;,</div><div class=\"line\">  anotherMethod() &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于下面的写法</span></div><div class=\"line\">SomeClass.prototype.someMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</div><div class=\"line\">  ···</div><div class=\"line\">&#125;;</div><div class=\"line\">SomeClass.prototype.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  ···</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><3>克隆对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, origin);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><4>合并多个对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> merge =</div><div class=\"line\">  <span class=\"function\">(<span class=\"params\">target, ...sources</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(target, ...sources);</div></pre></td></tr></table></figure></p>\n<p><5>为属性指定默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> DEFAULTS = &#123;</div><div class=\"line\">  <span class=\"attr\">logLevel</span>: <span class=\"number\">0</span>,</div><div class=\"line\">  <span class=\"attr\">outputFormat</span>: <span class=\"string\">'html'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processContent</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">  options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(options);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3)属性的可枚举性<br>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<br>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'foo'</span>)</div><div class=\"line\"><span class=\"comment\">//  &#123;</span></div><div class=\"line\"><span class=\"comment\">//    value: 123,</span></div><div class=\"line\"><span class=\"comment\">//    writable: true,</span></div><div class=\"line\"><span class=\"comment\">//    enumerable: true, 可枚举性</span></div><div class=\"line\"><span class=\"comment\">//    configurable: true</span></div><div class=\"line\"><span class=\"comment\">//  &#125;</span></div></pre></td></tr></table></figure></p>\n<p>ES5 有三个操作会忽略enumerable为false的属性。<br>  for…in循环：只遍历对象自身的和继承的可枚举的属性<br>  Object.keys()：返回对象自身的所有可枚举的属性的键名<br>  JSON.stringify()：只串行化对象自身的可枚举的属性<br>ES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。<br>尽量不要用for…in循环，而用Object.keys()代替。</p>\n<p>(4)属性的遍历<br>ES6 一共有5种方法可以遍历对象的属性。</p>\n<p><1>for…in</p>\n<p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p>\n<p><2>Object.keys(obj)</p>\n<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。</p>\n<p><3>Object.getOwnPropertyNames(obj)</p>\n<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。</p>\n<p><4>Object.getOwnPropertySymbols(obj)</p>\n<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。</p>\n<p><5>Reflect.ownKeys(obj)</p>\n<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。</p>\n<p>(5)<strong>proto</strong>属性<br>无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的<br>Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> proto = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, proto);</div><div class=\"line\"></div><div class=\"line\">proto.y = <span class=\"number\">20</span>;</div><div class=\"line\">proto.z = <span class=\"number\">40</span>;</div><div class=\"line\"></div><div class=\"line\">obj.x <span class=\"comment\">// 10</span></div><div class=\"line\">obj.y <span class=\"comment\">// 20</span></div><div class=\"line\">obj.z <span class=\"comment\">// 40</span></div></pre></td></tr></table></figure></p>\n<p>(6)Object.keys()，Object.values()，Object.entries()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\"><span class=\"comment\">// [\"foo\", \"baz\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</div><div class=\"line\"><span class=\"comment\">// [\"bar\", 42]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.entries(obj)</div><div class=\"line\"><span class=\"comment\">// [ [\"foo\", \"bar\"], [\"baz\", 42] ]</span></div></pre></td></tr></table></figure></p>\n<p>(7)Null 传导运算符<br>如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。<br>比如，要读取message.body.user.firstName，安全的写法是写成下面这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> firstName = (message</div><div class=\"line\">  &amp;&amp; message.body</div><div class=\"line\">  &amp;&amp; message.body.user</div><div class=\"line\">  &amp;&amp; message.body.user.firstName) || <span class=\"string\">'default'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”</span></div><div class=\"line\"><span class=\"keyword\">const</span> firstName = message?.body?.user?.firstName || <span class=\"string\">'default'</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"8-Symbol\"><a href=\"#8-Symbol\" class=\"headerlink\" title=\"8.Symbol\"></a>8.Symbol</h3><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'bar'</span>);</div><div class=\"line\"></div><div class=\"line\">s1 <span class=\"comment\">// Symbol(foo)</span></div><div class=\"line\">s2 <span class=\"comment\">// Symbol(bar)</span></div><div class=\"line\"></div><div class=\"line\">s1.toString() <span class=\"comment\">// \"Symbol(foo)\"</span></div><div class=\"line\">s2.toString() <span class=\"comment\">// \"Symbol(bar)\"</span></div></pre></td></tr></table></figure></p>\n<p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p>\n<p>Symbol.for():重新使用同一个Symbol值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</div><div class=\"line\"></div><div class=\"line\">s1 === s2 <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。</p>\n<p>Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"foo\"</span>);</div><div class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s1) <span class=\"comment\">// \"foo\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"foo\"</span>);</div><div class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s2) <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"9-Set和Map\"><a href=\"#9-Set和Map\" class=\"headerlink\" title=\"9.Set和Map\"></a>9.Set和Map</h3><p>(1)Set类似于数组，但是成员的值都是唯一的，没有重复的值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 例一</span></div><div class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>]);</div><div class=\"line\">[...set]</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 例二</span></div><div class=\"line\"><span class=\"keyword\">const</span> items = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</div><div class=\"line\">items.size <span class=\"comment\">// 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 去除数组的重复成员</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> unique = [...new <span class=\"built_in\">Set</span>(arr)];<span class=\"comment\">// [3, 5, 2]</span></div></pre></td></tr></table></figure></p>\n<p>Set的操作方法：<br>  add(value)：添加某个值，返回Set结构本身。<br>  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>  has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>  clear()：清除所有成员，没有返回值。</p>\n<p>Set的遍历方法：<br>  keys()：返回键名的遍历器<br>  values()：返回键值的遍历器<br>  entries()：返回键值对的遍历器<br>  forEach()：使用回调函数遍历每个成员</p>\n<p>(2)WeakSet：<br>  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。<br>  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br>  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p>\n<p>(3)Map<br>Map类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\"><span class=\"keyword\">const</span> o = &#123;<span class=\"attr\">p</span>: <span class=\"string\">'Hello World'</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">m.set(o, <span class=\"string\">'content'</span>)</div><div class=\"line\">m.get(o) <span class=\"comment\">// \"content\"</span></div><div class=\"line\"></div><div class=\"line\">m.has(o) <span class=\"comment\">// true</span></div><div class=\"line\">m.delete(o) <span class=\"comment\">// true</span></div><div class=\"line\">m.has(o) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>(4)WeakMap<br>  WeakMap与Map的区别有两点。<br>  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。</p>\n<h3 id=\"10-Promise\"><a href=\"#10-Promise\" class=\"headerlink\" title=\"10.Promise\"></a>10.Promise</h3><p>(1)Promise对象有以下两个特点：</p>\n<p><1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。</p>\n<p><2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ... some code</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</div><div class=\"line\">    resolve(value);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    reject(error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</span></div><div class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// failure</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>(2)Promise.all()<br>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 生成一个Promise对象的数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> promises = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> getJSON(<span class=\"string\">'/post/'</span> + id + <span class=\"string\">\".json\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all(promises).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Promise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。</p>\n<p>(3)Promise.resolve<br>作用是将现有对象转化为Promise对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">'foo'</span>))</div></pre></td></tr></table></figure></p>\n<p>(4)应用于加载图片<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> preloadImage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">    image.onload  = resolve;</div><div class=\"line\">    image.onerror = reject;</div><div class=\"line\">    image.src = path;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"11-Iterator\"><a href=\"#11-Iterator\" class=\"headerlink\" title=\"11.Iterator\"></a>11.Iterator</h3><p>(1)Iterator 的作用有三个：<br>一是为各种数据结构，提供一个统一的、简便的访问接口；<br>二是使得数据结构的成员能够按某种次序排列；<br>三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</p>\n<p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//数组的Symbol.iterator属性</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> iter = arr[<span class=\"built_in\">Symbol</span>.iterator]();</div><div class=\"line\"></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'a', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'b', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'c', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>原生具备 Iterator 接口的数据结构如下。<br>    Array<br>    Map<br>    Set<br>    String<br>    TypedArray<br>    函数的 arguments 对象</p>\n<p>(2)for…of循环<br>一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// red green blue</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//空对象obj部署了数组arr的Symbol.iterator属性</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</div><div class=\"line\">obj[<span class=\"built_in\">Symbol</span>.iterator] = arr[<span class=\"built_in\">Symbol</span>.iterator].bind(arr);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> obj) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// red green blue</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>for…in循环读取键名，for…of循环读取键值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 0 1 2 3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// a b c d</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>计算生成的数据结构 entries(),keys(),values()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pair <span class=\"keyword\">of</span> arr.entries()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(pair);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// [0, 'a']</span></div><div class=\"line\"><span class=\"comment\">// [1, 'b']</span></div><div class=\"line\"><span class=\"comment\">// [2, 'c']</span></div></pre></td></tr></table></figure></p>\n<p>与其他遍历语法的比较<br>for:最原始的写法，较为麻烦<br>forEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。<br>for…in:主要用于遍历对象，不适合遍历数组，for…in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。<br>    某些情况下，for…in循环会以任意顺序遍历键名。</p>\n<h3 id=\"12-Generator\"><a href=\"#12-Generator\" class=\"headerlink\" title=\"12.Generator\"></a>12.Generator</h3><p>(1)Generator 函数是一个状态机，封装了多个内部状态。<br>形式上，Generator 函数是一个普通函数，但是有两个特征。<br>一是，function关键字与函数名之间有一个星号；<br>二是，函数体内部使用yield表达式，定义不同的内部状态<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//该函数有三个状态：hello，world 和 return 语句（结束执行）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator();</div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'hello', done: false &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'world', done: false &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'ending', done: true &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>(2)与 Iterator 接口的关系<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myIterable = &#123;&#125;;</div><div class=\"line\">myIterable[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">[...myIterable] <span class=\"comment\">// [1, 2, 3]</span></div></pre></td></tr></table></figure></p>\n<p>(3)Generator.prototype.return()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = gen();</div><div class=\"line\"></div><div class=\"line\">g.next()        <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></div><div class=\"line\">g.return(<span class=\"string\">'foo'</span>) <span class=\"comment\">// &#123; value: \"foo\", done: true &#125;</span></div><div class=\"line\">g.next()        <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>(4)yield* 表达式<br>用来在一个 Generator 函数里面执行另一个 Generator 函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* foo();</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> v;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> bar())&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// \"x\"</span></div><div class=\"line\"><span class=\"comment\">// \"a\"</span></div><div class=\"line\"><span class=\"comment\">// \"b\"</span></div><div class=\"line\"><span class=\"comment\">// \"y\"</span></div></pre></td></tr></table></figure></p>\n<p>(5)应用<br>通过 Generator 函数部署 Ajax 操作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">yield</span> request(<span class=\"string\">\"http://some.url\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse(result);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(resp.value);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  makeAjaxCall(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    it.next(response);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = main();</div><div class=\"line\">it.next();</div></pre></td></tr></table></figure></p>\n<p>控制流管理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//多步操作</span></div><div class=\"line\">step1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">  step2(value1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) </span>&#123;</div><div class=\"line\">    step3(value2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) </span>&#123;</div><div class=\"line\">      step4(value3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//采用 Promise 改写上面的代码。</span></div><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(step1)</div><div class=\"line\">  .then(step2)</div><div class=\"line\">  .then(step3)</div><div class=\"line\">  .then(step4)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  .done();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Generator 函数可以进一步改善代码运行流程。（同步操作）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">longRunningTask</span>(<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value2 = <span class=\"keyword\">yield</span> step1(value1);</div><div class=\"line\">    <span class=\"keyword\">var</span> value3 = <span class=\"keyword\">yield</span> step2(value2);</div><div class=\"line\">    <span class=\"keyword\">var</span> value4 = <span class=\"keyword\">yield</span> step3(value3);</div><div class=\"line\">    <span class=\"keyword\">var</span> value5 = <span class=\"keyword\">yield</span> step4(value4);</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"13-async函数\"><a href=\"#13-async函数\" class=\"headerlink\" title=\"13.async函数\"></a>13.async函数</h3><p>async函数是Generator 函数的语法糖<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (error) reject(error);</div><div class=\"line\">      resolve(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//写成async函数，就是下面这样。</span></div><div class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>async函数对 Generator 函数的改进，体现在以下四点:</p>\n<p><1>内置执行器<br>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。<br>var result = asyncReadFile();</p>\n<p><2>更好的语义</p>\n<p><3>更广的适用性</p>\n<p><4>返回值是Promise</p>\n<p>基本用法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStockPriceByName</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> symbol = <span class=\"keyword\">await</span> getStockSymbol(name);</div><div class=\"line\">  <span class=\"keyword\">var</span> stockPrice = <span class=\"keyword\">await</span> getStockPrice(symbol);</div><div class=\"line\">  <span class=\"keyword\">return</span> stockPrice;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getStockPriceByName(<span class=\"string\">'goog'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>实例：按顺序完成异步操作：</p>\n<p><1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logInOrder</span>(<span class=\"params\">urls</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 远程读取所有URL</span></div><div class=\"line\">  <span class=\"keyword\">const</span> textPromises = urls.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(url).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.text());</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 按次序输出</span></div><div class=\"line\">  textPromises.reduce(<span class=\"function\">(<span class=\"params\">chain, textPromise</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> chain.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> textPromise)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">text</span> =&gt;</span> <span class=\"built_in\">console</span>.log(text));</div><div class=\"line\">  &#125;, <span class=\"built_in\">Promise</span>.resolve());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><2>async 函数实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logInOrder</span>(<span class=\"params\">urls</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 并发读取远程URL</span></div><div class=\"line\">  <span class=\"keyword\">const</span> textPromises = urls.map(<span class=\"keyword\">async</span> url =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</div><div class=\"line\">    <span class=\"keyword\">return</span> response.text();</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 按次序输出</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> textPromise <span class=\"keyword\">of</span> textPromises) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> textPromise);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"14-Class\"><a href=\"#14-Class\" class=\"headerlink\" title=\"14.Class\"></a>14.Class</h3><p>(1).简介<br>class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//生成实例对象的传统方法是通过构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">  <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ES6写法</span></div><div class=\"line\"><span class=\"comment\">//定义类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//类的所有方法都定义在类的prototype属性上面</span></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(2).Class 的静态方法<br>加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> classMethod() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Foo.classMethod() <span class=\"comment\">// 'hello'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">foo.classMethod()</div><div class=\"line\"><span class=\"comment\">// TypeError: foo.classMethod is not a function</span></div></pre></td></tr></table></figure></p>\n<p>父类的静态方法，可以被子类继承。</p>\n<p>(3)Class的继承<br>子类必须在constructor方法中调用super方法，否则新建实例时会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y, color) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(x, y); <span class=\"comment\">// 调用父类的constructor(x, y)</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color + <span class=\"string\">' '</span> + <span class=\"keyword\">super</span>.toString(); <span class=\"comment\">// 调用父类的toString()</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><1>子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。</p>\n<p><2>子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">B.__proto__ === A <span class=\"comment\">// true</span></div><div class=\"line\">B.prototype.__proto__ === A.prototype <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"15-Decorator\"><a href=\"#15-Decorator\" class=\"headerlink\" title=\"15.Decorator\"></a>15.Decorator</h3><p>修饰器（Decorator）是一个函数，用来修改类的行为。<br>修饰器本质就是编译时执行的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@testable</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">  target.isTestable = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">isTestable</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">    target.isTestable = isTestable;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@testable(<span class=\"literal\">true</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</div><div class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">@testable(<span class=\"literal\">false</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</div><div class=\"line\">MyClass.isTestable <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n"},{"title":"ajax的一些小技巧","date":"2017-02-16T09:32:19.000Z","_content":"\n### 1.利用html5 formData实现ajax上传文件\n```html\n<div id=\"coverbg\">\n  <form id=\"uploadbgPic\" action=\"url/uf\" method=\"post\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"file\" accept=\"image/*\" class=\"upload2\">\n  </form>\n</div>\n```\n```javascript\n$('#coverbg').on('change','.upload2',function(){\n    var formData = new FormData($(\"#uploadbgPic\")[0]);\n    //console.log(formData)\n    $.ajax({\n        url: url + '/uf' ,\n        type: 'POST',\n        data: formData,\n        async: false,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            var data = result.data;\n            $('#coverbg').find('img').attr('src',baseAccessUploadPathPc + data);\n        },\n        error: function (err) {\n           console.log(err);\n        }\n    });\n});\n```\n\n### 2.递归运行解决ajax无顺序，不用for循环并发\n如果要重复发起请求，for循环不能保证顺序。\n```javascript\nvar n = 0;\n(function uploadPic(){\n    var formData = new FormData(n);\n    formData.append('file', file[n]);\n    $.ajax({\n        url: ctx + '/uf',\n        type: 'POST',\n        data: formData,\n        async: true,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            if (result.suc) {\n                 var data = result.data;\n                 /**\n                 * 数据处理\n                 */\n                 n++;\n                 if(n<file.length)uploadPic();\n            }else{\n                 alert(result.msg)\n            }\n        },\n        error: function (err) {\n            console.log(err);\n        }\n     });\n})(n);\n\n```\n","source":"_posts/ajax.md","raw":"---\ntitle: ajax的一些小技巧\ndate: 2017-02-16 17:32:19\ntags:\n---\n\n### 1.利用html5 formData实现ajax上传文件\n```html\n<div id=\"coverbg\">\n  <form id=\"uploadbgPic\" action=\"url/uf\" method=\"post\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"file\" accept=\"image/*\" class=\"upload2\">\n  </form>\n</div>\n```\n```javascript\n$('#coverbg').on('change','.upload2',function(){\n    var formData = new FormData($(\"#uploadbgPic\")[0]);\n    //console.log(formData)\n    $.ajax({\n        url: url + '/uf' ,\n        type: 'POST',\n        data: formData,\n        async: false,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            var data = result.data;\n            $('#coverbg').find('img').attr('src',baseAccessUploadPathPc + data);\n        },\n        error: function (err) {\n           console.log(err);\n        }\n    });\n});\n```\n\n### 2.递归运行解决ajax无顺序，不用for循环并发\n如果要重复发起请求，for循环不能保证顺序。\n```javascript\nvar n = 0;\n(function uploadPic(){\n    var formData = new FormData(n);\n    formData.append('file', file[n]);\n    $.ajax({\n        url: ctx + '/uf',\n        type: 'POST',\n        data: formData,\n        async: true,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            if (result.suc) {\n                 var data = result.data;\n                 /**\n                 * 数据处理\n                 */\n                 n++;\n                 if(n<file.length)uploadPic();\n            }else{\n                 alert(result.msg)\n            }\n        },\n        error: function (err) {\n            console.log(err);\n        }\n     });\n})(n);\n\n```\n","slug":"ajax","published":1,"updated":"2017-02-16T09:50:10.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyxv0002egy71zdxu3t2","content":"<h3 id=\"1-利用html5-formData实现ajax上传文件\"><a href=\"#1-利用html5-formData实现ajax上传文件\" class=\"headerlink\" title=\"1.利用html5 formData实现ajax上传文件\"></a>1.利用html5 formData实现ajax上传文件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"coverbg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uploadbgPic\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"url/uf\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"upload2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#coverbg'</span>).on(<span class=\"string\">'change'</span>,<span class=\"string\">'.upload2'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData($(<span class=\"string\">\"#uploadbgPic\"</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"comment\">//console.log(formData)</span></div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        <span class=\"attr\">url</span>: url + <span class=\"string\">'/uf'</span> ,</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: formData,</div><div class=\"line\">        <span class=\"attr\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">contentType</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">processData</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> data = result.data;</div><div class=\"line\">            $(<span class=\"string\">'#coverbg'</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>,baseAccessUploadPathPc + data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">           <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"2-递归运行解决ajax无顺序，不用for循环并发\"><a href=\"#2-递归运行解决ajax无顺序，不用for循环并发\" class=\"headerlink\" title=\"2.递归运行解决ajax无顺序，不用for循环并发\"></a>2.递归运行解决ajax无顺序，不用for循环并发</h3><p>如果要重复发起请求，for循环不能保证顺序。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uploadPic</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(n);</div><div class=\"line\">    formData.append(<span class=\"string\">'file'</span>, file[n]);</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        <span class=\"attr\">url</span>: ctx + <span class=\"string\">'/uf'</span>,</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: formData,</div><div class=\"line\">        <span class=\"attr\">async</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">contentType</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">processData</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (result.suc) &#123;</div><div class=\"line\">                 <span class=\"keyword\">var</span> data = result.data;</div><div class=\"line\">                 <span class=\"comment\">/**</span></div><div class=\"line\">                 * 数据处理</div><div class=\"line\">                 */</div><div class=\"line\">                 n++;</div><div class=\"line\">                 <span class=\"keyword\">if</span>(n&lt;file.length)uploadPic();</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                 alert(result.msg)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">&#125;)(n);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"1-利用html5-formData实现ajax上传文件\"><a href=\"#1-利用html5-formData实现ajax上传文件\" class=\"headerlink\" title=\"1.利用html5 formData实现ajax上传文件\"></a>1.利用html5 formData实现ajax上传文件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"coverbg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uploadbgPic\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"url/uf\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"upload2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#coverbg'</span>).on(<span class=\"string\">'change'</span>,<span class=\"string\">'.upload2'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData($(<span class=\"string\">\"#uploadbgPic\"</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"comment\">//console.log(formData)</span></div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        <span class=\"attr\">url</span>: url + <span class=\"string\">'/uf'</span> ,</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: formData,</div><div class=\"line\">        <span class=\"attr\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">contentType</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">processData</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> data = result.data;</div><div class=\"line\">            $(<span class=\"string\">'#coverbg'</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>,baseAccessUploadPathPc + data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">           <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"2-递归运行解决ajax无顺序，不用for循环并发\"><a href=\"#2-递归运行解决ajax无顺序，不用for循环并发\" class=\"headerlink\" title=\"2.递归运行解决ajax无顺序，不用for循环并发\"></a>2.递归运行解决ajax无顺序，不用for循环并发</h3><p>如果要重复发起请求，for循环不能保证顺序。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uploadPic</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(n);</div><div class=\"line\">    formData.append(<span class=\"string\">'file'</span>, file[n]);</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        <span class=\"attr\">url</span>: ctx + <span class=\"string\">'/uf'</span>,</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'POST'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>: formData,</div><div class=\"line\">        <span class=\"attr\">async</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">contentType</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">processData</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (result.suc) &#123;</div><div class=\"line\">                 <span class=\"keyword\">var</span> data = result.data;</div><div class=\"line\">                 <span class=\"comment\">/**</div><div class=\"line\">                 * 数据处理</div><div class=\"line\">                 */</span></div><div class=\"line\">                 n++;</div><div class=\"line\">                 <span class=\"keyword\">if</span>(n&lt;file.length)uploadPic();</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                 alert(result.msg)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">&#125;)(n);</div></pre></td></tr></table></figure></p>\n"},{"title":"css命名","date":"2017-01-14T05:57:04.000Z","_content":"\n``` html\n头：header\n内容：content/container　　\n尾：footer　　\n导航：nav　　\n侧栏：sidebar　　\n栏目：column　　\n页面外围控制整体佈局宽度：wrapper　　\n左右中：left right center　　\n登录条：loginbar　　\n标志：logo　　\n广告：banner　　\n页面主体：main　　\n热点：hot　　\n新闻：news　　\n下载：download　　\n子导航：subnav　　\n菜单：menu　　\n子菜单：submenu　　\n搜索：search　　\n友情链接：friendlink　　\n页脚：footer　　\n版权：copyright　　\n滚动：scroll　　\n内容：content　　\n标签：tags　　\n文章列表：list　　\n提示信息：msg　　\n小技巧：tips　　\n栏目标题：title　　\n加入：joinus　　\n指南：guide　　\n服务：service　　\n注册：regsiter　　\n状态：status　　\n投票：vote　　\n合作伙伴：partner　　\n导航：nav　　\n主导航：mainnav　　\n子导航：subnav　　\n顶导航：topnav　　\n边导航：sidebar　　\n左导航：leftsidebar　　\n右导航：rightsidebar　　\n菜单：menu　　\n子菜单：submenu　　\n标题: title　　\n摘要: summary\n\n```","source":"_posts/css-name.md","raw":"---\ntitle: css命名\ndate: 2017-01-14 13:57:04\ntags:\n---\n\n``` html\n头：header\n内容：content/container　　\n尾：footer　　\n导航：nav　　\n侧栏：sidebar　　\n栏目：column　　\n页面外围控制整体佈局宽度：wrapper　　\n左右中：left right center　　\n登录条：loginbar　　\n标志：logo　　\n广告：banner　　\n页面主体：main　　\n热点：hot　　\n新闻：news　　\n下载：download　　\n子导航：subnav　　\n菜单：menu　　\n子菜单：submenu　　\n搜索：search　　\n友情链接：friendlink　　\n页脚：footer　　\n版权：copyright　　\n滚动：scroll　　\n内容：content　　\n标签：tags　　\n文章列表：list　　\n提示信息：msg　　\n小技巧：tips　　\n栏目标题：title　　\n加入：joinus　　\n指南：guide　　\n服务：service　　\n注册：regsiter　　\n状态：status　　\n投票：vote　　\n合作伙伴：partner　　\n导航：nav　　\n主导航：mainnav　　\n子导航：subnav　　\n顶导航：topnav　　\n边导航：sidebar　　\n左导航：leftsidebar　　\n右导航：rightsidebar　　\n菜单：menu　　\n子菜单：submenu　　\n标题: title　　\n摘要: summary\n\n```","slug":"css-name","published":1,"updated":"2017-01-16T09:48:48.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyxx0003egy791hbl37p","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">头：header</div><div class=\"line\">内容：content/container　　</div><div class=\"line\">尾：footer　　</div><div class=\"line\">导航：nav　　</div><div class=\"line\">侧栏：sidebar　　</div><div class=\"line\">栏目：column　　</div><div class=\"line\">页面外围控制整体佈局宽度：wrapper　　</div><div class=\"line\">左右中：left right center　　</div><div class=\"line\">登录条：loginbar　　</div><div class=\"line\">标志：logo　　</div><div class=\"line\">广告：banner　　</div><div class=\"line\">页面主体：main　　</div><div class=\"line\">热点：hot　　</div><div class=\"line\">新闻：news　　</div><div class=\"line\">下载：download　　</div><div class=\"line\">子导航：subnav　　</div><div class=\"line\">菜单：menu　　</div><div class=\"line\">子菜单：submenu　　</div><div class=\"line\">搜索：search　　</div><div class=\"line\">友情链接：friendlink　　</div><div class=\"line\">页脚：footer　　</div><div class=\"line\">版权：copyright　　</div><div class=\"line\">滚动：scroll　　</div><div class=\"line\">内容：content　　</div><div class=\"line\">标签：tags　　</div><div class=\"line\">文章列表：list　　</div><div class=\"line\">提示信息：msg　　</div><div class=\"line\">小技巧：tips　　</div><div class=\"line\">栏目标题：title　　</div><div class=\"line\">加入：joinus　　</div><div class=\"line\">指南：guide　　</div><div class=\"line\">服务：service　　</div><div class=\"line\">注册：regsiter　　</div><div class=\"line\">状态：status　　</div><div class=\"line\">投票：vote　　</div><div class=\"line\">合作伙伴：partner　　</div><div class=\"line\">导航：nav　　</div><div class=\"line\">主导航：mainnav　　</div><div class=\"line\">子导航：subnav　　</div><div class=\"line\">顶导航：topnav　　</div><div class=\"line\">边导航：sidebar　　</div><div class=\"line\">左导航：leftsidebar　　</div><div class=\"line\">右导航：rightsidebar　　</div><div class=\"line\">菜单：menu　　</div><div class=\"line\">子菜单：submenu　　</div><div class=\"line\">标题: title　　</div><div class=\"line\">摘要: summary</div></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">头：header</div><div class=\"line\">内容：content/container　　</div><div class=\"line\">尾：footer　　</div><div class=\"line\">导航：nav　　</div><div class=\"line\">侧栏：sidebar　　</div><div class=\"line\">栏目：column　　</div><div class=\"line\">页面外围控制整体佈局宽度：wrapper　　</div><div class=\"line\">左右中：left right center　　</div><div class=\"line\">登录条：loginbar　　</div><div class=\"line\">标志：logo　　</div><div class=\"line\">广告：banner　　</div><div class=\"line\">页面主体：main　　</div><div class=\"line\">热点：hot　　</div><div class=\"line\">新闻：news　　</div><div class=\"line\">下载：download　　</div><div class=\"line\">子导航：subnav　　</div><div class=\"line\">菜单：menu　　</div><div class=\"line\">子菜单：submenu　　</div><div class=\"line\">搜索：search　　</div><div class=\"line\">友情链接：friendlink　　</div><div class=\"line\">页脚：footer　　</div><div class=\"line\">版权：copyright　　</div><div class=\"line\">滚动：scroll　　</div><div class=\"line\">内容：content　　</div><div class=\"line\">标签：tags　　</div><div class=\"line\">文章列表：list　　</div><div class=\"line\">提示信息：msg　　</div><div class=\"line\">小技巧：tips　　</div><div class=\"line\">栏目标题：title　　</div><div class=\"line\">加入：joinus　　</div><div class=\"line\">指南：guide　　</div><div class=\"line\">服务：service　　</div><div class=\"line\">注册：regsiter　　</div><div class=\"line\">状态：status　　</div><div class=\"line\">投票：vote　　</div><div class=\"line\">合作伙伴：partner　　</div><div class=\"line\">导航：nav　　</div><div class=\"line\">主导航：mainnav　　</div><div class=\"line\">子导航：subnav　　</div><div class=\"line\">顶导航：topnav　　</div><div class=\"line\">边导航：sidebar　　</div><div class=\"line\">左导航：leftsidebar　　</div><div class=\"line\">右导航：rightsidebar　　</div><div class=\"line\">菜单：menu　　</div><div class=\"line\">子菜单：submenu　　</div><div class=\"line\">标题: title　　</div><div class=\"line\">摘要: summary</div></pre></td></tr></table></figure>"},{"title":"常用css3总结","date":"2017-02-17T03:15:11.000Z","_content":"[W3C手册在此](http://www.w3school.com.cn/cssref/index.asp)\n### 1.圆角 --- border-radius\n```css\n.box{\n  /* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/\n  -moz-border-radius:3px;\n  -webkit-border-radius:3px;\n  border-radius:3px;\n\n  border-radius: 2em 1em 4em / 0.5em 3em;\n  /*等价于*/\n  border-top-left-radius: 2em 0.5em;\n  border-top-right-radius: 1em 3em;\n  border-bottom-right-radius: 4em 0.5em;\n  border-bottom-left-radius: 1em 3em;\n}\n```\n### 2.阴影 --- box-shadow\n```css\n.box{\n  -webkit-box-shadow:0 0 10px #CCC;  \n  -moz-box-shadow:0 0 10px #CCC;  \n  box-shadow:0 0 10px #CCC;  \n\n  /*语法:box-shadow: h-shadow v-shadow blur spread color inset\n   * h-shadow : 水平阴影位置（必需）\n   * v-shadow : 垂直阴影的位置 （必需）\n   * blur : 模糊距离\n   * spread : 阴影的尺寸\n   * color : 阴影的颜色\n   * inset : 将外部阴影 (outset) 改为内部阴影\n   */\n}\n```\n### 3.动画 --- animation\n```css\n@keyframes mymove\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-moz-keyframes mymove /* Firefox */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-webkit-keyframes mymove /* Safari 和 Chrome */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-o-keyframes mymove /* Opera */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\ndiv\n{\nanimation:mymove 5s infinite;\n-webkit-animation:mymove 5s infinite; /* Safari 和 Chrome */\n}\n/*\n*animation 属性是一个简写属性，用于设置六个动画属性：\n*animation-name 规定需要绑定到选择器的 keyframe 名称\n*animation-duration 规定完成动画所花费的时间，以秒或毫秒计\n*animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)\n*animation-delay 规定在动画开始之前的延迟\n*animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)\n*animation-direction 规定是否应该轮流反向播放动画\n*/\n\n```\n\n\n","source":"_posts/css3.md","raw":"---\ntitle: 常用css3总结\ndate: 2017-02-17 11:15:11\ntags:\n---\n[W3C手册在此](http://www.w3school.com.cn/cssref/index.asp)\n### 1.圆角 --- border-radius\n```css\n.box{\n  /* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/\n  -moz-border-radius:3px;\n  -webkit-border-radius:3px;\n  border-radius:3px;\n\n  border-radius: 2em 1em 4em / 0.5em 3em;\n  /*等价于*/\n  border-top-left-radius: 2em 0.5em;\n  border-top-right-radius: 1em 3em;\n  border-bottom-right-radius: 4em 0.5em;\n  border-bottom-left-radius: 1em 3em;\n}\n```\n### 2.阴影 --- box-shadow\n```css\n.box{\n  -webkit-box-shadow:0 0 10px #CCC;  \n  -moz-box-shadow:0 0 10px #CCC;  \n  box-shadow:0 0 10px #CCC;  \n\n  /*语法:box-shadow: h-shadow v-shadow blur spread color inset\n   * h-shadow : 水平阴影位置（必需）\n   * v-shadow : 垂直阴影的位置 （必需）\n   * blur : 模糊距离\n   * spread : 阴影的尺寸\n   * color : 阴影的颜色\n   * inset : 将外部阴影 (outset) 改为内部阴影\n   */\n}\n```\n### 3.动画 --- animation\n```css\n@keyframes mymove\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-moz-keyframes mymove /* Firefox */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-webkit-keyframes mymove /* Safari 和 Chrome */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-o-keyframes mymove /* Opera */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\ndiv\n{\nanimation:mymove 5s infinite;\n-webkit-animation:mymove 5s infinite; /* Safari 和 Chrome */\n}\n/*\n*animation 属性是一个简写属性，用于设置六个动画属性：\n*animation-name 规定需要绑定到选择器的 keyframe 名称\n*animation-duration 规定完成动画所花费的时间，以秒或毫秒计\n*animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)\n*animation-delay 规定在动画开始之前的延迟\n*animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)\n*animation-direction 规定是否应该轮流反向播放动画\n*/\n\n```\n\n\n","slug":"css3","published":1,"updated":"2017-02-17T05:56:40.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyxx0004egy757ckj4ae","content":"<p><a href=\"http://www.w3school.com.cn/cssref/index.asp\" target=\"_blank\" rel=\"external\">W3C手册在此</a></p>\n<h3 id=\"1-圆角-—-border-radius\"><a href=\"#1-圆角-—-border-radius\" class=\"headerlink\" title=\"1.圆角 — border-radius\"></a>1.圆角 — border-radius</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"comment\">/* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/</span></div><div class=\"line\">  <span class=\"attribute\">-moz-border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">2em</span> <span class=\"number\">1em</span> <span class=\"number\">4em</span> / <span class=\"number\">0.5em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">  <span class=\"comment\">/*等价于*/</span></div><div class=\"line\">  <span class=\"attribute\">border-top-left-radius</span>: <span class=\"number\">2em</span> <span class=\"number\">0.5em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top-right-radius</span>: <span class=\"number\">1em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom-right-radius</span>: <span class=\"number\">4em</span> <span class=\"number\">0.5em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom-left-radius</span>: <span class=\"number\">1em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-阴影-—-box-shadow\"><a href=\"#2-阴影-—-box-shadow\" class=\"headerlink\" title=\"2.阴影 — box-shadow\"></a>2.阴影 — box-shadow</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\">  <span class=\"attribute\">-moz-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\">  <span class=\"attribute\">box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*语法:box-shadow: h-shadow v-shadow blur spread color inset</span></div><div class=\"line\">   * h-shadow : 水平阴影位置（必需）</div><div class=\"line\">   * v-shadow : 垂直阴影的位置 （必需）</div><div class=\"line\">   * blur : 模糊距离</div><div class=\"line\">   * spread : 阴影的尺寸</div><div class=\"line\">   * color : 阴影的颜色</div><div class=\"line\">   * inset : 将外部阴影 (outset) 改为内部阴影</div><div class=\"line\">   */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-动画-—-animation\"><a href=\"#3-动画-—-animation\" class=\"headerlink\" title=\"3.动画 — animation\"></a>3.动画 — animation</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> mymove</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">moz</span>-<span class=\"keyword\">keyframes</span> mymove /* Firefox */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">webkit</span>-<span class=\"keyword\">keyframes</span> mymove /* Safari 和 Chrome */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">o</span>-<span class=\"keyword\">keyframes</span> mymove /* Opera */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">div</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attribute\">animation</span>:mymove <span class=\"number\">5s</span> infinite;</div><div class=\"line\"><span class=\"attribute\">-webkit-animation</span>:mymove <span class=\"number\">5s</span> infinite; <span class=\"comment\">/* Safari 和 Chrome */</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">*animation 属性是一个简写属性，用于设置六个动画属性：</div><div class=\"line\">*animation-name 规定需要绑定到选择器的 keyframe 名称</div><div class=\"line\">*animation-duration 规定完成动画所花费的时间，以秒或毫秒计</div><div class=\"line\">*animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)</div><div class=\"line\">*animation-delay 规定在动画开始之前的延迟</div><div class=\"line\">*animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)</div><div class=\"line\">*animation-direction 规定是否应该轮流反向播放动画</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><a href=\"http://www.w3school.com.cn/cssref/index.asp\">W3C手册在此</a></p>\n<h3 id=\"1-圆角-—-border-radius\"><a href=\"#1-圆角-—-border-radius\" class=\"headerlink\" title=\"1.圆角 — border-radius\"></a>1.圆角 — border-radius</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"comment\">/* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/</span></div><div class=\"line\">  <span class=\"attribute\">-moz-border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">2em</span> <span class=\"number\">1em</span> <span class=\"number\">4em</span> / <span class=\"number\">0.5em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">  <span class=\"comment\">/*等价于*/</span></div><div class=\"line\">  <span class=\"attribute\">border-top-left-radius</span>: <span class=\"number\">2em</span> <span class=\"number\">0.5em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top-right-radius</span>: <span class=\"number\">1em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom-right-radius</span>: <span class=\"number\">4em</span> <span class=\"number\">0.5em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom-left-radius</span>: <span class=\"number\">1em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-阴影-—-box-shadow\"><a href=\"#2-阴影-—-box-shadow\" class=\"headerlink\" title=\"2.阴影 — box-shadow\"></a>2.阴影 — box-shadow</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\">  <span class=\"attribute\">-moz-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\">  <span class=\"attribute\">box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*语法:box-shadow: h-shadow v-shadow blur spread color inset</div><div class=\"line\">   * h-shadow : 水平阴影位置（必需）</div><div class=\"line\">   * v-shadow : 垂直阴影的位置 （必需）</div><div class=\"line\">   * blur : 模糊距离</div><div class=\"line\">   * spread : 阴影的尺寸</div><div class=\"line\">   * color : 阴影的颜色</div><div class=\"line\">   * inset : 将外部阴影 (outset) 改为内部阴影</div><div class=\"line\">   */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-动画-—-animation\"><a href=\"#3-动画-—-animation\" class=\"headerlink\" title=\"3.动画 — animation\"></a>3.动画 — animation</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> mymove</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">moz</span>-<span class=\"keyword\">keyframes</span> mymove /* Firefox */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">webkit</span>-<span class=\"keyword\">keyframes</span> mymove /* Safari 和 Chrome */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">o</span>-<span class=\"keyword\">keyframes</span> mymove /* Opera */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">div</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attribute\">animation</span>:mymove <span class=\"number\">5s</span> infinite;</div><div class=\"line\"><span class=\"attribute\">-webkit-animation</span>:mymove <span class=\"number\">5s</span> infinite; <span class=\"comment\">/* Safari 和 Chrome */</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">*animation 属性是一个简写属性，用于设置六个动画属性：</div><div class=\"line\">*animation-name 规定需要绑定到选择器的 keyframe 名称</div><div class=\"line\">*animation-duration 规定完成动画所花费的时间，以秒或毫秒计</div><div class=\"line\">*animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)</div><div class=\"line\">*animation-delay 规定在动画开始之前的延迟</div><div class=\"line\">*animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)</div><div class=\"line\">*animation-direction 规定是否应该轮流反向播放动画</div><div class=\"line\">*/</span></div></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-01-12T02:08:42.698Z","updated":"2017-01-12T02:08:42.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyxz0005egy70asd8jzy","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"ionic APP开发相关踩坑","date":"2017-06-15T08:47:08.000Z","_content":"\n### 1.配置各种环境参考资料\n（1）[React Native 开发文档](http://reactnative.cn/docs/0.45/getting-started.html)\n注：搭建android环境，sdk，之前搞了很久，忘记记录了。。\n（2）[angular 中文文档](https://angular.cn/)\n（3）[ionic 文档](http://ionicframework.com/docs)\n（4）[Gradle构建工具v3.3下载](http://www.pc6.com/softview/SoftView_421983.html)\n注：是一个android打包工具，需要配置环境变量，官网下载太慢\n（5）[Ionic打包过程下载Gradle失败的解决方法](http://www.jianshu.com/p/9595eccac3d1)\n注：暂时没遇到，上次打包了半小时\n\n\n### 2.ionic 基本功能配置\n（1）[ionic2 中隐藏子页面tabs选项卡的三种方法](http://www.cnblogs.com/zsl123/p/6425489.html)\n```javascript\n//app.module.ts 找到\nimports: [\n    IonicModule.forRoot(MyApp,{\n      tabsHideOnSubPages: 'true'         //隐藏全部子页面tabs\n    })\n  ],\n```\n（2）ionic2 返回键文字\n```javascript\n//app.module.ts 默认是'back'\nimports: [\n    IonicModule.forRoot(MyApp,{\n      backButtonText: '', //返回按钮文字\n    })\n  ],\n```\n\n（3）[ionic 自定义tabs样式](http://blog.csdn.net/malonely/article/details/52777369)\n注：主要是scss\n```html\n//tabs.html\n<ion-tabs tabsPlacement=\"bottom\">  \n  <ion-tab [root]=\"tab1Root\" tabTitle=\"tab1\" tabIcon=\"tab-tab1\"></ion-tab>  \n  <ion-tab [root]=\"tab2Root\" tabTitle=\"tab2\" tabIcon=\"tab-tab2\"></ion-tab>  \n  <ion-tab [root]=\"tab3Root\" tabTitle=\"tab3\" tabIcon=\"tab-tab3\"></ion-tab>  \n</ion-tabs>  \n```\n```css\n//tabs.scss\n.ion-tab-icon-base {  \n  width: 32px;  \n  height: 32px;  \n  padding: 4px 4px 2px;  \n}  \n  \n.ion-tab-icon-md-base {  \n  min-width: 0 !important;  \n  height: 32px;  \n}  \n  \n$tabImageName: 'tab1' 'tab2' 'tab3';  \n@for $i from 1 to 4 {  \n  //for ios  \n  .ion-ios-tab-#{nth($tabImageName, $i)} {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n  }  \n  .ion-ios-tab-#{nth($tabImageName, $i)}-outline {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n  }  \n  \n  // for android  \n  .tabs-md .tab-button[aria-selected=true] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n    }  \n  }  \n  .tabs-md .tab-button[aria-selected=false] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n    }  \n  }  \n}  \n```\n\n","source":"_posts/ionic.md","raw":"---\ntitle: ionic APP开发相关踩坑\ndate: 2017-06-15 16:47:08\ntags: ionic + angular + cordova\n---\n\n### 1.配置各种环境参考资料\n（1）[React Native 开发文档](http://reactnative.cn/docs/0.45/getting-started.html)\n注：搭建android环境，sdk，之前搞了很久，忘记记录了。。\n（2）[angular 中文文档](https://angular.cn/)\n（3）[ionic 文档](http://ionicframework.com/docs)\n（4）[Gradle构建工具v3.3下载](http://www.pc6.com/softview/SoftView_421983.html)\n注：是一个android打包工具，需要配置环境变量，官网下载太慢\n（5）[Ionic打包过程下载Gradle失败的解决方法](http://www.jianshu.com/p/9595eccac3d1)\n注：暂时没遇到，上次打包了半小时\n\n\n### 2.ionic 基本功能配置\n（1）[ionic2 中隐藏子页面tabs选项卡的三种方法](http://www.cnblogs.com/zsl123/p/6425489.html)\n```javascript\n//app.module.ts 找到\nimports: [\n    IonicModule.forRoot(MyApp,{\n      tabsHideOnSubPages: 'true'         //隐藏全部子页面tabs\n    })\n  ],\n```\n（2）ionic2 返回键文字\n```javascript\n//app.module.ts 默认是'back'\nimports: [\n    IonicModule.forRoot(MyApp,{\n      backButtonText: '', //返回按钮文字\n    })\n  ],\n```\n\n（3）[ionic 自定义tabs样式](http://blog.csdn.net/malonely/article/details/52777369)\n注：主要是scss\n```html\n//tabs.html\n<ion-tabs tabsPlacement=\"bottom\">  \n  <ion-tab [root]=\"tab1Root\" tabTitle=\"tab1\" tabIcon=\"tab-tab1\"></ion-tab>  \n  <ion-tab [root]=\"tab2Root\" tabTitle=\"tab2\" tabIcon=\"tab-tab2\"></ion-tab>  \n  <ion-tab [root]=\"tab3Root\" tabTitle=\"tab3\" tabIcon=\"tab-tab3\"></ion-tab>  \n</ion-tabs>  \n```\n```css\n//tabs.scss\n.ion-tab-icon-base {  \n  width: 32px;  \n  height: 32px;  \n  padding: 4px 4px 2px;  \n}  \n  \n.ion-tab-icon-md-base {  \n  min-width: 0 !important;  \n  height: 32px;  \n}  \n  \n$tabImageName: 'tab1' 'tab2' 'tab3';  \n@for $i from 1 to 4 {  \n  //for ios  \n  .ion-ios-tab-#{nth($tabImageName, $i)} {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n  }  \n  .ion-ios-tab-#{nth($tabImageName, $i)}-outline {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n  }  \n  \n  // for android  \n  .tabs-md .tab-button[aria-selected=true] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n    }  \n  }  \n  .tabs-md .tab-button[aria-selected=false] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n    }  \n  }  \n}  \n```\n\n","slug":"ionic","published":1,"updated":"2017-06-16T02:06:14.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyy20006egy7elrdqpr6","content":"<h3 id=\"1-配置各种环境参考资料\"><a href=\"#1-配置各种环境参考资料\" class=\"headerlink\" title=\"1.配置各种环境参考资料\"></a>1.配置各种环境参考资料</h3><p>（1）<a href=\"http://reactnative.cn/docs/0.45/getting-started.html\" target=\"_blank\" rel=\"external\">React Native 开发文档</a><br>注：搭建android环境，sdk，之前搞了很久，忘记记录了。。<br>（2）<a href=\"https://angular.cn/\" target=\"_blank\" rel=\"external\">angular 中文文档</a><br>（3）<a href=\"http://ionicframework.com/docs\" target=\"_blank\" rel=\"external\">ionic 文档</a><br>（4）<a href=\"http://www.pc6.com/softview/SoftView_421983.html\" target=\"_blank\" rel=\"external\">Gradle构建工具v3.3下载</a><br>注：是一个android打包工具，需要配置环境变量，官网下载太慢<br>（5）<a href=\"http://www.jianshu.com/p/9595eccac3d1\" target=\"_blank\" rel=\"external\">Ionic打包过程下载Gradle失败的解决方法</a><br>注：暂时没遇到，上次打包了半小时</p>\n<h3 id=\"2-ionic-基本功能配置\"><a href=\"#2-ionic-基本功能配置\" class=\"headerlink\" title=\"2.ionic 基本功能配置\"></a>2.ionic 基本功能配置</h3><p>（1）<a href=\"http://www.cnblogs.com/zsl123/p/6425489.html\" target=\"_blank\" rel=\"external\">ionic2 中隐藏子页面tabs选项卡的三种方法</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//app.module.ts 找到</span></div><div class=\"line\">imports: [</div><div class=\"line\">    IonicModule.forRoot(MyApp,&#123;</div><div class=\"line\">      <span class=\"attr\">tabsHideOnSubPages</span>: <span class=\"string\">'true'</span>         <span class=\"comment\">//隐藏全部子页面tabs</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ],</div></pre></td></tr></table></figure></p>\n<p>（2）ionic2 返回键文字<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//app.module.ts 默认是'back'</span></div><div class=\"line\">imports: [</div><div class=\"line\">    IonicModule.forRoot(MyApp,&#123;</div><div class=\"line\">      <span class=\"attr\">backButtonText</span>: <span class=\"string\">''</span>, <span class=\"comment\">//返回按钮文字</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ],</div></pre></td></tr></table></figure></p>\n<p>（3）<a href=\"http://blog.csdn.net/malonely/article/details/52777369\" target=\"_blank\" rel=\"external\">ionic 自定义tabs样式</a><br>注：主要是scss<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//tabs.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ion-tabs</span> <span class=\"attr\">tabsPlacement</span>=<span class=\"string\">\"bottom\"</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab1Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab1\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab2Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab2\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab3Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab3\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ion-tabs</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">//tabs.scss</div><div class=\"line\">.ion-tab-icon-base &#123;  </div><div class=\"line\">  width: 32px;  </div><div class=\"line\">  height: 32px;  </div><div class=\"line\">  padding: 4px 4px 2px;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">.ion-tab-icon-md-base &#123;  </div><div class=\"line\">  min-width: 0 !important;  </div><div class=\"line\">  height: 32px;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">$tabImageName: 'tab1' 'tab2' 'tab3';  </div><div class=\"line\">@for $i from 1 to 4 &#123;  </div><div class=\"line\">  //for ios  </div><div class=\"line\">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">    @extend .ion-tab-icon-base;  </div><div class=\"line\">    content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png\");  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125;-outline &#123;  </div><div class=\"line\">    @extend .ion-tab-icon-base;  </div><div class=\"line\">    content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png\");  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  // for android  </div><div class=\"line\">  .tabs-md .tab-button[aria-selected=true] &#123;  </div><div class=\"line\">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">      @extend .ion-tab-icon-md-base;  </div><div class=\"line\">      content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png\");  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  .tabs-md .tab-button[aria-selected=false] &#123;  </div><div class=\"line\">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">      @extend .ion-tab-icon-md-base;  </div><div class=\"line\">      content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png\");  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"1-配置各种环境参考资料\"><a href=\"#1-配置各种环境参考资料\" class=\"headerlink\" title=\"1.配置各种环境参考资料\"></a>1.配置各种环境参考资料</h3><p>（1）<a href=\"http://reactnative.cn/docs/0.45/getting-started.html\">React Native 开发文档</a><br>注：搭建android环境，sdk，之前搞了很久，忘记记录了。。<br>（2）<a href=\"https://angular.cn/\">angular 中文文档</a><br>（3）<a href=\"http://ionicframework.com/docs\">ionic 文档</a><br>（4）<a href=\"http://www.pc6.com/softview/SoftView_421983.html\">Gradle构建工具v3.3下载</a><br>注：是一个android打包工具，需要配置环境变量，官网下载太慢<br>（5）<a href=\"http://www.jianshu.com/p/9595eccac3d1\">Ionic打包过程下载Gradle失败的解决方法</a><br>注：暂时没遇到，上次打包了半小时</p>\n<h3 id=\"2-ionic-基本功能配置\"><a href=\"#2-ionic-基本功能配置\" class=\"headerlink\" title=\"2.ionic 基本功能配置\"></a>2.ionic 基本功能配置</h3><p>（1）<a href=\"http://www.cnblogs.com/zsl123/p/6425489.html\">ionic2 中隐藏子页面tabs选项卡的三种方法</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//app.module.ts 找到</span></div><div class=\"line\">imports: [</div><div class=\"line\">    IonicModule.forRoot(MyApp,&#123;</div><div class=\"line\">      <span class=\"attr\">tabsHideOnSubPages</span>: <span class=\"string\">'true'</span>         <span class=\"comment\">//隐藏全部子页面tabs</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ],</div></pre></td></tr></table></figure></p>\n<p>（2）ionic2 返回键文字<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//app.module.ts 默认是'back'</span></div><div class=\"line\">imports: [</div><div class=\"line\">    IonicModule.forRoot(MyApp,&#123;</div><div class=\"line\">      <span class=\"attr\">backButtonText</span>: <span class=\"string\">''</span>, <span class=\"comment\">//返回按钮文字</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ],</div></pre></td></tr></table></figure></p>\n<p>（3）<a href=\"http://blog.csdn.net/malonely/article/details/52777369\">ionic 自定义tabs样式</a><br>注：主要是scss<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//tabs.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ion-tabs</span> <span class=\"attr\">tabsPlacement</span>=<span class=\"string\">\"bottom\"</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab1Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab1\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab2Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab2\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab3Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab3\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ion-tabs</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">//tabs.scss</div><div class=\"line\">.ion-tab-icon-base &#123;  </div><div class=\"line\">  width: 32px;  </div><div class=\"line\">  height: 32px;  </div><div class=\"line\">  padding: 4px 4px 2px;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">.ion-tab-icon-md-base &#123;  </div><div class=\"line\">  min-width: 0 !important;  </div><div class=\"line\">  height: 32px;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">$tabImageName: 'tab1' 'tab2' 'tab3';  </div><div class=\"line\">@for $i from 1 to 4 &#123;  </div><div class=\"line\">  //for ios  </div><div class=\"line\">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">    @extend .ion-tab-icon-base;  </div><div class=\"line\">    content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png\");  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125;-outline &#123;  </div><div class=\"line\">    @extend .ion-tab-icon-base;  </div><div class=\"line\">    content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png\");  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  // for android  </div><div class=\"line\">  .tabs-md .tab-button[aria-selected=true] &#123;  </div><div class=\"line\">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">      @extend .ion-tab-icon-md-base;  </div><div class=\"line\">      content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png\");  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  .tabs-md .tab-button[aria-selected=false] &#123;  </div><div class=\"line\">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">      @extend .ion-tab-icon-md-base;  </div><div class=\"line\">      content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png\");  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"小记项目app","date":"2017-03-15T09:22:24.000Z","_content":"\n## 记账app项目\n------\n完成时间：2017.02 - 2017.02\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n\n------\n## 贴一些图好了\n### 首页，本地存储，vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/1.png)\n### 用户界面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/2.png)\n### 支出记账页面，vue组件实现键盘：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/3.png)\n### 收入记账页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/4.png)\n### 调用api里的时间选择：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/5.png)\n### 备注界面，调用键盘：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/6.png)\n### 按月查看，日历是vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/7.png)\n### 饼图，canvas画圆环：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/8.png)\n### 折线图，调用官方api：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/9.png)\n### 分类操作页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/10.png)\n### 导出邮箱页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/11.png)\n### 账户安全页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/12.png)\n\n","source":"_posts/pro-note.md","raw":"---\ntitle: 小记项目app\ndate: 2017-03-15 17:22:24\ntags:\n---\n\n## 记账app项目\n------\n完成时间：2017.02 - 2017.02\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n\n------\n## 贴一些图好了\n### 首页，本地存储，vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/1.png)\n### 用户界面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/2.png)\n### 支出记账页面，vue组件实现键盘：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/3.png)\n### 收入记账页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/4.png)\n### 调用api里的时间选择：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/5.png)\n### 备注界面，调用键盘：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/6.png)\n### 按月查看，日历是vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/7.png)\n### 饼图，canvas画圆环：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/8.png)\n### 折线图，调用官方api：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/9.png)\n### 分类操作页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/10.png)\n### 导出邮箱页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/11.png)\n### 账户安全页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/12.png)\n\n","slug":"pro-note","published":1,"updated":"2017-03-15T10:08:01.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyy20007egy77ok6p2tv","content":"<h2 id=\"记账app项目\"><a href=\"#记账app项目\" class=\"headerlink\" title=\"记账app项目\"></a>记账app项目</h2><hr>\n<p>完成时间：2017.02 - 2017.02<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<hr>\n<h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，本地存储，vue组件：\"><a href=\"#首页，本地存储，vue组件：\" class=\"headerlink\" title=\"首页，本地存储，vue组件：\"></a>首页，本地存储，vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/1.png\" alt=\"图片\"></p>\n<h3 id=\"用户界面：\"><a href=\"#用户界面：\" class=\"headerlink\" title=\"用户界面：\"></a>用户界面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/2.png\" alt=\"图片\"></p>\n<h3 id=\"支出记账页面，vue组件实现键盘：\"><a href=\"#支出记账页面，vue组件实现键盘：\" class=\"headerlink\" title=\"支出记账页面，vue组件实现键盘：\"></a>支出记账页面，vue组件实现键盘：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/3.png\" alt=\"图片\"></p>\n<h3 id=\"收入记账页面：\"><a href=\"#收入记账页面：\" class=\"headerlink\" title=\"收入记账页面：\"></a>收入记账页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/4.png\" alt=\"图片\"></p>\n<h3 id=\"调用api里的时间选择：\"><a href=\"#调用api里的时间选择：\" class=\"headerlink\" title=\"调用api里的时间选择：\"></a>调用api里的时间选择：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/5.png\" alt=\"图片\"></p>\n<h3 id=\"备注界面，调用键盘：\"><a href=\"#备注界面，调用键盘：\" class=\"headerlink\" title=\"备注界面，调用键盘：\"></a>备注界面，调用键盘：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/6.png\" alt=\"图片\"></p>\n<h3 id=\"按月查看，日历是vue组件：\"><a href=\"#按月查看，日历是vue组件：\" class=\"headerlink\" title=\"按月查看，日历是vue组件：\"></a>按月查看，日历是vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/7.png\" alt=\"图片\"></p>\n<h3 id=\"饼图，canvas画圆环：\"><a href=\"#饼图，canvas画圆环：\" class=\"headerlink\" title=\"饼图，canvas画圆环：\"></a>饼图，canvas画圆环：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/8.png\" alt=\"图片\"></p>\n<h3 id=\"折线图，调用官方api：\"><a href=\"#折线图，调用官方api：\" class=\"headerlink\" title=\"折线图，调用官方api：\"></a>折线图，调用官方api：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/9.png\" alt=\"图片\"></p>\n<h3 id=\"分类操作页面：\"><a href=\"#分类操作页面：\" class=\"headerlink\" title=\"分类操作页面：\"></a>分类操作页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/10.png\" alt=\"图片\"></p>\n<h3 id=\"导出邮箱页面：\"><a href=\"#导出邮箱页面：\" class=\"headerlink\" title=\"导出邮箱页面：\"></a>导出邮箱页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/11.png\" alt=\"图片\"></p>\n<h3 id=\"账户安全页面：\"><a href=\"#账户安全页面：\" class=\"headerlink\" title=\"账户安全页面：\"></a>账户安全页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/12.png\" alt=\"图片\"></p>\n","excerpt":"","more":"<h2 id=\"记账app项目\"><a href=\"#记账app项目\" class=\"headerlink\" title=\"记账app项目\"></a>记账app项目</h2><hr>\n<p>完成时间：2017.02 - 2017.02<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<hr>\n<h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，本地存储，vue组件：\"><a href=\"#首页，本地存储，vue组件：\" class=\"headerlink\" title=\"首页，本地存储，vue组件：\"></a>首页，本地存储，vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/1.png\" alt=\"图片\"></p>\n<h3 id=\"用户界面：\"><a href=\"#用户界面：\" class=\"headerlink\" title=\"用户界面：\"></a>用户界面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/2.png\" alt=\"图片\"></p>\n<h3 id=\"支出记账页面，vue组件实现键盘：\"><a href=\"#支出记账页面，vue组件实现键盘：\" class=\"headerlink\" title=\"支出记账页面，vue组件实现键盘：\"></a>支出记账页面，vue组件实现键盘：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/3.png\" alt=\"图片\"></p>\n<h3 id=\"收入记账页面：\"><a href=\"#收入记账页面：\" class=\"headerlink\" title=\"收入记账页面：\"></a>收入记账页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/4.png\" alt=\"图片\"></p>\n<h3 id=\"调用api里的时间选择：\"><a href=\"#调用api里的时间选择：\" class=\"headerlink\" title=\"调用api里的时间选择：\"></a>调用api里的时间选择：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/5.png\" alt=\"图片\"></p>\n<h3 id=\"备注界面，调用键盘：\"><a href=\"#备注界面，调用键盘：\" class=\"headerlink\" title=\"备注界面，调用键盘：\"></a>备注界面，调用键盘：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/6.png\" alt=\"图片\"></p>\n<h3 id=\"按月查看，日历是vue组件：\"><a href=\"#按月查看，日历是vue组件：\" class=\"headerlink\" title=\"按月查看，日历是vue组件：\"></a>按月查看，日历是vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/7.png\" alt=\"图片\"></p>\n<h3 id=\"饼图，canvas画圆环：\"><a href=\"#饼图，canvas画圆环：\" class=\"headerlink\" title=\"饼图，canvas画圆环：\"></a>饼图，canvas画圆环：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/8.png\" alt=\"图片\"></p>\n<h3 id=\"折线图，调用官方api：\"><a href=\"#折线图，调用官方api：\" class=\"headerlink\" title=\"折线图，调用官方api：\"></a>折线图，调用官方api：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/9.png\" alt=\"图片\"></p>\n<h3 id=\"分类操作页面：\"><a href=\"#分类操作页面：\" class=\"headerlink\" title=\"分类操作页面：\"></a>分类操作页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/10.png\" alt=\"图片\"></p>\n<h3 id=\"导出邮箱页面：\"><a href=\"#导出邮箱页面：\" class=\"headerlink\" title=\"导出邮箱页面：\"></a>导出邮箱页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/11.png\" alt=\"图片\"></p>\n<h3 id=\"账户安全页面：\"><a href=\"#账户安全页面：\" class=\"headerlink\" title=\"账户安全页面：\"></a>账户安全页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/12.png\" alt=\"图片\"></p>\n"},{"title":"漫画app项目","date":"2017-02-14T09:29:47.000Z","_content":"\n## 趣漫画app项目\n------\n完成时间：2016.11 - 2016.12\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n\n------\n## 贴一些图好了\n### 首页，模板渲染，ajax等等：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/1.PNG)\n### 下拉刷新：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/2.PNG)\n### 上拉加载：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/3.PNG)\n### 分类：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/4.PNG)\n### 最近更新：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/7.PNG)\n### 热门排行：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/8.PNG)\n\n### 其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\n------\n### 历史记录(localstorage)：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/5.PNG)\n### 登陆注册:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/6.PNG)\n\n------\n### 漫画分集，正序逆序，vue状态实现:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/9.PNG)\n\n\n------\n### 简易的漫画阅读器(swiper):\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/10.PNG)\n### 提示:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/11.PNG)\n### 分集:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/12.PNG)\n\n\n------\n### 搜索功能:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/13.PNG)\n\n------\n------\n\n# 动漫君app项目\n------\n由于公司业务需要另改一个，核心功能一样，就是换套UI，简单贴几个图好了\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/1.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/2.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/3.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/4.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/5.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/6.PNG)\n\n","source":"_posts/pro-comic.md","raw":"---\ntitle: 漫画app项目\ndate: 2017-02-14 17:29:47\ntags: \n---\n\n## 趣漫画app项目\n------\n完成时间：2016.11 - 2016.12\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n\n------\n## 贴一些图好了\n### 首页，模板渲染，ajax等等：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/1.PNG)\n### 下拉刷新：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/2.PNG)\n### 上拉加载：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/3.PNG)\n### 分类：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/4.PNG)\n### 最近更新：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/7.PNG)\n### 热门排行：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/8.PNG)\n\n### 其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\n------\n### 历史记录(localstorage)：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/5.PNG)\n### 登陆注册:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/6.PNG)\n\n------\n### 漫画分集，正序逆序，vue状态实现:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/9.PNG)\n\n\n------\n### 简易的漫画阅读器(swiper):\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/10.PNG)\n### 提示:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/11.PNG)\n### 分集:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/12.PNG)\n\n\n------\n### 搜索功能:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/13.PNG)\n\n------\n------\n\n# 动漫君app项目\n------\n由于公司业务需要另改一个，核心功能一样，就是换套UI，简单贴几个图好了\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/1.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/2.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/3.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/4.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/5.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/6.PNG)\n\n","slug":"pro-comic","published":1,"updated":"2017-02-14T10:23:54.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyyb0009egy7vk9b2voq","content":"<h2 id=\"趣漫画app项目\"><a href=\"#趣漫画app项目\" class=\"headerlink\" title=\"趣漫画app项目\"></a>趣漫画app项目</h2><hr>\n<p>完成时间：2016.11 - 2016.12<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<hr>\n<h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，模板渲染，ajax等等：\"><a href=\"#首页，模板渲染，ajax等等：\" class=\"headerlink\" title=\"首页，模板渲染，ajax等等：\"></a>首页，模板渲染，ajax等等：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/1.PNG\" alt=\"图片\"></p>\n<h3 id=\"下拉刷新：\"><a href=\"#下拉刷新：\" class=\"headerlink\" title=\"下拉刷新：\"></a>下拉刷新：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/2.PNG\" alt=\"图片\"></p>\n<h3 id=\"上拉加载：\"><a href=\"#上拉加载：\" class=\"headerlink\" title=\"上拉加载：\"></a>上拉加载：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/3.PNG\" alt=\"图片\"></p>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/4.PNG\" alt=\"图片\"></p>\n<h3 id=\"最近更新：\"><a href=\"#最近更新：\" class=\"headerlink\" title=\"最近更新：\"></a>最近更新：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/7.PNG\" alt=\"图片\"></p>\n<h3 id=\"热门排行：\"><a href=\"#热门排行：\" class=\"headerlink\" title=\"热门排行：\"></a>热门排行：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/8.PNG\" alt=\"图片\"></p>\n<h3 id=\"其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\"><a href=\"#其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\" class=\"headerlink\" title=\"其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\"></a>其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了</h3><hr>\n<h3 id=\"历史记录-localstorage-：\"><a href=\"#历史记录-localstorage-：\" class=\"headerlink\" title=\"历史记录(localstorage)：\"></a>历史记录(localstorage)：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/5.PNG\" alt=\"图片\"></p>\n<h3 id=\"登陆注册\"><a href=\"#登陆注册\" class=\"headerlink\" title=\"登陆注册:\"></a>登陆注册:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/6.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"漫画分集，正序逆序，vue状态实现\"><a href=\"#漫画分集，正序逆序，vue状态实现\" class=\"headerlink\" title=\"漫画分集，正序逆序，vue状态实现:\"></a>漫画分集，正序逆序，vue状态实现:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/9.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"简易的漫画阅读器-swiper\"><a href=\"#简易的漫画阅读器-swiper\" class=\"headerlink\" title=\"简易的漫画阅读器(swiper):\"></a>简易的漫画阅读器(swiper):</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/10.PNG\" alt=\"图片\"></p>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示:\"></a>提示:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/11.PNG\" alt=\"图片\"></p>\n<h3 id=\"分集\"><a href=\"#分集\" class=\"headerlink\" title=\"分集:\"></a>分集:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/12.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能:\"></a>搜索功能:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/13.PNG\" alt=\"图片\"></p>\n<h2 id=\"——\"><a href=\"#——\" class=\"headerlink\" title=\"——\"></a>——</h2><h1 id=\"动漫君app项目\"><a href=\"#动漫君app项目\" class=\"headerlink\" title=\"动漫君app项目\"></a>动漫君app项目</h1><hr>\n<p>由于公司业务需要另改一个，核心功能一样，就是换套UI，简单贴几个图好了<br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/1.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/2.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/3.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/4.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/5.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/6.PNG\" alt=\"图片\"></p>\n","excerpt":"","more":"<h2 id=\"趣漫画app项目\"><a href=\"#趣漫画app项目\" class=\"headerlink\" title=\"趣漫画app项目\"></a>趣漫画app项目</h2><hr>\n<p>完成时间：2016.11 - 2016.12<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<hr>\n<h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，模板渲染，ajax等等：\"><a href=\"#首页，模板渲染，ajax等等：\" class=\"headerlink\" title=\"首页，模板渲染，ajax等等：\"></a>首页，模板渲染，ajax等等：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/1.PNG\" alt=\"图片\"></p>\n<h3 id=\"下拉刷新：\"><a href=\"#下拉刷新：\" class=\"headerlink\" title=\"下拉刷新：\"></a>下拉刷新：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/2.PNG\" alt=\"图片\"></p>\n<h3 id=\"上拉加载：\"><a href=\"#上拉加载：\" class=\"headerlink\" title=\"上拉加载：\"></a>上拉加载：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/3.PNG\" alt=\"图片\"></p>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/4.PNG\" alt=\"图片\"></p>\n<h3 id=\"最近更新：\"><a href=\"#最近更新：\" class=\"headerlink\" title=\"最近更新：\"></a>最近更新：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/7.PNG\" alt=\"图片\"></p>\n<h3 id=\"热门排行：\"><a href=\"#热门排行：\" class=\"headerlink\" title=\"热门排行：\"></a>热门排行：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/8.PNG\" alt=\"图片\"></p>\n<h3 id=\"其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\"><a href=\"#其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\" class=\"headerlink\" title=\"其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\"></a>其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了</h3><hr>\n<h3 id=\"历史记录-localstorage-：\"><a href=\"#历史记录-localstorage-：\" class=\"headerlink\" title=\"历史记录(localstorage)：\"></a>历史记录(localstorage)：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/5.PNG\" alt=\"图片\"></p>\n<h3 id=\"登陆注册\"><a href=\"#登陆注册\" class=\"headerlink\" title=\"登陆注册:\"></a>登陆注册:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/6.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"漫画分集，正序逆序，vue状态实现\"><a href=\"#漫画分集，正序逆序，vue状态实现\" class=\"headerlink\" title=\"漫画分集，正序逆序，vue状态实现:\"></a>漫画分集，正序逆序，vue状态实现:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/9.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"简易的漫画阅读器-swiper\"><a href=\"#简易的漫画阅读器-swiper\" class=\"headerlink\" title=\"简易的漫画阅读器(swiper):\"></a>简易的漫画阅读器(swiper):</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/10.PNG\" alt=\"图片\"></p>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示:\"></a>提示:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/11.PNG\" alt=\"图片\"></p>\n<h3 id=\"分集\"><a href=\"#分集\" class=\"headerlink\" title=\"分集:\"></a>分集:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/12.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能:\"></a>搜索功能:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/13.PNG\" alt=\"图片\"></p>\n<h2 id=\"——\"><a href=\"#——\" class=\"headerlink\" title=\"——\"></a>——</h2><h1 id=\"动漫君app项目\"><a href=\"#动漫君app项目\" class=\"headerlink\" title=\"动漫君app项目\"></a>动漫君app项目</h1><hr>\n<p>由于公司业务需要另改一个，核心功能一样，就是换套UI，简单贴几个图好了<br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/1.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/2.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/3.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/4.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/5.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/6.PNG\" alt=\"图片\"></p>\n"},{"title":"小说app项目","date":"2017-02-15T02:33:19.000Z","_content":"\n## 一本小说app项目\n------\n完成时间：2017.01 - 2017.01\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n\n------\n## 贴一些图好了\n### 首页，本地存储，vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/1.PNG)\n### 置顶删除功能通过vue状态实现：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/2.PNG)\n### 搜索功能：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/3.PNG)\n### 小说分类：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/4.PNG)\n### 小说详情，下载调用api：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/5.PNG)\n### 阅读器，调用官方模块，菜单实现是再open一个frame：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/6.PNG)","source":"_posts/pro-novel.md","raw":"---\ntitle: 小说app项目\ndate: 2017-02-15 10:33:19\ntags: \n---\n\n## 一本小说app项目\n------\n完成时间：2017.01 - 2017.01\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n\n------\n## 贴一些图好了\n### 首页，本地存储，vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/1.PNG)\n### 置顶删除功能通过vue状态实现：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/2.PNG)\n### 搜索功能：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/3.PNG)\n### 小说分类：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/4.PNG)\n### 小说详情，下载调用api：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/5.PNG)\n### 阅读器，调用官方模块，菜单实现是再open一个frame：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/6.PNG)","slug":"pro-novel","published":1,"updated":"2017-02-15T02:40:43.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyyd000aegy7jzq1igf1","content":"<h2 id=\"一本小说app项目\"><a href=\"#一本小说app项目\" class=\"headerlink\" title=\"一本小说app项目\"></a>一本小说app项目</h2><hr>\n<p>完成时间：2017.01 - 2017.01<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<hr>\n<h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，本地存储，vue组件：\"><a href=\"#首页，本地存储，vue组件：\" class=\"headerlink\" title=\"首页，本地存储，vue组件：\"></a>首页，本地存储，vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/1.PNG\" alt=\"图片\"></p>\n<h3 id=\"置顶删除功能通过vue状态实现：\"><a href=\"#置顶删除功能通过vue状态实现：\" class=\"headerlink\" title=\"置顶删除功能通过vue状态实现：\"></a>置顶删除功能通过vue状态实现：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/2.PNG\" alt=\"图片\"></p>\n<h3 id=\"搜索功能：\"><a href=\"#搜索功能：\" class=\"headerlink\" title=\"搜索功能：\"></a>搜索功能：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/3.PNG\" alt=\"图片\"></p>\n<h3 id=\"小说分类：\"><a href=\"#小说分类：\" class=\"headerlink\" title=\"小说分类：\"></a>小说分类：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/4.PNG\" alt=\"图片\"></p>\n<h3 id=\"小说详情，下载调用api：\"><a href=\"#小说详情，下载调用api：\" class=\"headerlink\" title=\"小说详情，下载调用api：\"></a>小说详情，下载调用api：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/5.PNG\" alt=\"图片\"></p>\n<h3 id=\"阅读器，调用官方模块，菜单实现是再open一个frame：\"><a href=\"#阅读器，调用官方模块，菜单实现是再open一个frame：\" class=\"headerlink\" title=\"阅读器，调用官方模块，菜单实现是再open一个frame：\"></a>阅读器，调用官方模块，菜单实现是再open一个frame：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/6.PNG\" alt=\"图片\"></p>\n","excerpt":"","more":"<h2 id=\"一本小说app项目\"><a href=\"#一本小说app项目\" class=\"headerlink\" title=\"一本小说app项目\"></a>一本小说app项目</h2><hr>\n<p>完成时间：2017.01 - 2017.01<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<hr>\n<h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，本地存储，vue组件：\"><a href=\"#首页，本地存储，vue组件：\" class=\"headerlink\" title=\"首页，本地存储，vue组件：\"></a>首页，本地存储，vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/1.PNG\" alt=\"图片\"></p>\n<h3 id=\"置顶删除功能通过vue状态实现：\"><a href=\"#置顶删除功能通过vue状态实现：\" class=\"headerlink\" title=\"置顶删除功能通过vue状态实现：\"></a>置顶删除功能通过vue状态实现：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/2.PNG\" alt=\"图片\"></p>\n<h3 id=\"搜索功能：\"><a href=\"#搜索功能：\" class=\"headerlink\" title=\"搜索功能：\"></a>搜索功能：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/3.PNG\" alt=\"图片\"></p>\n<h3 id=\"小说分类：\"><a href=\"#小说分类：\" class=\"headerlink\" title=\"小说分类：\"></a>小说分类：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/4.PNG\" alt=\"图片\"></p>\n<h3 id=\"小说详情，下载调用api：\"><a href=\"#小说详情，下载调用api：\" class=\"headerlink\" title=\"小说详情，下载调用api：\"></a>小说详情，下载调用api：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/5.PNG\" alt=\"图片\"></p>\n<h3 id=\"阅读器，调用官方模块，菜单实现是再open一个frame：\"><a href=\"#阅读器，调用官方模块，菜单实现是再open一个frame：\" class=\"headerlink\" title=\"阅读器，调用官方模块，菜单实现是再open一个frame：\"></a>阅读器，调用官方模块，菜单实现是再open一个frame：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/6.PNG\" alt=\"图片\"></p>\n"},{"title":"关于时间的JS","date":"2017-01-16T09:52:20.000Z","_content":"\n时间函数加减 2015-10-23 \n```javascript\nfunction addByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate + num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n\nfunction reduceByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate - num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n```\n\nhttp://www.cnblogs.com/carekee/articles/1678041.html\nJs获取当前日期时间及其它操作\n\n```javascript\nvar myDate = new Date();\nmyDate.getYear();        //获取当前年份(2位)\nmyDate.getFullYear();    //获取完整的年份(4位,1970-????)\nmyDate.getMonth();       //获取当前月份(0-11,0代表1月)\nmyDate.getDate();        //获取当前日(1-31)\nmyDate.getDay();         //获取当前星期X(0-6,0代表星期天)\nmyDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)\nmyDate.getHours();       //获取当前小时数(0-23)\nmyDate.getMinutes();     //获取当前分钟数(0-59)\nmyDate.getSeconds();     //获取当前秒数(0-59)\nmyDate.getMilliseconds();    //获取当前毫秒数(0-999)\nmyDate.toLocaleDateString();     //获取当前日期\nvar mytime=myDate.toLocaleTimeString();     //获取当前时间\nmyDate.toLocaleString( );        //获取日期与时间\n```\n \n\n日期时间脚本库方法列表\n```javascript\nDate.prototype.isLeapYear 判断闰年\nDate.prototype.Format 日期格式化\nDate.prototype.DateAdd 日期计算\nDate.prototype.DateDiff 比较日期差\nDate.prototype.toString 日期转字符串\nDate.prototype.toArray 日期分割为数组\nDate.prototype.DatePart 取日期的部分信息\nDate.prototype.MaxDayOfDate 取日期所在月的最大天数\nDate.prototype.WeekNumOfYear 判断日期所在年的第几周\nStringToDate 字符串转日期型\nIsValidDate 验证日期有效性\nCheckDateTime 完整日期时间检查\ndaysBetween 日期天数差\n\njs代码：\n\n//---------------------------------------------------  \n// 判断闰年  \n//---------------------------------------------------  \n\nDate.prototype.isLeapYear = function()   \n{   \n    return (0==this.getYear()%4&&((this.getYear()%100!=0)||(this.getYear()%400==0)));   \n}   \n\n\n//---------------------------------------------------  \n// 日期格式化  \n// 格式 YYYY/yyyy/YY/yy 表示年份  \n// MM/M 月份  \n// W/w 星期  \n// dd/DD/d/D 日期  \n// hh/HH/h/H 时间  \n// mm/m 分钟  \n// ss/SS/s/S 秒  \n//---------------------------------------------------\n\nDate.prototype.Format = function(formatStr)   \n{   \n    var str = formatStr;   \n    var Week = ['日','一','二','三','四','五','六'];  \n  \n    str=str.replace(/yyyy|YYYY/,this.getFullYear());   \n    str=str.replace(/yy|YY/,(this.getYear() % 100)>9?(this.getYear() % 100).toString():'0' + (this.getYear() % 100));   \n  \n    str=str.replace(/MM/,this.getMonth()>9?this.getMonth().toString():'0' + this.getMonth());   \n    str=str.replace(/M/g,this.getMonth());   \n  \n    str=str.replace(/w|W/g,Week[this.getDay()]);   \n  \n    str=str.replace(/dd|DD/,this.getDate()>9?this.getDate().toString():'0' + this.getDate());   \n    str=str.replace(/d|D/g,this.getDate());   \n  \n    str=str.replace(/hh|HH/,this.getHours()>9?this.getHours().toString():'0' + this.getHours());   \n    str=str.replace(/h|H/g,this.getHours());   \n    str=str.replace(/mm/,this.getMinutes()>9?this.getMinutes().toString():'0' + this.getMinutes());   \n    str=str.replace(/m/g,this.getMinutes());   \n  \n    str=str.replace(/ss|SS/,this.getSeconds()>9?this.getSeconds().toString():'0' + this.getSeconds());   \n    str=str.replace(/s|S/g,this.getSeconds());   \n  \n    return str;   \n}   \n\n\n//+---------------------------------------------------  \n//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   \n//+---------------------------------------------------  \n\nfunction daysBetween(DateOne,DateTwo)  \n{   \n    var OneMonth = DateOne.substring(5,DateOne.lastIndexOf ('-'));  \n    var OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf ('-')+1);  \n    var OneYear = DateOne.substring(0,DateOne.indexOf ('-'));  \n  \n    var TwoMonth = DateTwo.substring(5,DateTwo.lastIndexOf ('-'));  \n    var TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf ('-')+1);  \n    var TwoYear = DateTwo.substring(0,DateTwo.indexOf ('-'));  \n  \n    var cha=((Date.parse(OneMonth+'/'+OneDay+'/'+OneYear)- Date.parse(TwoMonth+'/'+TwoDay+'/'+TwoYear))/86400000);   \n    return Math.abs(cha);  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期计算  \n//+---------------------------------------------------  \n\nDate.prototype.DateAdd = function(strInterval, Number) {   \n    var dtTmp = this;  \n    switch (strInterval) {   \n        case 's' :return new Date(Date.parse(dtTmp) + (1000 * Number));  \n        case 'n' :return new Date(Date.parse(dtTmp) + (60000 * Number));  \n        case 'h' :return new Date(Date.parse(dtTmp) + (3600000 * Number));  \n        case 'd' :return new Date(Date.parse(dtTmp) + (86400000 * Number));  \n        case 'w' :return new Date(Date.parse(dtTmp) + ((86400000 * 7) * Number));  \n        case 'q' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number*3, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'm' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'y' :return new Date((dtTmp.getFullYear() + Number), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n    }  \n} \n\n  \n//+---------------------------------------------------  \n//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  \n//+---------------------------------------------------  \n\nDate.prototype.DateDiff = function(strInterval, dtEnd) {   \n    var dtStart = this;  \n    if (typeof dtEnd == 'string' )//如果是字符串转换为日期型  \n    {   \n        dtEnd = StringToDate(dtEnd);  \n    }  \n    switch (strInterval) {   \n        case 's' :return parseInt((dtEnd - dtStart) / 1000);  \n        case 'n' :return parseInt((dtEnd - dtStart) / 60000);  \n        case 'h' :return parseInt((dtEnd - dtStart) / 3600000);  \n        case 'd' :return parseInt((dtEnd - dtStart) / 86400000);  \n        case 'w' :return parseInt((dtEnd - dtStart) / (86400000 * 7));  \n        case 'm' :return (dtEnd.getMonth()+1)+((dtEnd.getFullYear()-dtStart.getFullYear())*12) - (dtStart.getMonth()+1);  \n        case 'y' :return dtEnd.getFullYear() - dtStart.getFullYear();  \n    }  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期输出字符串，重载了系统的toString方法  \n//+---------------------------------------------------  \nDate.prototype.toString = function(showWeek)  \n{   \n    var myDate= this;  \n    var str = myDate.toLocaleDateString();  \n    if (showWeek)  \n    {   \n        var Week = ['日','一','二','三','四','五','六'];  \n        str += ' 星期' + Week[myDate.getDay()];  \n    }  \n    return str;  \n}  \n\n//+---------------------------------------------------  \n//| 日期合法性验证  \n//| 格式为：YYYY-MM-DD或YYYY/MM/DD  \n//+---------------------------------------------------  \nfunction IsValidDate(DateStr)   \n{   \n    var sDate=DateStr.replace(/(^\\s+|\\s+$)/g,''); //去两边空格;   \n    if(sDate=='') return true;   \n    //如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   \n    //数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   \n    var s = sDate.replace(/[\\d]{ 4,4 }[\\-/]{ 1 }[\\d]{ 1,2 }[\\-/]{ 1 }[\\d]{ 1,2 }/g,'');   \n    if (s=='') //说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   \n    {   \n        var t=new Date(sDate.replace(/\\-/g,'/'));   \n        var ar = sDate.split(/[-/:]/);   \n        if(ar[0] != t.getYear() || ar[1] != t.getMonth()+1 || ar[2] != t.getDate())   \n        {   \n            //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n            return false;   \n        }   \n    }   \n    else   \n    {   \n        //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n        return false;   \n    }   \n    return true;   \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期时间检查  \n//| 格式为：YYYY-MM-DD HH:MM:SS  \n//+---------------------------------------------------  \n\nfunction CheckDateTime(str)  \n{   \n    var reg = /^(\\d+)-(\\d{ 1,2 })-(\\d{ 1,2 }) (\\d{ 1,2 }):(\\d{ 1,2 }):(\\d{ 1,2 })$/;   \n    var r = str.match(reg);   \n    if(r==null)return false;   \n    r[2]=r[2]-1;   \n    var d= new Date(r[1],r[2],r[3],r[4],r[5],r[6]);   \n    if(d.getFullYear()!=r[1])return false;   \n    if(d.getMonth()!=r[2])return false;   \n    if(d.getDate()!=r[3])return false;   \n    if(d.getHours()!=r[4])return false;   \n    if(d.getMinutes()!=r[5])return false;   \n    if(d.getSeconds()!=r[6])return false;   \n    return true;   \n}   \n\n//+---------------------------------------------------  \n//| 把日期分割成数组  \n//+---------------------------------------------------  \n\nDate.prototype.toArray = function()  \n{   \n    var myDate = this;  \n    var myArray = Array();  \n    myArray[0] = myDate.getFullYear();  \n    myArray[1] = myDate.getMonth();  \n    myArray[2] = myDate.getDate();  \n    myArray[3] = myDate.getHours();  \n    myArray[4] = myDate.getMinutes();  \n    myArray[5] = myDate.getSeconds();  \n    return myArray;  \n}  \n\n//+---------------------------------------------------  \n//| 取得日期数据信息  \n//| 参数 interval 表示数据类型  \n//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  \n//+--------------------------------------------------- \n\nDate.prototype.DatePart = function(interval)  \n{   \n    var myDate = this;  \n    var partStr='';  \n    var Week = ['日','一','二','三','四','五','六'];  \n    switch (interval)  \n    {   \n        case 'y' :partStr = myDate.getFullYear();break;  \n        case 'm' :partStr = myDate.getMonth()+1;break;  \n        case 'd' :partStr = myDate.getDate();break;  \n        case 'w' :partStr = Week[myDate.getDay()];break;  \n        case 'ww' :partStr = myDate.WeekNumOfYear();break;  \n        case 'h' :partStr = myDate.getHours();break;  \n        case 'n' :partStr = myDate.getMinutes();break;  \n        case 's' :partStr = myDate.getSeconds();break;  \n    }  \n    return partStr;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在月的最大天数  \n//+--------------------------------------------------- \n\nDate.prototype.MaxDayOfDate = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var date1 = (new Date(ary[0],ary[1]+1,1));  \n    var date2 = date1.dateAdd(1,'m',1);  \n    var result = dateDiff(date1.Format('yyyy-MM-dd'),date2.Format('yyyy-MM-dd'));  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在周是一年中的第几周  \n//+--------------------------------------------------- \n\nDate.prototype.WeekNumOfYear = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var year = ary[0];  \n    var month = ary[1]+1;  \n    var day = ary[2];  \n    document.write('< script language=VBScript\\> \\n');  \n    document.write('myDate = Datue(''+month+'-'+day+'-'+year+'') \\n');  \n    document.write('result = DatePart('ww', myDate) \\n');  \n    document.write(' \\n');  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 字符串转成日期类型   \n//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  \n//+---------------------------------------------------\n \nfunction StringToDate(DateStr)  \n{   \n  \n    var converted = Date.parse(DateStr);  \n    var myDate = new Date(converted);  \n    if (isNaN(myDate))  \n    {   \n        //var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  \n        var arys= DateStr.split('-');  \n        myDate = new Date(arys[0],--arys[1],arys[2]);  \n    }  \n    return myDate;  \n}  \n```\n \n\n若要显示:当前日期加时间(如:2009-06-12 12:00)\n\n```javascript\nfunction CurentTime()\n    { \n        var now = new Date();\n       \n        var year = now.getFullYear();       //年\n        var month = now.getMonth() + 1;     //月\n        var day = now.getDate();            //日\n       \n        var hh = now.getHours();            //时\n        var mm = now.getMinutes();          //分\n       \n        var clock = year + \"-\";\n       \n        if(month < 10)\n            clock += \"0\";\n       \n        clock += month + \"-\";\n       \n        if(day < 10)\n            clock += \"0\";\n           \n        clock += day + \" \";\n       \n        if(hh < 10)\n            clock += \"0\";\n           \n        clock += hh + \":\";\n        if (mm < 10) clock += '0'; \n        clock += mm; \n        return(clock); \n    } \n```","source":"_posts/time.md","raw":"---\ntitle: 关于时间的JS\ndate: 2017-01-16 17:52:20\ntags:\n---\n\n时间函数加减 2015-10-23 \n```javascript\nfunction addByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate + num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n\nfunction reduceByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate - num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n```\n\nhttp://www.cnblogs.com/carekee/articles/1678041.html\nJs获取当前日期时间及其它操作\n\n```javascript\nvar myDate = new Date();\nmyDate.getYear();        //获取当前年份(2位)\nmyDate.getFullYear();    //获取完整的年份(4位,1970-????)\nmyDate.getMonth();       //获取当前月份(0-11,0代表1月)\nmyDate.getDate();        //获取当前日(1-31)\nmyDate.getDay();         //获取当前星期X(0-6,0代表星期天)\nmyDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)\nmyDate.getHours();       //获取当前小时数(0-23)\nmyDate.getMinutes();     //获取当前分钟数(0-59)\nmyDate.getSeconds();     //获取当前秒数(0-59)\nmyDate.getMilliseconds();    //获取当前毫秒数(0-999)\nmyDate.toLocaleDateString();     //获取当前日期\nvar mytime=myDate.toLocaleTimeString();     //获取当前时间\nmyDate.toLocaleString( );        //获取日期与时间\n```\n \n\n日期时间脚本库方法列表\n```javascript\nDate.prototype.isLeapYear 判断闰年\nDate.prototype.Format 日期格式化\nDate.prototype.DateAdd 日期计算\nDate.prototype.DateDiff 比较日期差\nDate.prototype.toString 日期转字符串\nDate.prototype.toArray 日期分割为数组\nDate.prototype.DatePart 取日期的部分信息\nDate.prototype.MaxDayOfDate 取日期所在月的最大天数\nDate.prototype.WeekNumOfYear 判断日期所在年的第几周\nStringToDate 字符串转日期型\nIsValidDate 验证日期有效性\nCheckDateTime 完整日期时间检查\ndaysBetween 日期天数差\n\njs代码：\n\n//---------------------------------------------------  \n// 判断闰年  \n//---------------------------------------------------  \n\nDate.prototype.isLeapYear = function()   \n{   \n    return (0==this.getYear()%4&&((this.getYear()%100!=0)||(this.getYear()%400==0)));   \n}   \n\n\n//---------------------------------------------------  \n// 日期格式化  \n// 格式 YYYY/yyyy/YY/yy 表示年份  \n// MM/M 月份  \n// W/w 星期  \n// dd/DD/d/D 日期  \n// hh/HH/h/H 时间  \n// mm/m 分钟  \n// ss/SS/s/S 秒  \n//---------------------------------------------------\n\nDate.prototype.Format = function(formatStr)   \n{   \n    var str = formatStr;   \n    var Week = ['日','一','二','三','四','五','六'];  \n  \n    str=str.replace(/yyyy|YYYY/,this.getFullYear());   \n    str=str.replace(/yy|YY/,(this.getYear() % 100)>9?(this.getYear() % 100).toString():'0' + (this.getYear() % 100));   \n  \n    str=str.replace(/MM/,this.getMonth()>9?this.getMonth().toString():'0' + this.getMonth());   \n    str=str.replace(/M/g,this.getMonth());   \n  \n    str=str.replace(/w|W/g,Week[this.getDay()]);   \n  \n    str=str.replace(/dd|DD/,this.getDate()>9?this.getDate().toString():'0' + this.getDate());   \n    str=str.replace(/d|D/g,this.getDate());   \n  \n    str=str.replace(/hh|HH/,this.getHours()>9?this.getHours().toString():'0' + this.getHours());   \n    str=str.replace(/h|H/g,this.getHours());   \n    str=str.replace(/mm/,this.getMinutes()>9?this.getMinutes().toString():'0' + this.getMinutes());   \n    str=str.replace(/m/g,this.getMinutes());   \n  \n    str=str.replace(/ss|SS/,this.getSeconds()>9?this.getSeconds().toString():'0' + this.getSeconds());   \n    str=str.replace(/s|S/g,this.getSeconds());   \n  \n    return str;   \n}   \n\n\n//+---------------------------------------------------  \n//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   \n//+---------------------------------------------------  \n\nfunction daysBetween(DateOne,DateTwo)  \n{   \n    var OneMonth = DateOne.substring(5,DateOne.lastIndexOf ('-'));  \n    var OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf ('-')+1);  \n    var OneYear = DateOne.substring(0,DateOne.indexOf ('-'));  \n  \n    var TwoMonth = DateTwo.substring(5,DateTwo.lastIndexOf ('-'));  \n    var TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf ('-')+1);  \n    var TwoYear = DateTwo.substring(0,DateTwo.indexOf ('-'));  \n  \n    var cha=((Date.parse(OneMonth+'/'+OneDay+'/'+OneYear)- Date.parse(TwoMonth+'/'+TwoDay+'/'+TwoYear))/86400000);   \n    return Math.abs(cha);  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期计算  \n//+---------------------------------------------------  \n\nDate.prototype.DateAdd = function(strInterval, Number) {   \n    var dtTmp = this;  \n    switch (strInterval) {   \n        case 's' :return new Date(Date.parse(dtTmp) + (1000 * Number));  \n        case 'n' :return new Date(Date.parse(dtTmp) + (60000 * Number));  \n        case 'h' :return new Date(Date.parse(dtTmp) + (3600000 * Number));  \n        case 'd' :return new Date(Date.parse(dtTmp) + (86400000 * Number));  \n        case 'w' :return new Date(Date.parse(dtTmp) + ((86400000 * 7) * Number));  \n        case 'q' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number*3, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'm' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'y' :return new Date((dtTmp.getFullYear() + Number), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n    }  \n} \n\n  \n//+---------------------------------------------------  \n//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  \n//+---------------------------------------------------  \n\nDate.prototype.DateDiff = function(strInterval, dtEnd) {   \n    var dtStart = this;  \n    if (typeof dtEnd == 'string' )//如果是字符串转换为日期型  \n    {   \n        dtEnd = StringToDate(dtEnd);  \n    }  \n    switch (strInterval) {   \n        case 's' :return parseInt((dtEnd - dtStart) / 1000);  \n        case 'n' :return parseInt((dtEnd - dtStart) / 60000);  \n        case 'h' :return parseInt((dtEnd - dtStart) / 3600000);  \n        case 'd' :return parseInt((dtEnd - dtStart) / 86400000);  \n        case 'w' :return parseInt((dtEnd - dtStart) / (86400000 * 7));  \n        case 'm' :return (dtEnd.getMonth()+1)+((dtEnd.getFullYear()-dtStart.getFullYear())*12) - (dtStart.getMonth()+1);  \n        case 'y' :return dtEnd.getFullYear() - dtStart.getFullYear();  \n    }  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期输出字符串，重载了系统的toString方法  \n//+---------------------------------------------------  \nDate.prototype.toString = function(showWeek)  \n{   \n    var myDate= this;  \n    var str = myDate.toLocaleDateString();  \n    if (showWeek)  \n    {   \n        var Week = ['日','一','二','三','四','五','六'];  \n        str += ' 星期' + Week[myDate.getDay()];  \n    }  \n    return str;  \n}  \n\n//+---------------------------------------------------  \n//| 日期合法性验证  \n//| 格式为：YYYY-MM-DD或YYYY/MM/DD  \n//+---------------------------------------------------  \nfunction IsValidDate(DateStr)   \n{   \n    var sDate=DateStr.replace(/(^\\s+|\\s+$)/g,''); //去两边空格;   \n    if(sDate=='') return true;   \n    //如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   \n    //数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   \n    var s = sDate.replace(/[\\d]{ 4,4 }[\\-/]{ 1 }[\\d]{ 1,2 }[\\-/]{ 1 }[\\d]{ 1,2 }/g,'');   \n    if (s=='') //说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   \n    {   \n        var t=new Date(sDate.replace(/\\-/g,'/'));   \n        var ar = sDate.split(/[-/:]/);   \n        if(ar[0] != t.getYear() || ar[1] != t.getMonth()+1 || ar[2] != t.getDate())   \n        {   \n            //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n            return false;   \n        }   \n    }   \n    else   \n    {   \n        //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n        return false;   \n    }   \n    return true;   \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期时间检查  \n//| 格式为：YYYY-MM-DD HH:MM:SS  \n//+---------------------------------------------------  \n\nfunction CheckDateTime(str)  \n{   \n    var reg = /^(\\d+)-(\\d{ 1,2 })-(\\d{ 1,2 }) (\\d{ 1,2 }):(\\d{ 1,2 }):(\\d{ 1,2 })$/;   \n    var r = str.match(reg);   \n    if(r==null)return false;   \n    r[2]=r[2]-1;   \n    var d= new Date(r[1],r[2],r[3],r[4],r[5],r[6]);   \n    if(d.getFullYear()!=r[1])return false;   \n    if(d.getMonth()!=r[2])return false;   \n    if(d.getDate()!=r[3])return false;   \n    if(d.getHours()!=r[4])return false;   \n    if(d.getMinutes()!=r[5])return false;   \n    if(d.getSeconds()!=r[6])return false;   \n    return true;   \n}   \n\n//+---------------------------------------------------  \n//| 把日期分割成数组  \n//+---------------------------------------------------  \n\nDate.prototype.toArray = function()  \n{   \n    var myDate = this;  \n    var myArray = Array();  \n    myArray[0] = myDate.getFullYear();  \n    myArray[1] = myDate.getMonth();  \n    myArray[2] = myDate.getDate();  \n    myArray[3] = myDate.getHours();  \n    myArray[4] = myDate.getMinutes();  \n    myArray[5] = myDate.getSeconds();  \n    return myArray;  \n}  \n\n//+---------------------------------------------------  \n//| 取得日期数据信息  \n//| 参数 interval 表示数据类型  \n//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  \n//+--------------------------------------------------- \n\nDate.prototype.DatePart = function(interval)  \n{   \n    var myDate = this;  \n    var partStr='';  \n    var Week = ['日','一','二','三','四','五','六'];  \n    switch (interval)  \n    {   \n        case 'y' :partStr = myDate.getFullYear();break;  \n        case 'm' :partStr = myDate.getMonth()+1;break;  \n        case 'd' :partStr = myDate.getDate();break;  \n        case 'w' :partStr = Week[myDate.getDay()];break;  \n        case 'ww' :partStr = myDate.WeekNumOfYear();break;  \n        case 'h' :partStr = myDate.getHours();break;  \n        case 'n' :partStr = myDate.getMinutes();break;  \n        case 's' :partStr = myDate.getSeconds();break;  \n    }  \n    return partStr;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在月的最大天数  \n//+--------------------------------------------------- \n\nDate.prototype.MaxDayOfDate = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var date1 = (new Date(ary[0],ary[1]+1,1));  \n    var date2 = date1.dateAdd(1,'m',1);  \n    var result = dateDiff(date1.Format('yyyy-MM-dd'),date2.Format('yyyy-MM-dd'));  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在周是一年中的第几周  \n//+--------------------------------------------------- \n\nDate.prototype.WeekNumOfYear = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var year = ary[0];  \n    var month = ary[1]+1;  \n    var day = ary[2];  \n    document.write('< script language=VBScript\\> \\n');  \n    document.write('myDate = Datue(''+month+'-'+day+'-'+year+'') \\n');  \n    document.write('result = DatePart('ww', myDate) \\n');  \n    document.write(' \\n');  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 字符串转成日期类型   \n//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  \n//+---------------------------------------------------\n \nfunction StringToDate(DateStr)  \n{   \n  \n    var converted = Date.parse(DateStr);  \n    var myDate = new Date(converted);  \n    if (isNaN(myDate))  \n    {   \n        //var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  \n        var arys= DateStr.split('-');  \n        myDate = new Date(arys[0],--arys[1],arys[2]);  \n    }  \n    return myDate;  \n}  \n```\n \n\n若要显示:当前日期加时间(如:2009-06-12 12:00)\n\n```javascript\nfunction CurentTime()\n    { \n        var now = new Date();\n       \n        var year = now.getFullYear();       //年\n        var month = now.getMonth() + 1;     //月\n        var day = now.getDate();            //日\n       \n        var hh = now.getHours();            //时\n        var mm = now.getMinutes();          //分\n       \n        var clock = year + \"-\";\n       \n        if(month < 10)\n            clock += \"0\";\n       \n        clock += month + \"-\";\n       \n        if(day < 10)\n            clock += \"0\";\n           \n        clock += day + \" \";\n       \n        if(hh < 10)\n            clock += \"0\";\n           \n        clock += hh + \":\";\n        if (mm < 10) clock += '0'; \n        clock += mm; \n        return(clock); \n    } \n```","slug":"time","published":1,"updated":"2017-01-16T10:00:13.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyye000begy7tkmh7v8m","content":"<p>时间函数加减 2015-10-23<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addByTransDate</span>(<span class=\"params\">dateParameter, num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> translateDate = <span class=\"string\">\"\"</span>, dateString = <span class=\"string\">\"\"</span>, monthString = <span class=\"string\">\"\"</span>, dayString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    translateDate = dateParameter.replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>).replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(translateDate);</div><div class=\"line\">    newDate = newDate.valueOf();</div><div class=\"line\">    newDate = newDate + num * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</div><div class=\"line\">    newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(newDate);</div><div class=\"line\">    <span class=\"comment\">//如果月份长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((newDate.getMonth() + <span class=\"number\">1</span>).toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        monthString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        monthString = (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果天数长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (newDate.getDate().toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        dayString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + newDate.getDate().toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dayString = newDate.getDate().toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    dateString = newDate.getFullYear() + <span class=\"string\">\"-\"</span> + monthString + <span class=\"string\">\"-\"</span> + dayString;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateString;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reduceByTransDate</span>(<span class=\"params\">dateParameter, num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> translateDate = <span class=\"string\">\"\"</span>, dateString = <span class=\"string\">\"\"</span>, monthString = <span class=\"string\">\"\"</span>, dayString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    translateDate = dateParameter.replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>).replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(translateDate);</div><div class=\"line\">    newDate = newDate.valueOf();</div><div class=\"line\">    newDate = newDate - num * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</div><div class=\"line\">    newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(newDate);</div><div class=\"line\">    <span class=\"comment\">//如果月份长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((newDate.getMonth() + <span class=\"number\">1</span>).toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        monthString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        monthString = (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果天数长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (newDate.getDate().toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        dayString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + newDate.getDate().toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dayString = newDate.getDate().toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    dateString = newDate.getFullYear() + <span class=\"string\">\"-\"</span> + monthString + <span class=\"string\">\"-\"</span> + dayString;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateString;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.cnblogs.com/carekee/articles/1678041.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/carekee/articles/1678041.html</a><br>Js获取当前日期时间及其它操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">myDate.getYear();        <span class=\"comment\">//获取当前年份(2位)</span></div><div class=\"line\">myDate.getFullYear();    <span class=\"comment\">//获取完整的年份(4位,1970-????)</span></div><div class=\"line\">myDate.getMonth();       <span class=\"comment\">//获取当前月份(0-11,0代表1月)</span></div><div class=\"line\">myDate.getDate();        <span class=\"comment\">//获取当前日(1-31)</span></div><div class=\"line\">myDate.getDay();         <span class=\"comment\">//获取当前星期X(0-6,0代表星期天)</span></div><div class=\"line\">myDate.getTime();        <span class=\"comment\">//获取当前时间(从1970.1.1开始的毫秒数)</span></div><div class=\"line\">myDate.getHours();       <span class=\"comment\">//获取当前小时数(0-23)</span></div><div class=\"line\">myDate.getMinutes();     <span class=\"comment\">//获取当前分钟数(0-59)</span></div><div class=\"line\">myDate.getSeconds();     <span class=\"comment\">//获取当前秒数(0-59)</span></div><div class=\"line\">myDate.getMilliseconds();    <span class=\"comment\">//获取当前毫秒数(0-999)</span></div><div class=\"line\">myDate.toLocaleDateString();     <span class=\"comment\">//获取当前日期</span></div><div class=\"line\"><span class=\"keyword\">var</span> mytime=myDate.toLocaleTimeString();     <span class=\"comment\">//获取当前时间</span></div><div class=\"line\">myDate.toLocaleString( );        <span class=\"comment\">//获取日期与时间</span></div></pre></td></tr></table></figure>\n<p>日期时间脚本库方法列表<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.isLeapYear 判断闰年</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.Format 日期格式化</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateAdd 日期计算</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateDiff 比较日期差</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toString 日期转字符串</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toArray 日期分割为数组</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DatePart 取日期的部分信息</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.MaxDayOfDate 取日期所在月的最大天数</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.WeekNumOfYear 判断日期所在年的第几周</div><div class=\"line\">StringToDate 字符串转日期型</div><div class=\"line\">IsValidDate 验证日期有效性</div><div class=\"line\">CheckDateTime 完整日期时间检查</div><div class=\"line\">daysBetween 日期天数差</div><div class=\"line\"></div><div class=\"line\">js代码：</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">// 判断闰年  </span></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.isLeapYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)   </span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">0</span>==<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">4</span>&amp;&amp;((<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">100</span>!=<span class=\"number\">0</span>)||(<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">400</span>==<span class=\"number\">0</span>)));   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">// 日期格式化  </span></div><div class=\"line\"><span class=\"comment\">// 格式 YYYY/yyyy/YY/yy 表示年份  </span></div><div class=\"line\"><span class=\"comment\">// MM/M 月份  </span></div><div class=\"line\"><span class=\"comment\">// W/w 星期  </span></div><div class=\"line\"><span class=\"comment\">// dd/DD/d/D 日期  </span></div><div class=\"line\"><span class=\"comment\">// hh/HH/h/H 时间  </span></div><div class=\"line\"><span class=\"comment\">// mm/m 分钟  </span></div><div class=\"line\"><span class=\"comment\">// ss/SS/s/S 秒  </span></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.Format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">formatStr</span>)   </span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> str = formatStr;   </div><div class=\"line\">    <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/yyyy|YYYY/</span>,<span class=\"keyword\">this</span>.getFullYear());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/yy|YY/</span>,(<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>)&gt;<span class=\"number\">9</span>?(<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>).toString():<span class=\"string\">'0'</span> + (<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>));   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/MM/</span>,<span class=\"keyword\">this</span>.getMonth()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getMonth().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getMonth());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/M/g</span>,<span class=\"keyword\">this</span>.getMonth());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/w|W/g</span>,Week[<span class=\"keyword\">this</span>.getDay()]);   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/dd|DD/</span>,<span class=\"keyword\">this</span>.getDate()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getDate().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getDate());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/d|D/g</span>,<span class=\"keyword\">this</span>.getDate());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/hh|HH/</span>,<span class=\"keyword\">this</span>.getHours()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getHours().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getHours());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/h|H/g</span>,<span class=\"keyword\">this</span>.getHours());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/mm/</span>,<span class=\"keyword\">this</span>.getMinutes()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getMinutes().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getMinutes());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/m/g</span>,<span class=\"keyword\">this</span>.getMinutes());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/ss|SS/</span>,<span class=\"keyword\">this</span>.getSeconds()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getSeconds().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getSeconds());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/s|S/g</span>,<span class=\"keyword\">this</span>.getSeconds());   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">return</span> str;   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">daysBetween</span>(<span class=\"params\">DateOne,DateTwo</span>)  </span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> OneMonth = DateOne.substring(<span class=\"number\">5</span>,DateOne.lastIndexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf (<span class=\"string\">'-'</span>)+<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> OneYear = DateOne.substring(<span class=\"number\">0</span>,DateOne.indexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoMonth = DateTwo.substring(<span class=\"number\">5</span>,DateTwo.lastIndexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf (<span class=\"string\">'-'</span>)+<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoYear = DateTwo.substring(<span class=\"number\">0</span>,DateTwo.indexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> cha=((<span class=\"built_in\">Date</span>.parse(OneMonth+<span class=\"string\">'/'</span>+OneDay+<span class=\"string\">'/'</span>+OneYear)- <span class=\"built_in\">Date</span>.parse(TwoMonth+<span class=\"string\">'/'</span>+TwoDay+<span class=\"string\">'/'</span>+TwoYear))/<span class=\"number\">86400000</span>);   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(cha);  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期计算  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strInterval, Number</span>) </span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> dtTmp = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (strInterval) &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">1000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">60000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">3600000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">86400000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + ((<span class=\"number\">86400000</span> * <span class=\"number\">7</span>) * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'q'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"built_in\">Number</span>*<span class=\"number\">3</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"built_in\">Number</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>((dtTmp.getFullYear() + <span class=\"built_in\">Number</span>), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateDiff = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strInterval, dtEnd</span>) </span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> dtStart = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> dtEnd == <span class=\"string\">'string'</span> )<span class=\"comment\">//如果是字符串转换为日期型  </span></div><div class=\"line\">    &#123;   </div><div class=\"line\">        dtEnd = StringToDate(dtEnd);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (strInterval) &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">1000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">60000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">3600000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">86400000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / (<span class=\"number\">86400000</span> * <span class=\"number\">7</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :<span class=\"keyword\">return</span> (dtEnd.getMonth()+<span class=\"number\">1</span>)+((dtEnd.getFullYear()-dtStart.getFullYear())*<span class=\"number\">12</span>) - (dtStart.getMonth()+<span class=\"number\">1</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :<span class=\"keyword\">return</span> dtEnd.getFullYear() - dtStart.getFullYear();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期输出字符串，重载了系统的toString方法  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">showWeek</span>)  </span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate= <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> str = myDate.toLocaleDateString();  </div><div class=\"line\">    <span class=\"keyword\">if</span> (showWeek)  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">        str += <span class=\"string\">' 星期'</span> + Week[myDate.getDay()];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> str;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期合法性验证  </span></div><div class=\"line\"><span class=\"comment\">//| 格式为：YYYY-MM-DD或YYYY/MM/DD  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IsValidDate</span>(<span class=\"params\">DateStr</span>)   </span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> sDate=DateStr.replace(<span class=\"regexp\">/(^\\s+|\\s+$)/g</span>,<span class=\"string\">''</span>); <span class=\"comment\">//去两边空格;   </span></div><div class=\"line\">    <span class=\"keyword\">if</span>(sDate==<span class=\"string\">''</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">    <span class=\"comment\">//如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   </span></div><div class=\"line\">    <span class=\"comment\">//数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   </span></div><div class=\"line\">    <span class=\"keyword\">var</span> s = sDate.replace(<span class=\"regexp\">/[\\d]&#123; 4,4 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;/g</span>,<span class=\"string\">''</span>);   </div><div class=\"line\">    <span class=\"keyword\">if</span> (s==<span class=\"string\">''</span>) <span class=\"comment\">//说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   </span></div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">var</span> t=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(sDate.replace(<span class=\"regexp\">/\\-/g</span>,<span class=\"string\">'/'</span>));   </div><div class=\"line\">        <span class=\"keyword\">var</span> ar = sDate.split(<span class=\"regexp\">/[-/:]/</span>);   </div><div class=\"line\">        <span class=\"keyword\">if</span>(ar[<span class=\"number\">0</span>] != t.getYear() || ar[<span class=\"number\">1</span>] != t.getMonth()+<span class=\"number\">1</span> || ar[<span class=\"number\">2</span>] != t.getDate())   </div><div class=\"line\">        &#123;   </div><div class=\"line\">            <span class=\"comment\">//alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   </span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">else</span>   </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"comment\">//alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   </span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期时间检查  </span></div><div class=\"line\"><span class=\"comment\">//| 格式为：YYYY-MM-DD HH:MM:SS  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CheckDateTime</span>(<span class=\"params\">str</span>)  </span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^(\\d+)-(\\d&#123; 1,2 &#125;)-(\\d&#123; 1,2 &#125;) (\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;)$/</span>;   </div><div class=\"line\">    <span class=\"keyword\">var</span> r = str.match(reg);   </div><div class=\"line\">    <span class=\"keyword\">if</span>(r==<span class=\"literal\">null</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    r[<span class=\"number\">2</span>]=r[<span class=\"number\">2</span>]<span class=\"number\">-1</span>;   </div><div class=\"line\">    <span class=\"keyword\">var</span> d= <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(r[<span class=\"number\">1</span>],r[<span class=\"number\">2</span>],r[<span class=\"number\">3</span>],r[<span class=\"number\">4</span>],r[<span class=\"number\">5</span>],r[<span class=\"number\">6</span>]);   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getFullYear()!=r[<span class=\"number\">1</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getMonth()!=r[<span class=\"number\">2</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getDate()!=r[<span class=\"number\">3</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getHours()!=r[<span class=\"number\">4</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getMinutes()!=r[<span class=\"number\">5</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getSeconds()!=r[<span class=\"number\">6</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 把日期分割成数组  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> myArray = <span class=\"built_in\">Array</span>();  </div><div class=\"line\">    myArray[<span class=\"number\">0</span>] = myDate.getFullYear();  </div><div class=\"line\">    myArray[<span class=\"number\">1</span>] = myDate.getMonth();  </div><div class=\"line\">    myArray[<span class=\"number\">2</span>] = myDate.getDate();  </div><div class=\"line\">    myArray[<span class=\"number\">3</span>] = myDate.getHours();  </div><div class=\"line\">    myArray[<span class=\"number\">4</span>] = myDate.getMinutes();  </div><div class=\"line\">    myArray[<span class=\"number\">5</span>] = myDate.getSeconds();  </div><div class=\"line\">    <span class=\"keyword\">return</span> myArray;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得日期数据信息  </span></div><div class=\"line\"><span class=\"comment\">//| 参数 interval 表示数据类型  </span></div><div class=\"line\"><span class=\"comment\">//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DatePart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">interval</span>)  </span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> partStr=<span class=\"string\">''</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (interval)  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :partStr = myDate.getFullYear();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :partStr = myDate.getMonth()+<span class=\"number\">1</span>;<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :partStr = myDate.getDate();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :partStr = Week[myDate.getDay()];<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'ww'</span> :partStr = myDate.WeekNumOfYear();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :partStr = myDate.getHours();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :partStr = myDate.getMinutes();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :partStr = myDate.getSeconds();<span class=\"keyword\">break</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> partStr;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得当前日期所在月的最大天数  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.MaxDayOfDate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> ary = myDate.toArray();  </div><div class=\"line\">    <span class=\"keyword\">var</span> date1 = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(ary[<span class=\"number\">0</span>],ary[<span class=\"number\">1</span>]+<span class=\"number\">1</span>,<span class=\"number\">1</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> date2 = date1.dateAdd(<span class=\"number\">1</span>,<span class=\"string\">'m'</span>,<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> result = dateDiff(date1.Format(<span class=\"string\">'yyyy-MM-dd'</span>),date2.Format(<span class=\"string\">'yyyy-MM-dd'</span>));  </div><div class=\"line\">    <span class=\"keyword\">return</span> result;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得当前日期所在周是一年中的第几周  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.WeekNumOfYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></div><div class=\"line\">&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> ary = myDate.toArray();  </div><div class=\"line\">    <span class=\"keyword\">var</span> year = ary[<span class=\"number\">0</span>];  </div><div class=\"line\">    <span class=\"keyword\">var</span> month = ary[<span class=\"number\">1</span>]+<span class=\"number\">1</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> day = ary[<span class=\"number\">2</span>];  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt; script language=VBScript\\&gt; \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'myDate = Datue('</span><span class=\"string\">'+month+'</span>-<span class=\"string\">'+day+'</span>-<span class=\"string\">'+year+'</span><span class=\"string\">') \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'result = DatePart('</span>ww<span class=\"string\">', myDate) \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">' \\n'</span>);  </div><div class=\"line\">    <span class=\"keyword\">return</span> result;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 字符串转成日期类型   </span></div><div class=\"line\"><span class=\"comment\">//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StringToDate</span>(<span class=\"params\">DateStr</span>)  </span></div><div class=\"line\">&#123;   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> converted = <span class=\"built_in\">Date</span>.parse(DateStr);  </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(converted);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(myDate))  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"comment\">//var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> arys= DateStr.split(<span class=\"string\">'-'</span>);  </div><div class=\"line\">        myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(arys[<span class=\"number\">0</span>],--arys[<span class=\"number\">1</span>],arys[<span class=\"number\">2</span>]);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> myDate;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>若要显示:当前日期加时间(如:2009-06-12 12:00)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CurentTime</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123; </div><div class=\"line\">        <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> year = now.getFullYear();       <span class=\"comment\">//年</span></div><div class=\"line\">        <span class=\"keyword\">var</span> month = now.getMonth() + <span class=\"number\">1</span>;     <span class=\"comment\">//月</span></div><div class=\"line\">        <span class=\"keyword\">var</span> day = now.getDate();            <span class=\"comment\">//日</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> hh = now.getHours();            <span class=\"comment\">//时</span></div><div class=\"line\">        <span class=\"keyword\">var</span> mm = now.getMinutes();          <span class=\"comment\">//分</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> clock = year + <span class=\"string\">\"-\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(month &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        clock += month + <span class=\"string\">\"-\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(day &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">           </div><div class=\"line\">        clock += day + <span class=\"string\">\" \"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(hh &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">           </div><div class=\"line\">        clock += hh + <span class=\"string\">\":\"</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mm &lt; <span class=\"number\">10</span>) clock += <span class=\"string\">'0'</span>; </div><div class=\"line\">        clock += mm; </div><div class=\"line\">        <span class=\"keyword\">return</span>(clock); </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>时间函数加减 2015-10-23<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addByTransDate</span>(<span class=\"params\">dateParameter, num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> translateDate = <span class=\"string\">\"\"</span>, dateString = <span class=\"string\">\"\"</span>, monthString = <span class=\"string\">\"\"</span>, dayString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    translateDate = dateParameter.replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>).replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(translateDate);</div><div class=\"line\">    newDate = newDate.valueOf();</div><div class=\"line\">    newDate = newDate + num * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</div><div class=\"line\">    newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(newDate);</div><div class=\"line\">    <span class=\"comment\">//如果月份长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((newDate.getMonth() + <span class=\"number\">1</span>).toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        monthString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        monthString = (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果天数长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (newDate.getDate().toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        dayString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + newDate.getDate().toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dayString = newDate.getDate().toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    dateString = newDate.getFullYear() + <span class=\"string\">\"-\"</span> + monthString + <span class=\"string\">\"-\"</span> + dayString;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateString;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reduceByTransDate</span>(<span class=\"params\">dateParameter, num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> translateDate = <span class=\"string\">\"\"</span>, dateString = <span class=\"string\">\"\"</span>, monthString = <span class=\"string\">\"\"</span>, dayString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    translateDate = dateParameter.replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>).replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(translateDate);</div><div class=\"line\">    newDate = newDate.valueOf();</div><div class=\"line\">    newDate = newDate - num * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</div><div class=\"line\">    newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(newDate);</div><div class=\"line\">    <span class=\"comment\">//如果月份长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((newDate.getMonth() + <span class=\"number\">1</span>).toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        monthString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        monthString = (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果天数长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (newDate.getDate().toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        dayString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + newDate.getDate().toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dayString = newDate.getDate().toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    dateString = newDate.getFullYear() + <span class=\"string\">\"-\"</span> + monthString + <span class=\"string\">\"-\"</span> + dayString;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateString;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.cnblogs.com/carekee/articles/1678041.html\">http://www.cnblogs.com/carekee/articles/1678041.html</a><br>Js获取当前日期时间及其它操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">myDate.getYear();        <span class=\"comment\">//获取当前年份(2位)</span></div><div class=\"line\">myDate.getFullYear();    <span class=\"comment\">//获取完整的年份(4位,1970-????)</span></div><div class=\"line\">myDate.getMonth();       <span class=\"comment\">//获取当前月份(0-11,0代表1月)</span></div><div class=\"line\">myDate.getDate();        <span class=\"comment\">//获取当前日(1-31)</span></div><div class=\"line\">myDate.getDay();         <span class=\"comment\">//获取当前星期X(0-6,0代表星期天)</span></div><div class=\"line\">myDate.getTime();        <span class=\"comment\">//获取当前时间(从1970.1.1开始的毫秒数)</span></div><div class=\"line\">myDate.getHours();       <span class=\"comment\">//获取当前小时数(0-23)</span></div><div class=\"line\">myDate.getMinutes();     <span class=\"comment\">//获取当前分钟数(0-59)</span></div><div class=\"line\">myDate.getSeconds();     <span class=\"comment\">//获取当前秒数(0-59)</span></div><div class=\"line\">myDate.getMilliseconds();    <span class=\"comment\">//获取当前毫秒数(0-999)</span></div><div class=\"line\">myDate.toLocaleDateString();     <span class=\"comment\">//获取当前日期</span></div><div class=\"line\"><span class=\"keyword\">var</span> mytime=myDate.toLocaleTimeString();     <span class=\"comment\">//获取当前时间</span></div><div class=\"line\">myDate.toLocaleString( );        <span class=\"comment\">//获取日期与时间</span></div></pre></td></tr></table></figure>\n<p>日期时间脚本库方法列表<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.isLeapYear 判断闰年</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.Format 日期格式化</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateAdd 日期计算</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateDiff 比较日期差</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toString 日期转字符串</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toArray 日期分割为数组</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DatePart 取日期的部分信息</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.MaxDayOfDate 取日期所在月的最大天数</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.WeekNumOfYear 判断日期所在年的第几周</div><div class=\"line\">StringToDate 字符串转日期型</div><div class=\"line\">IsValidDate 验证日期有效性</div><div class=\"line\">CheckDateTime 完整日期时间检查</div><div class=\"line\">daysBetween 日期天数差</div><div class=\"line\"></div><div class=\"line\">js代码：</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">// 判断闰年  </span></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.isLeapYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)   </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">0</span>==<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">4</span>&amp;&amp;((<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">100</span>!=<span class=\"number\">0</span>)||(<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">400</span>==<span class=\"number\">0</span>)));   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">// 日期格式化  </span></div><div class=\"line\"><span class=\"comment\">// 格式 YYYY/yyyy/YY/yy 表示年份  </span></div><div class=\"line\"><span class=\"comment\">// MM/M 月份  </span></div><div class=\"line\"><span class=\"comment\">// W/w 星期  </span></div><div class=\"line\"><span class=\"comment\">// dd/DD/d/D 日期  </span></div><div class=\"line\"><span class=\"comment\">// hh/HH/h/H 时间  </span></div><div class=\"line\"><span class=\"comment\">// mm/m 分钟  </span></div><div class=\"line\"><span class=\"comment\">// ss/SS/s/S 秒  </span></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.Format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">formatStr</span>)   </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> str = formatStr;   </div><div class=\"line\">    <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/yyyy|YYYY/</span>,<span class=\"keyword\">this</span>.getFullYear());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/yy|YY/</span>,(<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>)&gt;<span class=\"number\">9</span>?(<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>).toString():<span class=\"string\">'0'</span> + (<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>));   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/MM/</span>,<span class=\"keyword\">this</span>.getMonth()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getMonth().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getMonth());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/M/g</span>,<span class=\"keyword\">this</span>.getMonth());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/w|W/g</span>,Week[<span class=\"keyword\">this</span>.getDay()]);   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/dd|DD/</span>,<span class=\"keyword\">this</span>.getDate()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getDate().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getDate());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/d|D/g</span>,<span class=\"keyword\">this</span>.getDate());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/hh|HH/</span>,<span class=\"keyword\">this</span>.getHours()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getHours().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getHours());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/h|H/g</span>,<span class=\"keyword\">this</span>.getHours());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/mm/</span>,<span class=\"keyword\">this</span>.getMinutes()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getMinutes().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getMinutes());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/m/g</span>,<span class=\"keyword\">this</span>.getMinutes());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/ss|SS/</span>,<span class=\"keyword\">this</span>.getSeconds()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getSeconds().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getSeconds());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/s|S/g</span>,<span class=\"keyword\">this</span>.getSeconds());   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">return</span> str;   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">daysBetween</span>(<span class=\"params\">DateOne,DateTwo</span>)  </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> OneMonth = DateOne.substring(<span class=\"number\">5</span>,DateOne.lastIndexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf (<span class=\"string\">'-'</span>)+<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> OneYear = DateOne.substring(<span class=\"number\">0</span>,DateOne.indexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoMonth = DateTwo.substring(<span class=\"number\">5</span>,DateTwo.lastIndexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf (<span class=\"string\">'-'</span>)+<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoYear = DateTwo.substring(<span class=\"number\">0</span>,DateTwo.indexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> cha=((<span class=\"built_in\">Date</span>.parse(OneMonth+<span class=\"string\">'/'</span>+OneDay+<span class=\"string\">'/'</span>+OneYear)- <span class=\"built_in\">Date</span>.parse(TwoMonth+<span class=\"string\">'/'</span>+TwoDay+<span class=\"string\">'/'</span>+TwoYear))/<span class=\"number\">86400000</span>);   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(cha);  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期计算  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strInterval, Number</span>) </span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> dtTmp = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (strInterval) &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">1000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">60000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">3600000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">86400000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + ((<span class=\"number\">86400000</span> * <span class=\"number\">7</span>) * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'q'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"built_in\">Number</span>*<span class=\"number\">3</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"built_in\">Number</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>((dtTmp.getFullYear() + <span class=\"built_in\">Number</span>), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateDiff = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strInterval, dtEnd</span>) </span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> dtStart = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> dtEnd == <span class=\"string\">'string'</span> )<span class=\"comment\">//如果是字符串转换为日期型  </span></div><div class=\"line\">    &#123;   </div><div class=\"line\">        dtEnd = StringToDate(dtEnd);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (strInterval) &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">1000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">60000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">3600000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">86400000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / (<span class=\"number\">86400000</span> * <span class=\"number\">7</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :<span class=\"keyword\">return</span> (dtEnd.getMonth()+<span class=\"number\">1</span>)+((dtEnd.getFullYear()-dtStart.getFullYear())*<span class=\"number\">12</span>) - (dtStart.getMonth()+<span class=\"number\">1</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :<span class=\"keyword\">return</span> dtEnd.getFullYear() - dtStart.getFullYear();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期输出字符串，重载了系统的toString方法  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">showWeek</span>)  </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate= <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> str = myDate.toLocaleDateString();  </div><div class=\"line\">    <span class=\"keyword\">if</span> (showWeek)  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">        str += <span class=\"string\">' 星期'</span> + Week[myDate.getDay()];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> str;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期合法性验证  </span></div><div class=\"line\"><span class=\"comment\">//| 格式为：YYYY-MM-DD或YYYY/MM/DD  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IsValidDate</span>(<span class=\"params\">DateStr</span>)   </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> sDate=DateStr.replace(<span class=\"regexp\">/(^\\s+|\\s+$)/g</span>,<span class=\"string\">''</span>); <span class=\"comment\">//去两边空格;   </span></div><div class=\"line\">    <span class=\"keyword\">if</span>(sDate==<span class=\"string\">''</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">    <span class=\"comment\">//如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   </span></div><div class=\"line\">    <span class=\"comment\">//数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   </span></div><div class=\"line\">    <span class=\"keyword\">var</span> s = sDate.replace(<span class=\"regexp\">/[\\d]&#123; 4,4 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;/g</span>,<span class=\"string\">''</span>);   </div><div class=\"line\">    <span class=\"keyword\">if</span> (s==<span class=\"string\">''</span>) <span class=\"comment\">//说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   </span></div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">var</span> t=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(sDate.replace(<span class=\"regexp\">/\\-/g</span>,<span class=\"string\">'/'</span>));   </div><div class=\"line\">        <span class=\"keyword\">var</span> ar = sDate.split(<span class=\"regexp\">/[-/:]/</span>);   </div><div class=\"line\">        <span class=\"keyword\">if</span>(ar[<span class=\"number\">0</span>] != t.getYear() || ar[<span class=\"number\">1</span>] != t.getMonth()+<span class=\"number\">1</span> || ar[<span class=\"number\">2</span>] != t.getDate())   </div><div class=\"line\">        &#123;   </div><div class=\"line\">            <span class=\"comment\">//alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   </span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">else</span>   </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"comment\">//alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   </span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期时间检查  </span></div><div class=\"line\"><span class=\"comment\">//| 格式为：YYYY-MM-DD HH:MM:SS  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CheckDateTime</span>(<span class=\"params\">str</span>)  </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^(\\d+)-(\\d&#123; 1,2 &#125;)-(\\d&#123; 1,2 &#125;) (\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;)$/</span>;   </div><div class=\"line\">    <span class=\"keyword\">var</span> r = str.match(reg);   </div><div class=\"line\">    <span class=\"keyword\">if</span>(r==<span class=\"literal\">null</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    r[<span class=\"number\">2</span>]=r[<span class=\"number\">2</span>]<span class=\"number\">-1</span>;   </div><div class=\"line\">    <span class=\"keyword\">var</span> d= <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(r[<span class=\"number\">1</span>],r[<span class=\"number\">2</span>],r[<span class=\"number\">3</span>],r[<span class=\"number\">4</span>],r[<span class=\"number\">5</span>],r[<span class=\"number\">6</span>]);   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getFullYear()!=r[<span class=\"number\">1</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getMonth()!=r[<span class=\"number\">2</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getDate()!=r[<span class=\"number\">3</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getHours()!=r[<span class=\"number\">4</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getMinutes()!=r[<span class=\"number\">5</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getSeconds()!=r[<span class=\"number\">6</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 把日期分割成数组  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> myArray = <span class=\"built_in\">Array</span>();  </div><div class=\"line\">    myArray[<span class=\"number\">0</span>] = myDate.getFullYear();  </div><div class=\"line\">    myArray[<span class=\"number\">1</span>] = myDate.getMonth();  </div><div class=\"line\">    myArray[<span class=\"number\">2</span>] = myDate.getDate();  </div><div class=\"line\">    myArray[<span class=\"number\">3</span>] = myDate.getHours();  </div><div class=\"line\">    myArray[<span class=\"number\">4</span>] = myDate.getMinutes();  </div><div class=\"line\">    myArray[<span class=\"number\">5</span>] = myDate.getSeconds();  </div><div class=\"line\">    <span class=\"keyword\">return</span> myArray;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得日期数据信息  </span></div><div class=\"line\"><span class=\"comment\">//| 参数 interval 表示数据类型  </span></div><div class=\"line\"><span class=\"comment\">//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DatePart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">interval</span>)  </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> partStr=<span class=\"string\">''</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (interval)  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :partStr = myDate.getFullYear();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :partStr = myDate.getMonth()+<span class=\"number\">1</span>;<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :partStr = myDate.getDate();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :partStr = Week[myDate.getDay()];<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'ww'</span> :partStr = myDate.WeekNumOfYear();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :partStr = myDate.getHours();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :partStr = myDate.getMinutes();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :partStr = myDate.getSeconds();<span class=\"keyword\">break</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> partStr;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得当前日期所在月的最大天数  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.MaxDayOfDate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> ary = myDate.toArray();  </div><div class=\"line\">    <span class=\"keyword\">var</span> date1 = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(ary[<span class=\"number\">0</span>],ary[<span class=\"number\">1</span>]+<span class=\"number\">1</span>,<span class=\"number\">1</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> date2 = date1.dateAdd(<span class=\"number\">1</span>,<span class=\"string\">'m'</span>,<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> result = dateDiff(date1.Format(<span class=\"string\">'yyyy-MM-dd'</span>),date2.Format(<span class=\"string\">'yyyy-MM-dd'</span>));  </div><div class=\"line\">    <span class=\"keyword\">return</span> result;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得当前日期所在周是一年中的第几周  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.WeekNumOfYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> ary = myDate.toArray();  </div><div class=\"line\">    <span class=\"keyword\">var</span> year = ary[<span class=\"number\">0</span>];  </div><div class=\"line\">    <span class=\"keyword\">var</span> month = ary[<span class=\"number\">1</span>]+<span class=\"number\">1</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> day = ary[<span class=\"number\">2</span>];  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt; script language=VBScript\\&gt; \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'myDate = Datue('</span><span class=\"string\">'+month+'</span>-<span class=\"string\">'+day+'</span>-<span class=\"string\">'+year+'</span><span class=\"string\">') \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'result = DatePart('</span>ww<span class=\"string\">', myDate) \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">' \\n'</span>);  </div><div class=\"line\">    <span class=\"keyword\">return</span> result;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 字符串转成日期类型   </span></div><div class=\"line\"><span class=\"comment\">//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StringToDate</span>(<span class=\"params\">DateStr</span>)  </div><div class=\"line\"></span>&#123;   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> converted = <span class=\"built_in\">Date</span>.parse(DateStr);  </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(converted);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(myDate))  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"comment\">//var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> arys= DateStr.split(<span class=\"string\">'-'</span>);  </div><div class=\"line\">        myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(arys[<span class=\"number\">0</span>],--arys[<span class=\"number\">1</span>],arys[<span class=\"number\">2</span>]);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> myDate;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>若要显示:当前日期加时间(如:2009-06-12 12:00)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CurentTime</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> year = now.getFullYear();       <span class=\"comment\">//年</span></div><div class=\"line\">        <span class=\"keyword\">var</span> month = now.getMonth() + <span class=\"number\">1</span>;     <span class=\"comment\">//月</span></div><div class=\"line\">        <span class=\"keyword\">var</span> day = now.getDate();            <span class=\"comment\">//日</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> hh = now.getHours();            <span class=\"comment\">//时</span></div><div class=\"line\">        <span class=\"keyword\">var</span> mm = now.getMinutes();          <span class=\"comment\">//分</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> clock = year + <span class=\"string\">\"-\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(month &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        clock += month + <span class=\"string\">\"-\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(day &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">           </div><div class=\"line\">        clock += day + <span class=\"string\">\" \"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(hh &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">           </div><div class=\"line\">        clock += hh + <span class=\"string\">\":\"</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mm &lt; <span class=\"number\">10</span>) clock += <span class=\"string\">'0'</span>; </div><div class=\"line\">        clock += mm; </div><div class=\"line\">        <span class=\"keyword\">return</span>(clock); </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>"},{"title":"基于vue的简易数字键盘","date":"2017-02-15T03:51:31.000Z","_content":"\n## 基于vue的简易数字键盘\n------\n完成时间：2017.02\n核心技术：zepto,Aui,vue\n从小记app里提取出来的，代码有点乱\n------\n## 先看效果图\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo.png)\n\n核心代码：\n事件没有用v-bind到组件上，因为移动端按键click会有300ms延迟，所以输入时会有延迟，用了apicloud的点击优化tap，或者用zepto的tap事件也行。\n分类组件：\n```javascript\n//分类组件\nvar classifyComponent = Vue.extend({\n    template: '#classifyComponent',\n    props: ['item','index'],\n    methods: {\n        onActive: function(){\n            $('#classify li').removeClass('active');\n            this.$el.className = \"aui-pull-left active\";\n        }\n    }\n})\n//分类实例\nvar classify = new Vue({\n      el: '#classify',\n      data: {\n          classify: expenditure\n      },\n      components:{\n          'classify-component': classifyComponent\n      },\n      methods: {\n         addClassify: function(){\n\n         }\n      }\n})\n\n```\n\n键盘组件：\n```javascript\n//键盘组件\nvar keybordComponent = Vue.extend({\n      template: '#keybordComponent',\n      data : function(){\n          return{\n              \n          }\n      },\n      props: ['numbers'],\n      methods: {\n          \n      }\n})\n//键盘实例\nvar keybord = new Vue({\n      el: '#keybord',\n      data: {\n          numbers: [7,8,9,4,5,6,1,2,3,'c',0,'.']\n      },\n      components:{\n          'keybord-component': keybordComponent\n      },\n      methods: {\n              onComf: function(){\n                \n              }\n          }\n})\n```\n按键操作：\n```javascript\nfunction onKeyUp(obj){\n      var count = amount.count;\n      var num = $(obj).find('span').text();\n      if(num == 'c'){\n          amount.count = 0; \n      }else if(num == '.'){\n          amount.count = count + num;\n      }else{\n         if(count === 0||count === '0'){\n             amount.count = num;\n         }else{\n             amount.count = count + num;\n         }\n      }\n      \n}\nfunction onDelete(){\n      var count = amount.count.toString();\n      if(count.length == 1) {\n          amount.count = 0;\n      }else{\n          amount.count = count.substr(0,count.length-1)\n      }\n}\n```\n\n[从apicloud提取出来的源码地址](https://github.com/cry101/Some-little-projects/tree/master/vue)\n\n","source":"_posts/vue-keybord.md","raw":"---\ntitle: 基于vue的简易数字键盘\ndate: 2017-02-15 11:51:31\ntags:\n---\n\n## 基于vue的简易数字键盘\n------\n完成时间：2017.02\n核心技术：zepto,Aui,vue\n从小记app里提取出来的，代码有点乱\n------\n## 先看效果图\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo.png)\n\n核心代码：\n事件没有用v-bind到组件上，因为移动端按键click会有300ms延迟，所以输入时会有延迟，用了apicloud的点击优化tap，或者用zepto的tap事件也行。\n分类组件：\n```javascript\n//分类组件\nvar classifyComponent = Vue.extend({\n    template: '#classifyComponent',\n    props: ['item','index'],\n    methods: {\n        onActive: function(){\n            $('#classify li').removeClass('active');\n            this.$el.className = \"aui-pull-left active\";\n        }\n    }\n})\n//分类实例\nvar classify = new Vue({\n      el: '#classify',\n      data: {\n          classify: expenditure\n      },\n      components:{\n          'classify-component': classifyComponent\n      },\n      methods: {\n         addClassify: function(){\n\n         }\n      }\n})\n\n```\n\n键盘组件：\n```javascript\n//键盘组件\nvar keybordComponent = Vue.extend({\n      template: '#keybordComponent',\n      data : function(){\n          return{\n              \n          }\n      },\n      props: ['numbers'],\n      methods: {\n          \n      }\n})\n//键盘实例\nvar keybord = new Vue({\n      el: '#keybord',\n      data: {\n          numbers: [7,8,9,4,5,6,1,2,3,'c',0,'.']\n      },\n      components:{\n          'keybord-component': keybordComponent\n      },\n      methods: {\n              onComf: function(){\n                \n              }\n          }\n})\n```\n按键操作：\n```javascript\nfunction onKeyUp(obj){\n      var count = amount.count;\n      var num = $(obj).find('span').text();\n      if(num == 'c'){\n          amount.count = 0; \n      }else if(num == '.'){\n          amount.count = count + num;\n      }else{\n         if(count === 0||count === '0'){\n             amount.count = num;\n         }else{\n             amount.count = count + num;\n         }\n      }\n      \n}\nfunction onDelete(){\n      var count = amount.count.toString();\n      if(count.length == 1) {\n          amount.count = 0;\n      }else{\n          amount.count = count.substr(0,count.length-1)\n      }\n}\n```\n\n[从apicloud提取出来的源码地址](https://github.com/cry101/Some-little-projects/tree/master/vue)\n\n","slug":"vue-keybord","published":1,"updated":"2017-02-15T03:57:54.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyyg000degy76w2ws4s6","content":"<h2 id=\"基于vue的简易数字键盘\"><a href=\"#基于vue的简易数字键盘\" class=\"headerlink\" title=\"基于vue的简易数字键盘\"></a>基于vue的简易数字键盘</h2><hr>\n<p>完成时间：2017.02<br>核心技术：zepto,Aui,vue</p>\n<h2 id=\"从小记app里提取出来的，代码有点乱\"><a href=\"#从小记app里提取出来的，代码有点乱\" class=\"headerlink\" title=\"从小记app里提取出来的，代码有点乱\"></a>从小记app里提取出来的，代码有点乱</h2><h2 id=\"先看效果图\"><a href=\"#先看效果图\" class=\"headerlink\" title=\"先看效果图\"></a>先看效果图</h2><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo.png\" alt=\"图片\"></p>\n<p>核心代码：<br>事件没有用v-bind到组件上，因为移动端按键click会有300ms延迟，所以输入时会有延迟，用了apicloud的点击优化tap，或者用zepto的tap事件也行。<br>分类组件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//分类组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> classifyComponent = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'#classifyComponent'</span>,</div><div class=\"line\">    <span class=\"attr\">props</span>: [<span class=\"string\">'item'</span>,<span class=\"string\">'index'</span>],</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">onActive</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'#classify li'</span>).removeClass(<span class=\"string\">'active'</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.$el.className = <span class=\"string\">\"aui-pull-left active\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//分类实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> classify = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      <span class=\"attr\">el</span>: <span class=\"string\">'#classify'</span>,</div><div class=\"line\">      <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">classify</span>: expenditure</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">components</span>:&#123;</div><div class=\"line\">          <span class=\"string\">'classify-component'</span>: classifyComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">         <span class=\"attr\">addClassify</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>键盘组件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//键盘组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> keybordComponent = Vue.extend(&#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'#keybordComponent'</span>,</div><div class=\"line\">      <span class=\"attr\">data</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">              </div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">props</span>: [<span class=\"string\">'numbers'</span>],</div><div class=\"line\">      <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">          </div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//键盘实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> keybord = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      <span class=\"attr\">el</span>: <span class=\"string\">'#keybord'</span>,</div><div class=\"line\">      <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">numbers</span>: [<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">'c'</span>,<span class=\"number\">0</span>,<span class=\"string\">'.'</span>]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">components</span>:&#123;</div><div class=\"line\">          <span class=\"string\">'keybord-component'</span>: keybordComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">              <span class=\"attr\">onComf</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                </div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>按键操作：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onKeyUp</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> count = amount.count;</div><div class=\"line\">      <span class=\"keyword\">var</span> num = $(obj).find(<span class=\"string\">'span'</span>).text();</div><div class=\"line\">      <span class=\"keyword\">if</span>(num == <span class=\"string\">'c'</span>)&#123;</div><div class=\"line\">          amount.count = <span class=\"number\">0</span>; </div><div class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num == <span class=\"string\">'.'</span>)&#123;</div><div class=\"line\">          amount.count = count + num;</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(count === <span class=\"number\">0</span>||count === <span class=\"string\">'0'</span>)&#123;</div><div class=\"line\">             amount.count = num;</div><div class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">             amount.count = count + num;</div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onDelete</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> count = amount.count.toString();</div><div class=\"line\">      <span class=\"keyword\">if</span>(count.length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          amount.count = <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          amount.count = count.substr(<span class=\"number\">0</span>,count.length<span class=\"number\">-1</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue\" target=\"_blank\" rel=\"external\">从apicloud提取出来的源码地址</a></p>\n","excerpt":"","more":"<h2 id=\"基于vue的简易数字键盘\"><a href=\"#基于vue的简易数字键盘\" class=\"headerlink\" title=\"基于vue的简易数字键盘\"></a>基于vue的简易数字键盘</h2><hr>\n<p>完成时间：2017.02<br>核心技术：zepto,Aui,vue</p>\n<h2 id=\"从小记app里提取出来的，代码有点乱\"><a href=\"#从小记app里提取出来的，代码有点乱\" class=\"headerlink\" title=\"从小记app里提取出来的，代码有点乱\"></a>从小记app里提取出来的，代码有点乱</h2><h2 id=\"先看效果图\"><a href=\"#先看效果图\" class=\"headerlink\" title=\"先看效果图\"></a>先看效果图</h2><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo.png\" alt=\"图片\"></p>\n<p>核心代码：<br>事件没有用v-bind到组件上，因为移动端按键click会有300ms延迟，所以输入时会有延迟，用了apicloud的点击优化tap，或者用zepto的tap事件也行。<br>分类组件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//分类组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> classifyComponent = Vue.extend(&#123;</div><div class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">'#classifyComponent'</span>,</div><div class=\"line\">    <span class=\"attr\">props</span>: [<span class=\"string\">'item'</span>,<span class=\"string\">'index'</span>],</div><div class=\"line\">    <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">onActive</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'#classify li'</span>).removeClass(<span class=\"string\">'active'</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.$el.className = <span class=\"string\">\"aui-pull-left active\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//分类实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> classify = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      <span class=\"attr\">el</span>: <span class=\"string\">'#classify'</span>,</div><div class=\"line\">      <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">classify</span>: expenditure</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">components</span>:&#123;</div><div class=\"line\">          <span class=\"string\">'classify-component'</span>: classifyComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">         <span class=\"attr\">addClassify</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>键盘组件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//键盘组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> keybordComponent = Vue.extend(&#123;</div><div class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">'#keybordComponent'</span>,</div><div class=\"line\">      <span class=\"attr\">data</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">              </div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">props</span>: [<span class=\"string\">'numbers'</span>],</div><div class=\"line\">      <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">          </div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//键盘实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> keybord = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      <span class=\"attr\">el</span>: <span class=\"string\">'#keybord'</span>,</div><div class=\"line\">      <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">numbers</span>: [<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">'c'</span>,<span class=\"number\">0</span>,<span class=\"string\">'.'</span>]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">components</span>:&#123;</div><div class=\"line\">          <span class=\"string\">'keybord-component'</span>: keybordComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">              <span class=\"attr\">onComf</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                </div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>按键操作：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onKeyUp</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> count = amount.count;</div><div class=\"line\">      <span class=\"keyword\">var</span> num = $(obj).find(<span class=\"string\">'span'</span>).text();</div><div class=\"line\">      <span class=\"keyword\">if</span>(num == <span class=\"string\">'c'</span>)&#123;</div><div class=\"line\">          amount.count = <span class=\"number\">0</span>; </div><div class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num == <span class=\"string\">'.'</span>)&#123;</div><div class=\"line\">          amount.count = count + num;</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(count === <span class=\"number\">0</span>||count === <span class=\"string\">'0'</span>)&#123;</div><div class=\"line\">             amount.count = num;</div><div class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">             amount.count = count + num;</div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onDelete</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> count = amount.count.toString();</div><div class=\"line\">      <span class=\"keyword\">if</span>(count.length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          amount.count = <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          amount.count = count.substr(<span class=\"number\">0</span>,count.length<span class=\"number\">-1</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue\">从apicloud提取出来的源码地址</a></p>\n"},{"title":"基于vue的简易日历","date":"2017-02-15T03:33:29.000Z","_content":"\n## 基于vue的简易日历\n------\n完成时间：2017.02\n核心技术：zepto,Aui,vue\n从小记app里提取出来的，代码有点乱\n\n------\n## 先看效果图\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo2.png)\n\n[点击查看webpack+vue-cli重写的](https://github.com/cry101/Some-little-projects/tree/master/vue-calendar)\n核心代码：HeaderCom.vue\n```html\n<template>\n  <div>\n    <header class=\"aui-bar aui-bar-nav\" id=\"header\">\n       <div class=\"aui-title\">\n          <span class=\"triangle triangle-left\" v-on:click=\"onReduce()\"><i></i></span>\n          <span id=\"year\">{{ year }}</span>年<span id=\"month\">{{ month }}</span>月\n          <span class=\"triangle triangle-right\" v-on:click=\"onPlus()\"><i></i></span>\n      </div>\n    </header>\n    <TableCom :year=\"year\" :month=\"month\"></TableCom>\n  </div>\n</template>\n\n<script>\nimport TableCom from 'components/TableCom'\n\nvar myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth()+1;\nexport default {\n  name: 'header',\n  data () {\n    return {\n      year: year,\n      month : month\n    }\n  },\n  components: {\n    TableCom\n  },\n  methods: {\n      onReduce: function(){\n          if(this.month == 1){\n               this.year = parseInt(this.year)-1;\n               this.month = 12;\n          }else{\n               this.month =  parseInt(this.month)-1;\n          }\n      },\n      onPlus: function(){\n          if(this.month == 12){\n               this.year = parseInt(this.year)+1;\n               this.month = 1;\n          }else{\n               this.month = parseInt(this.month)+1;\n          }\n      }           \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#header {\n    text-align: center;\n    background-color: #fff;\n    color: #000;\n    width: 100%;\n    z-index: 0;\n}\n.aui-bar-nav {\n    top: 0;\n    line-height: 2.25rem;\n    background-color: #03a9f4;\n    color: #ffffff;\n}\n.aui-bar {\n    position: relative;\n    top: 0;\n    right: 0;\n    left: 0;\n    z-index: 10;\n    width: 100%;\n    min-height: 2.25rem;\n    font-size: 0.9rem;\n    text-align: center;\n    display: table;\n}\n.aui-bar-nav .aui-title {\n    min-height: 2.25rem;\n    position: absolute;\n    margin: 0;\n    text-align: center;\n    white-space: nowrap;\n    right: 5rem;\n    left: 5rem;\n    width: auto;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    z-index: 2;\n}\n.aui-bar-nav .aui-title{\n  right: 4rem;left: 4rem;\n}\n.triangle{\n  position:absolute;\n  padding: 0 .8rem;\n}\n.triangle-left{\n    left: 0;\n}\n.triangle-right{\n    right: 0;\n}\n.triangle i{\n  display: inline-block;\n  width: 0;\n    height: 0;\n}\n.triangle-left i{\n    border-top: 5px solid transparent;\n    border-right: 10px solid #79CDA9;\n    border-bottom: 5px solid transparent;\n}\n.triangle-right i{\n    border-top: 5px solid transparent;\n    border-left: 10px solid #79CDA9;\n    border-bottom: 5px solid transparent;\n}\n</style>\n```\n\n核心代码：TableCom.vue\n```html\n<template>\n  <table class=\"calendar\" id=\"calendar\">\n    <tbody>\n        <tr class=\"date-head clearfix\">\n            <th>日</th>\n            <th>一</th>\n            <th>二</th>\n            <th>三</th>\n            <th>四</th>\n            <th>五</th>\n            <th>六</th>\n        </tr>\n        <tr class=\"date-body clearfix\">\n            <td v-for=\"day in days\">\n                <p>{{day}}</p>\n            </td>\n        </tr>\n    </tbody>\n</table> \n</template>\n\n<script>\nvar myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth()+1;\n\nexport default {\n  name: 'TableCom',\n  data () {\n    return {\n      days: ''\n    }\n  },\n  props: ['year','month'],\n  watch: {\n    month: function() {\n        var year = this.year;\n        var month = this.month;\n        var oDate0 = new Date( year , month , '0' );\n        var oDate1 = new Date( year + '-' + month + '-' + '1' );\n        var oDateDays = oDate0.getDate();//当前月的天数\n        var oDateWeek = oDate1.getDay();//当前月1号的星期\n        var dayArr = [];\n        for(var i = 0 ; i < oDateWeek ; i++){\n            dayArr.push(\"\")\n        }\n        for(var j = 1 ; j <= oDateDays ; j++){\n            dayArr.push(j)\n        }\n        this.days = dayArr\n    }\n  },\n  mounted: function(){\n      var year = this.year;\n      var month = this.month;\n      var oDate0 = new Date( year , month , '0' );\n      var oDate1 = new Date( year + '-' + month + '-' + '1' );\n      var oDateDays = oDate0.getDate();//当前月的天数\n      var oDateWeek = oDate1.getDay();//当前月1号的星期\n      var dayArr = [];\n      for(var i = 0 ; i < oDateWeek ; i++){\n          dayArr.push(\"\")\n      }\n      for(var j = 1 ; j <= oDateDays ; j++){\n          dayArr.push(j)\n      }\n      this.days = dayArr          \n  },\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.calendar{\n  width: 100%;\n  text-align: center;\n}\n.calendar .date-head{\n  height: 2rem;\n  background: #79CDA9;\n  color: #fff;\n}\n.calendar .date-head th{\n  float: left;\n  height: 2rem;\n  width: 14.2%;\n  vertical-align: middle;\n  line-height: 2rem;\n}\n.calendar .date-body td{\n  float: left;\n  height: 3rem;\n  line-height: .7rem;\n  width: 14.2%;\n  vertical-align: middle;\n  border-bottom: 1px solid #ccc;\n}\n.calendar .date-body td>p{\n  padding-top: .5rem;\n}\n.calendar .date-body td>span{\n  font-size: .6rem;\n}\n.calendar .date-body td>span.income{\n  color: #8BD4B4;\n}\n.calendar .date-body td>span.expenditure{\n  color: #FB7189;\n}\n</style>\n\n\n```\n\n\n以下代码在apicloud中写的：\n由于在apicloud中写的，本来应该头部日期和日历是个父子组件，可是apicloud中是win窗口open出frame窗口，所以就这样吧\n```javascript\n//日历实例\nvar calendar = new Vue({\n      el: '#calendar',\n      data: {\n          days: \"\"\n      },\n      mounted: function(){\n          \n      },\n      methods: {\n         \n      }\n})\nfunction setCalendar(year , month){\n      var oDate0 = new Date( year , month , '0' );\n      var oDate1 = new Date( year + '-' + month + '-' + '1' );\n      console.log(oDate1)\n      var oDateDays = oDate0.getDate();//当前月的天数\n      var oDateWeek = oDate1.getDay();//当前月1号的星期\n      console.log(oDateWeek)\n      var dayArr = [];\n      for(var i = 0 ; i < oDateWeek ; i++){\n          dayArr.push(\"\")\n      }\n      for(var j = 1 ; j <= oDateDays ; j++){\n          dayArr.push(j)\n      }\n      console.log(dayArr)\n      calendar.days = dayArr\n  }\n```\n\n月份减一：\n```javascript\n function onReduce(){\n\t    var year = document.getElementById('year').innerHTML;\n\t    var month = document.getElementById('month').innerHTML;\n\t    if(month == 1){\n\t         document.getElementById('year').innerHTML = parseInt(year)-1;\n\t         document.getElementById('month').innerHTML = 12;\n\t    }else{\n\t         document.getElementById('month').innerHTML =  parseInt(month)-1;\n\t    }\n\t    setCalendar(document.getElementById('year').innerHTML , document.getElementById('month').innerHTML)\n\t}\n```\n\n月份加一：\n```javascript\nfunction onPlus(){\n    var year = document.getElementById('year').innerHTML;\n    var month = document.getElementById('month').innerHTML;\n    if(month == 12){\n         document.getElementById('year').innerHTML = parseInt(year)+1;\n         document.getElementById('month').innerHTML = 1;\n    }else{\n         document.getElementById('month').innerHTML = parseInt(month)+1;\n    }\n    setCalendar(document.getElementById('year').innerHTML , document.getElementById('month').innerHTML)\n}\n```\n\n[从apicloud提取出来的源码地址](https://github.com/cry101/Some-little-projects/tree/master/vue)\n","source":"_posts/vue-calendar.md","raw":"---\ntitle: 基于vue的简易日历\ndate: 2017-02-15 11:33:29\ntags:\n---\n\n## 基于vue的简易日历\n------\n完成时间：2017.02\n核心技术：zepto,Aui,vue\n从小记app里提取出来的，代码有点乱\n\n------\n## 先看效果图\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo2.png)\n\n[点击查看webpack+vue-cli重写的](https://github.com/cry101/Some-little-projects/tree/master/vue-calendar)\n核心代码：HeaderCom.vue\n```html\n<template>\n  <div>\n    <header class=\"aui-bar aui-bar-nav\" id=\"header\">\n       <div class=\"aui-title\">\n          <span class=\"triangle triangle-left\" v-on:click=\"onReduce()\"><i></i></span>\n          <span id=\"year\">{{ year }}</span>年<span id=\"month\">{{ month }}</span>月\n          <span class=\"triangle triangle-right\" v-on:click=\"onPlus()\"><i></i></span>\n      </div>\n    </header>\n    <TableCom :year=\"year\" :month=\"month\"></TableCom>\n  </div>\n</template>\n\n<script>\nimport TableCom from 'components/TableCom'\n\nvar myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth()+1;\nexport default {\n  name: 'header',\n  data () {\n    return {\n      year: year,\n      month : month\n    }\n  },\n  components: {\n    TableCom\n  },\n  methods: {\n      onReduce: function(){\n          if(this.month == 1){\n               this.year = parseInt(this.year)-1;\n               this.month = 12;\n          }else{\n               this.month =  parseInt(this.month)-1;\n          }\n      },\n      onPlus: function(){\n          if(this.month == 12){\n               this.year = parseInt(this.year)+1;\n               this.month = 1;\n          }else{\n               this.month = parseInt(this.month)+1;\n          }\n      }           \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#header {\n    text-align: center;\n    background-color: #fff;\n    color: #000;\n    width: 100%;\n    z-index: 0;\n}\n.aui-bar-nav {\n    top: 0;\n    line-height: 2.25rem;\n    background-color: #03a9f4;\n    color: #ffffff;\n}\n.aui-bar {\n    position: relative;\n    top: 0;\n    right: 0;\n    left: 0;\n    z-index: 10;\n    width: 100%;\n    min-height: 2.25rem;\n    font-size: 0.9rem;\n    text-align: center;\n    display: table;\n}\n.aui-bar-nav .aui-title {\n    min-height: 2.25rem;\n    position: absolute;\n    margin: 0;\n    text-align: center;\n    white-space: nowrap;\n    right: 5rem;\n    left: 5rem;\n    width: auto;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    z-index: 2;\n}\n.aui-bar-nav .aui-title{\n  right: 4rem;left: 4rem;\n}\n.triangle{\n  position:absolute;\n  padding: 0 .8rem;\n}\n.triangle-left{\n    left: 0;\n}\n.triangle-right{\n    right: 0;\n}\n.triangle i{\n  display: inline-block;\n  width: 0;\n    height: 0;\n}\n.triangle-left i{\n    border-top: 5px solid transparent;\n    border-right: 10px solid #79CDA9;\n    border-bottom: 5px solid transparent;\n}\n.triangle-right i{\n    border-top: 5px solid transparent;\n    border-left: 10px solid #79CDA9;\n    border-bottom: 5px solid transparent;\n}\n</style>\n```\n\n核心代码：TableCom.vue\n```html\n<template>\n  <table class=\"calendar\" id=\"calendar\">\n    <tbody>\n        <tr class=\"date-head clearfix\">\n            <th>日</th>\n            <th>一</th>\n            <th>二</th>\n            <th>三</th>\n            <th>四</th>\n            <th>五</th>\n            <th>六</th>\n        </tr>\n        <tr class=\"date-body clearfix\">\n            <td v-for=\"day in days\">\n                <p>{{day}}</p>\n            </td>\n        </tr>\n    </tbody>\n</table> \n</template>\n\n<script>\nvar myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth()+1;\n\nexport default {\n  name: 'TableCom',\n  data () {\n    return {\n      days: ''\n    }\n  },\n  props: ['year','month'],\n  watch: {\n    month: function() {\n        var year = this.year;\n        var month = this.month;\n        var oDate0 = new Date( year , month , '0' );\n        var oDate1 = new Date( year + '-' + month + '-' + '1' );\n        var oDateDays = oDate0.getDate();//当前月的天数\n        var oDateWeek = oDate1.getDay();//当前月1号的星期\n        var dayArr = [];\n        for(var i = 0 ; i < oDateWeek ; i++){\n            dayArr.push(\"\")\n        }\n        for(var j = 1 ; j <= oDateDays ; j++){\n            dayArr.push(j)\n        }\n        this.days = dayArr\n    }\n  },\n  mounted: function(){\n      var year = this.year;\n      var month = this.month;\n      var oDate0 = new Date( year , month , '0' );\n      var oDate1 = new Date( year + '-' + month + '-' + '1' );\n      var oDateDays = oDate0.getDate();//当前月的天数\n      var oDateWeek = oDate1.getDay();//当前月1号的星期\n      var dayArr = [];\n      for(var i = 0 ; i < oDateWeek ; i++){\n          dayArr.push(\"\")\n      }\n      for(var j = 1 ; j <= oDateDays ; j++){\n          dayArr.push(j)\n      }\n      this.days = dayArr          \n  },\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.calendar{\n  width: 100%;\n  text-align: center;\n}\n.calendar .date-head{\n  height: 2rem;\n  background: #79CDA9;\n  color: #fff;\n}\n.calendar .date-head th{\n  float: left;\n  height: 2rem;\n  width: 14.2%;\n  vertical-align: middle;\n  line-height: 2rem;\n}\n.calendar .date-body td{\n  float: left;\n  height: 3rem;\n  line-height: .7rem;\n  width: 14.2%;\n  vertical-align: middle;\n  border-bottom: 1px solid #ccc;\n}\n.calendar .date-body td>p{\n  padding-top: .5rem;\n}\n.calendar .date-body td>span{\n  font-size: .6rem;\n}\n.calendar .date-body td>span.income{\n  color: #8BD4B4;\n}\n.calendar .date-body td>span.expenditure{\n  color: #FB7189;\n}\n</style>\n\n\n```\n\n\n以下代码在apicloud中写的：\n由于在apicloud中写的，本来应该头部日期和日历是个父子组件，可是apicloud中是win窗口open出frame窗口，所以就这样吧\n```javascript\n//日历实例\nvar calendar = new Vue({\n      el: '#calendar',\n      data: {\n          days: \"\"\n      },\n      mounted: function(){\n          \n      },\n      methods: {\n         \n      }\n})\nfunction setCalendar(year , month){\n      var oDate0 = new Date( year , month , '0' );\n      var oDate1 = new Date( year + '-' + month + '-' + '1' );\n      console.log(oDate1)\n      var oDateDays = oDate0.getDate();//当前月的天数\n      var oDateWeek = oDate1.getDay();//当前月1号的星期\n      console.log(oDateWeek)\n      var dayArr = [];\n      for(var i = 0 ; i < oDateWeek ; i++){\n          dayArr.push(\"\")\n      }\n      for(var j = 1 ; j <= oDateDays ; j++){\n          dayArr.push(j)\n      }\n      console.log(dayArr)\n      calendar.days = dayArr\n  }\n```\n\n月份减一：\n```javascript\n function onReduce(){\n\t    var year = document.getElementById('year').innerHTML;\n\t    var month = document.getElementById('month').innerHTML;\n\t    if(month == 1){\n\t         document.getElementById('year').innerHTML = parseInt(year)-1;\n\t         document.getElementById('month').innerHTML = 12;\n\t    }else{\n\t         document.getElementById('month').innerHTML =  parseInt(month)-1;\n\t    }\n\t    setCalendar(document.getElementById('year').innerHTML , document.getElementById('month').innerHTML)\n\t}\n```\n\n月份加一：\n```javascript\nfunction onPlus(){\n    var year = document.getElementById('year').innerHTML;\n    var month = document.getElementById('month').innerHTML;\n    if(month == 12){\n         document.getElementById('year').innerHTML = parseInt(year)+1;\n         document.getElementById('month').innerHTML = 1;\n    }else{\n         document.getElementById('month').innerHTML = parseInt(month)+1;\n    }\n    setCalendar(document.getElementById('year').innerHTML , document.getElementById('month').innerHTML)\n}\n```\n\n[从apicloud提取出来的源码地址](https://github.com/cry101/Some-little-projects/tree/master/vue)\n","slug":"vue-calendar","published":1,"updated":"2017-02-15T09:04:52.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj539gyyh000eegy70vwkeio4","content":"<h2 id=\"基于vue的简易日历\"><a href=\"#基于vue的简易日历\" class=\"headerlink\" title=\"基于vue的简易日历\"></a>基于vue的简易日历</h2><hr>\n<p>完成时间：2017.02<br>核心技术：zepto,Aui,vue<br>从小记app里提取出来的，代码有点乱</p>\n<hr>\n<h2 id=\"先看效果图\"><a href=\"#先看效果图\" class=\"headerlink\" title=\"先看效果图\"></a>先看效果图</h2><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo2.png\" alt=\"图片\"></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue-calendar\" target=\"_blank\" rel=\"external\">点击查看webpack+vue-cli重写的</a><br>核心代码：HeaderCom.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aui-bar aui-bar-nav\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aui-title\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle triangle-left\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"onReduce()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"year\"</span>&gt;</span>&#123;&#123; year &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>年<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"month\"</span>&gt;</span>&#123;&#123; month &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>月</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle triangle-right\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"onPlus()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TableCom</span> <span class=\"attr\">:year</span>=<span class=\"string\">\"year\"</span> <span class=\"attr\">:month</span>=<span class=\"string\">\"month\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TableCom</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">import</span> TableCom <span class=\"keyword\">from</span> <span class=\"string\">'components/TableCom'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> year = myDate.getFullYear();</div><div class=\"line\"><span class=\"keyword\">var</span> month = myDate.getMonth()+<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'header'</span>,</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">year</span>: year,</div><div class=\"line\">      <span class=\"attr\">month</span> : month</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">    TableCom</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">onReduce</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.month == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">               <span class=\"keyword\">this</span>.year = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.year)<span class=\"number\">-1</span>;</div><div class=\"line\">               <span class=\"keyword\">this</span>.month = <span class=\"number\">12</span>;</div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">               <span class=\"keyword\">this</span>.month =  <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.month)<span class=\"number\">-1</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">onPlus</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.month == <span class=\"number\">12</span>)&#123;</div><div class=\"line\">               <span class=\"keyword\">this</span>.year = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.year)+<span class=\"number\">1</span>;</div><div class=\"line\">               <span class=\"keyword\">this</span>.month = <span class=\"number\">1</span>;</div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">               <span class=\"keyword\">this</span>.month = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.month)+<span class=\"number\">1</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;           </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Add \"scoped\" attribute to limit CSS to this component only --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\"><span class=\"selector-id\">#header</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.aui-bar-nav</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">2.25rem</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#03a9f4</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.aui-bar</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">2.25rem</span>;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.9rem</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.aui-bar-nav</span> <span class=\"selector-class\">.aui-title</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">2.25rem</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">5rem</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">5rem</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</div><div class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.aui-bar-nav</span> <span class=\"selector-class\">.aui-title</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">4rem</span>;<span class=\"attribute\">left</span>: <span class=\"number\">4rem</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>:absolute;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> .<span class=\"number\">8rem</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle-left</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle-right</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle</span> <span class=\"selector-tag\">i</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle-left</span> <span class=\"selector-tag\">i</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">10px</span> solid <span class=\"number\">#79CDA9</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle-right</span> <span class=\"selector-tag\">i</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">10px</span> solid <span class=\"number\">#79CDA9</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>核心代码：TableCom.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"calendar\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"calendar\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"date-head clearfix\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>日<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>一<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>二<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>三<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>四<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>五<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>六<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"date-body clearfix\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"day in days\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;day&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> year = myDate.getFullYear();</div><div class=\"line\"><span class=\"keyword\">var</span> month = myDate.getMonth()+<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'TableCom'</span>,</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">days</span>: <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'year'</span>,<span class=\"string\">'month'</span>],</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">month</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> year = <span class=\"keyword\">this</span>.year;</div><div class=\"line\">        <span class=\"keyword\">var</span> month = <span class=\"keyword\">this</span>.month;</div><div class=\"line\">        <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</div><div class=\"line\">        <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</div><div class=\"line\">        <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></div><div class=\"line\">        <span class=\"keyword\">var</span> dayArr = [];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class=\"line\">            dayArr.push(<span class=\"string\">\"\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class=\"line\">            dayArr.push(j)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.days = dayArr</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">mounted</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> year = <span class=\"keyword\">this</span>.year;</div><div class=\"line\">      <span class=\"keyword\">var</span> month = <span class=\"keyword\">this</span>.month;</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</div><div class=\"line\">      <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></div><div class=\"line\">      <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></div><div class=\"line\">      <span class=\"keyword\">var</span> dayArr = [];</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class=\"line\">          dayArr.push(<span class=\"string\">\"\"</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class=\"line\">          dayArr.push(j)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">this</span>.days = dayArr          </div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Add \"scoped\" attribute to limit CSS to this component only --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\"><span class=\"selector-class\">.calendar</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-head</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">2rem</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#79CDA9</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-head</span> <span class=\"selector-tag\">th</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">2rem</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">14.2%</span>;</div><div class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">2rem</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">3rem</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: .<span class=\"number\">7rem</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">14.2%</span>;</div><div class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">p</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">padding-top</span>: .<span class=\"number\">5rem</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: .<span class=\"number\">6rem</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-class\">.income</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#8BD4B4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-class\">.expenditure</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#FB7189</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>以下代码在apicloud中写的：<br>由于在apicloud中写的，本来应该头部日期和日历是个父子组件，可是apicloud中是win窗口open出frame窗口，所以就这样吧<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//日历实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> calendar = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      <span class=\"attr\">el</span>: <span class=\"string\">'#calendar'</span>,</div><div class=\"line\">      <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">days</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">mounted</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          </div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">         </div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCalendar</span>(<span class=\"params\">year , month</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(oDate1)</div><div class=\"line\">      <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></div><div class=\"line\">      <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(oDateWeek)</div><div class=\"line\">      <span class=\"keyword\">var</span> dayArr = [];</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class=\"line\">          dayArr.push(<span class=\"string\">\"\"</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class=\"line\">          dayArr.push(j)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(dayArr)</div><div class=\"line\">      calendar.days = dayArr</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>月份减一：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReduce</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> year = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">var</span> month = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">if</span>(month == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(year)<span class=\"number\">-1</span>;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"number\">12</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML =  <span class=\"built_in\">parseInt</span>(month)<span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setCalendar(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML , <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>月份加一：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPlus</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> year = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">var</span> month = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">if</span>(month == <span class=\"number\">12</span>)&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(year)+<span class=\"number\">1</span>;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(month)+<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setCalendar(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML , <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue\" target=\"_blank\" rel=\"external\">从apicloud提取出来的源码地址</a></p>\n","excerpt":"","more":"<h2 id=\"基于vue的简易日历\"><a href=\"#基于vue的简易日历\" class=\"headerlink\" title=\"基于vue的简易日历\"></a>基于vue的简易日历</h2><hr>\n<p>完成时间：2017.02<br>核心技术：zepto,Aui,vue<br>从小记app里提取出来的，代码有点乱</p>\n<hr>\n<h2 id=\"先看效果图\"><a href=\"#先看效果图\" class=\"headerlink\" title=\"先看效果图\"></a>先看效果图</h2><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo2.png\" alt=\"图片\"></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue-calendar\">点击查看webpack+vue-cli重写的</a><br>核心代码：HeaderCom.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aui-bar aui-bar-nav\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aui-title\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle triangle-left\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"onReduce()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"year\"</span>&gt;</span>&#123;&#123; year &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>年<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"month\"</span>&gt;</span>&#123;&#123; month &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>月</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle triangle-right\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"onPlus()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TableCom</span> <span class=\"attr\">:year</span>=<span class=\"string\">\"year\"</span> <span class=\"attr\">:month</span>=<span class=\"string\">\"month\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TableCom</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">import</span> TableCom <span class=\"keyword\">from</span> <span class=\"string\">'components/TableCom'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> year = myDate.getFullYear();</div><div class=\"line\"><span class=\"keyword\">var</span> month = myDate.getMonth()+<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'header'</span>,</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">year</span>: year,</div><div class=\"line\">      <span class=\"attr\">month</span> : month</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">components</span>: &#123;</div><div class=\"line\">    TableCom</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">onReduce</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.month == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">               <span class=\"keyword\">this</span>.year = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.year)<span class=\"number\">-1</span>;</div><div class=\"line\">               <span class=\"keyword\">this</span>.month = <span class=\"number\">12</span>;</div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">               <span class=\"keyword\">this</span>.month =  <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.month)<span class=\"number\">-1</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">onPlus</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.month == <span class=\"number\">12</span>)&#123;</div><div class=\"line\">               <span class=\"keyword\">this</span>.year = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.year)+<span class=\"number\">1</span>;</div><div class=\"line\">               <span class=\"keyword\">this</span>.month = <span class=\"number\">1</span>;</div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">               <span class=\"keyword\">this</span>.month = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.month)+<span class=\"number\">1</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;           </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Add \"scoped\" attribute to limit CSS to this component only --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"css\"></div><div class=\"line\"><span class=\"selector-id\">#header</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.aui-bar-nav</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">2.25rem</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#03a9f4</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.aui-bar</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">2.25rem</span>;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.9rem</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">display</span>: table;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.aui-bar-nav</span> <span class=\"selector-class\">.aui-title</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">2.25rem</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">5rem</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">5rem</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</div><div class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.aui-bar-nav</span> <span class=\"selector-class\">.aui-title</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">4rem</span>;<span class=\"attribute\">left</span>: <span class=\"number\">4rem</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>:absolute;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> .<span class=\"number\">8rem</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle-left</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle-right</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle</span> <span class=\"selector-tag\">i</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle-left</span> <span class=\"selector-tag\">i</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">10px</span> solid <span class=\"number\">#79CDA9</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.triangle-right</span> <span class=\"selector-tag\">i</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">10px</span> solid <span class=\"number\">#79CDA9</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>核心代码：TableCom.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"calendar\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"calendar\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"date-head clearfix\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>日<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>一<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>二<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>三<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>四<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>五<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>六<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"date-body clearfix\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"day in days\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;day&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> year = myDate.getFullYear();</div><div class=\"line\"><span class=\"keyword\">var</span> month = myDate.getMonth()+<span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'TableCom'</span>,</div><div class=\"line\">  data () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">days</span>: <span class=\"string\">''</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">'year'</span>,<span class=\"string\">'month'</span>],</div><div class=\"line\">  <span class=\"attr\">watch</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">month</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> year = <span class=\"keyword\">this</span>.year;</div><div class=\"line\">        <span class=\"keyword\">var</span> month = <span class=\"keyword\">this</span>.month;</div><div class=\"line\">        <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</div><div class=\"line\">        <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</div><div class=\"line\">        <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></div><div class=\"line\">        <span class=\"keyword\">var</span> dayArr = [];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class=\"line\">            dayArr.push(<span class=\"string\">\"\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class=\"line\">            dayArr.push(j)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">this</span>.days = dayArr</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">mounted</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> year = <span class=\"keyword\">this</span>.year;</div><div class=\"line\">      <span class=\"keyword\">var</span> month = <span class=\"keyword\">this</span>.month;</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</div><div class=\"line\">      <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></div><div class=\"line\">      <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></div><div class=\"line\">      <span class=\"keyword\">var</span> dayArr = [];</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class=\"line\">          dayArr.push(<span class=\"string\">\"\"</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class=\"line\">          dayArr.push(j)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">this</span>.days = dayArr          </div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Add \"scoped\" attribute to limit CSS to this component only --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"css\"></div><div class=\"line\"><span class=\"selector-class\">.calendar</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-head</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">2rem</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#79CDA9</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-head</span> <span class=\"selector-tag\">th</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">2rem</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">14.2%</span>;</div><div class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">2rem</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">3rem</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: .<span class=\"number\">7rem</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">14.2%</span>;</div><div class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">p</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">padding-top</span>: .<span class=\"number\">5rem</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: .<span class=\"number\">6rem</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-class\">.income</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#8BD4B4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-class\">.expenditure</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#FB7189</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>以下代码在apicloud中写的：<br>由于在apicloud中写的，本来应该头部日期和日历是个父子组件，可是apicloud中是win窗口open出frame窗口，所以就这样吧<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//日历实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> calendar = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      <span class=\"attr\">el</span>: <span class=\"string\">'#calendar'</span>,</div><div class=\"line\">      <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">days</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">mounted</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          </div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">methods</span>: &#123;</div><div class=\"line\">         </div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCalendar</span>(<span class=\"params\">year , month</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(oDate1)</div><div class=\"line\">      <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></div><div class=\"line\">      <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(oDateWeek)</div><div class=\"line\">      <span class=\"keyword\">var</span> dayArr = [];</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class=\"line\">          dayArr.push(<span class=\"string\">\"\"</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class=\"line\">          dayArr.push(j)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(dayArr)</div><div class=\"line\">      calendar.days = dayArr</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>月份减一：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReduce</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> year = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">var</span> month = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">if</span>(month == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(year)<span class=\"number\">-1</span>;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"number\">12</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML =  <span class=\"built_in\">parseInt</span>(month)<span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setCalendar(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML , <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>月份加一：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPlus</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> year = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">var</span> month = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">if</span>(month == <span class=\"number\">12</span>)&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(year)+<span class=\"number\">1</span>;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(month)+<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setCalendar(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML , <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue\">从apicloud提取出来的源码地址</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj539gyy20006egy7elrdqpr6","tag_id":"cj539gyy70008egy7rictfebq","_id":"cj539gyyf000cegy76ili8gw0"}],"Tag":[{"name":"ionic + angular + cordova","_id":"cj539gyy70008egy7rictfebq"}]}}