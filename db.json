{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/ochuunn/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/css/menu.css","path":"css/menu.css","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/img/wechatImage.jpg","path":"img/wechatImage.jpg","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/img/alipayImage.jpg","path":"img/alipayImage.jpg","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/fonts/icon.ttf","path":"fonts/icon.ttf","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/js/jquery.autoMenu.js","path":"js/jquery.autoMenu.js","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/js/particles.min.js","path":"js/particles.min.js","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/js/particles.oli.js","path":"js/particles.oli.js","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/js/particles.other.js","path":"js/particles.other.js","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/js/scroller.js","path":"js/scroller.js","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/js/jquery-3.1.1.min.js","path":"js/jquery-3.1.1.min.js","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/fonts/icon.eot","path":"fonts/icon.eot","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/fonts/icon.svg","path":"fonts/icon.svg","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/fonts/icon.woff","path":"fonts/icon.woff","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/js/fancybox/jquery.fancybox.min.css","path":"js/fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/ochuunn/source/js/fancybox/jquery.fancybox.min.js","path":"js/fancybox/jquery.fancybox.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/ES6-01.md","hash":"5a07029a41ed83723c3bca18f0063dcfcc31843d","modified":1505826971000},{"_id":"source/_posts/css-better.md","hash":"a5b65af2176bf1e529fdf7147a74cc7cf1454919","modified":1510905730075},{"_id":"source/_posts/css3.md","hash":"56d3fd5d8c0eae1b9a95c3fc79b7b28ccffa181b","modified":1505826971000},{"_id":"source/_posts/css-name.md","hash":"e76b553d0df11d3fbcc5e4a1759804c324ca3ca2","modified":1505826971000},{"_id":"source/_posts/ie-bug.md","hash":"1ee1753508f5fb7969272ef22e16887bebeca87a","modified":1509149775000},{"_id":"source/_posts/hello-world.md","hash":"00280269e69c78e87187afa596d2502234571c30","modified":1505826971000},{"_id":"source/_posts/ionic.md","hash":"9821a22f1b7ad2fcb2383b8a62e35c714f5c2178","modified":1505826971000},{"_id":"source/_posts/js-algorithm.md","hash":"27618d37ccbb999b5afa75c2a3fe912cb9e3e222","modified":1516674627630},{"_id":"source/_posts/js-design.md","hash":"a946d917f18a63078b681c3cc18f81f348002b7b","modified":1505826971000},{"_id":"source/_posts/jquery.md","hash":"fb154aafda69d29fee39325f91efb4b7f41a2196","modified":1509151663000},{"_id":"source/_posts/js-interview.md","hash":"d6fd1edd0d57d2cfce45819a9804acb95c9f9dfb","modified":1505826971000},{"_id":"source/_posts/js-star.md","hash":"eb1e9eb7e495ef731fb5fc90568a80ef5d16a854","modified":1505826971000},{"_id":"source/_posts/js-fn-01.md","hash":"dbcef63066a0d9d66dcb22c8b3719ed448241a77","modified":1516608460557},{"_id":"source/_posts/php-01.md","hash":"ab2364309ea867ac2bbcdaba9de618165606b5ad","modified":1516933270403},{"_id":"source/_posts/mac-android.md","hash":"c531a41499becac57cbea2b879ee0db143ec81ac","modified":1515725727307},{"_id":"source/_posts/pro-note.md","hash":"567f5f70bbb773057e58afc17da359a8002c52c1","modified":1505826971000},{"_id":"source/_posts/pro-comic.md","hash":"2cd7bd72645d75959f222eafb1a5f233b5ba325d","modified":1505826971000},{"_id":"source/_posts/pro-novel.md","hash":"a295346a2650a7c71b8b32000de5885d445b7980","modified":1505826971000},{"_id":"source/_posts/time.md","hash":"7c52efaef1d5727f10dcdaa2d32f1ec9e74839af","modified":1505826971000},{"_id":"source/_posts/vue-01.md","hash":"fb70a69dde9887b4de863d0612c79632432221df","modified":1516936457670},{"_id":"source/_posts/vue-calendar.md","hash":"f024d02e68c6446e0ac851af46ecac55588b3517","modified":1505826971000},{"_id":"source/_posts/web-cache.md","hash":"dcf47e94ce3019ffa7d2ebe76712be43b8bacaed","modified":1505826971000},{"_id":"source/_posts/user-Js.md","hash":"c0798a16a49ea255f23688f507ffe1af8a34569b","modified":1509151130000},{"_id":"source/_posts/vue-keybord.md","hash":"24f01abf3e86835efe9fe69eb12c31b05db8fd24","modified":1505826971000},{"_id":"source/_posts/weex.md","hash":"12fad865b6ba8356cf084650819cff493fc8da4f","modified":1516332757436},{"_id":"themes/ochuunn/.gitignore","hash":"7c16945164c47ed78f2fcab86844ecfb76944bc5","modified":1505826971000},{"_id":"themes/ochuunn/LICENSE","hash":"f8df02c56a13305ac3649f0a7bea0f9b6dd4b3bd","modified":1505826971000},{"_id":"themes/ochuunn/README.md","hash":"8862adfaa426c255e0709123b13045c966bca9be","modified":1505826971000},{"_id":"themes/ochuunn/_config.yml","hash":"581b50d8cb5c1471f94510b0d7f7522a23aadbf1","modified":1505826971000},{"_id":"source/about/index.md","hash":"2bbab19a833c5dc97fdd89c827aeeb6b70f60156","modified":1505826971000},{"_id":"source/_posts/JSON.md","hash":"7d0083783ba4678f5b46c9783f3f618f8aedf92f","modified":1505826971000},{"_id":"source/_posts/ajax.md","hash":"a2df0bf575f3401c3f594bbb561b3f03fc0b246e","modified":1505826971000},{"_id":"themes/ochuunn/layout/archive.pug","hash":"a7f82cc94283684fd85109b97693dd05410ab755","modified":1505826971000},{"_id":"themes/ochuunn/layout/index.pug","hash":"3c86e23c0fbefded1f5ca8a6dbcac69f2e21bcd4","modified":1505826971000},{"_id":"themes/ochuunn/layout/post.pug","hash":"8bfa2dfee01be5657fa5ec8f2c1c0fb50719103e","modified":1505826971000},{"_id":"themes/ochuunn/layout/tag.pug","hash":"709310aaeec055ed67fb87ac0b51639211fd83fa","modified":1505826971000},{"_id":"themes/ochuunn/layout/plugins/google.pug","hash":"acd0dced5bb4819079fdd2dad85dbe3df029e471","modified":1505826971000},{"_id":"themes/ochuunn/layout/plugins/livere.pug","hash":"405b145067e2736f44def49beb2515c7050ac43d","modified":1505826971000},{"_id":"themes/ochuunn/layout/plugins/menu.pug","hash":"59634e87e5bdc31157637fee37ccdc6ed418bc20","modified":1505826971000},{"_id":"themes/ochuunn/layout/views/head.pug","hash":"a46dbfcf542b84e72a27c1f65b11b7185c14df9e","modified":1505826971000},{"_id":"themes/ochuunn/layout/views/index.pug","hash":"29166add5c2378ba7d8881fac9c36cacd3a91c66","modified":1505826971000},{"_id":"themes/ochuunn/layout/views/main.pug","hash":"719cec8571c3f2e7bff7b6a391b41ed09934f9e1","modified":1505826971000},{"_id":"themes/ochuunn/layout/views/nav.pug","hash":"12e44f11add7900c41b165b64acb1fc04e6209aa","modified":1505826971000},{"_id":"themes/ochuunn/source/css/_main-r.styl","hash":"4714d2bf62238dd4d3b1c54df2b5099fe4dd74c5","modified":1505826971000},{"_id":"themes/ochuunn/source/css/_var.styl","hash":"81293ac4b7e55455ac0e786a86ad4675a660cb12","modified":1505826971000},{"_id":"themes/ochuunn/source/css/main.styl","hash":"5d9337a2999423c0c52d27ec4ef1b6831f1aef0b","modified":1505826971000},{"_id":"themes/ochuunn/source/css/menu.css","hash":"acfa6e4dd8f3e589fd34782ff5c3c31ed21148c0","modified":1505826971000},{"_id":"themes/ochuunn/layout/mixins/gallery.pug","hash":"b9e0d59ea3c2bcd861573114767ced0f4ea292c3","modified":1505826971000},{"_id":"themes/ochuunn/layout/mixins/post.pug","hash":"c032f8fc4d51ab3fde45b889bae42a42cbfcbcf1","modified":1505826971000},{"_id":"themes/ochuunn/layout/plugins/reward.pug","hash":"e261f0a23fea51d6452ecf81fe92c20766d6c300","modified":1505826971000},{"_id":"themes/ochuunn/source/img/wechatImage.jpg","hash":"2a8d16e81913a8580d8fcc36684d9fbb98c47afc","modified":1505826971000},{"_id":"themes/ochuunn/source/img/alipayImage.jpg","hash":"236d8f8c2de9aba23fc740132a26a09348218e41","modified":1505826971000},{"_id":"themes/ochuunn/source/fonts/icon.ttf","hash":"9a18ee1b1f245f6cc2c61fd1ebe58266b6c451ba","modified":1505826971000},{"_id":"themes/ochuunn/source/js/jquery.autoMenu.js","hash":"581721360a9c48701f975e503533dca44bb0d550","modified":1505826971000},{"_id":"themes/ochuunn/source/js/main.js","hash":"27c94fd01d3655959d0218ee03aa8da58d4c8b2a","modified":1505826971000},{"_id":"themes/ochuunn/source/js/particles.min.js","hash":"8017f8b1869077db728573f1ca4684a00af69462","modified":1505826971000},{"_id":"themes/ochuunn/source/js/particles.oli.js","hash":"044122ef4a8bd4ee116af024807a74d67d42d337","modified":1505826971000},{"_id":"themes/ochuunn/source/js/particles.other.js","hash":"b8a581e3df9d32e619edec8bfb6d47b60119819d","modified":1505826971000},{"_id":"themes/ochuunn/source/js/scroller.js","hash":"c49905d96071d1c862583d78464054146f77bbad","modified":1505826971000},{"_id":"themes/ochuunn/source/js/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1505826971000},{"_id":"themes/ochuunn/source/fonts/icon.eot","hash":"9097fa8611053f4c2e5f35cd2a64efc40bd8b685","modified":1505826971000},{"_id":"themes/ochuunn/source/fonts/icon.svg","hash":"bd5e9e4f5343c9d49ede3145417c87155334881e","modified":1505826971000},{"_id":"themes/ochuunn/source/fonts/icon.woff","hash":"7d15057502dd0086931b763ebc62458c8669b4ed","modified":1505826971000},{"_id":"themes/ochuunn/source/css/base/_font.styl","hash":"7c16dcc09c5897d2433476fd8077e1c1117a26ae","modified":1505826971000},{"_id":"themes/ochuunn/source/css/base/_reset.styl","hash":"f1f7a9897c6137750cde02b8f2e426bc61cc918c","modified":1505826971000},{"_id":"themes/ochuunn/source/css/vendor/_echo.styl","hash":"cefb919262fefc77b181ca53563204b251c084e4","modified":1505826971000},{"_id":"themes/ochuunn/source/css/vendor/_highlight.styl","hash":"1d6296ee7f768b3b109ddaa66c614e52188a34da","modified":1505826971000},{"_id":"themes/ochuunn/source/css/vendor/_normalize.styl","hash":"942fe069cfb511f7168da1a4c50b1d88b85b8e74","modified":1505826971000},{"_id":"themes/ochuunn/source/css/partial/_main.styl","hash":"0ba484a4f64659f7980b9c493f7189cb1ef783cf","modified":1505826971000},{"_id":"themes/ochuunn/source/css/partial/_post.styl","hash":"aadaf6b37bb536322b4450ef840e469483c283a6","modified":1505826971000},{"_id":"themes/ochuunn/source/js/fancybox/jquery.fancybox.min.css","hash":"a69aefe10474fdf70ee06349dc7191497fe1d81f","modified":1505826971000},{"_id":"themes/ochuunn/source/js/fancybox/jquery.fancybox.min.js","hash":"75d7afbecdb0b76d78f477bb46d9809e315ef845","modified":1505826971000},{"_id":"themes/ochuunn/source/css/base/_mixin.styl","hash":"a30fbdd99e796ba2015e561a650dd031b25a9aed","modified":1505826971000},{"_id":"themes/ochuunn/source/css/base/_base.styl","hash":"97e8d2e1d1a611cbf6878a94c431a6e97a0f4c2d","modified":1505826971000},{"_id":"themes/ochuunn/source/css/base/_util.styl","hash":"d7e23796a465f90520029a263a0c64e559e69396","modified":1505826971000}],"Category":[],"Data":[],"Page":[{"title":"about me","date":"2017-07-29T16:00:00.000Z","_content":"\n------\n\n陈若尧~前端开发工程师~2015年毕业工作至今\n\n* 也许你关心年龄，92年\n* 也许你关心学历，本科\n* 也许你关心院校，福建农林大学\n* 也许你一见钟情要联系我呢？919907366@qq.com\n\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢往下看\n\n------\n### what can I coding ?\nFamiliar with:\n* Html5 , Css3 , Javascript , JQuery/Zepto , Ajax;\n* Vue , Vuex , Vue-router , Vue-resource/axios;\n* Bootstrap , Swiper , Leafletjs , ThreeJs and JQuery Plugins;\n* Appcan , Apicloud , Html5 Hybrid App;\n* ArtTemplate/EJS , RequireJS/SeaJS;\n*  Webpack , Git , Svn;\n\nknow little:\n* ES6 , Sass , Less;\n* React , Redux;\n* AngularJS , ionic , cordova;\n* Weex;\n* Grunt , Yeoman , Bower;\n\n------\n### Where do I work ?\n#### 1.厦门商之易网络有限公司（2015.6-2015.9）\n网站搭建+前端开发\n独立负责公司网站的页面制作和后台模板嵌套\n\n#### 2.厦门云之巅网络科技（2015.10-2016.5）\n前端开发工程师\n开发和迭代基于中外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。\n\n#### 3.厦门宇琦风鹭信息技术 （2016.6-2017.9） \nhtml5开发工程师\n负责html5app的开发和维护，主要用apicloud，开发了宇琦财经app，漫画君/趣漫画app，一本小说app，小记app。\n负责PC和移动端网站的开发和维护，包括易旅程官网，华闽财经官网，华闽财经手机站，3D模型站点。\n\n------\n### What have I done ?\n#### 1.SEO网站开发 2015.06 - 2015.09\n将psd图转化为html静态页面，用phpcms搭建动态网站，做SEO优化。\n\n#### 2.Hybrid app项目  2015.10 - 2016.05\n开发和迭代基于外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。\n技术：appcan(平台),jquery,bootstrap,ajax,iscroll\n\n#### 3.宇琦财经app项目  2016.06 - 2016.07\n依赖财经官网开发移动端app，独立负责前端部分。\n技术：apicloud(平台),zepto,ajax,iscroll,swiper,echarts\n\n#### 4.[易旅程](http://www.91elc.com/)官网开发  2016.07 - 2016.10\n负责前端部分，包括响应式页面，jsp模板修改，地图/数据交互等等。\n技术：jquery,bootstrap,leafletjs,swiper,artTemplate\n\n#### 5.Hybrid app项目  2016.11 - 2017.02\n包括：[漫画君/趣漫画app](https://cry101.github.io/2017/02/14/pro-comic/)，[一本小说app](https://cry101.github.io/2017/02/11/pro-novel/)，[小记app](https://cry101.github.io/2017/03/15/pro-note/)\n技术：zepto,Aui,vue,artTemplate,lazyload,swiper,md5\n\n#### 6.[cuberto](http://cuberto.91elc.com)，单页面应用  2017.02 - 2017.03\n负责仿站，单页面应用\n技术：vue,vue-router,webpack,snap\n[源码地址](https://github.com/cry101/vue-cuberto)，暂时搁置。\n\n#### 7.[华闽财经官网](http://www.hmcjzx.com) 2017.04 - 2017.05\n技术：jquery,ajax,artTenplate,highcharts,validate,swiper\n\n#### 8.[华闽财经手机站](http://test.m.hmcjzx.com/)（测试站点） 2017.06\n技术：vue + vuex + vue-loader + Mint UI开发\n\n#### 9.[sketchfab](http://3d.91elc.com/) 2017.07-2017.08\n负责仿站，3D模型网站\n技术：jquery,three,bootstrap,ajax,artTemplate,validate\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢看完，原谅我放荡不羁的简历。","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2017-07-30\n---\n\n------\n\n陈若尧~前端开发工程师~2015年毕业工作至今\n\n* 也许你关心年龄，92年\n* 也许你关心学历，本科\n* 也许你关心院校，福建农林大学\n* 也许你一见钟情要联系我呢？919907366@qq.com\n\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢往下看\n\n------\n### what can I coding ?\nFamiliar with:\n* Html5 , Css3 , Javascript , JQuery/Zepto , Ajax;\n* Vue , Vuex , Vue-router , Vue-resource/axios;\n* Bootstrap , Swiper , Leafletjs , ThreeJs and JQuery Plugins;\n* Appcan , Apicloud , Html5 Hybrid App;\n* ArtTemplate/EJS , RequireJS/SeaJS;\n*  Webpack , Git , Svn;\n\nknow little:\n* ES6 , Sass , Less;\n* React , Redux;\n* AngularJS , ionic , cordova;\n* Weex;\n* Grunt , Yeoman , Bower;\n\n------\n### Where do I work ?\n#### 1.厦门商之易网络有限公司（2015.6-2015.9）\n网站搭建+前端开发\n独立负责公司网站的页面制作和后台模板嵌套\n\n#### 2.厦门云之巅网络科技（2015.10-2016.5）\n前端开发工程师\n开发和迭代基于中外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。\n\n#### 3.厦门宇琦风鹭信息技术 （2016.6-2017.9） \nhtml5开发工程师\n负责html5app的开发和维护，主要用apicloud，开发了宇琦财经app，漫画君/趣漫画app，一本小说app，小记app。\n负责PC和移动端网站的开发和维护，包括易旅程官网，华闽财经官网，华闽财经手机站，3D模型站点。\n\n------\n### What have I done ?\n#### 1.SEO网站开发 2015.06 - 2015.09\n将psd图转化为html静态页面，用phpcms搭建动态网站，做SEO优化。\n\n#### 2.Hybrid app项目  2015.10 - 2016.05\n开发和迭代基于外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。\n技术：appcan(平台),jquery,bootstrap,ajax,iscroll\n\n#### 3.宇琦财经app项目  2016.06 - 2016.07\n依赖财经官网开发移动端app，独立负责前端部分。\n技术：apicloud(平台),zepto,ajax,iscroll,swiper,echarts\n\n#### 4.[易旅程](http://www.91elc.com/)官网开发  2016.07 - 2016.10\n负责前端部分，包括响应式页面，jsp模板修改，地图/数据交互等等。\n技术：jquery,bootstrap,leafletjs,swiper,artTemplate\n\n#### 5.Hybrid app项目  2016.11 - 2017.02\n包括：[漫画君/趣漫画app](https://cry101.github.io/2017/02/14/pro-comic/)，[一本小说app](https://cry101.github.io/2017/02/11/pro-novel/)，[小记app](https://cry101.github.io/2017/03/15/pro-note/)\n技术：zepto,Aui,vue,artTemplate,lazyload,swiper,md5\n\n#### 6.[cuberto](http://cuberto.91elc.com)，单页面应用  2017.02 - 2017.03\n负责仿站，单页面应用\n技术：vue,vue-router,webpack,snap\n[源码地址](https://github.com/cry101/vue-cuberto)，暂时搁置。\n\n#### 7.[华闽财经官网](http://www.hmcjzx.com) 2017.04 - 2017.05\n技术：jquery,ajax,artTenplate,highcharts,validate,swiper\n\n#### 8.[华闽财经手机站](http://test.m.hmcjzx.com/)（测试站点） 2017.06\n技术：vue + vuex + vue-loader + Mint UI开发\n\n#### 9.[sketchfab](http://3d.91elc.com/) 2017.07-2017.08\n负责仿站，3D模型网站\n技术：jquery,three,bootstrap,ajax,artTemplate,validate\n\n![跪谢](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg)\n跪谢看完，原谅我放荡不羁的简历。","updated":"2017-09-19T13:16:11.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjcvct39l0015nilwxugp421p","content":"<hr>\n<p>陈若尧~前端开发工程师~2015年毕业工作至今</p>\n<ul>\n<li>也许你关心年龄，92年</li>\n<li>也许你关心学历，本科</li>\n<li>也许你关心院校，福建农林大学</li>\n<li>也许你一见钟情要联系我呢？919907366@qq.com</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢往下看</p>\n<hr>\n<h3 id=\"what-can-I-coding\"><a href=\"#what-can-I-coding\" class=\"headerlink\" title=\"what can I coding ?\"></a>what can I coding ?</h3><p>Familiar with:</p>\n<ul>\n<li>Html5 , Css3 , Javascript , JQuery/Zepto , Ajax;</li>\n<li>Vue , Vuex , Vue-router , Vue-resource/axios;</li>\n<li>Bootstrap , Swiper , Leafletjs , ThreeJs and JQuery Plugins;</li>\n<li>Appcan , Apicloud , Html5 Hybrid App;</li>\n<li>ArtTemplate/EJS , RequireJS/SeaJS;</li>\n<li>Webpack , Git , Svn;</li>\n</ul>\n<p>know little:</p>\n<ul>\n<li>ES6 , Sass , Less;</li>\n<li>React , Redux;</li>\n<li>AngularJS , ionic , cordova;</li>\n<li>Weex;</li>\n<li>Grunt , Yeoman , Bower;</li>\n</ul>\n<hr>\n<h3 id=\"Where-do-I-work\"><a href=\"#Where-do-I-work\" class=\"headerlink\" title=\"Where do I work ?\"></a>Where do I work ?</h3><h4 id=\"1-厦门商之易网络有限公司（2015-6-2015-9）\"><a href=\"#1-厦门商之易网络有限公司（2015-6-2015-9）\" class=\"headerlink\" title=\"1.厦门商之易网络有限公司（2015.6-2015.9）\"></a>1.厦门商之易网络有限公司（2015.6-2015.9）</h4><p>网站搭建+前端开发<br>独立负责公司网站的页面制作和后台模板嵌套</p>\n<h4 id=\"2-厦门云之巅网络科技（2015-10-2016-5）\"><a href=\"#2-厦门云之巅网络科技（2015-10-2016-5）\" class=\"headerlink\" title=\"2.厦门云之巅网络科技（2015.10-2016.5）\"></a>2.厦门云之巅网络科技（2015.10-2016.5）</h4><p>前端开发工程师<br>开发和迭代基于中外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。</p>\n<h4 id=\"3-厦门宇琦风鹭信息技术-（2016-6-2017-9）\"><a href=\"#3-厦门宇琦风鹭信息技术-（2016-6-2017-9）\" class=\"headerlink\" title=\"3.厦门宇琦风鹭信息技术 （2016.6-2017.9）\"></a>3.厦门宇琦风鹭信息技术 （2016.6-2017.9）</h4><p>html5开发工程师<br>负责html5app的开发和维护，主要用apicloud，开发了宇琦财经app，漫画君/趣漫画app，一本小说app，小记app。<br>负责PC和移动端网站的开发和维护，包括易旅程官网，华闽财经官网，华闽财经手机站，3D模型站点。</p>\n<hr>\n<h3 id=\"What-have-I-done\"><a href=\"#What-have-I-done\" class=\"headerlink\" title=\"What have I done ?\"></a>What have I done ?</h3><h4 id=\"1-SEO网站开发-2015-06-2015-09\"><a href=\"#1-SEO网站开发-2015-06-2015-09\" class=\"headerlink\" title=\"1.SEO网站开发 2015.06 - 2015.09\"></a>1.SEO网站开发 2015.06 - 2015.09</h4><p>将psd图转化为html静态页面，用phpcms搭建动态网站，做SEO优化。</p>\n<h4 id=\"2-Hybrid-app项目-2015-10-2016-05\"><a href=\"#2-Hybrid-app项目-2015-10-2016-05\" class=\"headerlink\" title=\"2.Hybrid app项目  2015.10 - 2016.05\"></a>2.Hybrid app项目  2015.10 - 2016.05</h4><p>开发和迭代基于外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。<br>技术：appcan(平台),jquery,bootstrap,ajax,iscroll</p>\n<h4 id=\"3-宇琦财经app项目-2016-06-2016-07\"><a href=\"#3-宇琦财经app项目-2016-06-2016-07\" class=\"headerlink\" title=\"3.宇琦财经app项目  2016.06 - 2016.07\"></a>3.宇琦财经app项目  2016.06 - 2016.07</h4><p>依赖财经官网开发移动端app，独立负责前端部分。<br>技术：apicloud(平台),zepto,ajax,iscroll,swiper,echarts</p>\n<h4 id=\"4-易旅程官网开发-2016-07-2016-10\"><a href=\"#4-易旅程官网开发-2016-07-2016-10\" class=\"headerlink\" title=\"4.易旅程官网开发  2016.07 - 2016.10\"></a>4.<a href=\"http://www.91elc.com/\" target=\"_blank\" rel=\"external\">易旅程</a>官网开发  2016.07 - 2016.10</h4><p>负责前端部分，包括响应式页面，jsp模板修改，地图/数据交互等等。<br>技术：jquery,bootstrap,leafletjs,swiper,artTemplate</p>\n<h4 id=\"5-Hybrid-app项目-2016-11-2017-02\"><a href=\"#5-Hybrid-app项目-2016-11-2017-02\" class=\"headerlink\" title=\"5.Hybrid app项目  2016.11 - 2017.02\"></a>5.Hybrid app项目  2016.11 - 2017.02</h4><p>包括：<a href=\"https://cry101.github.io/2017/02/14/pro-comic/\" target=\"_blank\" rel=\"external\">漫画君/趣漫画app</a>，<a href=\"https://cry101.github.io/2017/02/11/pro-novel/\" target=\"_blank\" rel=\"external\">一本小说app</a>，<a href=\"https://cry101.github.io/2017/03/15/pro-note/\" target=\"_blank\" rel=\"external\">小记app</a><br>技术：zepto,Aui,vue,artTemplate,lazyload,swiper,md5</p>\n<h4 id=\"6-cuberto，单页面应用-2017-02-2017-03\"><a href=\"#6-cuberto，单页面应用-2017-02-2017-03\" class=\"headerlink\" title=\"6.cuberto，单页面应用  2017.02 - 2017.03\"></a>6.<a href=\"http://cuberto.91elc.com\" target=\"_blank\" rel=\"external\">cuberto</a>，单页面应用  2017.02 - 2017.03</h4><p>负责仿站，单页面应用<br>技术：vue,vue-router,webpack,snap<br><a href=\"https://github.com/cry101/vue-cuberto\" target=\"_blank\" rel=\"external\">源码地址</a>，暂时搁置。</p>\n<h4 id=\"7-华闽财经官网-2017-04-2017-05\"><a href=\"#7-华闽财经官网-2017-04-2017-05\" class=\"headerlink\" title=\"7.华闽财经官网 2017.04 - 2017.05\"></a>7.<a href=\"http://www.hmcjzx.com\" target=\"_blank\" rel=\"external\">华闽财经官网</a> 2017.04 - 2017.05</h4><p>技术：jquery,ajax,artTenplate,highcharts,validate,swiper</p>\n<h4 id=\"8-华闽财经手机站（测试站点）-2017-06\"><a href=\"#8-华闽财经手机站（测试站点）-2017-06\" class=\"headerlink\" title=\"8.华闽财经手机站（测试站点） 2017.06\"></a>8.<a href=\"http://test.m.hmcjzx.com/\" target=\"_blank\" rel=\"external\">华闽财经手机站</a>（测试站点） 2017.06</h4><p>技术：vue + vuex + vue-loader + Mint UI开发</p>\n<h4 id=\"9-sketchfab-2017-07-2017-08\"><a href=\"#9-sketchfab-2017-07-2017-08\" class=\"headerlink\" title=\"9.sketchfab 2017.07-2017.08\"></a>9.<a href=\"http://3d.91elc.com/\" target=\"_blank\" rel=\"external\">sketchfab</a> 2017.07-2017.08</h4><p>负责仿站，3D模型网站<br>技术：jquery,three,bootstrap,ajax,artTemplate,validate</p>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢看完，原谅我放荡不羁的简历。</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>陈若尧~前端开发工程师~2015年毕业工作至今</p>\n<ul>\n<li>也许你关心年龄，92年</li>\n<li>也许你关心学历，本科</li>\n<li>也许你关心院校，福建农林大学</li>\n<li>也许你一见钟情要联系我呢？919907366@qq.com</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢往下看</p>\n<hr>\n<h3 id=\"what-can-I-coding\"><a href=\"#what-can-I-coding\" class=\"headerlink\" title=\"what can I coding ?\"></a>what can I coding ?</h3><p>Familiar with:</p>\n<ul>\n<li>Html5 , Css3 , Javascript , JQuery/Zepto , Ajax;</li>\n<li>Vue , Vuex , Vue-router , Vue-resource/axios;</li>\n<li>Bootstrap , Swiper , Leafletjs , ThreeJs and JQuery Plugins;</li>\n<li>Appcan , Apicloud , Html5 Hybrid App;</li>\n<li>ArtTemplate/EJS , RequireJS/SeaJS;</li>\n<li>Webpack , Git , Svn;</li>\n</ul>\n<p>know little:</p>\n<ul>\n<li>ES6 , Sass , Less;</li>\n<li>React , Redux;</li>\n<li>AngularJS , ionic , cordova;</li>\n<li>Weex;</li>\n<li>Grunt , Yeoman , Bower;</li>\n</ul>\n<hr>\n<h3 id=\"Where-do-I-work\"><a href=\"#Where-do-I-work\" class=\"headerlink\" title=\"Where do I work ?\"></a>Where do I work ?</h3><h4 id=\"1-厦门商之易网络有限公司（2015-6-2015-9）\"><a href=\"#1-厦门商之易网络有限公司（2015-6-2015-9）\" class=\"headerlink\" title=\"1.厦门商之易网络有限公司（2015.6-2015.9）\"></a>1.厦门商之易网络有限公司（2015.6-2015.9）</h4><p>网站搭建+前端开发<br>独立负责公司网站的页面制作和后台模板嵌套</p>\n<h4 id=\"2-厦门云之巅网络科技（2015-10-2016-5）\"><a href=\"#2-厦门云之巅网络科技（2015-10-2016-5）\" class=\"headerlink\" title=\"2.厦门云之巅网络科技（2015.10-2016.5）\"></a>2.厦门云之巅网络科技（2015.10-2016.5）</h4><p>前端开发工程师<br>开发和迭代基于中外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。</p>\n<h4 id=\"3-厦门宇琦风鹭信息技术-（2016-6-2017-9）\"><a href=\"#3-厦门宇琦风鹭信息技术-（2016-6-2017-9）\" class=\"headerlink\" title=\"3.厦门宇琦风鹭信息技术 （2016.6-2017.9）\"></a>3.厦门宇琦风鹭信息技术 （2016.6-2017.9）</h4><p>html5开发工程师<br>负责html5app的开发和维护，主要用apicloud，开发了宇琦财经app，漫画君/趣漫画app，一本小说app，小记app。<br>负责PC和移动端网站的开发和维护，包括易旅程官网，华闽财经官网，华闽财经手机站，3D模型站点。</p>\n<hr>\n<h3 id=\"What-have-I-done\"><a href=\"#What-have-I-done\" class=\"headerlink\" title=\"What have I done ?\"></a>What have I done ?</h3><h4 id=\"1-SEO网站开发-2015-06-2015-09\"><a href=\"#1-SEO网站开发-2015-06-2015-09\" class=\"headerlink\" title=\"1.SEO网站开发 2015.06 - 2015.09\"></a>1.SEO网站开发 2015.06 - 2015.09</h4><p>将psd图转化为html静态页面，用phpcms搭建动态网站，做SEO优化。</p>\n<h4 id=\"2-Hybrid-app项目-2015-10-2016-05\"><a href=\"#2-Hybrid-app项目-2015-10-2016-05\" class=\"headerlink\" title=\"2.Hybrid app项目  2015.10 - 2016.05\"></a>2.Hybrid app项目  2015.10 - 2016.05</h4><p>开发和迭代基于外运系统的3个Hybrid App，负责移动端页面开发，后台交互和前端逻辑处理。<br>技术：appcan(平台),jquery,bootstrap,ajax,iscroll</p>\n<h4 id=\"3-宇琦财经app项目-2016-06-2016-07\"><a href=\"#3-宇琦财经app项目-2016-06-2016-07\" class=\"headerlink\" title=\"3.宇琦财经app项目  2016.06 - 2016.07\"></a>3.宇琦财经app项目  2016.06 - 2016.07</h4><p>依赖财经官网开发移动端app，独立负责前端部分。<br>技术：apicloud(平台),zepto,ajax,iscroll,swiper,echarts</p>\n<h4 id=\"4-易旅程官网开发-2016-07-2016-10\"><a href=\"#4-易旅程官网开发-2016-07-2016-10\" class=\"headerlink\" title=\"4.易旅程官网开发  2016.07 - 2016.10\"></a>4.<a href=\"http://www.91elc.com/\" target=\"_blank\" rel=\"external\">易旅程</a>官网开发  2016.07 - 2016.10</h4><p>负责前端部分，包括响应式页面，jsp模板修改，地图/数据交互等等。<br>技术：jquery,bootstrap,leafletjs,swiper,artTemplate</p>\n<h4 id=\"5-Hybrid-app项目-2016-11-2017-02\"><a href=\"#5-Hybrid-app项目-2016-11-2017-02\" class=\"headerlink\" title=\"5.Hybrid app项目  2016.11 - 2017.02\"></a>5.Hybrid app项目  2016.11 - 2017.02</h4><p>包括：<a href=\"https://cry101.github.io/2017/02/14/pro-comic/\" target=\"_blank\" rel=\"external\">漫画君/趣漫画app</a>，<a href=\"https://cry101.github.io/2017/02/11/pro-novel/\" target=\"_blank\" rel=\"external\">一本小说app</a>，<a href=\"https://cry101.github.io/2017/03/15/pro-note/\" target=\"_blank\" rel=\"external\">小记app</a><br>技术：zepto,Aui,vue,artTemplate,lazyload,swiper,md5</p>\n<h4 id=\"6-cuberto，单页面应用-2017-02-2017-03\"><a href=\"#6-cuberto，单页面应用-2017-02-2017-03\" class=\"headerlink\" title=\"6.cuberto，单页面应用  2017.02 - 2017.03\"></a>6.<a href=\"http://cuberto.91elc.com\" target=\"_blank\" rel=\"external\">cuberto</a>，单页面应用  2017.02 - 2017.03</h4><p>负责仿站，单页面应用<br>技术：vue,vue-router,webpack,snap<br><a href=\"https://github.com/cry101/vue-cuberto\" target=\"_blank\" rel=\"external\">源码地址</a>，暂时搁置。</p>\n<h4 id=\"7-华闽财经官网-2017-04-2017-05\"><a href=\"#7-华闽财经官网-2017-04-2017-05\" class=\"headerlink\" title=\"7.华闽财经官网 2017.04 - 2017.05\"></a>7.<a href=\"http://www.hmcjzx.com\" target=\"_blank\" rel=\"external\">华闽财经官网</a> 2017.04 - 2017.05</h4><p>技术：jquery,ajax,artTenplate,highcharts,validate,swiper</p>\n<h4 id=\"8-华闽财经手机站（测试站点）-2017-06\"><a href=\"#8-华闽财经手机站（测试站点）-2017-06\" class=\"headerlink\" title=\"8.华闽财经手机站（测试站点） 2017.06\"></a>8.<a href=\"http://test.m.hmcjzx.com/\" target=\"_blank\" rel=\"external\">华闽财经手机站</a>（测试站点） 2017.06</h4><p>技术：vue + vuex + vue-loader + Mint UI开发</p>\n<h4 id=\"9-sketchfab-2017-07-2017-08\"><a href=\"#9-sketchfab-2017-07-2017-08\" class=\"headerlink\" title=\"9.sketchfab 2017.07-2017.08\"></a>9.<a href=\"http://3d.91elc.com/\" target=\"_blank\" rel=\"external\">sketchfab</a> 2017.07-2017.08</h4><p>负责仿站，3D模型网站<br>技术：jquery,three,bootstrap,ajax,artTemplate,validate</p>\n<p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/1.jpg\" alt=\"跪谢\"><br>跪谢看完，原谅我放荡不羁的简历。</p>\n"}],"Post":[{"title":"css的美化","date":"2017-10-30T06:52:30.000Z","_content":"前言：能用css实现的效果就不用图片或者JS\n\n### 1.kissy的css reset\n并引用一句话：reset 的目的不是让默认样式在所有浏览器下一致，而是减少默认样式有可能带来的问题。\n````css\n/** 清除内外边距 **/\nbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, /* structural elements 结构元素 */\ndl, dt, dd, ul, ol, li, /* list elements 列表元素 */\npre, /* text formatting elements 文本格式元素 */\nform, fieldset, legend, button, input, textarea, /* form elements 表单元素 */\nth, td /* table elements 表格元素 */ {\n  margin: 0;\n  padding: 0;\n}\n\n/** 设置默认字体 **/\nbody,\nbutton, input, select, textarea /* for ie */ {\n  font: 12px/1.5 tahoma, arial, \\5b8b\\4f53, sans-serif;\n}\nh1, h2, h3, h4, h5, h6 { font-size: 100%; }\naddress, cite, dfn, em, var { font-style: normal; } /* 将斜体扶正 */\ncode, kbd, pre, samp { font-family: courier new, courier, monospace; } /* 统一等宽字体 */\nsmall { font-size: 12px; } /* 小于 12px 的中文很难阅读，让 small 正常化 */\n\n/** 重置列表元素 **/\nul, ol { list-style: none; }\n\n/** 重置文本格式元素 **/\na { text-decoration: none; }\na:hover { text-decoration: underline; }\n\n\n/** 重置表单元素 **/\nlegend { color: #000; } /* for ie6 */\nfieldset, img { border: 0; } /* img 搭车：让链接里的 img 无边框 */\nbutton, input, select, textarea { font-size: 100%; } /* 使得表单元素在 ie 下能继承字体大小 */\n/* 注：optgroup 无法扶正 */\n\n/** 重置表格元素 **/\ntable { border-collapse: collapse; border-spacing: 0; }\n````\n\n### 2.checkbox的美化\n隐藏checkbox，用i标签替代\n````html\n<label><input type=\"checkbox\"><i>✓</i>复选框</label><br>  \n<label><input type=\"checkbox\" checked><i>✓</i>复选框</label><br>  \n<label><input type=\"checkbox\" disabled><i>✓</i>复选框禁用</label><br>  \n<label><input type=\"checkbox\" disabled checked><i>✓</i>复选框禁用已选</label><br>  \n<label><input type=\"radio\" name=\"abc\"><i>✓</i>单选框</label><br>  \n<label><input type=\"radio\" name=\"abc\" checked><i>✓</i>单选框</label><br>  \n<label><input type=\"radio\" name=\"abc\" disabled><i>✓</i>单选框禁用</label><br>  \n<label><input type=\"radio\" name=\"def\" disabled checked><i>✓</i>单选框禁用已选</label><br>  \n````\n````css\n/*checkbox美化*/\nlabel {\n    font-size: 12px;\n    cursor: pointer;\n}\n\nlabel i {\n    font-size: 12px;\n    font-style: normal;\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    text-align: center;\n    line-height: 12px;\n    color: #fff;\n    vertical-align: middle;\n    margin: -2px 6px 1px 0;\n    border: 1px solid #ccc;\n}\n\ninput[type=\"checkbox\"], input[type=\"radio\"] {\n    display: none;\n}\n\ninput[type=\"radio\"] + i {\n    border-radius: 7px;\n}\n\ninput[type=\"checkbox\"]:checked + i, input[type=\"radio\"]:checked + i {\n    background: #7AD847; /*颜色自改*/\n    border-color: #7AD847;\n}\n````\n\n### 3.inputFile的美化\n设置input=[file]的透明度为0，然后重现a标签样式\n````html\n<a href=\"javascript:;\" class=\"file\">选择文件\n    <input type=\"file\" name=\"\" id=\"\">\n</a>\n````\n````css\n.file {\n    position: relative;\n    display: inline-block;\n    background: #D0EEFF;\n    border: 1px solid #99D3F5;\n    border-radius: 4px;\n    padding: 4px 12px;\n    overflow: hidden;\n    color: #1E88C7;\n    text-decoration: none;\n    text-indent: 0;\n    line-height: 20px;\n}\n.file input {\n    position: absolute;\n    font-size: 100px;\n    right: 0;\n    top: 0;\n    opacity: 0;\n}\n.file:hover {\n    background: #AADFFD;\n    border-color: #78C3F3;\n    color: #004974;\n    text-decoration: none;\n}\n````\n\n### 4.css画三角形\n[原地址](http://www.jb51.net/article/42513.htm)\n````css\n#triangle-up {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 100px solid red;\n}\n\n#triangle-down {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-top: 100px solid red;\n}\n\n#triangle-left {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-right: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n#triangle-right {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-left: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n#triangle-topleft {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n#triangle-topright {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-left: 100px solid transparent; \n}\n\n#triangle-bottomleft {\n    width: 0;\n    height: 0;\n    border-bottom: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n#triangle-bottomright {\n    width: 0;\n    height: 0;\n    border-bottom: 100px solid red;\n    border-left: 100px solid transparent;\n}\n````\n\n","source":"_posts/css-better.md","raw":"---\ntitle: css的美化\ndate: 2017-10-30 14:52:30\ntags: css\n---\n前言：能用css实现的效果就不用图片或者JS\n\n### 1.kissy的css reset\n并引用一句话：reset 的目的不是让默认样式在所有浏览器下一致，而是减少默认样式有可能带来的问题。\n````css\n/** 清除内外边距 **/\nbody, h1, h2, h3, h4, h5, h6, hr, p, blockquote, /* structural elements 结构元素 */\ndl, dt, dd, ul, ol, li, /* list elements 列表元素 */\npre, /* text formatting elements 文本格式元素 */\nform, fieldset, legend, button, input, textarea, /* form elements 表单元素 */\nth, td /* table elements 表格元素 */ {\n  margin: 0;\n  padding: 0;\n}\n\n/** 设置默认字体 **/\nbody,\nbutton, input, select, textarea /* for ie */ {\n  font: 12px/1.5 tahoma, arial, \\5b8b\\4f53, sans-serif;\n}\nh1, h2, h3, h4, h5, h6 { font-size: 100%; }\naddress, cite, dfn, em, var { font-style: normal; } /* 将斜体扶正 */\ncode, kbd, pre, samp { font-family: courier new, courier, monospace; } /* 统一等宽字体 */\nsmall { font-size: 12px; } /* 小于 12px 的中文很难阅读，让 small 正常化 */\n\n/** 重置列表元素 **/\nul, ol { list-style: none; }\n\n/** 重置文本格式元素 **/\na { text-decoration: none; }\na:hover { text-decoration: underline; }\n\n\n/** 重置表单元素 **/\nlegend { color: #000; } /* for ie6 */\nfieldset, img { border: 0; } /* img 搭车：让链接里的 img 无边框 */\nbutton, input, select, textarea { font-size: 100%; } /* 使得表单元素在 ie 下能继承字体大小 */\n/* 注：optgroup 无法扶正 */\n\n/** 重置表格元素 **/\ntable { border-collapse: collapse; border-spacing: 0; }\n````\n\n### 2.checkbox的美化\n隐藏checkbox，用i标签替代\n````html\n<label><input type=\"checkbox\"><i>✓</i>复选框</label><br>  \n<label><input type=\"checkbox\" checked><i>✓</i>复选框</label><br>  \n<label><input type=\"checkbox\" disabled><i>✓</i>复选框禁用</label><br>  \n<label><input type=\"checkbox\" disabled checked><i>✓</i>复选框禁用已选</label><br>  \n<label><input type=\"radio\" name=\"abc\"><i>✓</i>单选框</label><br>  \n<label><input type=\"radio\" name=\"abc\" checked><i>✓</i>单选框</label><br>  \n<label><input type=\"radio\" name=\"abc\" disabled><i>✓</i>单选框禁用</label><br>  \n<label><input type=\"radio\" name=\"def\" disabled checked><i>✓</i>单选框禁用已选</label><br>  \n````\n````css\n/*checkbox美化*/\nlabel {\n    font-size: 12px;\n    cursor: pointer;\n}\n\nlabel i {\n    font-size: 12px;\n    font-style: normal;\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    text-align: center;\n    line-height: 12px;\n    color: #fff;\n    vertical-align: middle;\n    margin: -2px 6px 1px 0;\n    border: 1px solid #ccc;\n}\n\ninput[type=\"checkbox\"], input[type=\"radio\"] {\n    display: none;\n}\n\ninput[type=\"radio\"] + i {\n    border-radius: 7px;\n}\n\ninput[type=\"checkbox\"]:checked + i, input[type=\"radio\"]:checked + i {\n    background: #7AD847; /*颜色自改*/\n    border-color: #7AD847;\n}\n````\n\n### 3.inputFile的美化\n设置input=[file]的透明度为0，然后重现a标签样式\n````html\n<a href=\"javascript:;\" class=\"file\">选择文件\n    <input type=\"file\" name=\"\" id=\"\">\n</a>\n````\n````css\n.file {\n    position: relative;\n    display: inline-block;\n    background: #D0EEFF;\n    border: 1px solid #99D3F5;\n    border-radius: 4px;\n    padding: 4px 12px;\n    overflow: hidden;\n    color: #1E88C7;\n    text-decoration: none;\n    text-indent: 0;\n    line-height: 20px;\n}\n.file input {\n    position: absolute;\n    font-size: 100px;\n    right: 0;\n    top: 0;\n    opacity: 0;\n}\n.file:hover {\n    background: #AADFFD;\n    border-color: #78C3F3;\n    color: #004974;\n    text-decoration: none;\n}\n````\n\n### 4.css画三角形\n[原地址](http://www.jb51.net/article/42513.htm)\n````css\n#triangle-up {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-bottom: 100px solid red;\n}\n\n#triangle-down {\n    width: 0;\n    height: 0;\n    border-left: 50px solid transparent;\n    border-right: 50px solid transparent;\n    border-top: 100px solid red;\n}\n\n#triangle-left {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-right: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n#triangle-right {\n    width: 0;\n    height: 0;\n    border-top: 50px solid transparent;\n    border-left: 100px solid red;\n    border-bottom: 50px solid transparent;\n}\n\n#triangle-topleft {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n#triangle-topright {\n    width: 0;\n    height: 0;\n    border-top: 100px solid red;\n    border-left: 100px solid transparent; \n}\n\n#triangle-bottomleft {\n    width: 0;\n    height: 0;\n    border-bottom: 100px solid red;\n    border-right: 100px solid transparent;\n}\n\n#triangle-bottomright {\n    width: 0;\n    height: 0;\n    border-bottom: 100px solid red;\n    border-left: 100px solid transparent;\n}\n````\n\n","slug":"css-better","published":1,"updated":"2017-11-17T08:02:10.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct37p0000nilwjpcug51v","content":"<p>前言：能用css实现的效果就不用图片或者JS</p>\n<h3 id=\"1-kissy的css-reset\"><a href=\"#1-kissy的css-reset\" class=\"headerlink\" title=\"1.kissy的css reset\"></a>1.kissy的css reset</h3><p>并引用一句话：reset 的目的不是让默认样式在所有浏览器下一致，而是减少默认样式有可能带来的问题。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** 清除内外边距 **/</span></div><div class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>, <span class=\"selector-tag\">hr</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">blockquote</span>, <span class=\"comment\">/* structural elements 结构元素 */</span></div><div class=\"line\"><span class=\"selector-tag\">dl</span>, <span class=\"selector-tag\">dt</span>, <span class=\"selector-tag\">dd</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span>, <span class=\"selector-tag\">li</span>, <span class=\"comment\">/* list elements 列表元素 */</span></div><div class=\"line\"><span class=\"selector-tag\">pre</span>, <span class=\"comment\">/* text formatting elements 文本格式元素 */</span></div><div class=\"line\"><span class=\"selector-tag\">form</span>, <span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">legend</span>, <span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">textarea</span>, <span class=\"comment\">/* form elements 表单元素 */</span></div><div class=\"line\"><span class=\"selector-tag\">th</span>, <span class=\"selector-tag\">td</span> <span class=\"comment\">/* table elements 表格元素 */</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** 设置默认字体 **/</span></div><div class=\"line\"><span class=\"selector-tag\">body</span>,</div><div class=\"line\"><span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">select</span>, <span class=\"selector-tag\">textarea</span> <span class=\"comment\">/* for ie */</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font</span>: <span class=\"number\">12px</span>/<span class=\"number\">1.5</span> tahoma, arial, \\<span class=\"number\">5</span>b8b\\<span class=\"number\">4</span>f53, sans-serif;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\"><span class=\"selector-tag\">address</span>, <span class=\"selector-tag\">cite</span>, <span class=\"selector-tag\">dfn</span>, <span class=\"selector-tag\">em</span>, <span class=\"selector-tag\">var</span> &#123; <span class=\"attribute\">font-style</span>: normal; &#125; <span class=\"comment\">/* 将斜体扶正 */</span></div><div class=\"line\"><span class=\"selector-tag\">code</span>, <span class=\"selector-tag\">kbd</span>, <span class=\"selector-tag\">pre</span>, <span class=\"selector-tag\">samp</span> &#123; <span class=\"attribute\">font-family</span>: courier new, courier, monospace; &#125; <span class=\"comment\">/* 统一等宽字体 */</span></div><div class=\"line\"><span class=\"selector-tag\">small</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; &#125; <span class=\"comment\">/* 小于 12px 的中文很难阅读，让 small 正常化 */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** 重置列表元素 **/</span></div><div class=\"line\"><span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span> &#123; <span class=\"attribute\">list-style</span>: none; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** 重置文本格式元素 **/</span></div><div class=\"line\"><span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">text-decoration</span>: none; &#125;</div><div class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>: underline; &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** 重置表单元素 **/</span></div><div class=\"line\"><span class=\"selector-tag\">legend</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>; &#125; <span class=\"comment\">/* for ie6 */</span></div><div class=\"line\"><span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">0</span>; &#125; <span class=\"comment\">/* img 搭车：让链接里的 img 无边框 */</span></div><div class=\"line\"><span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">select</span>, <span class=\"selector-tag\">textarea</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">100%</span>; &#125; <span class=\"comment\">/* 使得表单元素在 ie 下能继承字体大小 */</span></div><div class=\"line\"><span class=\"comment\">/* 注：optgroup 无法扶正 */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** 重置表格元素 **/</span></div><div class=\"line\"><span class=\"selector-tag\">table</span> &#123; <span class=\"attribute\">border-collapse</span>: collapse; <span class=\"attribute\">border-spacing</span>: <span class=\"number\">0</span>; &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-checkbox的美化\"><a href=\"#2-checkbox的美化\" class=\"headerlink\" title=\"2.checkbox的美化\"></a>2.checkbox的美化</h3><p>隐藏checkbox，用i标签替代<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>复选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">checked</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>复选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">disabled</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>复选框禁用<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">disabled</span> <span class=\"attr\">checked</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>复选框禁用已选<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"abc\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>单选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"abc\"</span> <span class=\"attr\">checked</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>单选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"abc\"</span> <span class=\"attr\">disabled</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>单选框禁用<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"def\"</span> <span class=\"attr\">disabled</span> <span class=\"attr\">checked</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>单选框禁用已选<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*checkbox美化*/</span></div><div class=\"line\"><span class=\"selector-tag\">label</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">label</span> <span class=\"selector-tag\">i</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: -<span class=\"number\">2px</span> <span class=\"number\">6px</span> <span class=\"number\">1px</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"checkbox\"]</span>, <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"radio\"]</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"radio\"]</span> + <span class=\"selector-tag\">i</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">7px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"checkbox\"]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">i</span>, <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"radio\"]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">i</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#7AD847</span>; <span class=\"comment\">/*颜色自改*/</span></div><div class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#7AD847</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-inputFile的美化\"><a href=\"#3-inputFile的美化\" class=\"headerlink\" title=\"3.inputFile的美化\"></a>3.inputFile的美化</h3><p>设置input=[file]的透明度为0，然后重现a标签样式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"file\"</span>&gt;</span>选择文件</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.file</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#D0EEFF</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#99D3F5</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span> <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#1E88C7</span>;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">text-indent</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.file</span> <span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.file</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#AADFFD</span>;</div><div class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#78C3F3</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#004974</span>;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-css画三角形\"><a href=\"#4-css画三角形\" class=\"headerlink\" title=\"4.css画三角形\"></a>4.css画三角形</h3><p><a href=\"http://www.jb51.net/article/42513.htm\" target=\"_blank\" rel=\"external\">原地址</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#triangle-up</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-down</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-left</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-right</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-topleft</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-topright</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-bottomleft</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-bottomright</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言：能用css实现的效果就不用图片或者JS</p>\n<h3 id=\"1-kissy的css-reset\"><a href=\"#1-kissy的css-reset\" class=\"headerlink\" title=\"1.kissy的css reset\"></a>1.kissy的css reset</h3><p>并引用一句话：reset 的目的不是让默认样式在所有浏览器下一致，而是减少默认样式有可能带来的问题。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** 清除内外边距 **/</span></div><div class=\"line\"><span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span>, <span class=\"selector-tag\">hr</span>, <span class=\"selector-tag\">p</span>, <span class=\"selector-tag\">blockquote</span>, <span class=\"comment\">/* structural elements 结构元素 */</span></div><div class=\"line\"><span class=\"selector-tag\">dl</span>, <span class=\"selector-tag\">dt</span>, <span class=\"selector-tag\">dd</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span>, <span class=\"selector-tag\">li</span>, <span class=\"comment\">/* list elements 列表元素 */</span></div><div class=\"line\"><span class=\"selector-tag\">pre</span>, <span class=\"comment\">/* text formatting elements 文本格式元素 */</span></div><div class=\"line\"><span class=\"selector-tag\">form</span>, <span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">legend</span>, <span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">textarea</span>, <span class=\"comment\">/* form elements 表单元素 */</span></div><div class=\"line\"><span class=\"selector-tag\">th</span>, <span class=\"selector-tag\">td</span> <span class=\"comment\">/* table elements 表格元素 */</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** 设置默认字体 **/</span></div><div class=\"line\"><span class=\"selector-tag\">body</span>,</div><div class=\"line\"><span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">select</span>, <span class=\"selector-tag\">textarea</span> <span class=\"comment\">/* for ie */</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font</span>: <span class=\"number\">12px</span>/<span class=\"number\">1.5</span> tahoma, arial, \\<span class=\"number\">5</span>b8b\\<span class=\"number\">4</span>f53, sans-serif;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">h1</span>, <span class=\"selector-tag\">h2</span>, <span class=\"selector-tag\">h3</span>, <span class=\"selector-tag\">h4</span>, <span class=\"selector-tag\">h5</span>, <span class=\"selector-tag\">h6</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">100%</span>; &#125;</div><div class=\"line\"><span class=\"selector-tag\">address</span>, <span class=\"selector-tag\">cite</span>, <span class=\"selector-tag\">dfn</span>, <span class=\"selector-tag\">em</span>, <span class=\"selector-tag\">var</span> &#123; <span class=\"attribute\">font-style</span>: normal; &#125; <span class=\"comment\">/* 将斜体扶正 */</span></div><div class=\"line\"><span class=\"selector-tag\">code</span>, <span class=\"selector-tag\">kbd</span>, <span class=\"selector-tag\">pre</span>, <span class=\"selector-tag\">samp</span> &#123; <span class=\"attribute\">font-family</span>: courier new, courier, monospace; &#125; <span class=\"comment\">/* 统一等宽字体 */</span></div><div class=\"line\"><span class=\"selector-tag\">small</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>; &#125; <span class=\"comment\">/* 小于 12px 的中文很难阅读，让 small 正常化 */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** 重置列表元素 **/</span></div><div class=\"line\"><span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span> &#123; <span class=\"attribute\">list-style</span>: none; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** 重置文本格式元素 **/</span></div><div class=\"line\"><span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">text-decoration</span>: none; &#125;</div><div class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>: underline; &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** 重置表单元素 **/</span></div><div class=\"line\"><span class=\"selector-tag\">legend</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>; &#125; <span class=\"comment\">/* for ie6 */</span></div><div class=\"line\"><span class=\"selector-tag\">fieldset</span>, <span class=\"selector-tag\">img</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">0</span>; &#125; <span class=\"comment\">/* img 搭车：让链接里的 img 无边框 */</span></div><div class=\"line\"><span class=\"selector-tag\">button</span>, <span class=\"selector-tag\">input</span>, <span class=\"selector-tag\">select</span>, <span class=\"selector-tag\">textarea</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">100%</span>; &#125; <span class=\"comment\">/* 使得表单元素在 ie 下能继承字体大小 */</span></div><div class=\"line\"><span class=\"comment\">/* 注：optgroup 无法扶正 */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** 重置表格元素 **/</span></div><div class=\"line\"><span class=\"selector-tag\">table</span> &#123; <span class=\"attribute\">border-collapse</span>: collapse; <span class=\"attribute\">border-spacing</span>: <span class=\"number\">0</span>; &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-checkbox的美化\"><a href=\"#2-checkbox的美化\" class=\"headerlink\" title=\"2.checkbox的美化\"></a>2.checkbox的美化</h3><p>隐藏checkbox，用i标签替代<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>复选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">checked</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>复选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">disabled</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>复选框禁用<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">disabled</span> <span class=\"attr\">checked</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>复选框禁用已选<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"abc\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>单选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"abc\"</span> <span class=\"attr\">checked</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>单选框<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"abc\"</span> <span class=\"attr\">disabled</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>单选框禁用<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"def\"</span> <span class=\"attr\">disabled</span> <span class=\"attr\">checked</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span>✓<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>单选框禁用已选<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*checkbox美化*/</span></div><div class=\"line\"><span class=\"selector-tag\">label</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">label</span> <span class=\"selector-tag\">i</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: -<span class=\"number\">2px</span> <span class=\"number\">6px</span> <span class=\"number\">1px</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"checkbox\"]</span>, <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"radio\"]</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"radio\"]</span> + <span class=\"selector-tag\">i</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">7px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"checkbox\"]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">i</span>, <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"radio\"]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">i</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#7AD847</span>; <span class=\"comment\">/*颜色自改*/</span></div><div class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#7AD847</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-inputFile的美化\"><a href=\"#3-inputFile的美化\" class=\"headerlink\" title=\"3.inputFile的美化\"></a>3.inputFile的美化</h3><p>设置input=[file]的透明度为0，然后重现a标签样式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"file\"</span>&gt;</span>选择文件</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.file</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#D0EEFF</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#99D3F5</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">4px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span> <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#1E88C7</span>;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">text-indent</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.file</span> <span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.file</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#AADFFD</span>;</div><div class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#78C3F3</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#004974</span>;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-css画三角形\"><a href=\"#4-css画三角形\" class=\"headerlink\" title=\"4.css画三角形\"></a>4.css画三角形</h3><p><a href=\"http://www.jb51.net/article/42513.htm\" target=\"_blank\" rel=\"external\">原地址</a><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#triangle-up</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-down</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-left</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-right</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-topleft</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-topright</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-bottomleft</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-right</span>: <span class=\"number\">100px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-id\">#triangle-bottomright</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</div><div class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">100px</span> solid transparent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"ES6入门","date":"2017-03-03T06:56:23.000Z","_content":"\n总结于：[ECMAScript6入门](http://es6.ruanyifeng.com/#docs/)\n### 1 Babel转码器\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。\n```javascript\n// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n```\n### 2 let和const\n#### 2.1 let命令\nES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。\n\nfor循环的计数器，就很合适使用let命令。\n```javascript\nfor (let i = 0; i < 10; i++) {}\n\nconsole.log(i);\n//ReferenceError: i is not defined\n```\n注：(1)let不存在变量提升\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n(2)暂时性死区\n```javascript\nvar tmp = 123;\n//不受作用域外部影响\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n```\n(3)不允许重复声明\n```javascript\nfunction func(arg) {\n  let arg; // 报错\n}\n\nfunction func(arg) {\n  {\n    let arg; // 不报错\n  }\n}\n```\n(4)let实际上为 JavaScript 新增了块级作用域。\n块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。\n```javascript\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n```\n\n#### 2.2 const命令\nconst声明一个只读的常量。一旦声明，常量的值就不能改变。\nconst的作用域与let命令相同：只在声明所在的块级作用域内有效。\nconst实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。\n```javascript\nconst foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n\n//如果真的想将对象冻结，应该使用Object.freeze方法。\nconst foo = Object.freeze({});\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n```\n\n### 3 变量的解构赋值\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n#### 3.1 数组的解构赋值\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n```\n\n#### 3.2 对象的解构赋值\n```javascript\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet foo;\nlet {foo} = {foo: 1}; // SyntaxError: Duplicate declaration \"foo\"\n\n//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。\nlet foo;\n({foo} = {foo: 1}); // 成功\n\n//嵌套\nlet obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nlet { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n\n```\n\n#### 3.3 字符串的解构赋值\n```javascript\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\n//对length属性解构赋值\nlet {length : len} = 'hello';\nlen // 5\n```\n\n### 4 字符串的扩展\n#### 4.1 includes(), startsWith(), endsWith()\nincludes()：返回布尔值，表示是否找到了参数字符串。\nstartsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\nendsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n```javascript\n//这三个方法都支持第二个参数，表示开始搜索的位置。\nvar s = 'Hello world!';\n\ns.includes('o') // true\n\ns.startsWith('world', 6) // true\ns.endsWith('Hello', 5) // true\ns.includes('Hello', 6) // false\n```\n\n#### 4.2 repeat() 表示将原字符串重复n次。\n```javascript\n'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n'na'.repeat(NaN) // \"\"\n'na'.repeat(-1)// RangeError\n```\n\n#### 4.3 padStart()，padEnd()\n```javascript\n//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。\n'1'.padStart(10, '0') // \"0000000001\"\n'12'.padStart(10, '0') // \"0000000012\"\n'123456'.padStart(10, '0') // \"0000123456\"\n\n//另一个用途是提示字符串格式。\n'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n```\n\n#### 4.4 模板字符串\n模板字符串（template string）是增强版的字符串，用反引号（`）标识。\n它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\n```javascript\n// 字符串中嵌入变量\nvar name = \"Bob\", time = \"today\";\n`Hello ${name},   \nhow are you ${time}?`   \n\nvar obj = {x: 1, y: 2};\n`${obj.x + obj.y}`// 3\n\nfunction fn() {\n  return \"Hello World\";\n}\n`foo ${fn()} bar`// foo Hello World bar\n\n```\n模板字符串甚至还能嵌套。\n```javascript\nconst tmpl = addrs => `\n  <table>\n  ${addrs.map(addr => `\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n  `).join('')}\n  </table>\n`;\n//使用方法\nconst data = [\n    { first: '<Jane>', last: 'Bond' },\n    { first: 'Lars', last: '<Croft>' },\n];\n\nconsole.log(tmpl(data));\n// <table>\n//\n//   <tr><td><Jane></td></tr>\n//   <tr><td>Bond</td></tr>\n//\n//   <tr><td>Lars</td></tr>\n//   <tr><td><Croft></td></tr>\n//\n// </table>\n\n```\n\n如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。\n```javascript\n// 写法一\nlet str = 'return ' + '`Hello ${name}!`';\nlet func = new Function('name', str);\nfunc('Jack') // \"Hello Jack!\"\n\n// 写法二\nlet str = '(name) => `Hello ${name}!`';\nlet func = eval.call(null, str);\nfunc('Jack') // \"Hello Jack!\"\n```\n\n### 5.函数的扩展\n#### 5.1 函数的默认值\n```javascript\n//通常情况下，定义了默认值的参数，应该是函数的尾参数。\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\n\n//函数的 length 属性：将返回没有指定默认值的参数个数。\nlog.length //1\n\n```\n\n#### 5.2 rest参数（形式为...变量名）\n函数的length属性，不包括 rest 参数。\n```javascript\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n```\n\n#### 5.3 箭头函数\n箭头左边是参数，右边是返回值\n```javascript\nvar f = v => v;\n//等同于\nvar f = function(v) {\n  return v;\n};\n```\n箭头函数有几个使用注意点。\n\n（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n\n（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n\n（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。\n\n（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。\n\n```javascript\n//嵌套的箭头函数\nfunction insert(value) {\n  return {into: function (array) {\n    return {after: function (afterValue) {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n//等同于\nlet insert = (value) => ({into: (array) => ({after: (afterValue) => {\n  array.splice(array.indexOf(afterValue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n```\n\n#### 5.4 尾调用优化\n尾调用指某个函数的最后一步是调用另一个函数\n“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。\n如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。\n```javascript\nfunction f(x){\n  return g(x);\n}\n```\n\n尾递归\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。\n但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n\n\n### 6.数组的扩展\n#### 6.1 扩展运算符（...）\n该运算符主要用于函数调用。\n```javascript\n// ES5 的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf(...args);\n```\n另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）\n```javascript\n// ES5的 写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6 的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n```\n扩展运算符的应用：\n<1>合并数组\n```javascript\n// ES5\n[1, 2].concat(more)\n// ES6\n[1, 2, ...more]\n\nvar arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];\n\n// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n```\n<2>与解构赋值结合\n如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n```javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n\nconst [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n```\n<3>字符串\n扩展运算符还可以将字符串转为真正的数组。\n能够正确识别32位的Unicode字符。\n正确返回字符串长度的函数\n```javascript\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\nfunction length(str) {\n  return [...str].length;\n}\n\nlength('x\\uD83D\\uDE80y') // 3\n```\n\n\n#### 6.2 Array.from()\nArray.from方法用于将两类对象转为真正的数组：\n类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。\n```javascript\n// NodeList对象\nlet ps = document.querySelectorAll('p');\nArray.from(ps).forEach(function (p) {\n  console.log(p);\n});\n\n// arguments对象\nfunction foo() {\n  var args = Array.from(arguments);\n  // ...\n}\n```\n扩展运算符（...）也可以将某些数据结构转为数组。\n区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。\n\nArray.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。\n```javascript\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n```\n下面的例子是取出一组DOM节点的文本内容。\n```javascript\nlet spans = document.querySelectorAll('span.name');\n\n// map()\nlet names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n// Array.from()\nlet names2 = Array.from(spans, s => s.textContent)\n```\n下面的例子将数组中布尔值为false的成员转为0。\n```javascript\nArray.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n```\n\n#### 6.3 Array.of() \nArray.of方法用于将一组值，转换为数组。\n```javascript\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n```\n\n#### 6.4 数组实例的 find() 和 findIndex()\n数组实例的find方法，用于找出第一个符合条件的数组成员。\n```javascript\n[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n```\n\n#### 6.5 数组实例的fill()\nfill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n```javascript\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n```\n\n\n#### 6.6 数组实例的 entries()，keys() 和 values()\n```javascript\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n\n### 7.对象的扩展\n#### 7.1 Object.is()\n与严格比较运算符（===）的行为基本一致。\n不同之处只有两个：一是+0不等于-0，二是NaN等于自身。\n```javascript\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n```\n#### 7.2 Object.assign()\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。\n由于undefined和null无法转成对象，所以如果它们作为参数，就会报错\n```javascript\nvar target = { a: 1 };\n\nvar source1 = { b: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n```\nObject.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。\nObject.assign方法实行的是浅拷贝，而不是深拷贝。\n\nObject.assign方法有很多用处。\n<1>为对象添加属性\n```javascript\nclass Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n```\n<2>为对象添加方法\n```javascript\nObject.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    ···\n  },\n  anotherMethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  ···\n};\nSomeClass.prototype.anotherMethod = function () {\n  ···\n};\n```\n<3>克隆对象\n```javascript\nfunction clone(origin) {\n  return Object.assign({}, origin);\n}\n```\n<4>合并多个对象\n```javascript\nconst merge =\n  (target, ...sources) => Object.assign(target, ...sources);\n```\n<5>为属性指定默认值\n```javascript\nconst DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n```\n\n#### 7.3 属性的可枚举性\n对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。\nObject.getOwnPropertyDescriptor方法可以获取该属性的描述对象。\n```javascript\nlet obj = { foo: 123 };\nObject.getOwnPropertyDescriptor(obj, 'foo')\n//  {\n//    value: 123,\n//    writable: true,\n//    enumerable: true, 可枚举性\n//    configurable: true\n//  }\n```\nES5 有三个操作会忽略enumerable为false的属性。\n  for...in循环：只遍历对象自身的和继承的可枚举的属性\n  Object.keys()：返回对象自身的所有可枚举的属性的键名\n  JSON.stringify()：只串行化对象自身的可枚举的属性\nES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。\n尽量不要用for...in循环，而用Object.keys()代替。\n\n\n#### 7.4 属性的遍历\nES6 一共有5种方法可以遍历对象的属性。\n\n<1>for...in\n\nfor...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。\n\n<2>Object.keys(obj)\n\nObject.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。\n\n<3>Object.getOwnPropertyNames(obj)\n\nObject.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。\n\n<4>Object.getOwnPropertySymbols(obj)\n\nObject.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。\n\n<5>Reflect.ownKeys(obj)\n\nReflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。\n\n\n#### 7.5 __proto__属性\n无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的\nObject.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。\n```javascript\nlet proto = {};\nlet obj = { x: 10 };\nObject.setPrototypeOf(obj, proto);\n\nproto.y = 20;\nproto.z = 40;\n\nobj.x // 10\nobj.y // 20\nobj.z // 40\n```\n\n\n#### 7.6 Object.keys()，Object.values()，Object.entries() \n```javascript\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n\nObject.values(obj)\n// [\"bar\", 42]\n\nObject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n```\n\n#### 7.7 Null 传导运算符\n如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。\n比如，要读取message.body.user.firstName，安全的写法是写成下面这样。\n```javascript\nconst firstName = (message\n  && message.body\n  && message.body.user\n  && message.body.user.firstName) || 'default';\n\n//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”\nconst firstName = message?.body?.user?.firstName || 'default';\n```\n\n\n### 8.Symbol\nES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。\n它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。\n```javascript\nvar s1 = Symbol('foo');\nvar s2 = Symbol('bar');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n```\nObject.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\n\nSymbol.for():重新使用同一个Symbol值\n```javascript\nvar s1 = Symbol.for('foo');\nvar s2 = Symbol.for('foo');\n\ns1 === s2 // true\n```\nSymbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。\n\nSymbol.keyFor方法返回一个已登记的 Symbol 类型值的key。\n```javascript\nvar s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nvar s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n```\n\n\n### 9.Set和Map\n#### 9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。\n```javascript\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n\n// 去除数组的重复成员\nlet arr = [3, 5, 2, 2, 5, 5];\nlet unique = [...new Set(arr)];// [3, 5, 2]\n```\nSet的操作方法：\n  add(value)：添加某个值，返回Set结构本身。\n  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n  has(value)：返回一个布尔值，表示该值是否为Set的成员。\n  clear()：清除所有成员，没有返回值。\n\nSet的遍历方法：\n  keys()：返回键名的遍历器\n  values()：返回键值的遍历器\n  entries()：返回键值对的遍历器\n  forEach()：使用回调函数遍历每个成员\n\n#### 9.2 WeakSet：\n  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。\n  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。\n  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。\n\n#### 9.3 Map\nMap类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n```javascript\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\n\n#### 9.4 WeakMap\n  WeakMap与Map的区别有两点。\n  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。\n  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。\n\n\n\n### 10.Promise \n#### 10.1 Promise对象有以下两个特点：\n<1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。\n<2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。\n```javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n```\n\n#### 10.2 Promise.all()\nPromise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n```javascript\n// 生成一个Promise对象的数组\nvar promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n```\n\nPromise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。\n\n\n#### 10.3 Promise.resolve\n作用是将现有对象转化为Promise对象\n```javascript\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n#### 10.4 应用于加载图片\n```javascript\nconst preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n```\n\n\n### 11.Iterator \n#### 11.1 Iterator 的作用有三个：\n一是为各种数据结构，提供一个统一的、简便的访问接口；\n二是使得数据结构的成员能够按某种次序排列；\n三是ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。\n\nES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历\n```javascript\n//数组的Symbol.iterator属性\nlet arr = ['a', 'b', 'c'];\nlet iter = arr[Symbol.iterator]();\n\niter.next() // { value: 'a', done: false }\niter.next() // { value: 'b', done: false }\niter.next() // { value: 'c', done: false }\niter.next() // { value: undefined, done: true }\n```\n原生具备 Iterator 接口的数据结构如下。\n    Array\n    Map\n    Set\n    String\n    TypedArray\n    函数的 arguments 对象\n\n\n#### 11.2 for...of循环\n一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for...of循环遍历它的成员。\n```javascript\nconst arr = ['red', 'green', 'blue'];\n\nfor(let v of arr) {\n  console.log(v); // red green blue\n}\n\n//空对象obj部署了数组arr的Symbol.iterator属性\nconst obj = {};\nobj[Symbol.iterator] = arr[Symbol.iterator].bind(arr);\n\nfor(let v of obj) {\n  console.log(v); // red green blue\n}\n```\nfor...in循环读取键名，for...of循环读取键值。\n```javascript\nvar arr = ['a', 'b', 'c', 'd'];\n\nfor (let a in arr) {\n  console.log(a); // 0 1 2 3\n}\n\nfor (let a of arr) {\n  console.log(a); // a b c d\n}\n```\n计算生成的数据结构 entries(),keys(),values()\n```javascript\nlet arr = ['a', 'b', 'c'];\nfor (let pair of arr.entries()) {\n  console.log(pair);\n}\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n```\n\n与其他遍历语法的比较\nfor:最原始的写法，较为麻烦\nforEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。\nfor...in:主要用于遍历对象，不适合遍历数组，for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。\n    某些情况下，for...in循环会以任意顺序遍历键名。\n\n\n### 12.Generator\n#### 12.1 Generator 函数是一个状态机，封装了多个内部状态。\n形式上，Generator 函数是一个普通函数，但是有两个特征。\n一是，function关键字与函数名之间有一个星号；\n二是，函数体内部使用yield表达式，定义不同的内部状态 \n```javascript\n//该函数有三个状态：hello，world 和 return 语句（结束执行）\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象\nvar hw = helloWorldGenerator();\n\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n\n#### 12.2 与 Iterator 接口的关系\n```javascript\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n```\n\n#### 12.3 Generator.prototype.return()\n```javascript\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n```\n\n#### 12.4 yield* 表达式\n用来在一个 Generator 函数里面执行另一个 Generator 函数。\n```javascript\nfunction* foo() {\n  yield 'a';\n  yield 'b';\n}\n\nfunction* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n```\n\n#### 12.5 应用\n通过 Generator 函数部署 Ajax 操作\n```javascript\nfunction* main() {\n  var result = yield request(\"http://some.url\");\n  var resp = JSON.parse(result);\n    console.log(resp.value);\n}\n//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的\nfunction request(url) {\n  makeAjaxCall(url, function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n```\n控制流管理\n```javascript\n//多步操作\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n\n//采用 Promise 改写上面的代码。\nPromise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();\n\n//Generator 函数可以进一步改善代码运行流程。（同步操作）\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n```\n\n### 13.async函数\nasync函数是Generator 函数的语法糖\n```javascript\nvar fs = require('fs');\n\nvar readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) reject(error);\n      resolve(data);\n    });\n  });\n};\n\nvar gen = function* () {\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n//写成async函数，就是下面这样。\nvar asyncReadFile = async function () {\n  var f1 = await readFile('/etc/fstab');\n  var f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\nasync函数对 Generator 函数的改进，体现在以下四点:\n<1>内置执行器\nGenerator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。\nvar result = asyncReadFile();\n<2>更好的语义\n<3>更广的适用性\n<4>返回值是Promise\n\n基本用法：\n```javascript\nasync function getStockPriceByName(name) {\n  var symbol = await getStockSymbol(name);\n  var stockPrice = await getStockPrice(symbol);\n  return stockPrice;\n}\n\ngetStockPriceByName('goog').then(function (result) {\n  console.log(result);\n});\n```\n实例：按顺序完成异步操作：\n<1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）\n```javascript\nfunction logInOrder(urls) {\n  // 远程读取所有URL\n  const textPromises = urls.map(url => {\n    return fetch(url).then(response => response.text());\n  });\n\n  // 按次序输出\n  textPromises.reduce((chain, textPromise) => {\n    return chain.then(() => textPromise)\n      .then(text => console.log(text));\n  }, Promise.resolve());\n}\n```\n<2>async 函数实现\n```javascript\nasync function logInOrder(urls) {\n  // 并发读取远程URL\n  const textPromises = urls.map(async url => {\n    const response = await fetch(url);\n    return response.text();\n  });\n\n  // 按次序输出\n  for (const textPromise of textPromises) {\n    console.log(await textPromise);\n  }\n}\n```\n### 14.Class\n#### 14.1 简介\nclass写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n```javascript\n//生成实例对象的传统方法是通过构造函数\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n\n//ES6写法\n//定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  //类的所有方法都定义在类的prototype属性上面\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```\n\n#### 14.2 Class 的静态方法\n加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用\n```javascript\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nFoo.classMethod() // 'hello'\n\nvar foo = new Foo();\nfoo.classMethod()\n// TypeError: foo.classMethod is not a function\n```\n父类的静态方法，可以被子类继承。\n\n#### 14.3 Class的继承\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。\n```javascript\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```\n\n<1>子类的__proto__属性，表示构造函数的继承，总是指向父类。\n<2>子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。\n```javascript\nclass A {\n}\n\nclass B extends A {\n}\n\nB.__proto__ === A // true\nB.prototype.__proto__ === A.prototype // true\n```\n\n\n### 15.Decorator\n修饰器（Decorator）是一个函数，用来修改类的行为。\n修饰器本质就是编译时执行的函数。\n```javascript\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n```\n\n如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。\n```javascript\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n```\n\n","source":"_posts/ES6-01.md","raw":"---\ntitle: ES6入门\ndate: 2017-03-03 14:56:23\ntags: javascript\n---\n\n总结于：[ECMAScript6入门](http://es6.ruanyifeng.com/#docs/)\n### 1 Babel转码器\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。\n```javascript\n// 转码前\ninput.map(item => item + 1);\n\n// 转码后\ninput.map(function (item) {\n  return item + 1;\n});\n```\n### 2 let和const\n#### 2.1 let命令\nES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。\n\nfor循环的计数器，就很合适使用let命令。\n```javascript\nfor (let i = 0; i < 10; i++) {}\n\nconsole.log(i);\n//ReferenceError: i is not defined\n```\n注：(1)let不存在变量提升\n```javascript\n// var 的情况\nconsole.log(foo); // 输出undefined\nvar foo = 2;\n\n// let 的情况\nconsole.log(bar); // 报错ReferenceError\nlet bar = 2;\n```\n(2)暂时性死区\n```javascript\nvar tmp = 123;\n//不受作用域外部影响\nif (true) {\n  tmp = 'abc'; // ReferenceError\n  let tmp;\n}\n```\n(3)不允许重复声明\n```javascript\nfunction func(arg) {\n  let arg; // 报错\n}\n\nfunction func(arg) {\n  {\n    let arg; // 不报错\n  }\n}\n```\n(4)let实际上为 JavaScript 新增了块级作用域。\n块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。\n```javascript\n// IIFE 写法\n(function () {\n  var tmp = ...;\n  ...\n}());\n\n// 块级作用域写法\n{\n  let tmp = ...;\n  ...\n}\n```\n\n#### 2.2 const命令\nconst声明一个只读的常量。一旦声明，常量的值就不能改变。\nconst的作用域与let命令相同：只在声明所在的块级作用域内有效。\nconst实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。\n```javascript\nconst foo = {};\n\n// 为 foo 添加一个属性，可以成功\nfoo.prop = 123;\nfoo.prop // 123\n\n// 将 foo 指向另一个对象，就会报错\nfoo = {}; // TypeError: \"foo\" is read-only\n\n//如果真的想将对象冻结，应该使用Object.freeze方法。\nconst foo = Object.freeze({});\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n```\n\n### 3 变量的解构赋值\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n#### 3.1 数组的解构赋值\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n```\n\n#### 3.2 对象的解构赋值\n```javascript\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet foo;\nlet {foo} = {foo: 1}; // SyntaxError: Duplicate declaration \"foo\"\n\n//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。\nlet foo;\n({foo} = {foo: 1}); // 成功\n\n//嵌套\nlet obj = {\n  p: [\n    'Hello',\n    { y: 'World' }\n  ]\n};\n\nlet { p: [x, { y }] } = obj;\nx // \"Hello\"\ny // \"World\"\n\n```\n\n#### 3.3 字符串的解构赋值\n```javascript\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\n//对length属性解构赋值\nlet {length : len} = 'hello';\nlen // 5\n```\n\n### 4 字符串的扩展\n#### 4.1 includes(), startsWith(), endsWith()\nincludes()：返回布尔值，表示是否找到了参数字符串。\nstartsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。\nendsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。\n```javascript\n//这三个方法都支持第二个参数，表示开始搜索的位置。\nvar s = 'Hello world!';\n\ns.includes('o') // true\n\ns.startsWith('world', 6) // true\ns.endsWith('Hello', 5) // true\ns.includes('Hello', 6) // false\n```\n\n#### 4.2 repeat() 表示将原字符串重复n次。\n```javascript\n'x'.repeat(3) // \"xxx\"\n'hello'.repeat(2) // \"hellohello\"\n'na'.repeat(0) // \"\"\n'na'.repeat(NaN) // \"\"\n'na'.repeat(-1)// RangeError\n```\n\n#### 4.3 padStart()，padEnd()\n```javascript\n//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。\n'1'.padStart(10, '0') // \"0000000001\"\n'12'.padStart(10, '0') // \"0000000012\"\n'123456'.padStart(10, '0') // \"0000123456\"\n\n//另一个用途是提示字符串格式。\n'12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-MM-12\"\n'09-12'.padStart(10, 'YYYY-MM-DD') // \"YYYY-09-12\"\n```\n\n#### 4.4 模板字符串\n模板字符串（template string）是增强版的字符串，用反引号（`）标识。\n它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\n```javascript\n// 字符串中嵌入变量\nvar name = \"Bob\", time = \"today\";\n`Hello ${name},   \nhow are you ${time}?`   \n\nvar obj = {x: 1, y: 2};\n`${obj.x + obj.y}`// 3\n\nfunction fn() {\n  return \"Hello World\";\n}\n`foo ${fn()} bar`// foo Hello World bar\n\n```\n模板字符串甚至还能嵌套。\n```javascript\nconst tmpl = addrs => `\n  <table>\n  ${addrs.map(addr => `\n    <tr><td>${addr.first}</td></tr>\n    <tr><td>${addr.last}</td></tr>\n  `).join('')}\n  </table>\n`;\n//使用方法\nconst data = [\n    { first: '<Jane>', last: 'Bond' },\n    { first: 'Lars', last: '<Croft>' },\n];\n\nconsole.log(tmpl(data));\n// <table>\n//\n//   <tr><td><Jane></td></tr>\n//   <tr><td>Bond</td></tr>\n//\n//   <tr><td>Lars</td></tr>\n//   <tr><td><Croft></td></tr>\n//\n// </table>\n\n```\n\n如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。\n```javascript\n// 写法一\nlet str = 'return ' + '`Hello ${name}!`';\nlet func = new Function('name', str);\nfunc('Jack') // \"Hello Jack!\"\n\n// 写法二\nlet str = '(name) => `Hello ${name}!`';\nlet func = eval.call(null, str);\nfunc('Jack') // \"Hello Jack!\"\n```\n\n### 5.函数的扩展\n#### 5.1 函数的默认值\n```javascript\n//通常情况下，定义了默认值的参数，应该是函数的尾参数。\nfunction log(x, y = 'World') {\n  console.log(x, y);\n}\n\nlog('Hello') // Hello World\n\n//函数的 length 属性：将返回没有指定默认值的参数个数。\nlog.length //1\n\n```\n\n#### 5.2 rest参数（形式为...变量名）\n函数的length属性，不包括 rest 参数。\n```javascript\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n```\n\n#### 5.3 箭头函数\n箭头左边是参数，右边是返回值\n```javascript\nvar f = v => v;\n//等同于\nvar f = function(v) {\n  return v;\n};\n```\n箭头函数有几个使用注意点。\n\n（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n\n（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n\n（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。\n\n（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。\n\n```javascript\n//嵌套的箭头函数\nfunction insert(value) {\n  return {into: function (array) {\n    return {after: function (afterValue) {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }};\n  }};\n}\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n\n//等同于\nlet insert = (value) => ({into: (array) => ({after: (afterValue) => {\n  array.splice(array.indexOf(afterValue) + 1, 0, value);\n  return array;\n}})});\n\ninsert(2).into([1, 3]).after(1); //[1, 2, 3]\n```\n\n#### 5.4 尾调用优化\n尾调用指某个函数的最后一步是调用另一个函数\n“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。\n如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。\n```javascript\nfunction f(x){\n  return g(x);\n}\n```\n\n尾递归\n函数调用自身，称为递归。如果尾调用自身，就称为尾递归。\n\n递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。\n但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。\n\n\n### 6.数组的扩展\n#### 6.1 扩展运算符（...）\n该运算符主要用于函数调用。\n```javascript\n// ES5 的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf(...args);\n```\n另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）\n```javascript\n// ES5的 写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6 的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n```\n扩展运算符的应用：\n<1>合并数组\n```javascript\n// ES5\n[1, 2].concat(more)\n// ES6\n[1, 2, ...more]\n\nvar arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];\n\n// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n```\n<2>与解构赋值结合\n如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n```javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n\nconst [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n```\n<3>字符串\n扩展运算符还可以将字符串转为真正的数组。\n能够正确识别32位的Unicode字符。\n正确返回字符串长度的函数\n```javascript\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\nfunction length(str) {\n  return [...str].length;\n}\n\nlength('x\\uD83D\\uDE80y') // 3\n```\n\n\n#### 6.2 Array.from()\nArray.from方法用于将两类对象转为真正的数组：\n类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。\n```javascript\n// NodeList对象\nlet ps = document.querySelectorAll('p');\nArray.from(ps).forEach(function (p) {\n  console.log(p);\n});\n\n// arguments对象\nfunction foo() {\n  var args = Array.from(arguments);\n  // ...\n}\n```\n扩展运算符（...）也可以将某些数据结构转为数组。\n区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。\n\nArray.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。\n```javascript\nArray.from(arrayLike, x => x * x);\n// 等同于\nArray.from(arrayLike).map(x => x * x);\n\nArray.from([1, 2, 3], (x) => x * x)\n// [1, 4, 9]\n```\n下面的例子是取出一组DOM节点的文本内容。\n```javascript\nlet spans = document.querySelectorAll('span.name');\n\n// map()\nlet names1 = Array.prototype.map.call(spans, s => s.textContent);\n\n// Array.from()\nlet names2 = Array.from(spans, s => s.textContent)\n```\n下面的例子将数组中布尔值为false的成员转为0。\n```javascript\nArray.from([1, , 2, , 3], (n) => n || 0)\n// [1, 0, 2, 0, 3]\n```\n\n#### 6.3 Array.of() \nArray.of方法用于将一组值，转换为数组。\n```javascript\nArray.of(3, 11, 8) // [3,11,8]\nArray.of(3) // [3]\nArray.of(3).length // 1\n```\n\n#### 6.4 数组实例的 find() 和 findIndex()\n数组实例的find方法，用于找出第一个符合条件的数组成员。\n```javascript\n[1, 4, -5, 10].find((n) => n < 0)\n// -5\n\n[1, 5, 10, 15].find(function(value, index, arr) {\n  return value > 9;\n}) // 10\n\n[1, 5, 10, 15].findIndex(function(value, index, arr) {\n  return value > 9;\n}) // 2\n```\n\n#### 6.5 数组实例的fill()\nfill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。\n```javascript\n['a', 'b', 'c'].fill(7)\n// [7, 7, 7]\n\n['a', 'b', 'c'].fill(7, 1, 2)\n// ['a', 7, 'c']\n```\n\n\n#### 6.6 数组实例的 entries()，keys() 和 values()\n```javascript\nfor (let index of ['a', 'b'].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n\nfor (let elem of ['a', 'b'].values()) {\n  console.log(elem);\n}\n// 'a'\n// 'b'\n\nfor (let [index, elem] of ['a', 'b'].entries()) {\n  console.log(index, elem);\n}\n// 0 \"a\"\n// 1 \"b\"\n```\n\n\n### 7.对象的扩展\n#### 7.1 Object.is()\n与严格比较运算符（===）的行为基本一致。\n不同之处只有两个：一是+0不等于-0，二是NaN等于自身。\n```javascript\n+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n```\n#### 7.2 Object.assign()\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。\n由于undefined和null无法转成对象，所以如果它们作为参数，就会报错\n```javascript\nvar target = { a: 1 };\n\nvar source1 = { b: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n```\nObject.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。\nObject.assign方法实行的是浅拷贝，而不是深拷贝。\n\nObject.assign方法有很多用处。\n<1>为对象添加属性\n```javascript\nclass Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n```\n<2>为对象添加方法\n```javascript\nObject.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    ···\n  },\n  anotherMethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  ···\n};\nSomeClass.prototype.anotherMethod = function () {\n  ···\n};\n```\n<3>克隆对象\n```javascript\nfunction clone(origin) {\n  return Object.assign({}, origin);\n}\n```\n<4>合并多个对象\n```javascript\nconst merge =\n  (target, ...sources) => Object.assign(target, ...sources);\n```\n<5>为属性指定默认值\n```javascript\nconst DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n```\n\n#### 7.3 属性的可枚举性\n对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。\nObject.getOwnPropertyDescriptor方法可以获取该属性的描述对象。\n```javascript\nlet obj = { foo: 123 };\nObject.getOwnPropertyDescriptor(obj, 'foo')\n//  {\n//    value: 123,\n//    writable: true,\n//    enumerable: true, 可枚举性\n//    configurable: true\n//  }\n```\nES5 有三个操作会忽略enumerable为false的属性。\n  for...in循环：只遍历对象自身的和继承的可枚举的属性\n  Object.keys()：返回对象自身的所有可枚举的属性的键名\n  JSON.stringify()：只串行化对象自身的可枚举的属性\nES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。\n尽量不要用for...in循环，而用Object.keys()代替。\n\n\n#### 7.4 属性的遍历\nES6 一共有5种方法可以遍历对象的属性。\n\n<1>for...in\n\nfor...in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。\n\n<2>Object.keys(obj)\n\nObject.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。\n\n<3>Object.getOwnPropertyNames(obj)\n\nObject.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。\n\n<4>Object.getOwnPropertySymbols(obj)\n\nObject.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。\n\n<5>Reflect.ownKeys(obj)\n\nReflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。\n\n\n#### 7.5 __proto__属性\n无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的\nObject.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。\n```javascript\nlet proto = {};\nlet obj = { x: 10 };\nObject.setPrototypeOf(obj, proto);\n\nproto.y = 20;\nproto.z = 40;\n\nobj.x // 10\nobj.y // 20\nobj.z // 40\n```\n\n\n#### 7.6 Object.keys()，Object.values()，Object.entries() \n```javascript\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n\nObject.values(obj)\n// [\"bar\", 42]\n\nObject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n```\n\n#### 7.7 Null 传导运算符\n如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。\n比如，要读取message.body.user.firstName，安全的写法是写成下面这样。\n```javascript\nconst firstName = (message\n  && message.body\n  && message.body.user\n  && message.body.user.firstName) || 'default';\n\n//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”\nconst firstName = message?.body?.user?.firstName || 'default';\n```\n\n\n### 8.Symbol\nES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。\n它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。\n```javascript\nvar s1 = Symbol('foo');\nvar s2 = Symbol('bar');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n```\nObject.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\n\nSymbol.for():重新使用同一个Symbol值\n```javascript\nvar s1 = Symbol.for('foo');\nvar s2 = Symbol.for('foo');\n\ns1 === s2 // true\n```\nSymbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。\n\nSymbol.keyFor方法返回一个已登记的 Symbol 类型值的key。\n```javascript\nvar s1 = Symbol.for(\"foo\");\nSymbol.keyFor(s1) // \"foo\"\n\nvar s2 = Symbol(\"foo\");\nSymbol.keyFor(s2) // undefined\n```\n\n\n### 9.Set和Map\n#### 9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。\n```javascript\n// 例一\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// 例二\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n\n// 去除数组的重复成员\nlet arr = [3, 5, 2, 2, 5, 5];\nlet unique = [...new Set(arr)];// [3, 5, 2]\n```\nSet的操作方法：\n  add(value)：添加某个值，返回Set结构本身。\n  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n  has(value)：返回一个布尔值，表示该值是否为Set的成员。\n  clear()：清除所有成员，没有返回值。\n\nSet的遍历方法：\n  keys()：返回键名的遍历器\n  values()：返回键值的遍历器\n  entries()：返回键值对的遍历器\n  forEach()：使用回调函数遍历每个成员\n\n#### 9.2 WeakSet：\n  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。\n  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。\n  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。\n\n#### 9.3 Map\nMap类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n```javascript\nconst m = new Map();\nconst o = {p: 'Hello World'};\n\nm.set(o, 'content')\nm.get(o) // \"content\"\n\nm.has(o) // true\nm.delete(o) // true\nm.has(o) // false\n```\n\n#### 9.4 WeakMap\n  WeakMap与Map的区别有两点。\n  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。\n  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。\n\n\n\n### 10.Promise \n#### 10.1 Promise对象有以下两个特点：\n<1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。\n<2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。\n```javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n```\n\n#### 10.2 Promise.all()\nPromise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n```javascript\n// 生成一个Promise对象的数组\nvar promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n```\n\nPromise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。\n\n\n#### 10.3 Promise.resolve\n作用是将现有对象转化为Promise对象\n```javascript\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\n#### 10.4 应用于加载图片\n```javascript\nconst preloadImage = function (path) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.onload  = resolve;\n    image.onerror = reject;\n    image.src = path;\n  });\n};\n```\n\n\n### 11.Iterator \n#### 11.1 Iterator 的作用有三个：\n一是为各种数据结构，提供一个统一的、简便的访问接口；\n二是使得数据结构的成员能够按某种次序排列；\n三是ES6创造了一种新的遍历命令for...of循环，Iterator接口主要供for...of消费。\n\nES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历\n```javascript\n//数组的Symbol.iterator属性\nlet arr = ['a', 'b', 'c'];\nlet iter = arr[Symbol.iterator]();\n\niter.next() // { value: 'a', done: false }\niter.next() // { value: 'b', done: false }\niter.next() // { value: 'c', done: false }\niter.next() // { value: undefined, done: true }\n```\n原生具备 Iterator 接口的数据结构如下。\n    Array\n    Map\n    Set\n    String\n    TypedArray\n    函数的 arguments 对象\n\n\n#### 11.2 for...of循环\n一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for...of循环遍历它的成员。\n```javascript\nconst arr = ['red', 'green', 'blue'];\n\nfor(let v of arr) {\n  console.log(v); // red green blue\n}\n\n//空对象obj部署了数组arr的Symbol.iterator属性\nconst obj = {};\nobj[Symbol.iterator] = arr[Symbol.iterator].bind(arr);\n\nfor(let v of obj) {\n  console.log(v); // red green blue\n}\n```\nfor...in循环读取键名，for...of循环读取键值。\n```javascript\nvar arr = ['a', 'b', 'c', 'd'];\n\nfor (let a in arr) {\n  console.log(a); // 0 1 2 3\n}\n\nfor (let a of arr) {\n  console.log(a); // a b c d\n}\n```\n计算生成的数据结构 entries(),keys(),values()\n```javascript\nlet arr = ['a', 'b', 'c'];\nfor (let pair of arr.entries()) {\n  console.log(pair);\n}\n// [0, 'a']\n// [1, 'b']\n// [2, 'c']\n```\n\n与其他遍历语法的比较\nfor:最原始的写法，较为麻烦\nforEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。\nfor...in:主要用于遍历对象，不适合遍历数组，for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。\n    某些情况下，for...in循环会以任意顺序遍历键名。\n\n\n### 12.Generator\n#### 12.1 Generator 函数是一个状态机，封装了多个内部状态。\n形式上，Generator 函数是一个普通函数，但是有两个特征。\n一是，function关键字与函数名之间有一个星号；\n二是，函数体内部使用yield表达式，定义不同的内部状态 \n```javascript\n//该函数有三个状态：hello，world 和 return 语句（结束执行）\nfunction* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象\nvar hw = helloWorldGenerator();\n\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n```\n\n#### 12.2 与 Iterator 接口的关系\n```javascript\nvar myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n```\n\n#### 12.3 Generator.prototype.return()\n```javascript\nfunction* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar g = gen();\n\ng.next()        // { value: 1, done: false }\ng.return('foo') // { value: \"foo\", done: true }\ng.next()        // { value: undefined, done: true }\n```\n\n#### 12.4 yield* 表达式\n用来在一个 Generator 函数里面执行另一个 Generator 函数。\n```javascript\nfunction* foo() {\n  yield 'a';\n  yield 'b';\n}\n\nfunction* bar() {\n  yield 'x';\n  yield* foo();\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  yield 'a';\n  yield 'b';\n  yield 'y';\n}\n\n// 等同于\nfunction* bar() {\n  yield 'x';\n  for (let v of foo()) {\n    yield v;\n  }\n  yield 'y';\n}\n\nfor (let v of bar()){\n  console.log(v);\n}\n// \"x\"\n// \"a\"\n// \"b\"\n// \"y\"\n```\n\n#### 12.5 应用\n通过 Generator 函数部署 Ajax 操作\n```javascript\nfunction* main() {\n  var result = yield request(\"http://some.url\");\n  var resp = JSON.parse(result);\n    console.log(resp.value);\n}\n//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的\nfunction request(url) {\n  makeAjaxCall(url, function(response){\n    it.next(response);\n  });\n}\n\nvar it = main();\nit.next();\n```\n控制流管理\n```javascript\n//多步操作\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n\n//采用 Promise 改写上面的代码。\nPromise.resolve(step1)\n  .then(step2)\n  .then(step3)\n  .then(step4)\n  .then(function (value4) {\n    // Do something with value4\n  }, function (error) {\n    // Handle any error from step1 through step4\n  })\n  .done();\n\n//Generator 函数可以进一步改善代码运行流程。（同步操作）\nfunction* longRunningTask(value1) {\n  try {\n    var value2 = yield step1(value1);\n    var value3 = yield step2(value2);\n    var value4 = yield step3(value3);\n    var value5 = yield step4(value4);\n    // Do something with value4\n  } catch (e) {\n    // Handle any error from step1 through step4\n  }\n}\n```\n\n### 13.async函数\nasync函数是Generator 函数的语法糖\n```javascript\nvar fs = require('fs');\n\nvar readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) reject(error);\n      resolve(data);\n    });\n  });\n};\n\nvar gen = function* () {\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n//写成async函数，就是下面这样。\nvar asyncReadFile = async function () {\n  var f1 = await readFile('/etc/fstab');\n  var f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\nasync函数对 Generator 函数的改进，体现在以下四点:\n<1>内置执行器\nGenerator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。\nvar result = asyncReadFile();\n<2>更好的语义\n<3>更广的适用性\n<4>返回值是Promise\n\n基本用法：\n```javascript\nasync function getStockPriceByName(name) {\n  var symbol = await getStockSymbol(name);\n  var stockPrice = await getStockPrice(symbol);\n  return stockPrice;\n}\n\ngetStockPriceByName('goog').then(function (result) {\n  console.log(result);\n});\n```\n实例：按顺序完成异步操作：\n<1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）\n```javascript\nfunction logInOrder(urls) {\n  // 远程读取所有URL\n  const textPromises = urls.map(url => {\n    return fetch(url).then(response => response.text());\n  });\n\n  // 按次序输出\n  textPromises.reduce((chain, textPromise) => {\n    return chain.then(() => textPromise)\n      .then(text => console.log(text));\n  }, Promise.resolve());\n}\n```\n<2>async 函数实现\n```javascript\nasync function logInOrder(urls) {\n  // 并发读取远程URL\n  const textPromises = urls.map(async url => {\n    const response = await fetch(url);\n    return response.text();\n  });\n\n  // 按次序输出\n  for (const textPromise of textPromises) {\n    console.log(await textPromise);\n  }\n}\n```\n### 14.Class\n#### 14.1 简介\nclass写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。\n```javascript\n//生成实例对象的传统方法是通过构造函数\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n\n//ES6写法\n//定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  //类的所有方法都定义在类的prototype属性上面\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```\n\n#### 14.2 Class 的静态方法\n加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用\n```javascript\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nFoo.classMethod() // 'hello'\n\nvar foo = new Foo();\nfoo.classMethod()\n// TypeError: foo.classMethod is not a function\n```\n父类的静态方法，可以被子类继承。\n\n#### 14.3 Class的继承\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。\n```javascript\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```\n\n<1>子类的__proto__属性，表示构造函数的继承，总是指向父类。\n<2>子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。\n```javascript\nclass A {\n}\n\nclass B extends A {\n}\n\nB.__proto__ === A // true\nB.prototype.__proto__ === A.prototype // true\n```\n\n\n### 15.Decorator\n修饰器（Decorator）是一个函数，用来修改类的行为。\n修饰器本质就是编译时执行的函数。\n```javascript\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable // true\n```\n\n如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。\n```javascript\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  }\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable // false\n```\n\n","slug":"ES6-01","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct37u0001nilwsw0kdbap","content":"<p>总结于：<a href=\"http://es6.ruanyifeng.com/#docs/\" target=\"_blank\" rel=\"external\">ECMAScript6入门</a></p>\n<h3 id=\"1-Babel转码器\"><a href=\"#1-Babel转码器\" class=\"headerlink\" title=\"1 Babel转码器\"></a>1 Babel转码器</h3><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 转码前</span></div><div class=\"line\">input.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item + <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 转码后</span></div><div class=\"line\">input.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-let和const\"><a href=\"#2-let和const\" class=\"headerlink\" title=\"2 let和const\"></a>2 let和const</h3><h4 id=\"2-1-let命令\"><a href=\"#2-1-let命令\" class=\"headerlink\" title=\"2.1 let命令\"></a>2.1 let命令</h4><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>\n<p>for循环的计数器，就很合适使用let命令。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(i);</div><div class=\"line\"><span class=\"comment\">//ReferenceError: i is not defined</span></div></pre></td></tr></table></figure></p>\n<p>注：(1)let不存在变量提升<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// let 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</div></pre></td></tr></table></figure></p>\n<p>(2)暂时性死区<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"comment\">//不受作用域外部影响</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3)不允许重复声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 报错</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 不报错</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(4)let实际上为 JavaScript 新增了块级作用域。<br>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IIFE 写法</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 块级作用域写法</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-const命令\"><a href=\"#2-2-const命令\" class=\"headerlink\" title=\"2.2 const命令\"></a>2.2 const命令</h4><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。<br>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为 foo 添加一个属性，可以成功</span></div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div><div class=\"line\">foo.prop <span class=\"comment\">// 123</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将 foo 指向另一个对象，就会报错</span></div><div class=\"line\">foo = &#123;&#125;; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//如果真的想将对象冻结，应该使用Object.freeze方法。</span></div><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</div><div class=\"line\"><span class=\"comment\">// 常规模式时，下面一行不起作用；</span></div><div class=\"line\"><span class=\"comment\">// 严格模式时，该行会报错</span></div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-变量的解构赋值\"><a href=\"#3-变量的解构赋值\" class=\"headerlink\" title=\"3 变量的解构赋值\"></a>3 变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<h4 id=\"3-1-数组的解构赋值\"><a href=\"#3-1-数组的解构赋值\" class=\"headerlink\" title=\"3.1 数组的解构赋值\"></a>3.1 数组的解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</div><div class=\"line\">foo <span class=\"comment\">// 1</span></div><div class=\"line\">bar <span class=\"comment\">// 2</span></div><div class=\"line\">baz <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</div><div class=\"line\">third <span class=\"comment\">// \"baz\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\">head <span class=\"comment\">// 1</span></div><div class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>];</div><div class=\"line\">x <span class=\"comment\">// \"a\"</span></div><div class=\"line\">y <span class=\"comment\">// undefined</span></div><div class=\"line\">z <span class=\"comment\">// []</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-2-对象的解构赋值\"><a href=\"#3-2-对象的解构赋值\" class=\"headerlink\" title=\"3.2 对象的解构赋值\"></a>3.2 对象的解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;; <span class=\"comment\">// SyntaxError: Duplicate declaration \"foo\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。</span></div><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\">(&#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;); <span class=\"comment\">// 成功</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//嵌套</span></div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">  p: [</div><div class=\"line\">    <span class=\"string\">'Hello'</span>,</div><div class=\"line\">    &#123; <span class=\"attr\">y</span>: <span class=\"string\">'World'</span> &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</div><div class=\"line\">x <span class=\"comment\">// \"Hello\"</span></div><div class=\"line\">y <span class=\"comment\">// \"World\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-3-字符串的解构赋值\"><a href=\"#3-3-字符串的解构赋值\" class=\"headerlink\" title=\"3.3 字符串的解构赋值\"></a>3.3 字符串的解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</div><div class=\"line\">a <span class=\"comment\">// \"h\"</span></div><div class=\"line\">b <span class=\"comment\">// \"e\"</span></div><div class=\"line\">c <span class=\"comment\">// \"l\"</span></div><div class=\"line\">d <span class=\"comment\">// \"l\"</span></div><div class=\"line\">e <span class=\"comment\">// \"o\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//对length属性解构赋值</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</div><div class=\"line\">len <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-字符串的扩展\"><a href=\"#4-字符串的扩展\" class=\"headerlink\" title=\"4 字符串的扩展\"></a>4 字符串的扩展</h3><h4 id=\"4-1-includes-startsWith-endsWith\"><a href=\"#4-1-includes-startsWith-endsWith\" class=\"headerlink\" title=\"4.1 includes(), startsWith(), endsWith()\"></a>4.1 includes(), startsWith(), endsWith()</h4><p>includes()：返回布尔值，表示是否找到了参数字符串。<br>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。<br>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这三个方法都支持第二个参数，表示开始搜索的位置。</span></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\"></div><div class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"4-2-repeat-表示将原字符串重复n次。\"><a href=\"#4-2-repeat-表示将原字符串重复n次。\" class=\"headerlink\" title=\"4.2 repeat() 表示将原字符串重复n次。\"></a>4.2 repeat() 表示将原字符串重复n次。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></div><div class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>) <span class=\"comment\">// \"hellohello\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>) <span class=\"comment\">// \"\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">NaN</span>) <span class=\"comment\">// \"\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-1</span>)<span class=\"comment\">// RangeError</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-3-padStart-，padEnd\"><a href=\"#4-3-padStart-，padEnd\" class=\"headerlink\" title=\"4.3 padStart()，padEnd()\"></a>4.3 padStart()，padEnd()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。</span></div><div class=\"line\"><span class=\"string\">'1'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000001\"</span></div><div class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000012\"</span></div><div class=\"line\"><span class=\"string\">'123456'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000123456\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//另一个用途是提示字符串格式。</span></div><div class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></div><div class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-4-模板字符串\"><a href=\"#4-4-模板字符串\" class=\"headerlink\" title=\"4.4 模板字符串\"></a>4.4 模板字符串</h4><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。<br>它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串中嵌入变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Bob\"</span>, time = <span class=\"string\">\"today\"</span>;</div><div class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>,   </span></div><div class=\"line\"><span class=\"string\">how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span>   </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;;</div><div class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;obj.x + obj.y&#125;</span>`</span><span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"string\">`foo <span class=\"subst\">$&#123;fn()&#125;</span> bar`</span><span class=\"comment\">// foo Hello World bar</span></div></pre></td></tr></table></figure></p>\n<p>模板字符串甚至还能嵌套。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> tmpl = <span class=\"function\"><span class=\"params\">addrs</span> =&gt;</span> <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">  &lt;table&gt;</span></div><div class=\"line\"><span class=\"string\">  <span class=\"subst\">$&#123;addrs.map(addr =&gt; <span class=\"string\">`</span></span></span></div><div class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></div><div class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></div><div class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  `</span>).join(<span class=\"string\">''</span>)&#125;</span></span></div><div class=\"line\"><span class=\"string\">  &lt;/table&gt;</span></div><div class=\"line\"><span class=\"string\">`</span>;</div><div class=\"line\"><span class=\"comment\">//使用方法</span></div><div class=\"line\"><span class=\"keyword\">const</span> data = [</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'&lt;Jane&gt;'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Bond'</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'Lars'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'&lt;Croft&gt;'</span> &#125;,</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(tmpl(data));</div><div class=\"line\"><span class=\"comment\">// &lt;table&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// &lt;/table&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写法一</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'return '</span> + <span class=\"string\">'`Hello $&#123;name&#125;!`'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'name'</span>, str);</div><div class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 写法二</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'(name) =&gt; `Hello $&#123;name&#125;!`'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"built_in\">eval</span>.call(<span class=\"literal\">null</span>, str);</div><div class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"5-函数的扩展\"><a href=\"#5-函数的扩展\" class=\"headerlink\" title=\"5.函数的扩展\"></a>5.函数的扩展</h3><h4 id=\"5-1-函数的默认值\"><a href=\"#5-1-函数的默认值\" class=\"headerlink\" title=\"5.1 函数的默认值\"></a>5.1 函数的默认值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通常情况下，定义了默认值的参数，应该是函数的尾参数。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">'World'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// Hello World</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//函数的 length 属性：将返回没有指定默认值的参数个数。</span></div><div class=\"line\">log.length <span class=\"comment\">//1</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-2-rest参数（形式为…变量名）\"><a href=\"#5-2-rest参数（形式为…变量名）\" class=\"headerlink\" title=\"5.2 rest参数（形式为…变量名）\"></a>5.2 rest参数（形式为…变量名）</h4><p>函数的length属性，不包括 rest 参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</div><div class=\"line\">    sum += val;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"5-3-箭头函数\"><a href=\"#5-3-箭头函数\" class=\"headerlink\" title=\"5.3 箭头函数\"></a>5.3 箭头函数</h4><p>箭头左边是参数，右边是返回值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> v;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>箭头函数有几个使用注意点。</p>\n<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>\n<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>\n<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>\n<p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//嵌套的箭头函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">into</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">after</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">afterValue</span>) </span>&#123;</div><div class=\"line\">      array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</div><div class=\"line\">      <span class=\"keyword\">return</span> array;</div><div class=\"line\">    &#125;&#125;;</div><div class=\"line\">  &#125;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"><span class=\"keyword\">let</span> insert = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> (&#123;<span class=\"attr\">into</span>: <span class=\"function\">(<span class=\"params\">array</span>) =&gt;</span> (&#123;<span class=\"attr\">after</span>: <span class=\"function\">(<span class=\"params\">afterValue</span>) =&gt;</span> &#123;</div><div class=\"line\">  array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</div><div class=\"line\">  <span class=\"keyword\">return</span> array;</div><div class=\"line\">&#125;&#125;)&#125;);</div><div class=\"line\"></div><div class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-4-尾调用优化\"><a href=\"#5-4-尾调用优化\" class=\"headerlink\" title=\"5.4 尾调用优化\"></a>5.4 尾调用优化</h4><p>尾调用指某个函数的最后一步是调用另一个函数<br>“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。<br>如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> g(x);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>尾递归<br>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>\n<p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。<br>但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</p>\n<h3 id=\"6-数组的扩展\"><a href=\"#6-数组的扩展\" class=\"headerlink\" title=\"6.数组的扩展\"></a>6.数组的扩展</h3><h4 id=\"6-1-扩展运算符（…）\"><a href=\"#6-1-扩展运算符（…）\" class=\"headerlink\" title=\"6.1 扩展运算符（…）\"></a>6.1 扩展运算符（…）</h4><p>该运算符主要用于函数调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5 的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">f(...args);</div></pre></td></tr></table></figure></p>\n<p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5的 写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6 的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">arr1.push(...arr2);</div></pre></td></tr></table></figure></p>\n<p>扩展运算符的应用：</p>\n<p><1>合并数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more)</div><div class=\"line\"><span class=\"comment\">// ES6</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES5的合并数组</span></div><div class=\"line\">arr1.concat(arr2, arr3);</div><div class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的合并数组</span></div><div class=\"line\">[...arr1, ...arr2, ...arr3]</div><div class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div></pre></td></tr></table></figure></1></p>\n<p><2>与解构赋值结合<br>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">first <span class=\"comment\">// 1</span></div><div class=\"line\">rest  <span class=\"comment\">// [2, 3, 4, 5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [];</div><div class=\"line\">first <span class=\"comment\">// undefined</span></div><div class=\"line\">rest  <span class=\"comment\">// []</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"string\">\"foo\"</span>];</div><div class=\"line\">first  <span class=\"comment\">// \"foo\"</span></div><div class=\"line\">rest   <span class=\"comment\">// []</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [...butLast, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure></2></p>\n<p><3>字符串<br>扩展运算符还可以将字符串转为真正的数组。<br>能够正确识别32位的Unicode字符。<br>正确返回字符串长度的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[...<span class=\"string\">'hello'</span>]</div><div class=\"line\"><span class=\"comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [...str].length;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">length(<span class=\"string\">'x\\uD83D\\uDE80y'</span>) <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure></3></p>\n<h4 id=\"6-2-Array-from\"><a href=\"#6-2-Array-from\" class=\"headerlink\" title=\"6.2 Array.from()\"></a>6.2 Array.from()</h4><p>Array.from方法用于将两类对象转为真正的数组：<br>类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// NodeList对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> ps = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'p'</span>);</div><div class=\"line\"><span class=\"built_in\">Array</span>.from(ps).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(p);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// arguments对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>扩展运算符（…）也可以将某些数据结构转为数组。<br>区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p>\n<p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike, x =&gt; x * x);</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (x) =&gt; x * x)</div><div class=\"line\"><span class=\"comment\">// [1, 4, 9]</span></div></pre></td></tr></table></figure></p>\n<p>下面的例子是取出一组DOM节点的文本内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> spans = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'span.name'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// map()</span></div><div class=\"line\"><span class=\"keyword\">let</span> names1 = <span class=\"built_in\">Array</span>.prototype.map.call(spans, s =&gt; s.textContent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Array.from()</span></div><div class=\"line\"><span class=\"keyword\">let</span> names2 = <span class=\"built_in\">Array</span>.from(spans, s =&gt; s.textContent)</div></pre></td></tr></table></figure></p>\n<p>下面的例子将数组中布尔值为false的成员转为0。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, , <span class=\"number\">2</span>, , <span class=\"number\">3</span>], (n) =&gt; n || <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// [1, 0, 2, 0, 3]</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"6-3-Array-of\"><a href=\"#6-3-Array-of\" class=\"headerlink\" title=\"6.3 Array.of()\"></a>6.3 Array.of()</h4><p>Array.of方法用于将一组值，转换为数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>).length <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"6-4-数组实例的-find-和-findIndex\"><a href=\"#6-4-数组实例的-find-和-findIndex\" class=\"headerlink\" title=\"6.4 数组实例的 find() 和 findIndex()\"></a>6.4 数组实例的 find() 和 findIndex()</h4><p>数组实例的find方法，用于找出第一个符合条件的数组成员。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">-5</span>, <span class=\"number\">10</span>].find(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n &lt; <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// -5</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</div><div class=\"line\">&#125;) <span class=\"comment\">// 10</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</div><div class=\"line\">&#125;) <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"6-5-数组实例的fill\"><a href=\"#6-5-数组实例的fill\" class=\"headerlink\" title=\"6.5 数组实例的fill()\"></a>6.5 数组实例的fill()</h4><p>fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>)</div><div class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// ['a', 7, 'c']</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"6-6-数组实例的-entries-，keys-和-values\"><a href=\"#6-6-数组实例的-entries-，keys-和-values\" class=\"headerlink\" title=\"6.6 数组实例的 entries()，keys() 和 values()\"></a>6.6 数组实例的 entries()，keys() 和 values()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(index);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 'a'</span></div><div class=\"line\"><span class=\"comment\">// 'b'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0 \"a\"</span></div><div class=\"line\"><span class=\"comment\">// 1 \"b\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"7-对象的扩展\"><a href=\"#7-对象的扩展\" class=\"headerlink\" title=\"7.对象的扩展\"></a>7.对象的扩展</h3><h4 id=\"7-1-Object-is\"><a href=\"#7-1-Object-is\" class=\"headerlink\" title=\"7.1 Object.is()\"></a>7.1 Object.is()</h4><p>与严格比较运算符（===）的行为基本一致。<br>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span> <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"7-2-Object-assign\"><a href=\"#7-2-Object-assign\" class=\"headerlink\" title=\"7.2 Object.assign()\"></a>7.2 Object.assign()</h4><p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。<br>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</div><div class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></div></pre></td></tr></table></figure></p>\n<p>Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。<br>Object.assign方法实行的是浅拷贝，而不是深拷贝。</p>\n<p>Object.assign方法有很多用处。</p>\n<p><1>为对象添加属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;x, y&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></1></p>\n<p><2>为对象添加方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.assign(SomeClass.prototype, &#123;</div><div class=\"line\">  someMethod(arg1, arg2) &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;,</div><div class=\"line\">  anotherMethod() &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于下面的写法</span></div><div class=\"line\">SomeClass.prototype.someMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</div><div class=\"line\">  ···</div><div class=\"line\">&#125;;</div><div class=\"line\">SomeClass.prototype.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  ···</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></2></p>\n<p><3>克隆对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, origin);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></3></p>\n<p><4>合并多个对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> merge =</div><div class=\"line\">  (target, ...sources) =&gt; <span class=\"built_in\">Object</span>.assign(target, ...sources);</div></pre></td></tr></table></figure></4></p>\n<p><5>为属性指定默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> DEFAULTS = &#123;</div><div class=\"line\">  logLevel: <span class=\"number\">0</span>,</div><div class=\"line\">  outputFormat: <span class=\"string\">'html'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processContent</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">  options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(options);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></5></p>\n<h4 id=\"7-3-属性的可枚举性\"><a href=\"#7-3-属性的可枚举性\" class=\"headerlink\" title=\"7.3 属性的可枚举性\"></a>7.3 属性的可枚举性</h4><p>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<br>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'foo'</span>)</div><div class=\"line\"><span class=\"comment\">//  &#123;</span></div><div class=\"line\"><span class=\"comment\">//    value: 123,</span></div><div class=\"line\"><span class=\"comment\">//    writable: true,</span></div><div class=\"line\"><span class=\"comment\">//    enumerable: true, 可枚举性</span></div><div class=\"line\"><span class=\"comment\">//    configurable: true</span></div><div class=\"line\"><span class=\"comment\">//  &#125;</span></div></pre></td></tr></table></figure></p>\n<p>ES5 有三个操作会忽略enumerable为false的属性。<br>  for…in循环：只遍历对象自身的和继承的可枚举的属性<br>  Object.keys()：返回对象自身的所有可枚举的属性的键名<br>  JSON.stringify()：只串行化对象自身的可枚举的属性<br>ES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。<br>尽量不要用for…in循环，而用Object.keys()代替。</p>\n<h4 id=\"7-4-属性的遍历\"><a href=\"#7-4-属性的遍历\" class=\"headerlink\" title=\"7.4 属性的遍历\"></a>7.4 属性的遍历</h4><p>ES6 一共有5种方法可以遍历对象的属性。</p>\n<p><1>for…in</1></p>\n<p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p>\n<p><2>Object.keys(obj)</2></p>\n<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。</p>\n<p><3>Object.getOwnPropertyNames(obj)</3></p>\n<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。</p>\n<p><4>Object.getOwnPropertySymbols(obj)</4></p>\n<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。</p>\n<p><5>Reflect.ownKeys(obj)</5></p>\n<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。</p>\n<h4 id=\"7-5-proto属性\"><a href=\"#7-5-proto属性\" class=\"headerlink\" title=\"7.5 proto属性\"></a>7.5 <strong>proto</strong>属性</h4><p>无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的<br>Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> proto = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, proto);</div><div class=\"line\"></div><div class=\"line\">proto.y = <span class=\"number\">20</span>;</div><div class=\"line\">proto.z = <span class=\"number\">40</span>;</div><div class=\"line\"></div><div class=\"line\">obj.x <span class=\"comment\">// 10</span></div><div class=\"line\">obj.y <span class=\"comment\">// 20</span></div><div class=\"line\">obj.z <span class=\"comment\">// 40</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"7-6-Object-keys-，Object-values-，Object-entries\"><a href=\"#7-6-Object-keys-，Object-values-，Object-entries\" class=\"headerlink\" title=\"7.6 Object.keys()，Object.values()，Object.entries()\"></a>7.6 Object.keys()，Object.values()，Object.entries()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\"><span class=\"comment\">// [\"foo\", \"baz\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</div><div class=\"line\"><span class=\"comment\">// [\"bar\", 42]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.entries(obj)</div><div class=\"line\"><span class=\"comment\">// [ [\"foo\", \"bar\"], [\"baz\", 42] ]</span></div></pre></td></tr></table></figure>\n<h4 id=\"7-7-Null-传导运算符\"><a href=\"#7-7-Null-传导运算符\" class=\"headerlink\" title=\"7.7 Null 传导运算符\"></a>7.7 Null 传导运算符</h4><p>如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。<br>比如，要读取message.body.user.firstName，安全的写法是写成下面这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> firstName = (message</div><div class=\"line\">  &amp;&amp; message.body</div><div class=\"line\">  &amp;&amp; message.body.user</div><div class=\"line\">  &amp;&amp; message.body.user.firstName) || <span class=\"string\">'default'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”</span></div><div class=\"line\"><span class=\"keyword\">const</span> firstName = message?.body?.user?.firstName || <span class=\"string\">'default'</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"8-Symbol\"><a href=\"#8-Symbol\" class=\"headerlink\" title=\"8.Symbol\"></a>8.Symbol</h3><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'bar'</span>);</div><div class=\"line\"></div><div class=\"line\">s1 <span class=\"comment\">// Symbol(foo)</span></div><div class=\"line\">s2 <span class=\"comment\">// Symbol(bar)</span></div><div class=\"line\"></div><div class=\"line\">s1.toString() <span class=\"comment\">// \"Symbol(foo)\"</span></div><div class=\"line\">s2.toString() <span class=\"comment\">// \"Symbol(bar)\"</span></div></pre></td></tr></table></figure></p>\n<p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p>\n<p>Symbol.for():重新使用同一个Symbol值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</div><div class=\"line\"></div><div class=\"line\">s1 === s2 <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。</p>\n<p>Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"foo\"</span>);</div><div class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s1) <span class=\"comment\">// \"foo\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"foo\"</span>);</div><div class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s2) <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"9-Set和Map\"><a href=\"#9-Set和Map\" class=\"headerlink\" title=\"9.Set和Map\"></a>9.Set和Map</h3><h4 id=\"9-1-Set类似于数组，但是成员的值都是唯一的，没有重复的值。\"><a href=\"#9-1-Set类似于数组，但是成员的值都是唯一的，没有重复的值。\" class=\"headerlink\" title=\"9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。\"></a>9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 例一</span></div><div class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>]);</div><div class=\"line\">[...set]</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 例二</span></div><div class=\"line\"><span class=\"keyword\">const</span> items = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</div><div class=\"line\">items.size <span class=\"comment\">// 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 去除数组的重复成员</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> unique = [...new <span class=\"built_in\">Set</span>(arr)];<span class=\"comment\">// [3, 5, 2]</span></div></pre></td></tr></table></figure>\n<p>Set的操作方法：<br>  add(value)：添加某个值，返回Set结构本身。<br>  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>  has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>  clear()：清除所有成员，没有返回值。</p>\n<p>Set的遍历方法：<br>  keys()：返回键名的遍历器<br>  values()：返回键值的遍历器<br>  entries()：返回键值对的遍历器<br>  forEach()：使用回调函数遍历每个成员</p>\n<h4 id=\"9-2-WeakSet：\"><a href=\"#9-2-WeakSet：\" class=\"headerlink\" title=\"9.2 WeakSet：\"></a>9.2 WeakSet：</h4><p>  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。<br>  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br>  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p>\n<h4 id=\"9-3-Map\"><a href=\"#9-3-Map\" class=\"headerlink\" title=\"9.3 Map\"></a>9.3 Map</h4><p>Map类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\"><span class=\"keyword\">const</span> o = &#123;<span class=\"attr\">p</span>: <span class=\"string\">'Hello World'</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">m.set(o, <span class=\"string\">'content'</span>)</div><div class=\"line\">m.get(o) <span class=\"comment\">// \"content\"</span></div><div class=\"line\"></div><div class=\"line\">m.has(o) <span class=\"comment\">// true</span></div><div class=\"line\">m.delete(o) <span class=\"comment\">// true</span></div><div class=\"line\">m.has(o) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"9-4-WeakMap\"><a href=\"#9-4-WeakMap\" class=\"headerlink\" title=\"9.4 WeakMap\"></a>9.4 WeakMap</h4><p>  WeakMap与Map的区别有两点。<br>  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。</p>\n<h3 id=\"10-Promise\"><a href=\"#10-Promise\" class=\"headerlink\" title=\"10.Promise\"></a>10.Promise</h3><h4 id=\"10-1-Promise对象有以下两个特点：\"><a href=\"#10-1-Promise对象有以下两个特点：\" class=\"headerlink\" title=\"10.1 Promise对象有以下两个特点：\"></a>10.1 Promise对象有以下两个特点：</h4><p><1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。</1></p>\n<p><2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ... some code</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</div><div class=\"line\">    resolve(value);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    reject(error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</span></div><div class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// failure</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></2></p>\n<h4 id=\"10-2-Promise-all\"><a href=\"#10-2-Promise-all\" class=\"headerlink\" title=\"10.2 Promise.all()\"></a>10.2 Promise.all()</h4><p>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 生成一个Promise对象的数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> promises = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> getJSON(<span class=\"string\">'/post/'</span> + id + <span class=\"string\">\".json\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all(promises).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Promise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。</p>\n<h4 id=\"10-3-Promise-resolve\"><a href=\"#10-3-Promise-resolve\" class=\"headerlink\" title=\"10.3 Promise.resolve\"></a>10.3 Promise.resolve</h4><p>作用是将现有对象转化为Promise对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">'foo'</span>))</div></pre></td></tr></table></figure></p>\n<h4 id=\"10-4-应用于加载图片\"><a href=\"#10-4-应用于加载图片\" class=\"headerlink\" title=\"10.4 应用于加载图片\"></a>10.4 应用于加载图片</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> preloadImage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">    image.onload  = resolve;</div><div class=\"line\">    image.onerror = reject;</div><div class=\"line\">    image.src = path;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"11-Iterator\"><a href=\"#11-Iterator\" class=\"headerlink\" title=\"11.Iterator\"></a>11.Iterator</h3><h4 id=\"11-1-Iterator-的作用有三个：\"><a href=\"#11-1-Iterator-的作用有三个：\" class=\"headerlink\" title=\"11.1 Iterator 的作用有三个：\"></a>11.1 Iterator 的作用有三个：</h4><p>一是为各种数据结构，提供一个统一的、简便的访问接口；<br>二是使得数据结构的成员能够按某种次序排列；<br>三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</p>\n<p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//数组的Symbol.iterator属性</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> iter = arr[<span class=\"built_in\">Symbol</span>.iterator]();</div><div class=\"line\"></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'a', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'b', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'c', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>原生具备 Iterator 接口的数据结构如下。<br>    Array<br>    Map<br>    Set<br>    String<br>    TypedArray<br>    函数的 arguments 对象</p>\n<h4 id=\"11-2-for…of循环\"><a href=\"#11-2-for…of循环\" class=\"headerlink\" title=\"11.2 for…of循环\"></a>11.2 for…of循环</h4><p>一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// red green blue</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//空对象obj部署了数组arr的Symbol.iterator属性</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</div><div class=\"line\">obj[<span class=\"built_in\">Symbol</span>.iterator] = arr[<span class=\"built_in\">Symbol</span>.iterator].bind(arr);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> obj) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// red green blue</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>for…in循环读取键名，for…of循环读取键值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 0 1 2 3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// a b c d</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>计算生成的数据结构 entries(),keys(),values()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pair <span class=\"keyword\">of</span> arr.entries()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(pair);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// [0, 'a']</span></div><div class=\"line\"><span class=\"comment\">// [1, 'b']</span></div><div class=\"line\"><span class=\"comment\">// [2, 'c']</span></div></pre></td></tr></table></figure></p>\n<p>与其他遍历语法的比较<br>for:最原始的写法，较为麻烦<br>forEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。<br>for…in:主要用于遍历对象，不适合遍历数组，for…in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。<br>    某些情况下，for…in循环会以任意顺序遍历键名。</p>\n<h3 id=\"12-Generator\"><a href=\"#12-Generator\" class=\"headerlink\" title=\"12.Generator\"></a>12.Generator</h3><h4 id=\"12-1-Generator-函数是一个状态机，封装了多个内部状态。\"><a href=\"#12-1-Generator-函数是一个状态机，封装了多个内部状态。\" class=\"headerlink\" title=\"12.1 Generator 函数是一个状态机，封装了多个内部状态。\"></a>12.1 Generator 函数是一个状态机，封装了多个内部状态。</h4><p>形式上，Generator 函数是一个普通函数，但是有两个特征。<br>一是，function关键字与函数名之间有一个星号；<br>二是，函数体内部使用yield表达式，定义不同的内部状态<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//该函数有三个状态：hello，world 和 return 语句（结束执行）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator();</div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'hello', done: false &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'world', done: false &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'ending', done: true &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"12-2-与-Iterator-接口的关系\"><a href=\"#12-2-与-Iterator-接口的关系\" class=\"headerlink\" title=\"12.2 与 Iterator 接口的关系\"></a>12.2 与 Iterator 接口的关系</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myIterable = &#123;&#125;;</div><div class=\"line\">myIterable[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">[...myIterable] <span class=\"comment\">// [1, 2, 3]</span></div></pre></td></tr></table></figure>\n<h4 id=\"12-3-Generator-prototype-return\"><a href=\"#12-3-Generator-prototype-return\" class=\"headerlink\" title=\"12.3 Generator.prototype.return()\"></a>12.3 Generator.prototype.return()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = gen();</div><div class=\"line\"></div><div class=\"line\">g.next()        <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></div><div class=\"line\">g.return(<span class=\"string\">'foo'</span>) <span class=\"comment\">// &#123; value: \"foo\", done: true &#125;</span></div><div class=\"line\">g.next()        <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"12-4-yield-表达式\"><a href=\"#12-4-yield-表达式\" class=\"headerlink\" title=\"12.4 yield* 表达式\"></a>12.4 yield* 表达式</h4><p>用来在一个 Generator 函数里面执行另一个 Generator 函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* foo();</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> v;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> bar())&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// \"x\"</span></div><div class=\"line\"><span class=\"comment\">// \"a\"</span></div><div class=\"line\"><span class=\"comment\">// \"b\"</span></div><div class=\"line\"><span class=\"comment\">// \"y\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"12-5-应用\"><a href=\"#12-5-应用\" class=\"headerlink\" title=\"12.5 应用\"></a>12.5 应用</h4><p>通过 Generator 函数部署 Ajax 操作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">yield</span> request(<span class=\"string\">\"http://some.url\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse(result);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(resp.value);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  makeAjaxCall(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    it.next(response);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = main();</div><div class=\"line\">it.next();</div></pre></td></tr></table></figure></p>\n<p>控制流管理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//多步操作</span></div><div class=\"line\">step1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">  step2(value1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) </span>&#123;</div><div class=\"line\">    step3(value2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) </span>&#123;</div><div class=\"line\">      step4(value3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//采用 Promise 改写上面的代码。</span></div><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(step1)</div><div class=\"line\">  .then(step2)</div><div class=\"line\">  .then(step3)</div><div class=\"line\">  .then(step4)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  .done();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Generator 函数可以进一步改善代码运行流程。（同步操作）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">longRunningTask</span>(<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value2 = <span class=\"keyword\">yield</span> step1(value1);</div><div class=\"line\">    <span class=\"keyword\">var</span> value3 = <span class=\"keyword\">yield</span> step2(value2);</div><div class=\"line\">    <span class=\"keyword\">var</span> value4 = <span class=\"keyword\">yield</span> step3(value3);</div><div class=\"line\">    <span class=\"keyword\">var</span> value5 = <span class=\"keyword\">yield</span> step4(value4);</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"13-async函数\"><a href=\"#13-async函数\" class=\"headerlink\" title=\"13.async函数\"></a>13.async函数</h3><p>async函数是Generator 函数的语法糖<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (error) reject(error);</div><div class=\"line\">      resolve(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//写成async函数，就是下面这样。</span></div><div class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>async函数对 Generator 函数的改进，体现在以下四点:</p>\n<p><1>内置执行器<br>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。<br>var result = asyncReadFile();</1></p>\n<p><2>更好的语义</2></p>\n<p><3>更广的适用性</3></p>\n<p><4>返回值是Promise</4></p>\n<p>基本用法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStockPriceByName</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> symbol = <span class=\"keyword\">await</span> getStockSymbol(name);</div><div class=\"line\">  <span class=\"keyword\">var</span> stockPrice = <span class=\"keyword\">await</span> getStockPrice(symbol);</div><div class=\"line\">  <span class=\"keyword\">return</span> stockPrice;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getStockPriceByName(<span class=\"string\">'goog'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>实例：按顺序完成异步操作：</p>\n<p><1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logInOrder</span>(<span class=\"params\">urls</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 远程读取所有URL</span></div><div class=\"line\">  <span class=\"keyword\">const</span> textPromises = urls.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(url).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.text());</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 按次序输出</span></div><div class=\"line\">  textPromises.reduce(<span class=\"function\">(<span class=\"params\">chain, textPromise</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> chain.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> textPromise)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">text</span> =&gt;</span> <span class=\"built_in\">console</span>.log(text));</div><div class=\"line\">  &#125;, <span class=\"built_in\">Promise</span>.resolve());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></1></p>\n<p><2>async 函数实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logInOrder</span>(<span class=\"params\">urls</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 并发读取远程URL</span></div><div class=\"line\">  <span class=\"keyword\">const</span> textPromises = urls.map(<span class=\"keyword\">async</span> url =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</div><div class=\"line\">    <span class=\"keyword\">return</span> response.text();</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 按次序输出</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> textPromise <span class=\"keyword\">of</span> textPromises) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> textPromise);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></2></p>\n<h3 id=\"14-Class\"><a href=\"#14-Class\" class=\"headerlink\" title=\"14.Class\"></a>14.Class</h3><h4 id=\"14-1-简介\"><a href=\"#14-1-简介\" class=\"headerlink\" title=\"14.1 简介\"></a>14.1 简介</h4><p>class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//生成实例对象的传统方法是通过构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">  <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ES6写法</span></div><div class=\"line\"><span class=\"comment\">//定义类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//类的所有方法都定义在类的prototype属性上面</span></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"14-2-Class-的静态方法\"><a href=\"#14-2-Class-的静态方法\" class=\"headerlink\" title=\"14.2 Class 的静态方法\"></a>14.2 Class 的静态方法</h4><p>加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> classMethod() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Foo.classMethod() <span class=\"comment\">// 'hello'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">foo.classMethod()</div><div class=\"line\"><span class=\"comment\">// TypeError: foo.classMethod is not a function</span></div></pre></td></tr></table></figure></p>\n<p>父类的静态方法，可以被子类继承。</p>\n<h4 id=\"14-3-Class的继承\"><a href=\"#14-3-Class的继承\" class=\"headerlink\" title=\"14.3 Class的继承\"></a>14.3 Class的继承</h4><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y, color) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(x, y); <span class=\"comment\">// 调用父类的constructor(x, y)</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color + <span class=\"string\">' '</span> + <span class=\"keyword\">super</span>.toString(); <span class=\"comment\">// 调用父类的toString()</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><1>子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。</1></p>\n<p><2>子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">B.__proto__ === A <span class=\"comment\">// true</span></div><div class=\"line\">B.prototype.__proto__ === A.prototype <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></2></p>\n<h3 id=\"15-Decorator\"><a href=\"#15-Decorator\" class=\"headerlink\" title=\"15.Decorator\"></a>15.Decorator</h3><p>修饰器（Decorator）是一个函数，用来修改类的行为。<br>修饰器本质就是编译时执行的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@testable</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">  target.isTestable = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">isTestable</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">    target.isTestable = isTestable;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@testable(<span class=\"literal\">true</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</div><div class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">@testable(<span class=\"literal\">false</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</div><div class=\"line\">MyClass.isTestable <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>总结于：<a href=\"http://es6.ruanyifeng.com/#docs/\" target=\"_blank\" rel=\"external\">ECMAScript6入门</a></p>\n<h3 id=\"1-Babel转码器\"><a href=\"#1-Babel转码器\" class=\"headerlink\" title=\"1 Babel转码器\"></a>1 Babel转码器</h3><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 转码前</span></div><div class=\"line\">input.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item + <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 转码后</span></div><div class=\"line\">input.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> item + <span class=\"number\">1</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-let和const\"><a href=\"#2-let和const\" class=\"headerlink\" title=\"2 let和const\"></a>2 let和const</h3><h4 id=\"2-1-let命令\"><a href=\"#2-1-let命令\" class=\"headerlink\" title=\"2.1 let命令\"></a>2.1 let命令</h4><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>\n<p>for循环的计数器，就很合适使用let命令。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(i);</div><div class=\"line\"><span class=\"comment\">//ReferenceError: i is not defined</span></div></pre></td></tr></table></figure></p>\n<p>注：(1)let不存在变量提升<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// var 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 输出undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// let 的情况</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// 报错ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> bar = <span class=\"number\">2</span>;</div></pre></td></tr></table></figure></p>\n<p>(2)暂时性死区<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"comment\">//不受作用域外部影响</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">  tmp = <span class=\"string\">'abc'</span>; <span class=\"comment\">// ReferenceError</span></div><div class=\"line\">  <span class=\"keyword\">let</span> tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3)不允许重复声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 报错</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> arg; <span class=\"comment\">// 不报错</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(4)let实际上为 JavaScript 新增了块级作用域。<br>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IIFE 写法</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 块级作用域写法</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> tmp = ...;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-2-const命令\"><a href=\"#2-2-const命令\" class=\"headerlink\" title=\"2.2 const命令\"></a>2.2 const命令</h4><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。<br>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> foo = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 为 foo 添加一个属性，可以成功</span></div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div><div class=\"line\">foo.prop <span class=\"comment\">// 123</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将 foo 指向另一个对象，就会报错</span></div><div class=\"line\">foo = &#123;&#125;; <span class=\"comment\">// TypeError: \"foo\" is read-only</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//如果真的想将对象冻结，应该使用Object.freeze方法。</span></div><div class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"built_in\">Object</span>.freeze(&#123;&#125;);</div><div class=\"line\"><span class=\"comment\">// 常规模式时，下面一行不起作用；</span></div><div class=\"line\"><span class=\"comment\">// 严格模式时，该行会报错</span></div><div class=\"line\">foo.prop = <span class=\"number\">123</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-变量的解构赋值\"><a href=\"#3-变量的解构赋值\" class=\"headerlink\" title=\"3 变量的解构赋值\"></a>3 变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<h4 id=\"3-1-数组的解构赋值\"><a href=\"#3-1-数组的解构赋值\" class=\"headerlink\" title=\"3.1 数组的解构赋值\"></a>3.1 数组的解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</div><div class=\"line\">foo <span class=\"comment\">// 1</span></div><div class=\"line\">bar <span class=\"comment\">// 2</span></div><div class=\"line\">baz <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</div><div class=\"line\">third <span class=\"comment\">// \"baz\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\">head <span class=\"comment\">// 1</span></div><div class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>];</div><div class=\"line\">x <span class=\"comment\">// \"a\"</span></div><div class=\"line\">y <span class=\"comment\">// undefined</span></div><div class=\"line\">z <span class=\"comment\">// []</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-2-对象的解构赋值\"><a href=\"#3-2-对象的解构赋值\" class=\"headerlink\" title=\"3.2 对象的解构赋值\"></a>3.2 对象的解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;; <span class=\"comment\">// SyntaxError: Duplicate declaration \"foo\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。</span></div><div class=\"line\"><span class=\"keyword\">let</span> foo;</div><div class=\"line\">(&#123;foo&#125; = &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>&#125;); <span class=\"comment\">// 成功</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//嵌套</span></div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">  p: [</div><div class=\"line\">    <span class=\"string\">'Hello'</span>,</div><div class=\"line\">    &#123; <span class=\"attr\">y</span>: <span class=\"string\">'World'</span> &#125;</div><div class=\"line\">  ]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</div><div class=\"line\">x <span class=\"comment\">// \"Hello\"</span></div><div class=\"line\">y <span class=\"comment\">// \"World\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"3-3-字符串的解构赋值\"><a href=\"#3-3-字符串的解构赋值\" class=\"headerlink\" title=\"3.3 字符串的解构赋值\"></a>3.3 字符串的解构赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</div><div class=\"line\">a <span class=\"comment\">// \"h\"</span></div><div class=\"line\">b <span class=\"comment\">// \"e\"</span></div><div class=\"line\">c <span class=\"comment\">// \"l\"</span></div><div class=\"line\">d <span class=\"comment\">// \"l\"</span></div><div class=\"line\">e <span class=\"comment\">// \"o\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//对length属性解构赋值</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</div><div class=\"line\">len <span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-字符串的扩展\"><a href=\"#4-字符串的扩展\" class=\"headerlink\" title=\"4 字符串的扩展\"></a>4 字符串的扩展</h3><h4 id=\"4-1-includes-startsWith-endsWith\"><a href=\"#4-1-includes-startsWith-endsWith\" class=\"headerlink\" title=\"4.1 includes(), startsWith(), endsWith()\"></a>4.1 includes(), startsWith(), endsWith()</h4><p>includes()：返回布尔值，表示是否找到了参数字符串。<br>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。<br>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这三个方法都支持第二个参数，表示开始搜索的位置。</span></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\"></div><div class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></div><div class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"4-2-repeat-表示将原字符串重复n次。\"><a href=\"#4-2-repeat-表示将原字符串重复n次。\" class=\"headerlink\" title=\"4.2 repeat() 表示将原字符串重复n次。\"></a>4.2 repeat() 表示将原字符串重复n次。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></div><div class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>) <span class=\"comment\">// \"hellohello\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>) <span class=\"comment\">// \"\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">NaN</span>) <span class=\"comment\">// \"\"</span></div><div class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-1</span>)<span class=\"comment\">// RangeError</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-3-padStart-，padEnd\"><a href=\"#4-3-padStart-，padEnd\" class=\"headerlink\" title=\"4.3 padStart()，padEnd()\"></a>4.3 padStart()，padEnd()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。</span></div><div class=\"line\"><span class=\"string\">'1'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000001\"</span></div><div class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000012\"</span></div><div class=\"line\"><span class=\"string\">'123456'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000123456\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//另一个用途是提示字符串格式。</span></div><div class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></div><div class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-4-模板字符串\"><a href=\"#4-4-模板字符串\" class=\"headerlink\" title=\"4.4 模板字符串\"></a>4.4 模板字符串</h4><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。<br>它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串中嵌入变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"Bob\"</span>, time = <span class=\"string\">\"today\"</span>;</div><div class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>,   </span></div><div class=\"line\"><span class=\"string\">how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span>   </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;;</div><div class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;obj.x + obj.y&#125;</span>`</span><span class=\"comment\">// 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"string\">`foo <span class=\"subst\">$&#123;fn()&#125;</span> bar`</span><span class=\"comment\">// foo Hello World bar</span></div></pre></td></tr></table></figure></p>\n<p>模板字符串甚至还能嵌套。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> tmpl = <span class=\"function\"><span class=\"params\">addrs</span> =&gt;</span> <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">  &lt;table&gt;</span></div><div class=\"line\"><span class=\"string\">  <span class=\"subst\">$&#123;addrs.map(addr =&gt; <span class=\"string\">`</span></span></span></div><div class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></div><div class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></div><div class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  `</span>).join(<span class=\"string\">''</span>)&#125;</span></span></div><div class=\"line\"><span class=\"string\">  &lt;/table&gt;</span></div><div class=\"line\"><span class=\"string\">`</span>;</div><div class=\"line\"><span class=\"comment\">//使用方法</span></div><div class=\"line\"><span class=\"keyword\">const</span> data = [</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'&lt;Jane&gt;'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Bond'</span> &#125;,</div><div class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'Lars'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'&lt;Croft&gt;'</span> &#125;,</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(tmpl(data));</div><div class=\"line\"><span class=\"comment\">// &lt;table&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// &lt;/table&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 写法一</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'return '</span> + <span class=\"string\">'`Hello $&#123;name&#125;!`'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">'name'</span>, str);</div><div class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 写法二</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'(name) =&gt; `Hello $&#123;name&#125;!`'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"built_in\">eval</span>.call(<span class=\"literal\">null</span>, str);</div><div class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"5-函数的扩展\"><a href=\"#5-函数的扩展\" class=\"headerlink\" title=\"5.函数的扩展\"></a>5.函数的扩展</h3><h4 id=\"5-1-函数的默认值\"><a href=\"#5-1-函数的默认值\" class=\"headerlink\" title=\"5.1 函数的默认值\"></a>5.1 函数的默认值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//通常情况下，定义了默认值的参数，应该是函数的尾参数。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">x, y = <span class=\"string\">'World'</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">log(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// Hello World</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//函数的 length 属性：将返回没有指定默认值的参数个数。</span></div><div class=\"line\">log.length <span class=\"comment\">//1</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-2-rest参数（形式为…变量名）\"><a href=\"#5-2-rest参数（形式为…变量名）\" class=\"headerlink\" title=\"5.2 rest参数（形式为…变量名）\"></a>5.2 rest参数（形式为…变量名）</h4><p>函数的length属性，不包括 rest 参数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</div><div class=\"line\">    sum += val;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"5-3-箭头函数\"><a href=\"#5-3-箭头函数\" class=\"headerlink\" title=\"5.3 箭头函数\"></a>5.3 箭头函数</h4><p>箭头左边是参数，右边是返回值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> v;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>箭头函数有几个使用注意点。</p>\n<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>\n<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>\n<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>\n<p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//嵌套的箭头函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">into</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">after</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">afterValue</span>) </span>&#123;</div><div class=\"line\">      array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</div><div class=\"line\">      <span class=\"keyword\">return</span> array;</div><div class=\"line\">    &#125;&#125;;</div><div class=\"line\">  &#125;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"><span class=\"keyword\">let</span> insert = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> (&#123;<span class=\"attr\">into</span>: <span class=\"function\">(<span class=\"params\">array</span>) =&gt;</span> (&#123;<span class=\"attr\">after</span>: <span class=\"function\">(<span class=\"params\">afterValue</span>) =&gt;</span> &#123;</div><div class=\"line\">  array.splice(array.indexOf(afterValue) + <span class=\"number\">1</span>, <span class=\"number\">0</span>, value);</div><div class=\"line\">  <span class=\"keyword\">return</span> array;</div><div class=\"line\">&#125;&#125;)&#125;);</div><div class=\"line\"></div><div class=\"line\">insert(<span class=\"number\">2</span>).into([<span class=\"number\">1</span>, <span class=\"number\">3</span>]).after(<span class=\"number\">1</span>); <span class=\"comment\">//[1, 2, 3]</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-4-尾调用优化\"><a href=\"#5-4-尾调用优化\" class=\"headerlink\" title=\"5.4 尾调用优化\"></a>5.4 尾调用优化</h4><p>尾调用指某个函数的最后一步是调用另一个函数<br>“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。<br>如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> g(x);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>尾递归<br>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>\n<p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。<br>但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</p>\n<h3 id=\"6-数组的扩展\"><a href=\"#6-数组的扩展\" class=\"headerlink\" title=\"6.数组的扩展\"></a>6.数组的扩展</h3><h4 id=\"6-1-扩展运算符（…）\"><a href=\"#6-1-扩展运算符（…）\" class=\"headerlink\" title=\"6.1 扩展运算符（…）\"></a>6.1 扩展运算符（…）</h4><p>该运算符主要用于函数调用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5 的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的写法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\">f(...args);</div></pre></td></tr></table></figure></p>\n<p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5的 写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6 的写法</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">arr1.push(...arr2);</div></pre></td></tr></table></figure></p>\n<p>扩展运算符的应用：</p>\n<p><1>合并数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ES5</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more)</div><div class=\"line\"><span class=\"comment\">// ES6</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES5的合并数组</span></div><div class=\"line\">arr1.concat(arr2, arr3);</div><div class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ES6的合并数组</span></div><div class=\"line\">[...arr1, ...arr2, ...arr3]</div><div class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div></pre></td></tr></table></figure></1></p>\n<p><2>与解构赋值结合<br>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\">first <span class=\"comment\">// 1</span></div><div class=\"line\">rest  <span class=\"comment\">// [2, 3, 4, 5]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [];</div><div class=\"line\">first <span class=\"comment\">// undefined</span></div><div class=\"line\">rest  <span class=\"comment\">// []</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"string\">\"foo\"</span>];</div><div class=\"line\">first  <span class=\"comment\">// \"foo\"</span></div><div class=\"line\">rest   <span class=\"comment\">// []</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> [...butLast, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"comment\">// 报错</span></div></pre></td></tr></table></figure></2></p>\n<p><3>字符串<br>扩展运算符还可以将字符串转为真正的数组。<br>能够正确识别32位的Unicode字符。<br>正确返回字符串长度的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[...<span class=\"string\">'hello'</span>]</div><div class=\"line\"><span class=\"comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">length</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [...str].length;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">length(<span class=\"string\">'x\\uD83D\\uDE80y'</span>) <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure></3></p>\n<h4 id=\"6-2-Array-from\"><a href=\"#6-2-Array-from\" class=\"headerlink\" title=\"6.2 Array.from()\"></a>6.2 Array.from()</h4><p>Array.from方法用于将两类对象转为真正的数组：<br>类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// NodeList对象</span></div><div class=\"line\"><span class=\"keyword\">let</span> ps = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'p'</span>);</div><div class=\"line\"><span class=\"built_in\">Array</span>.from(ps).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">p</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(p);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// arguments对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>扩展运算符（…）也可以将某些数据结构转为数组。<br>区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p>\n<p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike, x =&gt; x * x);</div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.from(arrayLike).map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * x);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (x) =&gt; x * x)</div><div class=\"line\"><span class=\"comment\">// [1, 4, 9]</span></div></pre></td></tr></table></figure></p>\n<p>下面的例子是取出一组DOM节点的文本内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> spans = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'span.name'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// map()</span></div><div class=\"line\"><span class=\"keyword\">let</span> names1 = <span class=\"built_in\">Array</span>.prototype.map.call(spans, s =&gt; s.textContent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Array.from()</span></div><div class=\"line\"><span class=\"keyword\">let</span> names2 = <span class=\"built_in\">Array</span>.from(spans, s =&gt; s.textContent)</div></pre></td></tr></table></figure></p>\n<p>下面的例子将数组中布尔值为false的成员转为0。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>, , <span class=\"number\">2</span>, , <span class=\"number\">3</span>], (n) =&gt; n || <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// [1, 0, 2, 0, 3]</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"6-3-Array-of\"><a href=\"#6-3-Array-of\" class=\"headerlink\" title=\"6.3 Array.of()\"></a>6.3 Array.of()</h4><p>Array.of方法用于将一组值，转换为数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>) <span class=\"comment\">// [3,11,8]</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>) <span class=\"comment\">// [3]</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.of(<span class=\"number\">3</span>).length <span class=\"comment\">// 1</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"6-4-数组实例的-find-和-findIndex\"><a href=\"#6-4-数组实例的-find-和-findIndex\" class=\"headerlink\" title=\"6.4 数组实例的 find() 和 findIndex()\"></a>6.4 数组实例的 find() 和 findIndex()</h4><p>数组实例的find方法，用于找出第一个符合条件的数组成员。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">-5</span>, <span class=\"number\">10</span>].find(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n &lt; <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"comment\">// -5</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</div><div class=\"line\">&#125;) <span class=\"comment\">// 10</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>].findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">9</span>;</div><div class=\"line\">&#125;) <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"6-5-数组实例的fill\"><a href=\"#6-5-数组实例的fill\" class=\"headerlink\" title=\"6.5 数组实例的fill()\"></a>6.5 数组实例的fill()</h4><p>fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>)</div><div class=\"line\"><span class=\"comment\">// [7, 7, 7]</span></div><div class=\"line\"></div><div class=\"line\">[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>].fill(<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// ['a', 7, 'c']</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"6-6-数组实例的-entries-，keys-和-values\"><a href=\"#6-6-数组实例的-entries-，keys-和-values\" class=\"headerlink\" title=\"6.6 数组实例的 entries()，keys() 和 values()\"></a>6.6 数组实例的 entries()，keys() 和 values()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].keys()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(index);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].values()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 'a'</span></div><div class=\"line\"><span class=\"comment\">// 'b'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>].entries()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 0 \"a\"</span></div><div class=\"line\"><span class=\"comment\">// 1 \"b\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"7-对象的扩展\"><a href=\"#7-对象的扩展\" class=\"headerlink\" title=\"7.对象的扩展\"></a>7.对象的扩展</h3><h4 id=\"7-1-Object-is\"><a href=\"#7-1-Object-is\" class=\"headerlink\" title=\"7.1 Object.is()\"></a>7.1 Object.is()</h4><p>与严格比较运算符（===）的行为基本一致。<br>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span> <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(+<span class=\"number\">0</span>, <span class=\"number\">-0</span>) <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span>) <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"7-2-Object-assign\"><a href=\"#7-2-Object-assign\" class=\"headerlink\" title=\"7.2 Object.assign()\"></a>7.2 Object.assign()</h4><p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。<br>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</div><div class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></div></pre></td></tr></table></figure></p>\n<p>Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。<br>Object.assign方法实行的是浅拷贝，而不是深拷贝。</p>\n<p>Object.assign方法有很多用处。</p>\n<p><1>为对象添加属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;x, y&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></1></p>\n<p><2>为对象添加方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.assign(SomeClass.prototype, &#123;</div><div class=\"line\">  someMethod(arg1, arg2) &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;,</div><div class=\"line\">  anotherMethod() &#123;</div><div class=\"line\">    ···</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于下面的写法</span></div><div class=\"line\">SomeClass.prototype.someMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</div><div class=\"line\">  ···</div><div class=\"line\">&#125;;</div><div class=\"line\">SomeClass.prototype.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  ···</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></2></p>\n<p><3>克隆对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, origin);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></3></p>\n<p><4>合并多个对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> merge =</div><div class=\"line\">  (target, ...sources) =&gt; <span class=\"built_in\">Object</span>.assign(target, ...sources);</div></pre></td></tr></table></figure></4></p>\n<p><5>为属性指定默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> DEFAULTS = &#123;</div><div class=\"line\">  logLevel: <span class=\"number\">0</span>,</div><div class=\"line\">  outputFormat: <span class=\"string\">'html'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processContent</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">  options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(options);</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></5></p>\n<h4 id=\"7-3-属性的可枚举性\"><a href=\"#7-3-属性的可枚举性\" class=\"headerlink\" title=\"7.3 属性的可枚举性\"></a>7.3 属性的可枚举性</h4><p>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<br>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, <span class=\"string\">'foo'</span>)</div><div class=\"line\"><span class=\"comment\">//  &#123;</span></div><div class=\"line\"><span class=\"comment\">//    value: 123,</span></div><div class=\"line\"><span class=\"comment\">//    writable: true,</span></div><div class=\"line\"><span class=\"comment\">//    enumerable: true, 可枚举性</span></div><div class=\"line\"><span class=\"comment\">//    configurable: true</span></div><div class=\"line\"><span class=\"comment\">//  &#125;</span></div></pre></td></tr></table></figure></p>\n<p>ES5 有三个操作会忽略enumerable为false的属性。<br>  for…in循环：只遍历对象自身的和继承的可枚举的属性<br>  Object.keys()：返回对象自身的所有可枚举的属性的键名<br>  JSON.stringify()：只串行化对象自身的可枚举的属性<br>ES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。<br>尽量不要用for…in循环，而用Object.keys()代替。</p>\n<h4 id=\"7-4-属性的遍历\"><a href=\"#7-4-属性的遍历\" class=\"headerlink\" title=\"7.4 属性的遍历\"></a>7.4 属性的遍历</h4><p>ES6 一共有5种方法可以遍历对象的属性。</p>\n<p><1>for…in</1></p>\n<p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p>\n<p><2>Object.keys(obj)</2></p>\n<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。</p>\n<p><3>Object.getOwnPropertyNames(obj)</3></p>\n<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。</p>\n<p><4>Object.getOwnPropertySymbols(obj)</4></p>\n<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。</p>\n<p><5>Reflect.ownKeys(obj)</5></p>\n<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。</p>\n<h4 id=\"7-5-proto属性\"><a href=\"#7-5-proto属性\" class=\"headerlink\" title=\"7.5 proto属性\"></a>7.5 <strong>proto</strong>属性</h4><p>无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的<br>Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> proto = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj, proto);</div><div class=\"line\"></div><div class=\"line\">proto.y = <span class=\"number\">20</span>;</div><div class=\"line\">proto.z = <span class=\"number\">40</span>;</div><div class=\"line\"></div><div class=\"line\">obj.x <span class=\"comment\">// 10</span></div><div class=\"line\">obj.y <span class=\"comment\">// 20</span></div><div class=\"line\">obj.z <span class=\"comment\">// 40</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"7-6-Object-keys-，Object-values-，Object-entries\"><a href=\"#7-6-Object-keys-，Object-values-，Object-entries\" class=\"headerlink\" title=\"7.6 Object.keys()，Object.values()，Object.entries()\"></a>7.6 Object.keys()，Object.values()，Object.entries()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\"><span class=\"comment\">// [\"foo\", \"baz\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</div><div class=\"line\"><span class=\"comment\">// [\"bar\", 42]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.entries(obj)</div><div class=\"line\"><span class=\"comment\">// [ [\"foo\", \"bar\"], [\"baz\", 42] ]</span></div></pre></td></tr></table></figure>\n<h4 id=\"7-7-Null-传导运算符\"><a href=\"#7-7-Null-传导运算符\" class=\"headerlink\" title=\"7.7 Null 传导运算符\"></a>7.7 Null 传导运算符</h4><p>如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。<br>比如，要读取message.body.user.firstName，安全的写法是写成下面这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> firstName = (message</div><div class=\"line\">  &amp;&amp; message.body</div><div class=\"line\">  &amp;&amp; message.body.user</div><div class=\"line\">  &amp;&amp; message.body.user.firstName) || <span class=\"string\">'default'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”</span></div><div class=\"line\"><span class=\"keyword\">const</span> firstName = message?.body?.user?.firstName || <span class=\"string\">'default'</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"8-Symbol\"><a href=\"#8-Symbol\" class=\"headerlink\" title=\"8.Symbol\"></a>8.Symbol</h3><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'foo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">'bar'</span>);</div><div class=\"line\"></div><div class=\"line\">s1 <span class=\"comment\">// Symbol(foo)</span></div><div class=\"line\">s2 <span class=\"comment\">// Symbol(bar)</span></div><div class=\"line\"></div><div class=\"line\">s1.toString() <span class=\"comment\">// \"Symbol(foo)\"</span></div><div class=\"line\">s2.toString() <span class=\"comment\">// \"Symbol(bar)\"</span></div></pre></td></tr></table></figure></p>\n<p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p>\n<p>Symbol.for():重新使用同一个Symbol值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">'foo'</span>);</div><div class=\"line\"></div><div class=\"line\">s1 === s2 <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。</p>\n<p>Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">\"foo\"</span>);</div><div class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s1) <span class=\"comment\">// \"foo\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">\"foo\"</span>);</div><div class=\"line\"><span class=\"built_in\">Symbol</span>.keyFor(s2) <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"9-Set和Map\"><a href=\"#9-Set和Map\" class=\"headerlink\" title=\"9.Set和Map\"></a>9.Set和Map</h3><h4 id=\"9-1-Set类似于数组，但是成员的值都是唯一的，没有重复的值。\"><a href=\"#9-1-Set类似于数组，但是成员的值都是唯一的，没有重复的值。\" class=\"headerlink\" title=\"9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。\"></a>9.1 Set类似于数组，但是成员的值都是唯一的，没有重复的值。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 例一</span></div><div class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>]);</div><div class=\"line\">[...set]</div><div class=\"line\"><span class=\"comment\">// [1, 2, 3, 4]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 例二</span></div><div class=\"line\"><span class=\"keyword\">const</span> items = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>]);</div><div class=\"line\">items.size <span class=\"comment\">// 5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 去除数组的重复成员</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> unique = [...new <span class=\"built_in\">Set</span>(arr)];<span class=\"comment\">// [3, 5, 2]</span></div></pre></td></tr></table></figure>\n<p>Set的操作方法：<br>  add(value)：添加某个值，返回Set结构本身。<br>  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>  has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>  clear()：清除所有成员，没有返回值。</p>\n<p>Set的遍历方法：<br>  keys()：返回键名的遍历器<br>  values()：返回键值的遍历器<br>  entries()：返回键值对的遍历器<br>  forEach()：使用回调函数遍历每个成员</p>\n<h4 id=\"9-2-WeakSet：\"><a href=\"#9-2-WeakSet：\" class=\"headerlink\" title=\"9.2 WeakSet：\"></a>9.2 WeakSet：</h4><p>  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。<br>  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br>  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p>\n<h4 id=\"9-3-Map\"><a href=\"#9-3-Map\" class=\"headerlink\" title=\"9.3 Map\"></a>9.3 Map</h4><p>Map类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\"><span class=\"keyword\">const</span> o = &#123;<span class=\"attr\">p</span>: <span class=\"string\">'Hello World'</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">m.set(o, <span class=\"string\">'content'</span>)</div><div class=\"line\">m.get(o) <span class=\"comment\">// \"content\"</span></div><div class=\"line\"></div><div class=\"line\">m.has(o) <span class=\"comment\">// true</span></div><div class=\"line\">m.delete(o) <span class=\"comment\">// true</span></div><div class=\"line\">m.has(o) <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"9-4-WeakMap\"><a href=\"#9-4-WeakMap\" class=\"headerlink\" title=\"9.4 WeakMap\"></a>9.4 WeakMap</h4><p>  WeakMap与Map的区别有两点。<br>  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。</p>\n<h3 id=\"10-Promise\"><a href=\"#10-Promise\" class=\"headerlink\" title=\"10.Promise\"></a>10.Promise</h3><h4 id=\"10-1-Promise对象有以下两个特点：\"><a href=\"#10-1-Promise对象有以下两个特点：\" class=\"headerlink\" title=\"10.1 Promise对象有以下两个特点：\"></a>10.1 Promise对象有以下两个特点：</h4><p><1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。</1></p>\n<p><2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ... some code</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</div><div class=\"line\">    resolve(value);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    reject(error);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</span></div><div class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// failure</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></2></p>\n<h4 id=\"10-2-Promise-all\"><a href=\"#10-2-Promise-all\" class=\"headerlink\" title=\"10.2 Promise.all()\"></a>10.2 Promise.all()</h4><p>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 生成一个Promise对象的数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> promises = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> getJSON(<span class=\"string\">'/post/'</span> + id + <span class=\"string\">\".json\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all(promises).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>Promise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。</p>\n<h4 id=\"10-3-Promise-resolve\"><a href=\"#10-3-Promise-resolve\" class=\"headerlink\" title=\"10.3 Promise.resolve\"></a>10.3 Promise.resolve</h4><p>作用是将现有对象转化为Promise对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</div><div class=\"line\"><span class=\"comment\">// 等价于</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">'foo'</span>))</div></pre></td></tr></table></figure></p>\n<h4 id=\"10-4-应用于加载图片\"><a href=\"#10-4-应用于加载图片\" class=\"headerlink\" title=\"10.4 应用于加载图片\"></a>10.4 应用于加载图片</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> preloadImage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> image = <span class=\"keyword\">new</span> Image();</div><div class=\"line\">    image.onload  = resolve;</div><div class=\"line\">    image.onerror = reject;</div><div class=\"line\">    image.src = path;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"11-Iterator\"><a href=\"#11-Iterator\" class=\"headerlink\" title=\"11.Iterator\"></a>11.Iterator</h3><h4 id=\"11-1-Iterator-的作用有三个：\"><a href=\"#11-1-Iterator-的作用有三个：\" class=\"headerlink\" title=\"11.1 Iterator 的作用有三个：\"></a>11.1 Iterator 的作用有三个：</h4><p>一是为各种数据结构，提供一个统一的、简便的访问接口；<br>二是使得数据结构的成员能够按某种次序排列；<br>三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</p>\n<p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//数组的Symbol.iterator属性</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> iter = arr[<span class=\"built_in\">Symbol</span>.iterator]();</div><div class=\"line\"></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'a', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'b', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: 'c', done: false &#125;</span></div><div class=\"line\">iter.next() <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<p>原生具备 Iterator 接口的数据结构如下。<br>    Array<br>    Map<br>    Set<br>    String<br>    TypedArray<br>    函数的 arguments 对象</p>\n<h4 id=\"11-2-for…of循环\"><a href=\"#11-2-for…of循环\" class=\"headerlink\" title=\"11.2 for…of循环\"></a>11.2 for…of循环</h4><p>一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'red'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'blue'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// red green blue</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//空对象obj部署了数组arr的Symbol.iterator属性</span></div><div class=\"line\"><span class=\"keyword\">const</span> obj = &#123;&#125;;</div><div class=\"line\">obj[<span class=\"built_in\">Symbol</span>.iterator] = arr[<span class=\"built_in\">Symbol</span>.iterator].bind(arr);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> obj) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v); <span class=\"comment\">// red green blue</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>for…in循环读取键名，for…of循环读取键值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 0 1 2 3</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> a <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// a b c d</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>计算生成的数据结构 entries(),keys(),values()<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pair <span class=\"keyword\">of</span> arr.entries()) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(pair);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// [0, 'a']</span></div><div class=\"line\"><span class=\"comment\">// [1, 'b']</span></div><div class=\"line\"><span class=\"comment\">// [2, 'c']</span></div></pre></td></tr></table></figure></p>\n<p>与其他遍历语法的比较<br>for:最原始的写法，较为麻烦<br>forEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。<br>for…in:主要用于遍历对象，不适合遍历数组，for…in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。<br>    某些情况下，for…in循环会以任意顺序遍历键名。</p>\n<h3 id=\"12-Generator\"><a href=\"#12-Generator\" class=\"headerlink\" title=\"12.Generator\"></a>12.Generator</h3><h4 id=\"12-1-Generator-函数是一个状态机，封装了多个内部状态。\"><a href=\"#12-1-Generator-函数是一个状态机，封装了多个内部状态。\" class=\"headerlink\" title=\"12.1 Generator 函数是一个状态机，封装了多个内部状态。\"></a>12.1 Generator 函数是一个状态机，封装了多个内部状态。</h4><p>形式上，Generator 函数是一个普通函数，但是有两个特征。<br>一是，function关键字与函数名之间有一个星号；<br>二是，函数体内部使用yield表达式，定义不同的内部状态<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//该函数有三个状态：hello，world 和 return 语句（结束执行）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator();</div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'hello', done: false &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'world', done: false &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: 'ending', done: true &#125;</span></div><div class=\"line\"></div><div class=\"line\">hw.next()</div><div class=\"line\"><span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"12-2-与-Iterator-接口的关系\"><a href=\"#12-2-与-Iterator-接口的关系\" class=\"headerlink\" title=\"12.2 与 Iterator 接口的关系\"></a>12.2 与 Iterator 接口的关系</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myIterable = &#123;&#125;;</div><div class=\"line\">myIterable[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">[...myIterable] <span class=\"comment\">// [1, 2, 3]</span></div></pre></td></tr></table></figure>\n<h4 id=\"12-3-Generator-prototype-return\"><a href=\"#12-3-Generator-prototype-return\" class=\"headerlink\" title=\"12.3 Generator.prototype.return()\"></a>12.3 Generator.prototype.return()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = gen();</div><div class=\"line\"></div><div class=\"line\">g.next()        <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></div><div class=\"line\">g.return(<span class=\"string\">'foo'</span>) <span class=\"comment\">// &#123; value: \"foo\", done: true &#125;</span></div><div class=\"line\">g.next()        <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>\n<h4 id=\"12-4-yield-表达式\"><a href=\"#12-4-yield-表达式\" class=\"headerlink\" title=\"12.4 yield* 表达式\"></a>12.4 yield* 表达式</h4><p>用来在一个 Generator 函数里面执行另一个 Generator 函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span>* foo();</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'x'</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo()) &#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> v;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'y'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> bar())&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// \"x\"</span></div><div class=\"line\"><span class=\"comment\">// \"a\"</span></div><div class=\"line\"><span class=\"comment\">// \"b\"</span></div><div class=\"line\"><span class=\"comment\">// \"y\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"12-5-应用\"><a href=\"#12-5-应用\" class=\"headerlink\" title=\"12.5 应用\"></a>12.5 应用</h4><p>通过 Generator 函数部署 Ajax 操作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"keyword\">yield</span> request(<span class=\"string\">\"http://some.url\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> resp = <span class=\"built_in\">JSON</span>.parse(result);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(resp.value);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">  makeAjaxCall(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    it.next(response);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> it = main();</div><div class=\"line\">it.next();</div></pre></td></tr></table></figure></p>\n<p>控制流管理<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//多步操作</span></div><div class=\"line\">step1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">  step2(value1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) </span>&#123;</div><div class=\"line\">    step3(value2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) </span>&#123;</div><div class=\"line\">      step4(value3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//采用 Promise 改写上面的代码。</span></div><div class=\"line\"><span class=\"built_in\">Promise</span>.resolve(step1)</div><div class=\"line\">  .then(step2)</div><div class=\"line\">  .then(step3)</div><div class=\"line\">  .then(step4)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">  &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  .done();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Generator 函数可以进一步改善代码运行流程。（同步操作）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">longRunningTask</span>(<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> value2 = <span class=\"keyword\">yield</span> step1(value1);</div><div class=\"line\">    <span class=\"keyword\">var</span> value3 = <span class=\"keyword\">yield</span> step2(value2);</div><div class=\"line\">    <span class=\"keyword\">var</span> value4 = <span class=\"keyword\">yield</span> step3(value3);</div><div class=\"line\">    <span class=\"keyword\">var</span> value5 = <span class=\"keyword\">yield</span> step4(value4);</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from step1 through step4</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"13-async函数\"><a href=\"#13-async函数\" class=\"headerlink\" title=\"13.async函数\"></a>13.async函数</h3><p>async函数是Generator 函数的语法糖<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (error) reject(error);</div><div class=\"line\">      resolve(data);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//写成async函数，就是下面这样。</span></div><div class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>async函数对 Generator 函数的改进，体现在以下四点:</p>\n<p><1>内置执行器<br>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。<br>var result = asyncReadFile();</1></p>\n<p><2>更好的语义</2></p>\n<p><3>更广的适用性</3></p>\n<p><4>返回值是Promise</4></p>\n<p>基本用法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStockPriceByName</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> symbol = <span class=\"keyword\">await</span> getStockSymbol(name);</div><div class=\"line\">  <span class=\"keyword\">var</span> stockPrice = <span class=\"keyword\">await</span> getStockPrice(symbol);</div><div class=\"line\">  <span class=\"keyword\">return</span> stockPrice;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">getStockPriceByName(<span class=\"string\">'goog'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>实例：按顺序完成异步操作：</p>\n<p><1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logInOrder</span>(<span class=\"params\">urls</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 远程读取所有URL</span></div><div class=\"line\">  <span class=\"keyword\">const</span> textPromises = urls.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(url).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.text());</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 按次序输出</span></div><div class=\"line\">  textPromises.reduce(<span class=\"function\">(<span class=\"params\">chain, textPromise</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> chain.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> textPromise)</div><div class=\"line\">      .then(<span class=\"function\"><span class=\"params\">text</span> =&gt;</span> <span class=\"built_in\">console</span>.log(text));</div><div class=\"line\">  &#125;, <span class=\"built_in\">Promise</span>.resolve());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></1></p>\n<p><2>async 函数实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logInOrder</span>(<span class=\"params\">urls</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 并发读取远程URL</span></div><div class=\"line\">  <span class=\"keyword\">const</span> textPromises = urls.map(<span class=\"keyword\">async</span> url =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(url);</div><div class=\"line\">    <span class=\"keyword\">return</span> response.text();</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 按次序输出</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> textPromise <span class=\"keyword\">of</span> textPromises) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">await</span> textPromise);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></2></p>\n<h3 id=\"14-Class\"><a href=\"#14-Class\" class=\"headerlink\" title=\"14.Class\"></a>14.Class</h3><h4 id=\"14-1-简介\"><a href=\"#14-1-简介\" class=\"headerlink\" title=\"14.1 简介\"></a>14.1 简介</h4><p>class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//生成实例对象的传统方法是通过构造函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">  <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ES6写法</span></div><div class=\"line\"><span class=\"comment\">//定义类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//类的所有方法都定义在类的prototype属性上面</span></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"14-2-Class-的静态方法\"><a href=\"#14-2-Class-的静态方法\" class=\"headerlink\" title=\"14.2 Class 的静态方法\"></a>14.2 Class 的静态方法</h4><p>加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">static</span> classMethod() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Foo.classMethod() <span class=\"comment\">// 'hello'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();</div><div class=\"line\">foo.classMethod()</div><div class=\"line\"><span class=\"comment\">// TypeError: foo.classMethod is not a function</span></div></pre></td></tr></table></figure></p>\n<p>父类的静态方法，可以被子类继承。</p>\n<h4 id=\"14-3-Class的继承\"><a href=\"#14-3-Class的继承\" class=\"headerlink\" title=\"14.3 Class的继承\"></a>14.3 Class的继承</h4><p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(x, y, color) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(x, y); <span class=\"comment\">// 调用父类的constructor(x, y)</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color + <span class=\"string\">' '</span> + <span class=\"keyword\">super</span>.toString(); <span class=\"comment\">// 调用父类的toString()</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><1>子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。</1></p>\n<p><2>子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">B.__proto__ === A <span class=\"comment\">// true</span></div><div class=\"line\">B.prototype.__proto__ === A.prototype <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></2></p>\n<h3 id=\"15-Decorator\"><a href=\"#15-Decorator\" class=\"headerlink\" title=\"15.Decorator\"></a>15.Decorator</h3><p>修饰器（Decorator）是一个函数，用来修改类的行为。<br>修饰器本质就是编译时执行的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@testable</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">  target.isTestable = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">isTestable</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">    target.isTestable = isTestable;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@testable(<span class=\"literal\">true</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</div><div class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\">@testable(<span class=\"literal\">false</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</div><div class=\"line\">MyClass.isTestable <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n"},{"title":"常用css3总结","date":"2017-02-17T03:15:11.000Z","_content":"[W3C手册在此](http://www.w3school.com.cn/cssref/index.asp)\n### 1.圆角 --- border-radius\n```css\n.box{\n  /* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/\n  -moz-border-radius:3px;\n  -webkit-border-radius:3px;\n  border-radius:3px;\n\n  border-radius: 2em 1em 4em / 0.5em 3em;\n  /*等价于*/\n  border-top-left-radius: 2em 0.5em;\n  border-top-right-radius: 1em 3em;\n  border-bottom-right-radius: 4em 0.5em;\n  border-bottom-left-radius: 1em 3em;\n}\n```\n### 2.阴影 --- box-shadow\n```css\n.box{\n  -webkit-box-shadow:0 0 10px #CCC;  \n  -moz-box-shadow:0 0 10px #CCC;  \n  box-shadow:0 0 10px #CCC;  \n\n  /*语法:box-shadow: h-shadow v-shadow blur spread color inset\n   * h-shadow : 水平阴影位置（必需）\n   * v-shadow : 垂直阴影的位置 （必需）\n   * blur : 模糊距离\n   * spread : 阴影的尺寸\n   * color : 阴影的颜色\n   * inset : 将外部阴影 (outset) 改为内部阴影\n   */\n}\n```\n### 3.动画 --- animation\n```css\n@keyframes mymove\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-moz-keyframes mymove /* Firefox */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-webkit-keyframes mymove /* Safari 和 Chrome */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-o-keyframes mymove /* Opera */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\ndiv\n{\nanimation:mymove 5s infinite;\n-webkit-animation:mymove 5s infinite; /* Safari 和 Chrome */\n}\n/*\n*animation 属性是一个简写属性，用于设置六个动画属性：\n*animation-name 规定需要绑定到选择器的 keyframe 名称\n*animation-duration 规定完成动画所花费的时间，以秒或毫秒计\n*animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)\n*animation-delay 规定在动画开始之前的延迟\n*animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)\n*animation-direction 规定是否应该轮流反向播放动画\n*/\n\n```\n\n\n","source":"_posts/css3.md","raw":"---\ntitle: 常用css3总结\ndate: 2017-02-17 11:15:11\ntags: css\n---\n[W3C手册在此](http://www.w3school.com.cn/cssref/index.asp)\n### 1.圆角 --- border-radius\n```css\n.box{\n  /* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/\n  -moz-border-radius:3px;\n  -webkit-border-radius:3px;\n  border-radius:3px;\n\n  border-radius: 2em 1em 4em / 0.5em 3em;\n  /*等价于*/\n  border-top-left-radius: 2em 0.5em;\n  border-top-right-radius: 1em 3em;\n  border-bottom-right-radius: 4em 0.5em;\n  border-bottom-left-radius: 1em 3em;\n}\n```\n### 2.阴影 --- box-shadow\n```css\n.box{\n  -webkit-box-shadow:0 0 10px #CCC;  \n  -moz-box-shadow:0 0 10px #CCC;  \n  box-shadow:0 0 10px #CCC;  \n\n  /*语法:box-shadow: h-shadow v-shadow blur spread color inset\n   * h-shadow : 水平阴影位置（必需）\n   * v-shadow : 垂直阴影的位置 （必需）\n   * blur : 模糊距离\n   * spread : 阴影的尺寸\n   * color : 阴影的颜色\n   * inset : 将外部阴影 (outset) 改为内部阴影\n   */\n}\n```\n### 3.动画 --- animation\n```css\n@keyframes mymove\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-moz-keyframes mymove /* Firefox */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-webkit-keyframes mymove /* Safari 和 Chrome */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\n\n@-o-keyframes mymove /* Opera */\n{\nfrom {top:0px;}\nto {top:200px;}\n}\ndiv\n{\nanimation:mymove 5s infinite;\n-webkit-animation:mymove 5s infinite; /* Safari 和 Chrome */\n}\n/*\n*animation 属性是一个简写属性，用于设置六个动画属性：\n*animation-name 规定需要绑定到选择器的 keyframe 名称\n*animation-duration 规定完成动画所花费的时间，以秒或毫秒计\n*animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)\n*animation-delay 规定在动画开始之前的延迟\n*animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)\n*animation-direction 规定是否应该轮流反向播放动画\n*/\n\n```\n\n\n","slug":"css3","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct37z0003nilwh7hb7hf3","content":"<p><a href=\"http://www.w3school.com.cn/cssref/index.asp\" target=\"_blank\" rel=\"external\">W3C手册在此</a></p>\n<h3 id=\"1-圆角-—-border-radius\"><a href=\"#1-圆角-—-border-radius\" class=\"headerlink\" title=\"1.圆角 — border-radius\"></a>1.圆角 — border-radius</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"comment\">/* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/</span></div><div class=\"line\">  <span class=\"attribute\">-moz-border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">2em</span> <span class=\"number\">1em</span> <span class=\"number\">4em</span> / <span class=\"number\">0.5em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">  <span class=\"comment\">/*等价于*/</span></div><div class=\"line\">  <span class=\"attribute\">border-top-left-radius</span>: <span class=\"number\">2em</span> <span class=\"number\">0.5em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top-right-radius</span>: <span class=\"number\">1em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom-right-radius</span>: <span class=\"number\">4em</span> <span class=\"number\">0.5em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom-left-radius</span>: <span class=\"number\">1em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-阴影-—-box-shadow\"><a href=\"#2-阴影-—-box-shadow\" class=\"headerlink\" title=\"2.阴影 — box-shadow\"></a>2.阴影 — box-shadow</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\">  <span class=\"attribute\">-moz-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\">  <span class=\"attribute\">box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*语法:box-shadow: h-shadow v-shadow blur spread color inset</span></div><div class=\"line\"><span class=\"comment\">   * h-shadow : 水平阴影位置（必需）</span></div><div class=\"line\"><span class=\"comment\">   * v-shadow : 垂直阴影的位置 （必需）</span></div><div class=\"line\"><span class=\"comment\">   * blur : 模糊距离</span></div><div class=\"line\"><span class=\"comment\">   * spread : 阴影的尺寸</span></div><div class=\"line\"><span class=\"comment\">   * color : 阴影的颜色</span></div><div class=\"line\"><span class=\"comment\">   * inset : 将外部阴影 (outset) 改为内部阴影</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-动画-—-animation\"><a href=\"#3-动画-—-animation\" class=\"headerlink\" title=\"3.动画 — animation\"></a>3.动画 — animation</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> mymove</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">moz</span>-<span class=\"keyword\">keyframes</span> mymove /* Firefox */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">webkit</span>-<span class=\"keyword\">keyframes</span> mymove /* Safari 和 Chrome */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">o</span>-<span class=\"keyword\">keyframes</span> mymove /* Opera */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">div</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attribute\">animation</span>:mymove <span class=\"number\">5s</span> infinite;</div><div class=\"line\"><span class=\"attribute\">-webkit-animation</span>:mymove <span class=\"number\">5s</span> infinite; <span class=\"comment\">/* Safari 和 Chrome */</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">*animation 属性是一个简写属性，用于设置六个动画属性：</span></div><div class=\"line\"><span class=\"comment\">*animation-name 规定需要绑定到选择器的 keyframe 名称</span></div><div class=\"line\"><span class=\"comment\">*animation-duration 规定完成动画所花费的时间，以秒或毫秒计</span></div><div class=\"line\"><span class=\"comment\">*animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)</span></div><div class=\"line\"><span class=\"comment\">*animation-delay 规定在动画开始之前的延迟</span></div><div class=\"line\"><span class=\"comment\">*animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)</span></div><div class=\"line\"><span class=\"comment\">*animation-direction 规定是否应该轮流反向播放动画</span></div><div class=\"line\"><span class=\"comment\">*/</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.w3school.com.cn/cssref/index.asp\" target=\"_blank\" rel=\"external\">W3C手册在此</a></p>\n<h3 id=\"1-圆角-—-border-radius\"><a href=\"#1-圆角-—-border-radius\" class=\"headerlink\" title=\"1.圆角 — border-radius\"></a>1.圆角 — border-radius</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"comment\">/* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/</span></div><div class=\"line\">  <span class=\"attribute\">-moz-border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>:<span class=\"number\">3px</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">2em</span> <span class=\"number\">1em</span> <span class=\"number\">4em</span> / <span class=\"number\">0.5em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">  <span class=\"comment\">/*等价于*/</span></div><div class=\"line\">  <span class=\"attribute\">border-top-left-radius</span>: <span class=\"number\">2em</span> <span class=\"number\">0.5em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-top-right-radius</span>: <span class=\"number\">1em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom-right-radius</span>: <span class=\"number\">4em</span> <span class=\"number\">0.5em</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom-left-radius</span>: <span class=\"number\">1em</span> <span class=\"number\">3em</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-阴影-—-box-shadow\"><a href=\"#2-阴影-—-box-shadow\" class=\"headerlink\" title=\"2.阴影 — box-shadow\"></a>2.阴影 — box-shadow</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.box</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\">  <span class=\"attribute\">-moz-box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\">  <span class=\"attribute\">box-shadow</span>:<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"number\">#CCC</span>;  </div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/*语法:box-shadow: h-shadow v-shadow blur spread color inset</span></div><div class=\"line\"><span class=\"comment\">   * h-shadow : 水平阴影位置（必需）</span></div><div class=\"line\"><span class=\"comment\">   * v-shadow : 垂直阴影的位置 （必需）</span></div><div class=\"line\"><span class=\"comment\">   * blur : 模糊距离</span></div><div class=\"line\"><span class=\"comment\">   * spread : 阴影的尺寸</span></div><div class=\"line\"><span class=\"comment\">   * color : 阴影的颜色</span></div><div class=\"line\"><span class=\"comment\">   * inset : 将外部阴影 (outset) 改为内部阴影</span></div><div class=\"line\"><span class=\"comment\">   */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-动画-—-animation\"><a href=\"#3-动画-—-animation\" class=\"headerlink\" title=\"3.动画 — animation\"></a>3.动画 — animation</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">keyframes</span> mymove</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">moz</span>-<span class=\"keyword\">keyframes</span> mymove /* Firefox */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">webkit</span>-<span class=\"keyword\">keyframes</span> mymove /* Safari 和 Chrome */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-<span class=\"keyword\">o</span>-<span class=\"keyword\">keyframes</span> mymove /* Opera */</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"selector-tag\">from</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">0px</span>;&#125;</div><div class=\"line\"><span class=\"selector-tag\">to</span> &#123;<span class=\"attribute\">top</span>:<span class=\"number\">200px</span>;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">div</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attribute\">animation</span>:mymove <span class=\"number\">5s</span> infinite;</div><div class=\"line\"><span class=\"attribute\">-webkit-animation</span>:mymove <span class=\"number\">5s</span> infinite; <span class=\"comment\">/* Safari 和 Chrome */</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">*animation 属性是一个简写属性，用于设置六个动画属性：</span></div><div class=\"line\"><span class=\"comment\">*animation-name 规定需要绑定到选择器的 keyframe 名称</span></div><div class=\"line\"><span class=\"comment\">*animation-duration 规定完成动画所花费的时间，以秒或毫秒计</span></div><div class=\"line\"><span class=\"comment\">*animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)</span></div><div class=\"line\"><span class=\"comment\">*animation-delay 规定在动画开始之前的延迟</span></div><div class=\"line\"><span class=\"comment\">*animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)</span></div><div class=\"line\"><span class=\"comment\">*animation-direction 规定是否应该轮流反向播放动画</span></div><div class=\"line\"><span class=\"comment\">*/</span></div></pre></td></tr></table></figure>\n"},{"title":"css命名和字体名称","date":"2017-01-14T05:57:04.000Z","_content":"\n``` html\n头：header\n内容：content/container　　\n尾：footer　　\n导航：nav　　\n侧栏：sidebar　　\n栏目：column　　\n页面外围控制整体佈局宽度：wrapper　　\n左右中：left right center　　\n登录条：loginbar　　\n标志：logo　　\n广告：banner　　\n页面主体：main　　\n热点：hot　　\n新闻：news　　\n下载：download　　\n子导航：subnav　　\n菜单：menu　　\n子菜单：submenu　　\n搜索：search　　\n友情链接：friendlink　　\n页脚：footer　　\n版权：copyright　　\n滚动：scroll　　\n内容：content　　\n标签：tags　　\n文章列表：list　　\n提示信息：msg　　\n小技巧：tips　　\n栏目标题：title　　\n加入：joinus　　\n指南：guide　　\n服务：service　　\n注册：regsiter　　\n状态：status　　\n投票：vote　　\n合作伙伴：partner　　\n导航：nav　　\n主导航：mainnav　　\n子导航：subnav　　\n顶导航：topnav　　\n边导航：sidebar　　\n左导航：leftsidebar　　\n右导航：rightsidebar　　\n菜单：menu　　\n子菜单：submenu　　\n标题: title　　\n摘要: summary\n\n```\n\n``` html\n宋体\tSimSun\n黑体\tSimHei\n微软雅黑\tMicrosoft YaHei\n微软正黑体\tMicrosoft JhengHei\n新宋体\tNSimSun\n新细明体\tPMingLiU\n细明体\tMingLiU\n标楷体\tDFKai-SB\n仿宋\tFangSong\n楷体\tKaiTi\n仿宋_GB2312\tFangSong_GB2312\n楷体_GB2312\tKaiTi_GB2312\n\n宋体：SimSuncss中中文字体（font-family）的英文名称\nMac OS的一些：\n华文细黑：STHeiti Light [STXihei]\n华文黑体：STHeiti\n华文楷体：STKaiti\n华文宋体：STSong\n华文仿宋：STFangsong\n儷黑 Pro：LiHei Pro Medium\n儷宋 Pro：LiSong Pro Light\n標楷體：BiauKai\n蘋果儷中黑：Apple LiGothic Medium\n蘋果儷細宋：Apple LiSung Light\nWindows的一些：\n新細明體：PMingLiU\n細明體：MingLiU\n標楷體：DFKai-SB\n黑体：SimHei\n新宋体：NSimSun\n仿宋：FangSong\n楷体：KaiTi\n仿宋_GB2312：FangSong_GB2312\n楷体_GB2312：KaiTi_GB2312\n微軟正黑體：Microsoft JhengHei\n微软雅黑体：Microsoft YaHei\n装Office会生出来的一些：\n隶书：LiSu\n幼圆：YouYuan\n华文细黑：STXihei\n华文楷体：STKaiti\n华文宋体：STSong\n华文中宋：STZhongsong\n华文仿宋：STFangsong\n方正舒体：FZShuTi\n方正姚体：FZYaoti\n华文彩云：STCaiyun\n华文琥珀：STHupo\n华文隶书：STLiti\n华文行楷：STXingkai\n华文新魏：STXinwei\n```","source":"_posts/css-name.md","raw":"---\ntitle: css命名和字体名称\ndate: 2017-01-14 13:57:04\ntags: css\n---\n\n``` html\n头：header\n内容：content/container　　\n尾：footer　　\n导航：nav　　\n侧栏：sidebar　　\n栏目：column　　\n页面外围控制整体佈局宽度：wrapper　　\n左右中：left right center　　\n登录条：loginbar　　\n标志：logo　　\n广告：banner　　\n页面主体：main　　\n热点：hot　　\n新闻：news　　\n下载：download　　\n子导航：subnav　　\n菜单：menu　　\n子菜单：submenu　　\n搜索：search　　\n友情链接：friendlink　　\n页脚：footer　　\n版权：copyright　　\n滚动：scroll　　\n内容：content　　\n标签：tags　　\n文章列表：list　　\n提示信息：msg　　\n小技巧：tips　　\n栏目标题：title　　\n加入：joinus　　\n指南：guide　　\n服务：service　　\n注册：regsiter　　\n状态：status　　\n投票：vote　　\n合作伙伴：partner　　\n导航：nav　　\n主导航：mainnav　　\n子导航：subnav　　\n顶导航：topnav　　\n边导航：sidebar　　\n左导航：leftsidebar　　\n右导航：rightsidebar　　\n菜单：menu　　\n子菜单：submenu　　\n标题: title　　\n摘要: summary\n\n```\n\n``` html\n宋体\tSimSun\n黑体\tSimHei\n微软雅黑\tMicrosoft YaHei\n微软正黑体\tMicrosoft JhengHei\n新宋体\tNSimSun\n新细明体\tPMingLiU\n细明体\tMingLiU\n标楷体\tDFKai-SB\n仿宋\tFangSong\n楷体\tKaiTi\n仿宋_GB2312\tFangSong_GB2312\n楷体_GB2312\tKaiTi_GB2312\n\n宋体：SimSuncss中中文字体（font-family）的英文名称\nMac OS的一些：\n华文细黑：STHeiti Light [STXihei]\n华文黑体：STHeiti\n华文楷体：STKaiti\n华文宋体：STSong\n华文仿宋：STFangsong\n儷黑 Pro：LiHei Pro Medium\n儷宋 Pro：LiSong Pro Light\n標楷體：BiauKai\n蘋果儷中黑：Apple LiGothic Medium\n蘋果儷細宋：Apple LiSung Light\nWindows的一些：\n新細明體：PMingLiU\n細明體：MingLiU\n標楷體：DFKai-SB\n黑体：SimHei\n新宋体：NSimSun\n仿宋：FangSong\n楷体：KaiTi\n仿宋_GB2312：FangSong_GB2312\n楷体_GB2312：KaiTi_GB2312\n微軟正黑體：Microsoft JhengHei\n微软雅黑体：Microsoft YaHei\n装Office会生出来的一些：\n隶书：LiSu\n幼圆：YouYuan\n华文细黑：STXihei\n华文楷体：STKaiti\n华文宋体：STSong\n华文中宋：STZhongsong\n华文仿宋：STFangsong\n方正舒体：FZShuTi\n方正姚体：FZYaoti\n华文彩云：STCaiyun\n华文琥珀：STHupo\n华文隶书：STLiti\n华文行楷：STXingkai\n华文新魏：STXinwei\n```","slug":"css-name","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3800004nilwex6wg5la","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">头：header</div><div class=\"line\">内容：content/container　　</div><div class=\"line\">尾：footer　　</div><div class=\"line\">导航：nav　　</div><div class=\"line\">侧栏：sidebar　　</div><div class=\"line\">栏目：column　　</div><div class=\"line\">页面外围控制整体佈局宽度：wrapper　　</div><div class=\"line\">左右中：left right center　　</div><div class=\"line\">登录条：loginbar　　</div><div class=\"line\">标志：logo　　</div><div class=\"line\">广告：banner　　</div><div class=\"line\">页面主体：main　　</div><div class=\"line\">热点：hot　　</div><div class=\"line\">新闻：news　　</div><div class=\"line\">下载：download　　</div><div class=\"line\">子导航：subnav　　</div><div class=\"line\">菜单：menu　　</div><div class=\"line\">子菜单：submenu　　</div><div class=\"line\">搜索：search　　</div><div class=\"line\">友情链接：friendlink　　</div><div class=\"line\">页脚：footer　　</div><div class=\"line\">版权：copyright　　</div><div class=\"line\">滚动：scroll　　</div><div class=\"line\">内容：content　　</div><div class=\"line\">标签：tags　　</div><div class=\"line\">文章列表：list　　</div><div class=\"line\">提示信息：msg　　</div><div class=\"line\">小技巧：tips　　</div><div class=\"line\">栏目标题：title　　</div><div class=\"line\">加入：joinus　　</div><div class=\"line\">指南：guide　　</div><div class=\"line\">服务：service　　</div><div class=\"line\">注册：regsiter　　</div><div class=\"line\">状态：status　　</div><div class=\"line\">投票：vote　　</div><div class=\"line\">合作伙伴：partner　　</div><div class=\"line\">导航：nav　　</div><div class=\"line\">主导航：mainnav　　</div><div class=\"line\">子导航：subnav　　</div><div class=\"line\">顶导航：topnav　　</div><div class=\"line\">边导航：sidebar　　</div><div class=\"line\">左导航：leftsidebar　　</div><div class=\"line\">右导航：rightsidebar　　</div><div class=\"line\">菜单：menu　　</div><div class=\"line\">子菜单：submenu　　</div><div class=\"line\">标题: title　　</div><div class=\"line\">摘要: summary</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">宋体\tSimSun</div><div class=\"line\">黑体\tSimHei</div><div class=\"line\">微软雅黑\tMicrosoft YaHei</div><div class=\"line\">微软正黑体\tMicrosoft JhengHei</div><div class=\"line\">新宋体\tNSimSun</div><div class=\"line\">新细明体\tPMingLiU</div><div class=\"line\">细明体\tMingLiU</div><div class=\"line\">标楷体\tDFKai-SB</div><div class=\"line\">仿宋\tFangSong</div><div class=\"line\">楷体\tKaiTi</div><div class=\"line\">仿宋_GB2312\tFangSong_GB2312</div><div class=\"line\">楷体_GB2312\tKaiTi_GB2312</div><div class=\"line\"></div><div class=\"line\">宋体：SimSuncss中中文字体（font-family）的英文名称</div><div class=\"line\">Mac OS的一些：</div><div class=\"line\">华文细黑：STHeiti Light [STXihei]</div><div class=\"line\">华文黑体：STHeiti</div><div class=\"line\">华文楷体：STKaiti</div><div class=\"line\">华文宋体：STSong</div><div class=\"line\">华文仿宋：STFangsong</div><div class=\"line\">儷黑 Pro：LiHei Pro Medium</div><div class=\"line\">儷宋 Pro：LiSong Pro Light</div><div class=\"line\">標楷體：BiauKai</div><div class=\"line\">蘋果儷中黑：Apple LiGothic Medium</div><div class=\"line\">蘋果儷細宋：Apple LiSung Light</div><div class=\"line\">Windows的一些：</div><div class=\"line\">新細明體：PMingLiU</div><div class=\"line\">細明體：MingLiU</div><div class=\"line\">標楷體：DFKai-SB</div><div class=\"line\">黑体：SimHei</div><div class=\"line\">新宋体：NSimSun</div><div class=\"line\">仿宋：FangSong</div><div class=\"line\">楷体：KaiTi</div><div class=\"line\">仿宋_GB2312：FangSong_GB2312</div><div class=\"line\">楷体_GB2312：KaiTi_GB2312</div><div class=\"line\">微軟正黑體：Microsoft JhengHei</div><div class=\"line\">微软雅黑体：Microsoft YaHei</div><div class=\"line\">装Office会生出来的一些：</div><div class=\"line\">隶书：LiSu</div><div class=\"line\">幼圆：YouYuan</div><div class=\"line\">华文细黑：STXihei</div><div class=\"line\">华文楷体：STKaiti</div><div class=\"line\">华文宋体：STSong</div><div class=\"line\">华文中宋：STZhongsong</div><div class=\"line\">华文仿宋：STFangsong</div><div class=\"line\">方正舒体：FZShuTi</div><div class=\"line\">方正姚体：FZYaoti</div><div class=\"line\">华文彩云：STCaiyun</div><div class=\"line\">华文琥珀：STHupo</div><div class=\"line\">华文隶书：STLiti</div><div class=\"line\">华文行楷：STXingkai</div><div class=\"line\">华文新魏：STXinwei</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">头：header</div><div class=\"line\">内容：content/container　　</div><div class=\"line\">尾：footer　　</div><div class=\"line\">导航：nav　　</div><div class=\"line\">侧栏：sidebar　　</div><div class=\"line\">栏目：column　　</div><div class=\"line\">页面外围控制整体佈局宽度：wrapper　　</div><div class=\"line\">左右中：left right center　　</div><div class=\"line\">登录条：loginbar　　</div><div class=\"line\">标志：logo　　</div><div class=\"line\">广告：banner　　</div><div class=\"line\">页面主体：main　　</div><div class=\"line\">热点：hot　　</div><div class=\"line\">新闻：news　　</div><div class=\"line\">下载：download　　</div><div class=\"line\">子导航：subnav　　</div><div class=\"line\">菜单：menu　　</div><div class=\"line\">子菜单：submenu　　</div><div class=\"line\">搜索：search　　</div><div class=\"line\">友情链接：friendlink　　</div><div class=\"line\">页脚：footer　　</div><div class=\"line\">版权：copyright　　</div><div class=\"line\">滚动：scroll　　</div><div class=\"line\">内容：content　　</div><div class=\"line\">标签：tags　　</div><div class=\"line\">文章列表：list　　</div><div class=\"line\">提示信息：msg　　</div><div class=\"line\">小技巧：tips　　</div><div class=\"line\">栏目标题：title　　</div><div class=\"line\">加入：joinus　　</div><div class=\"line\">指南：guide　　</div><div class=\"line\">服务：service　　</div><div class=\"line\">注册：regsiter　　</div><div class=\"line\">状态：status　　</div><div class=\"line\">投票：vote　　</div><div class=\"line\">合作伙伴：partner　　</div><div class=\"line\">导航：nav　　</div><div class=\"line\">主导航：mainnav　　</div><div class=\"line\">子导航：subnav　　</div><div class=\"line\">顶导航：topnav　　</div><div class=\"line\">边导航：sidebar　　</div><div class=\"line\">左导航：leftsidebar　　</div><div class=\"line\">右导航：rightsidebar　　</div><div class=\"line\">菜单：menu　　</div><div class=\"line\">子菜单：submenu　　</div><div class=\"line\">标题: title　　</div><div class=\"line\">摘要: summary</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">宋体\tSimSun</div><div class=\"line\">黑体\tSimHei</div><div class=\"line\">微软雅黑\tMicrosoft YaHei</div><div class=\"line\">微软正黑体\tMicrosoft JhengHei</div><div class=\"line\">新宋体\tNSimSun</div><div class=\"line\">新细明体\tPMingLiU</div><div class=\"line\">细明体\tMingLiU</div><div class=\"line\">标楷体\tDFKai-SB</div><div class=\"line\">仿宋\tFangSong</div><div class=\"line\">楷体\tKaiTi</div><div class=\"line\">仿宋_GB2312\tFangSong_GB2312</div><div class=\"line\">楷体_GB2312\tKaiTi_GB2312</div><div class=\"line\"></div><div class=\"line\">宋体：SimSuncss中中文字体（font-family）的英文名称</div><div class=\"line\">Mac OS的一些：</div><div class=\"line\">华文细黑：STHeiti Light [STXihei]</div><div class=\"line\">华文黑体：STHeiti</div><div class=\"line\">华文楷体：STKaiti</div><div class=\"line\">华文宋体：STSong</div><div class=\"line\">华文仿宋：STFangsong</div><div class=\"line\">儷黑 Pro：LiHei Pro Medium</div><div class=\"line\">儷宋 Pro：LiSong Pro Light</div><div class=\"line\">標楷體：BiauKai</div><div class=\"line\">蘋果儷中黑：Apple LiGothic Medium</div><div class=\"line\">蘋果儷細宋：Apple LiSung Light</div><div class=\"line\">Windows的一些：</div><div class=\"line\">新細明體：PMingLiU</div><div class=\"line\">細明體：MingLiU</div><div class=\"line\">標楷體：DFKai-SB</div><div class=\"line\">黑体：SimHei</div><div class=\"line\">新宋体：NSimSun</div><div class=\"line\">仿宋：FangSong</div><div class=\"line\">楷体：KaiTi</div><div class=\"line\">仿宋_GB2312：FangSong_GB2312</div><div class=\"line\">楷体_GB2312：KaiTi_GB2312</div><div class=\"line\">微軟正黑體：Microsoft JhengHei</div><div class=\"line\">微软雅黑体：Microsoft YaHei</div><div class=\"line\">装Office会生出来的一些：</div><div class=\"line\">隶书：LiSu</div><div class=\"line\">幼圆：YouYuan</div><div class=\"line\">华文细黑：STXihei</div><div class=\"line\">华文楷体：STKaiti</div><div class=\"line\">华文宋体：STSong</div><div class=\"line\">华文中宋：STZhongsong</div><div class=\"line\">华文仿宋：STFangsong</div><div class=\"line\">方正舒体：FZShuTi</div><div class=\"line\">方正姚体：FZYaoti</div><div class=\"line\">华文彩云：STCaiyun</div><div class=\"line\">华文琥珀：STHupo</div><div class=\"line\">华文隶书：STLiti</div><div class=\"line\">华文行楷：STXingkai</div><div class=\"line\">华文新魏：STXinwei</div></pre></td></tr></table></figure>"},{"title":"ie下相关兼容性问题","date":"2017-10-09T07:21:42.000Z","_content":"[CAN I USE](http://caniuse.com/)\n### 1.Invalid Date,new Date()时间格式不对\n当在IE/Firefox浏览器下，会遇到这种问题：\n```javascript\nnew Date('2016-01-01 00:00:00')    //却返回这个值Invalid Date，转换失败\n```\n解决方式：\n```javascript\nvar date=\"2016-01-01 00:00:00\";\ndate=date.replace(new RegExp(/-/gm) ,\"/\"); 　　//将所有的'-'转为'/'即可\n//2016/01/01 00:00:00\nnew Date(date);//这下就转换正确了Wed Jan 1 00:00:00 UTC+0800 2014\n```\n以下列出了所有浏览器都支持的方式:\n```javascript\nvar d = new Date(2011, 01, 07); // yyyy, mm-1, dd\nvar d = new Date(2011, 01, 07, 11, 05, 00); // yyyy, mm-1, dd, hh, mm, ss\nvar d = new Date(\"02/07/2011\"); // \"mm/dd/yyyy\"\nvar d = new Date(\"02/07/2011 11:05:00\"); // \"mm/dd/yyyy hh:mm:ss\"\nvar d = new Date(1297076700000); // milliseconds\nvar d = new Date(\"Mon Feb 07 2011 11:05:00 GMT\"); // \"\"Day Mon dd yyyy hh:mm:ss GMT/UTC\n```\n\n### 2.ie9下没有promise对象\n使用axios需要[babel-polyfill](https://babeljs.io/docs/usage/polyfill/)支持\n```javascript\nnpm install --save babel-polyfill\n```\n在webpack.config.js里：\n```javascript\nmodule.exports = {\n  entry: [\"babel-polyfill\", \"./app/js\"]\n};\n```\n\n### 3.ie8不支持forEach\n拓展方法\n```javascript\nif ( !Array.prototype.forEach ) {\n  Array.prototype.forEach = function forEach( callback, thisArg ) {\n    var T, k;\n    if ( this == null ) {\n      throw new TypeError( \"this is null or not defined\" );\n    }\n    var O = Object(this);\n    var len = O.length >>> 0;\n    if ( typeof callback !== \"function\" ) {\n      throw new TypeError( callback + \" is not a function\" );\n    }\n    if ( arguments.length > 1 ) {\n      T = thisArg;\n    }\n    k = 0;\n    while( k < len ) {\n      var kValue;\n      if ( k in O ) {\n        kValue = O[ k ];\n        callback.call( T, kValue, k, O );\n      }\n      k++;\n    }\n  };\n}\n```\n\n### 4.对象不支持addEventListener属性或方法\njquery 2.x以上版本不支持ie8\n```javascript\n//判断IE7\\8 兼容性检测\nvar isIE=!!window.ActiveXObject;\nvar isIE6=isIE&&!window.XMLHttpRequest;\nvar isIE8=isIE&&!!document.documentMode;\nvar isIE7=isIE&&!isIE6&&!isIE8;\n\nif(isIE8 || isIE7){\n   li.attachEvent(\"onclick\",function(){\n\t   _marker.openInfoWindow(_iw);\n   })\n}else{\n   li.addEventListener(\"click\",function(){\n\t   _marker.openInfoWindow(_iw);\n   })\n}\n```\n\n","source":"_posts/ie-bug.md","raw":"---\ntitle: ie下相关兼容性问题\ndate: 2017-10-09 15:21:42\ntags: [javascript,ie]\n---\n[CAN I USE](http://caniuse.com/)\n### 1.Invalid Date,new Date()时间格式不对\n当在IE/Firefox浏览器下，会遇到这种问题：\n```javascript\nnew Date('2016-01-01 00:00:00')    //却返回这个值Invalid Date，转换失败\n```\n解决方式：\n```javascript\nvar date=\"2016-01-01 00:00:00\";\ndate=date.replace(new RegExp(/-/gm) ,\"/\"); 　　//将所有的'-'转为'/'即可\n//2016/01/01 00:00:00\nnew Date(date);//这下就转换正确了Wed Jan 1 00:00:00 UTC+0800 2014\n```\n以下列出了所有浏览器都支持的方式:\n```javascript\nvar d = new Date(2011, 01, 07); // yyyy, mm-1, dd\nvar d = new Date(2011, 01, 07, 11, 05, 00); // yyyy, mm-1, dd, hh, mm, ss\nvar d = new Date(\"02/07/2011\"); // \"mm/dd/yyyy\"\nvar d = new Date(\"02/07/2011 11:05:00\"); // \"mm/dd/yyyy hh:mm:ss\"\nvar d = new Date(1297076700000); // milliseconds\nvar d = new Date(\"Mon Feb 07 2011 11:05:00 GMT\"); // \"\"Day Mon dd yyyy hh:mm:ss GMT/UTC\n```\n\n### 2.ie9下没有promise对象\n使用axios需要[babel-polyfill](https://babeljs.io/docs/usage/polyfill/)支持\n```javascript\nnpm install --save babel-polyfill\n```\n在webpack.config.js里：\n```javascript\nmodule.exports = {\n  entry: [\"babel-polyfill\", \"./app/js\"]\n};\n```\n\n### 3.ie8不支持forEach\n拓展方法\n```javascript\nif ( !Array.prototype.forEach ) {\n  Array.prototype.forEach = function forEach( callback, thisArg ) {\n    var T, k;\n    if ( this == null ) {\n      throw new TypeError( \"this is null or not defined\" );\n    }\n    var O = Object(this);\n    var len = O.length >>> 0;\n    if ( typeof callback !== \"function\" ) {\n      throw new TypeError( callback + \" is not a function\" );\n    }\n    if ( arguments.length > 1 ) {\n      T = thisArg;\n    }\n    k = 0;\n    while( k < len ) {\n      var kValue;\n      if ( k in O ) {\n        kValue = O[ k ];\n        callback.call( T, kValue, k, O );\n      }\n      k++;\n    }\n  };\n}\n```\n\n### 4.对象不支持addEventListener属性或方法\njquery 2.x以上版本不支持ie8\n```javascript\n//判断IE7\\8 兼容性检测\nvar isIE=!!window.ActiveXObject;\nvar isIE6=isIE&&!window.XMLHttpRequest;\nvar isIE8=isIE&&!!document.documentMode;\nvar isIE7=isIE&&!isIE6&&!isIE8;\n\nif(isIE8 || isIE7){\n   li.attachEvent(\"onclick\",function(){\n\t   _marker.openInfoWindow(_iw);\n   })\n}else{\n   li.addEventListener(\"click\",function(){\n\t   _marker.openInfoWindow(_iw);\n   })\n}\n```\n\n","slug":"ie-bug","published":1,"updated":"2017-10-28T00:16:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3840005nilwyra73lje","content":"<p><a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"external\">CAN I USE</a></p>\n<h3 id=\"1-Invalid-Date-new-Date-时间格式不对\"><a href=\"#1-Invalid-Date-new-Date-时间格式不对\" class=\"headerlink\" title=\"1.Invalid Date,new Date()时间格式不对\"></a>1.Invalid Date,new Date()时间格式不对</h3><p>当在IE/Firefox浏览器下，会遇到这种问题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2016-01-01 00:00:00'</span>)    <span class=\"comment\">//却返回这个值Invalid Date，转换失败</span></div></pre></td></tr></table></figure></p>\n<p>解决方式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> date=<span class=\"string\">\"2016-01-01 00:00:00\"</span>;</div><div class=\"line\">date=date.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/-/gm</span>) ,<span class=\"string\">\"/\"</span>); 　　<span class=\"comment\">//将所有的'-'转为'/'即可</span></div><div class=\"line\"><span class=\"comment\">//2016/01/01 00:00:00</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date);<span class=\"comment\">//这下就转换正确了Wed Jan 1 00:00:00 UTC+0800 2014</span></div></pre></td></tr></table></figure></p>\n<p>以下列出了所有浏览器都支持的方式:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2011</span>, <span class=\"number\">01</span>, <span class=\"number\">07</span>); <span class=\"comment\">// yyyy, mm-1, dd</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2011</span>, <span class=\"number\">01</span>, <span class=\"number\">07</span>, <span class=\"number\">11</span>, <span class=\"number\">05</span>, <span class=\"number\">00</span>); <span class=\"comment\">// yyyy, mm-1, dd, hh, mm, ss</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"02/07/2011\"</span>); <span class=\"comment\">// \"mm/dd/yyyy\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"02/07/2011 11:05:00\"</span>); <span class=\"comment\">// \"mm/dd/yyyy hh:mm:ss\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1297076700000</span>); <span class=\"comment\">// milliseconds</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"Mon Feb 07 2011 11:05:00 GMT\"</span>); <span class=\"comment\">// \"\"Day Mon dd yyyy hh:mm:ss GMT/UTC</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-ie9下没有promise对象\"><a href=\"#2-ie9下没有promise对象\" class=\"headerlink\" title=\"2.ie9下没有promise对象\"></a>2.ie9下没有promise对象</h3><p>使用axios需要<a href=\"https://babeljs.io/docs/usage/polyfill/\" target=\"_blank\" rel=\"external\">babel-polyfill</a>支持<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save babel-polyfill</div></pre></td></tr></table></figure></p>\n<p>在webpack.config.js里：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: [<span class=\"string\">\"babel-polyfill\"</span>, <span class=\"string\">\"./app/js\"</span>]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-ie8不支持forEach\"><a href=\"#3-ie8不支持forEach\" class=\"headerlink\" title=\"3.ie8不支持forEach\"></a>3.ie8不支持forEach</h3><p>拓展方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ( !<span class=\"built_in\">Array</span>.prototype.forEach ) &#123;</div><div class=\"line\">  <span class=\"built_in\">Array</span>.prototype.forEach = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEach</span>(<span class=\"params\"> callback, thisArg </span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> T, k;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span> == <span class=\"literal\">null</span> ) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">\"this is null or not defined\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> callback !== <span class=\"string\">\"function\"</span> ) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( callback + <span class=\"string\">\" is not a function\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">1</span> ) &#123;</div><div class=\"line\">      T = thisArg;</div><div class=\"line\">    &#125;</div><div class=\"line\">    k = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>( k &lt; len ) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> kValue;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( k <span class=\"keyword\">in</span> O ) &#123;</div><div class=\"line\">        kValue = O[ k ];</div><div class=\"line\">        callback.call( T, kValue, k, O );</div><div class=\"line\">      &#125;</div><div class=\"line\">      k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-对象不支持addEventListener属性或方法\"><a href=\"#4-对象不支持addEventListener属性或方法\" class=\"headerlink\" title=\"4.对象不支持addEventListener属性或方法\"></a>4.对象不支持addEventListener属性或方法</h3><p>jquery 2.x以上版本不支持ie8<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//判断IE7\\8 兼容性检测</span></div><div class=\"line\"><span class=\"keyword\">var</span> isIE=!!<span class=\"built_in\">window</span>.ActiveXObject;</div><div class=\"line\"><span class=\"keyword\">var</span> isIE6=isIE&amp;&amp;!<span class=\"built_in\">window</span>.XMLHttpRequest;</div><div class=\"line\"><span class=\"keyword\">var</span> isIE8=isIE&amp;&amp;!!<span class=\"built_in\">document</span>.documentMode;</div><div class=\"line\"><span class=\"keyword\">var</span> isIE7=isIE&amp;&amp;!isIE6&amp;&amp;!isIE8;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(isIE8 || isIE7)&#123;</div><div class=\"line\">   li.attachEvent(<span class=\"string\">\"onclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t   _marker.openInfoWindow(_iw);</div><div class=\"line\">   &#125;)</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">   li.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t   _marker.openInfoWindow(_iw);</div><div class=\"line\">   &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"external\">CAN I USE</a></p>\n<h3 id=\"1-Invalid-Date-new-Date-时间格式不对\"><a href=\"#1-Invalid-Date-new-Date-时间格式不对\" class=\"headerlink\" title=\"1.Invalid Date,new Date()时间格式不对\"></a>1.Invalid Date,new Date()时间格式不对</h3><p>当在IE/Firefox浏览器下，会遇到这种问题：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2016-01-01 00:00:00'</span>)    <span class=\"comment\">//却返回这个值Invalid Date，转换失败</span></div></pre></td></tr></table></figure></p>\n<p>解决方式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> date=<span class=\"string\">\"2016-01-01 00:00:00\"</span>;</div><div class=\"line\">date=date.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/-/gm</span>) ,<span class=\"string\">\"/\"</span>); 　　<span class=\"comment\">//将所有的'-'转为'/'即可</span></div><div class=\"line\"><span class=\"comment\">//2016/01/01 00:00:00</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(date);<span class=\"comment\">//这下就转换正确了Wed Jan 1 00:00:00 UTC+0800 2014</span></div></pre></td></tr></table></figure></p>\n<p>以下列出了所有浏览器都支持的方式:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2011</span>, <span class=\"number\">01</span>, <span class=\"number\">07</span>); <span class=\"comment\">// yyyy, mm-1, dd</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2011</span>, <span class=\"number\">01</span>, <span class=\"number\">07</span>, <span class=\"number\">11</span>, <span class=\"number\">05</span>, <span class=\"number\">00</span>); <span class=\"comment\">// yyyy, mm-1, dd, hh, mm, ss</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"02/07/2011\"</span>); <span class=\"comment\">// \"mm/dd/yyyy\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"02/07/2011 11:05:00\"</span>); <span class=\"comment\">// \"mm/dd/yyyy hh:mm:ss\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1297076700000</span>); <span class=\"comment\">// milliseconds</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">\"Mon Feb 07 2011 11:05:00 GMT\"</span>); <span class=\"comment\">// \"\"Day Mon dd yyyy hh:mm:ss GMT/UTC</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-ie9下没有promise对象\"><a href=\"#2-ie9下没有promise对象\" class=\"headerlink\" title=\"2.ie9下没有promise对象\"></a>2.ie9下没有promise对象</h3><p>使用axios需要<a href=\"https://babeljs.io/docs/usage/polyfill/\" target=\"_blank\" rel=\"external\">babel-polyfill</a>支持<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save babel-polyfill</div></pre></td></tr></table></figure></p>\n<p>在webpack.config.js里：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">  entry: [<span class=\"string\">\"babel-polyfill\"</span>, <span class=\"string\">\"./app/js\"</span>]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-ie8不支持forEach\"><a href=\"#3-ie8不支持forEach\" class=\"headerlink\" title=\"3.ie8不支持forEach\"></a>3.ie8不支持forEach</h3><p>拓展方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ( !<span class=\"built_in\">Array</span>.prototype.forEach ) &#123;</div><div class=\"line\">  <span class=\"built_in\">Array</span>.prototype.forEach = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">forEach</span>(<span class=\"params\"> callback, thisArg </span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> T, k;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span> == <span class=\"literal\">null</span> ) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( <span class=\"string\">\"this is null or not defined\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> O = <span class=\"built_in\">Object</span>(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> callback !== <span class=\"string\">\"function\"</span> ) &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>( callback + <span class=\"string\">\" is not a function\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">arguments</span>.length &gt; <span class=\"number\">1</span> ) &#123;</div><div class=\"line\">      T = thisArg;</div><div class=\"line\">    &#125;</div><div class=\"line\">    k = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>( k &lt; len ) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> kValue;</div><div class=\"line\">      <span class=\"keyword\">if</span> ( k <span class=\"keyword\">in</span> O ) &#123;</div><div class=\"line\">        kValue = O[ k ];</div><div class=\"line\">        callback.call( T, kValue, k, O );</div><div class=\"line\">      &#125;</div><div class=\"line\">      k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-对象不支持addEventListener属性或方法\"><a href=\"#4-对象不支持addEventListener属性或方法\" class=\"headerlink\" title=\"4.对象不支持addEventListener属性或方法\"></a>4.对象不支持addEventListener属性或方法</h3><p>jquery 2.x以上版本不支持ie8<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//判断IE7\\8 兼容性检测</span></div><div class=\"line\"><span class=\"keyword\">var</span> isIE=!!<span class=\"built_in\">window</span>.ActiveXObject;</div><div class=\"line\"><span class=\"keyword\">var</span> isIE6=isIE&amp;&amp;!<span class=\"built_in\">window</span>.XMLHttpRequest;</div><div class=\"line\"><span class=\"keyword\">var</span> isIE8=isIE&amp;&amp;!!<span class=\"built_in\">document</span>.documentMode;</div><div class=\"line\"><span class=\"keyword\">var</span> isIE7=isIE&amp;&amp;!isIE6&amp;&amp;!isIE8;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(isIE8 || isIE7)&#123;</div><div class=\"line\">   li.attachEvent(<span class=\"string\">\"onclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t   _marker.openInfoWindow(_iw);</div><div class=\"line\">   &#125;)</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">   li.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t   _marker.openInfoWindow(_iw);</div><div class=\"line\">   &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Hexo命令","date":"2017-01-10T06:56:23.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo命令\ndate: 2017-01-10 14:56:23\ntags: hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3870008nilwn5glbwt4","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"ionic APP开发相关踩坑","date":"2017-06-15T08:47:08.000Z","_content":"\n### 1.配置各种环境参考资料\n（1）[React Native 开发文档](http://reactnative.cn/docs/0.45/getting-started.html)\n注：搭建android环境，sdk，之前搞了很久，忘记记录了。。\n（2）[angular 中文文档](https://angular.cn/)\n（3）[ionic 文档](http://ionicframework.com/docs)\n（4）[Gradle构建工具v3.3下载](http://www.pc6.com/softview/SoftView_421983.html)\n注：是一个android打包工具，需要配置环境变量，官网下载太慢\n（5）[Ionic打包过程下载Gradle失败的解决方法](http://www.jianshu.com/p/9595eccac3d1)\n注：暂时没遇到，上次打包了半小时\n\n\n### 2.ionic 基本功能配置\n（1）[ionic2 中隐藏子页面tabs选项卡的三种方法](http://www.cnblogs.com/zsl123/p/6425489.html)\n```javascript\n//app.module.ts 找到\nimports: [\n    IonicModule.forRoot(MyApp,{\n      tabsHideOnSubPages: 'true'         //隐藏全部子页面tabs\n    })\n  ],\n```\n（2）ionic2 返回键文字\n```javascript\n//app.module.ts 默认是'back'\nimports: [\n    IonicModule.forRoot(MyApp,{\n      backButtonText: '', //返回按钮文字\n    })\n  ],\n```\n\n（3）[ionic 自定义tabs样式](http://blog.csdn.net/malonely/article/details/52777369)\n注：主要是scss\n```html\n//tabs.html\n<ion-tabs tabsPlacement=\"bottom\">  \n  <ion-tab [root]=\"tab1Root\" tabTitle=\"tab1\" tabIcon=\"tab-tab1\"></ion-tab>  \n  <ion-tab [root]=\"tab2Root\" tabTitle=\"tab2\" tabIcon=\"tab-tab2\"></ion-tab>  \n  <ion-tab [root]=\"tab3Root\" tabTitle=\"tab3\" tabIcon=\"tab-tab3\"></ion-tab>  \n</ion-tabs>  \n```\n```css\n//tabs.scss\n.ion-tab-icon-base {  \n  width: 32px;  \n  height: 32px;  \n  padding: 4px 4px 2px;  \n}  \n  \n.ion-tab-icon-md-base {  \n  min-width: 0 !important;  \n  height: 32px;  \n}  \n  \n$tabImageName: 'tab1' 'tab2' 'tab3';  \n@for $i from 1 to 4 {  \n  //for ios  \n  .ion-ios-tab-#{nth($tabImageName, $i)} {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n  }  \n  .ion-ios-tab-#{nth($tabImageName, $i)}-outline {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n  }  \n  \n  // for android  \n  .tabs-md .tab-button[aria-selected=true] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n    }  \n  }  \n  .tabs-md .tab-button[aria-selected=false] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n    }  \n  }  \n}  \n```\n\n","source":"_posts/ionic.md","raw":"---\ntitle: ionic APP开发相关踩坑\ndate: 2017-06-15 16:47:08\ntags: [ionic,angular,cordova]\n---\n\n### 1.配置各种环境参考资料\n（1）[React Native 开发文档](http://reactnative.cn/docs/0.45/getting-started.html)\n注：搭建android环境，sdk，之前搞了很久，忘记记录了。。\n（2）[angular 中文文档](https://angular.cn/)\n（3）[ionic 文档](http://ionicframework.com/docs)\n（4）[Gradle构建工具v3.3下载](http://www.pc6.com/softview/SoftView_421983.html)\n注：是一个android打包工具，需要配置环境变量，官网下载太慢\n（5）[Ionic打包过程下载Gradle失败的解决方法](http://www.jianshu.com/p/9595eccac3d1)\n注：暂时没遇到，上次打包了半小时\n\n\n### 2.ionic 基本功能配置\n（1）[ionic2 中隐藏子页面tabs选项卡的三种方法](http://www.cnblogs.com/zsl123/p/6425489.html)\n```javascript\n//app.module.ts 找到\nimports: [\n    IonicModule.forRoot(MyApp,{\n      tabsHideOnSubPages: 'true'         //隐藏全部子页面tabs\n    })\n  ],\n```\n（2）ionic2 返回键文字\n```javascript\n//app.module.ts 默认是'back'\nimports: [\n    IonicModule.forRoot(MyApp,{\n      backButtonText: '', //返回按钮文字\n    })\n  ],\n```\n\n（3）[ionic 自定义tabs样式](http://blog.csdn.net/malonely/article/details/52777369)\n注：主要是scss\n```html\n//tabs.html\n<ion-tabs tabsPlacement=\"bottom\">  \n  <ion-tab [root]=\"tab1Root\" tabTitle=\"tab1\" tabIcon=\"tab-tab1\"></ion-tab>  \n  <ion-tab [root]=\"tab2Root\" tabTitle=\"tab2\" tabIcon=\"tab-tab2\"></ion-tab>  \n  <ion-tab [root]=\"tab3Root\" tabTitle=\"tab3\" tabIcon=\"tab-tab3\"></ion-tab>  \n</ion-tabs>  \n```\n```css\n//tabs.scss\n.ion-tab-icon-base {  \n  width: 32px;  \n  height: 32px;  \n  padding: 4px 4px 2px;  \n}  \n  \n.ion-tab-icon-md-base {  \n  min-width: 0 !important;  \n  height: 32px;  \n}  \n  \n$tabImageName: 'tab1' 'tab2' 'tab3';  \n@for $i from 1 to 4 {  \n  //for ios  \n  .ion-ios-tab-#{nth($tabImageName, $i)} {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n  }  \n  .ion-ios-tab-#{nth($tabImageName, $i)}-outline {  \n    @extend .ion-tab-icon-base;  \n    content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n  }  \n  \n  // for android  \n  .tabs-md .tab-button[aria-selected=true] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}_choosed.png\");  \n    }  \n  }  \n  .tabs-md .tab-button[aria-selected=false] {  \n    .ion-md-tab-#{nth($tabImageName, $i)} {  \n      @extend .ion-tab-icon-md-base;  \n      content: url(\"../assets/images/tabs/#{nth($tabImageName, $i)}.png\");  \n    }  \n  }  \n}  \n```\n\n","slug":"ionic","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct389000anilwiel3498d","content":"<h3 id=\"1-配置各种环境参考资料\"><a href=\"#1-配置各种环境参考资料\" class=\"headerlink\" title=\"1.配置各种环境参考资料\"></a>1.配置各种环境参考资料</h3><p>（1）<a href=\"http://reactnative.cn/docs/0.45/getting-started.html\" target=\"_blank\" rel=\"external\">React Native 开发文档</a><br>注：搭建android环境，sdk，之前搞了很久，忘记记录了。。<br>（2）<a href=\"https://angular.cn/\" target=\"_blank\" rel=\"external\">angular 中文文档</a><br>（3）<a href=\"http://ionicframework.com/docs\" target=\"_blank\" rel=\"external\">ionic 文档</a><br>（4）<a href=\"http://www.pc6.com/softview/SoftView_421983.html\" target=\"_blank\" rel=\"external\">Gradle构建工具v3.3下载</a><br>注：是一个android打包工具，需要配置环境变量，官网下载太慢<br>（5）<a href=\"http://www.jianshu.com/p/9595eccac3d1\" target=\"_blank\" rel=\"external\">Ionic打包过程下载Gradle失败的解决方法</a><br>注：暂时没遇到，上次打包了半小时</p>\n<h3 id=\"2-ionic-基本功能配置\"><a href=\"#2-ionic-基本功能配置\" class=\"headerlink\" title=\"2.ionic 基本功能配置\"></a>2.ionic 基本功能配置</h3><p>（1）<a href=\"http://www.cnblogs.com/zsl123/p/6425489.html\" target=\"_blank\" rel=\"external\">ionic2 中隐藏子页面tabs选项卡的三种方法</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//app.module.ts 找到</span></div><div class=\"line\">imports: [</div><div class=\"line\">    IonicModule.forRoot(MyApp,&#123;</div><div class=\"line\">      tabsHideOnSubPages: <span class=\"string\">'true'</span>         <span class=\"comment\">//隐藏全部子页面tabs</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ],</div></pre></td></tr></table></figure></p>\n<p>（2）ionic2 返回键文字<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//app.module.ts 默认是'back'</span></div><div class=\"line\">imports: [</div><div class=\"line\">    IonicModule.forRoot(MyApp,&#123;</div><div class=\"line\">      backButtonText: <span class=\"string\">''</span>, <span class=\"comment\">//返回按钮文字</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ],</div></pre></td></tr></table></figure></p>\n<p>（3）<a href=\"http://blog.csdn.net/malonely/article/details/52777369\" target=\"_blank\" rel=\"external\">ionic 自定义tabs样式</a><br>注：主要是scss<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//tabs.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ion-tabs</span> <span class=\"attr\">tabsPlacement</span>=<span class=\"string\">\"bottom\"</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab1Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab1\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab2Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab2\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab3Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab3\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ion-tabs</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">//tabs.scss</div><div class=\"line\"><span class=\"selector-class\">.ion-tab-icon-base</span> &#123;  </div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">32px</span>;  </div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">32px</span>;  </div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span> <span class=\"number\">4px</span> <span class=\"number\">2px</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"selector-class\">.ion-tab-icon-md-base</span> &#123;  </div><div class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">0</span> <span class=\"meta\">!important</span>;  </div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">32px</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">$tabImageName: 'tab1' 'tab2' 'tab3';  </div><div class=\"line\">@<span class=\"keyword\">for</span> $i from <span class=\"number\">1</span> to <span class=\"number\">4</span> &#123;  </div><div class=\"line\">  //for ios  </div><div class=\"line\">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">    @<span class=\"keyword\">extend</span> .ion-tab-icon-base;  </div><div class=\"line\">    content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png\");  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125;-outline &#123;  </div><div class=\"line\">    @<span class=\"keyword\">extend</span> .ion-tab-icon-base;  </div><div class=\"line\">    content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png\");  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  // for android  </div><div class=\"line\">  <span class=\"selector-class\">.tabs-md</span> <span class=\"selector-class\">.tab-button</span><span class=\"selector-attr\">[aria-selected=true]</span> &#123;  </div><div class=\"line\">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">      @<span class=\"keyword\">extend</span> .ion-tab-icon-md-base;  </div><div class=\"line\">      content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png\");  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"selector-class\">.tabs-md</span> <span class=\"selector-class\">.tab-button</span><span class=\"selector-attr\">[aria-selected=false]</span> &#123;  </div><div class=\"line\">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">      @<span class=\"keyword\">extend</span> .ion-tab-icon-md-base;  </div><div class=\"line\">      content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png\");  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-配置各种环境参考资料\"><a href=\"#1-配置各种环境参考资料\" class=\"headerlink\" title=\"1.配置各种环境参考资料\"></a>1.配置各种环境参考资料</h3><p>（1）<a href=\"http://reactnative.cn/docs/0.45/getting-started.html\" target=\"_blank\" rel=\"external\">React Native 开发文档</a><br>注：搭建android环境，sdk，之前搞了很久，忘记记录了。。<br>（2）<a href=\"https://angular.cn/\" target=\"_blank\" rel=\"external\">angular 中文文档</a><br>（3）<a href=\"http://ionicframework.com/docs\" target=\"_blank\" rel=\"external\">ionic 文档</a><br>（4）<a href=\"http://www.pc6.com/softview/SoftView_421983.html\" target=\"_blank\" rel=\"external\">Gradle构建工具v3.3下载</a><br>注：是一个android打包工具，需要配置环境变量，官网下载太慢<br>（5）<a href=\"http://www.jianshu.com/p/9595eccac3d1\" target=\"_blank\" rel=\"external\">Ionic打包过程下载Gradle失败的解决方法</a><br>注：暂时没遇到，上次打包了半小时</p>\n<h3 id=\"2-ionic-基本功能配置\"><a href=\"#2-ionic-基本功能配置\" class=\"headerlink\" title=\"2.ionic 基本功能配置\"></a>2.ionic 基本功能配置</h3><p>（1）<a href=\"http://www.cnblogs.com/zsl123/p/6425489.html\" target=\"_blank\" rel=\"external\">ionic2 中隐藏子页面tabs选项卡的三种方法</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//app.module.ts 找到</span></div><div class=\"line\">imports: [</div><div class=\"line\">    IonicModule.forRoot(MyApp,&#123;</div><div class=\"line\">      tabsHideOnSubPages: <span class=\"string\">'true'</span>         <span class=\"comment\">//隐藏全部子页面tabs</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ],</div></pre></td></tr></table></figure></p>\n<p>（2）ionic2 返回键文字<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//app.module.ts 默认是'back'</span></div><div class=\"line\">imports: [</div><div class=\"line\">    IonicModule.forRoot(MyApp,&#123;</div><div class=\"line\">      backButtonText: <span class=\"string\">''</span>, <span class=\"comment\">//返回按钮文字</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  ],</div></pre></td></tr></table></figure></p>\n<p>（3）<a href=\"http://blog.csdn.net/malonely/article/details/52777369\" target=\"_blank\" rel=\"external\">ionic 自定义tabs样式</a><br>注：主要是scss<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//tabs.html</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ion-tabs</span> <span class=\"attr\">tabsPlacement</span>=<span class=\"string\">\"bottom\"</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab1Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab1\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab2Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab2\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ion-tab</span> [<span class=\"attr\">root</span>]=<span class=\"string\">\"tab3Root\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"tab3\"</span> <span class=\"attr\">tabIcon</span>=<span class=\"string\">\"tab-tab3\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ion-tab</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ion-tabs</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">//tabs.scss</div><div class=\"line\"><span class=\"selector-class\">.ion-tab-icon-base</span> &#123;  </div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">32px</span>;  </div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">32px</span>;  </div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span> <span class=\"number\">4px</span> <span class=\"number\">2px</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"selector-class\">.ion-tab-icon-md-base</span> &#123;  </div><div class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">0</span> <span class=\"meta\">!important</span>;  </div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">32px</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">$tabImageName: 'tab1' 'tab2' 'tab3';  </div><div class=\"line\">@<span class=\"keyword\">for</span> $i from <span class=\"number\">1</span> to <span class=\"number\">4</span> &#123;  </div><div class=\"line\">  //for ios  </div><div class=\"line\">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">    @<span class=\"keyword\">extend</span> .ion-tab-icon-base;  </div><div class=\"line\">    content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png\");  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125;-outline &#123;  </div><div class=\"line\">    @<span class=\"keyword\">extend</span> .ion-tab-icon-base;  </div><div class=\"line\">    content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png\");  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  // for android  </div><div class=\"line\">  <span class=\"selector-class\">.tabs-md</span> <span class=\"selector-class\">.tab-button</span><span class=\"selector-attr\">[aria-selected=true]</span> &#123;  </div><div class=\"line\">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">      @<span class=\"keyword\">extend</span> .ion-tab-icon-md-base;  </div><div class=\"line\">      content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png\");  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"selector-class\">.tabs-md</span> <span class=\"selector-class\">.tab-button</span><span class=\"selector-attr\">[aria-selected=false]</span> &#123;  </div><div class=\"line\">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class=\"line\">      @<span class=\"keyword\">extend</span> .ion-tab-icon-md-base;  </div><div class=\"line\">      content: url(\"../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png\");  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"js算法题","date":"2018-01-10T09:19:16.000Z","_content":"\n### 1.Remove String Spaces\n```javascript\nfunction noSpace(x){\n  return x.replace(/\\s/g, '');\n}\n```\n\n### 2.Sort array by string length\n```javascript\nfunction sortByLength (array) {\n  // Return an array containing the same strings, ordered from shortest to longest\n  return array.sort((a,b) = >a.length - b.length)\n}\n```\n\n### 3.Handle String\nresult：\n```javascript\naccum(\"abcd\");    // \"A-Bb-Ccc-Dddd\"\naccum(\"RqaEzty\"); // \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\"\naccum(\"cwAt\");    // \"C-Ww-Aaa-Tttt\"\n````\n\n```javascript\nfunction accum(s) {\n\t// your code\n  if(/^[A-Za-z]*$/.test(s)){\n    let arr = s.split('');\n    let newArr = [];\n    arr.map((item,index)=>{\n        let str = item.toUpperCase()\n        while(index>0){\n          str += item.toLowerCase();\n          index--\n        }\n        newArr.push(str)\n    })\n    return newArr.join('-')\n  }\n}\n```\n\nbetter:\n```javascript\nfunction accum(s) {\n  return s.split('').map((x,index) => x.toUpperCase()+Array(index+1).join(x.toLowerCase())).join('-');\n}\nfunction accum(s) {\n  return s.split('').map((c, i) => (c.toUpperCase() + c.toLowerCase().repeat(i))).join('-');\n}\n```\n\n### 4.Handle Arr\nresult：\n```text\n[\"az\", \"toto\", \"picaro\", \"zone\", \"kiwi\"] -->\n[[\"az\", \"toto picaro zone kiwi\"], \n [\"az toto\", \"picaro zone kiwi\"], \n [\"az toto picaro\", \"zone kiwi\"], \n [\"az toto picaro zone\", \"kiwi\"]]\n````\n\n```javascript\nfunction partlist(arr) {\n    // your code\n    let newArr = [],\n        preArr = [],\n        copy = arr.slice(0);//copy arr\n    for(let i = 0;i < arr.length-1;i++){\n      let newItem = [];\n      preArr.push(copy.shift());// shift arr\n      newItem.push(preArr.join(' '));\n      newItem.push(copy.join(' '));\n      newArr.push(newItem);\n    }\n    return newArr\n}\n```\nbetter\n```javascript\nvar partlist=a=>a.map((v,i)=>[a.slice(0,i).join(' '),a.slice(i).join(' ')]).slice(1)\n```\n\n### 5.Get the Middle Character\nresult：\n```text\nrunBF(\"test\\0\") should return \"es\"\n\nrunBF(\"testing\\0\") should return \"t\"\n\nrunBF(\"middle\\0\") should return \"dd\"\n\nrunBF(\"A\\0\") should return \"A\"\n```\n\n```javascript\nfunction getMiddle(s)\n{\n  let a = parseInt(s.length/2); // 5/2 -> 2\n  return s.length % 2? s.substr(a,1) : s.substr(a-1,2) //odd:even\n}\n```\nbetter:\n```javascript\nfunction getMiddle(s)\n{\n  return s.substr(Math.ceil(s.length / 2 - 1), s.length % 2 === 0 ? 2 : 1);\n}\n```\n\n### 6.Vowel Count\nresult:\n```javascript\ngetCount('aeiou'); //5 a,e,i,o,u\ngetCount('abcde'); //2 a,e\n```\n```javascript\nfunction getCount(str) {\n  var vowelsCount = 0,\n      arr = ['a','e','i','o','u'];\n  str.split('').map(i=>{\n    if(arr.indexOf(i)>=0){ //arr.indexOf('i') -> 2\n      vowelsCount++\n    }\n  })\n  return vowelsCount;\n}\n```\n\nbetter:\n```javascript\nfunction getCount(str) {\n  return (str.match(/[aeiou]/ig)||[]).length;\n}\n```\n\n### 7.Highest and Lowest\nresult:\n```javascript\nhighAndLow(\"1 2 3 4 5\"); // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\"); // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\"); // return \"9 -5\"\n```\n\n```javascript\nfunction highAndLow(numbers){\n  let arr = numbers.split(\" \").sort((a,b)=>a-b);// sort arr\n  return arr[arr.length-1] + ' ' + arr[0]\n}\n```\n\nbetter:\n```javascript\nfunction highAndLow(numbers){\n  numbers = numbers.split(' ');\n  return `${Math.max(...numbers)} ${Math.min(...numbers)}`;\n}\n```\n\n### 8.Array Diff\nresult:\n```javascript\n//It should remove all values from list a, which are present in list b.\narray_diff([1,2],[1]) //return [2]\narray_diff([1,2,2,2,3],[2]) //return [1,3]\n```\n```javascript\nfunction array_diff(a, b) {\n// splice导致数组变化\n//   a.map((j,i)=>{\n//     if(b.indexOf(j) >= 0){\n//       a.splice(i,1)    \n//     }\n//   }) \nreturn a.filter(e => b.indexOf(e)<0)\n}\n```\nother:\n```javascript\n//includes判断数组是否有某元素\nfunction array_diff(a, b) {\n  return a.filter(e => !b.includes(e));\n}\n```\n\n### 9.Find the odd int\nresult:\n```javascript\nfindOdd([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]) //return 5\nfindOdd([1,1,2,-2,5,2,4,4,-1,-2,5]); //return -1\nfindOdd([20,1,1,2,2,3,3,5,5,4,20,4,5]); //return 5\n```\n```javascript\nfunction findOdd(A) {\n  //happy coding! \n  let obj = {}//count obj\n  A.map(i=>{\n    for(let j = 0;j<A.length;j++){\n      if(i==A[j]){\n        obj[i] = obj[i]?obj[i]+1:1;\n        break;\n      }\n    }\n  })\n  for(let k in obj){\n    if(obj[k]%2){\n        return parseInt(k)\n    }\n  }\n  return 0;\n}\n```\nbetter\n```javascript\n//异或位运算符，看不懂\nconst findOdd = (xs) => xs.reduce((a, b) => a ^ b);\n```\n\n### 10.Persistent Bugger.\nresult:\n```javascript\n//which is the number of times you must multiply the digits in num until you reach a single digit.\npersistence(39) === 3 // because 3*9 = 27, 2*7 = 14, 1*4=4  count:3\n                       // and 4 has only one digit\n                       \npersistence(999) === 4 // because 9*9*9 = 729, 7*2*9 = 126,  count:4\n                        // 1*2*6 = 12, and finally 1*2 = 2\n\npersistence(4) === 0 // because 4 is already a one-digit number count:0\n```\n\n```javascript\nfunction persistence(num) {\n   //code me\n  let count = 0;\n  while(String(num).length > 1){\n    num = String(num).split('').map(Number).reduce((a,b) => a*b)\n    count++\n  }\n  return count\n}\n```\n\nbetter：\n```javascript\nconst persistence = num => {\n  return `${num}`.length > 1 \n    ? 1 + persistence(`${num}`.split('').reduce((a, b) => a * +b)) \n    : 0;\n}\n```\n\n\n### 11.The Supermarket Queue\n函数有两个输入变量：\n客户：表示队列的正整数数组。每个整数表示一个客户，其值是它们需要检查的时间量。\nN：一个正整数，结账柜台的数量。\n\n函数应该返回一个整数，所需的总时间。\nresult:\n```javascript\nqueueTime([5,3,4], 1)\n// should return 12\n// because when n=1, the total time is just the sum of the times\n\nqueueTime([10,2,3,3], 2)\n// should return 10\n// because here n=2 and the 2nd, 3rd, and 4th people in the \n// queue finish before the 1st person has finished.\n\nqueueTime([2,3,10], 2)\n// should return 12\n```\n```javascript\nfunction queueTime(customers, n) {\n  if(customers.length == 0) return 0;\n  let arr = customers.splice(0,n).sort((a,b)=>a-b);\n  customers.map(i=>{\n    arr[0] += i;\n    arr.sort((a,b)=>a-b)\n  })\n  return Math.max(...arr)\n}\n```\nbetter\n```javascript\n//不需要截第一个数组，不需要排序，直接对最小的值加\nfunction queueTime(customers, n) {\n  var w = new Array(n).fill(0);\n  for (let t of customers) {\n    let idx = w.indexOf(Math.min(...w));\n    w[idx] += t;\n  }\n  return Math.max(...w);\n}\n```\n\n### 12.toWeirdCase\nresult: 大写小写大写小写\n```javascript\n//even upper/ odd lower\ntoWeirdCase( \"String\" );//=> returns \"StRiNg\"\ntoWeirdCase( \"Weird string case\" );//=> returns \"WeIrD StRiNg CaSe\"\n```\n\n```javascript\nfunction toWeirdCase(string){\n  return string.split(' ').map(k=>\n    k.split('').map((e,i)=>i%2?e.toLowerCase():e.toUpperCase()).join('')\n  ).join(' ')\n}\n```\nbetter:\n```javascript\n//每匹配两个字母\nfunction toWeirdCase(string){\n  return string.replace(/(\\w{1,2})/g,(m)=>m[0].toUpperCase()+m.slice(1))\n}\n```\n\n### 13.Handle Time\nresult\n```javascript\nhumanReadable(60) //rerurn '00:01:00',\nhumanReadable(86399) //return '23:59:59'\nhumanReadable(359999) //return '99:59:59'\n```\n\n```javascript\nfunction humanReadable(seconds) {\n  let zero = m => parseInt(m)<10? '0'+parseInt(m):parseInt(m);\n  if(seconds<60){\n    return `00:00:${zero(seconds)}`\n  } else if( 60<=seconds && seconds<60*60){\n    return `00:${zero(seconds/60)}:${zero(seconds%60)}`\n  } else {\n    return `${zero(seconds/60/60)}:${zero(parseInt(seconds/60)%60)}:${zero(seconds%60)}`\n  }\n}\n```\n\n```javascript\n//傻了，不用判断时间\nfunction humanReadable(seconds) {\n  var pad = function(x) { return (x < 10) ? \"0\"+x : x; }\n  return pad(parseInt(seconds / (60*60))) + \":\" +\n         pad(parseInt(seconds / 60 % 60)) + \":\" +\n         pad(seconds % 60)\n}\n```\n\n\n### 14.Split Strings\nresult:\n```javascript\nsolution('abc') // should return ['ab', 'c_']\nsolution('abcdef') // should return ['ab', 'cd', 'ef']\n```\n```javascript\n//偶数次会导致末尾多个空,直接用match更好\nfunction solution(str){\n   return str.replace(/(\\w{1,2})/g,m=>m[1]?m[0]+m[1]+'-':m[0]+'_').split('-').filter(i=>i&&i.trim())\n}\n```\nbetter:\n```javascript\nfunction solution(str){\n   return (str + \"_\").match(/../g);\n}\n```\n\n### 15.Arrays of cats and dogs\nresult: Dog在n个节点内抓到Cat，return被抓的C\n```javascript\n//solve(['D','C','C','D','C'], 2) = 2, because the dog at index 0 (D0) catches C1 and D3 catches C4. \n//solve(['C','C','D','D','C','D'], 2) = 3, because D2 catches C0, D3 catches C1 and D5 catches C4.\n//solve(['C','C','D','D','C','D'], 1) = 2, because D2 catches C1, D3 catches C4. C0 cannot be caught because n == 1.\n//solve(['D','C','D','D','C'], 1) = 2, too many dogs, so all cats get caught!\n```\n\n```javascript\nfunction solve(arr,n){\n let count = 0;\n arr.map((k,i)=>{\n   let start = i-n>0?i-n:0;\n       catchRange = arr.slice(start,i+n+1), //be catched range\n       index = catchRange.indexOf('D');//the dog index\n   if( k=='C' && index>=0){\n     count++\n     arr[index+start] = '' //the dog catch cat,let it go\n   }\n })\n return count;\n}\n```\n\n### 16.Dont drive too long!\nresult: Drive的时间<9小时\n```javascript\n var dailyShedule = [ [\"7:00-10:30\",\"Drive\"],\n                        [\"10:30-10:45\",\"Rest\"],\n                        [\"10:45-11:45\",\"Drive\"],\n                        [\"11:45-12:15\",\"Rest\"],\n                        [\"12:15-16:45\",\"Drive\"],\n                        [\"16:45-20:15\",\"Work\"]]; \n            //-> should return false,9 hours of driving in total.\n```\n\n```javascript\nfunction shouldIBeTired(dailyShedule){\n  let time = 0\n  dailyShedule.map(i=>{\n    if(i[1]==\"Drive\"){\n      let arr = i[0].split('-');\n      time += (arr[1].split(':')[0] - arr[0].split(':')[0])+ (arr[1].split(':')[1] - arr[0].split(':')[1])/60;\n    }\n  })\n  return time>9\n}\n```\n\n### 17.Array plus array\nresult:\n```javascript\n//arrayPlusArray([1, 2, 3], [4, 5, 6]), 21\n```\n\n```javascript\nfunction arrayPlusArray(arr1, arr2) {\n  return arr1.reduce((a,b)=>a+b) + arr2.reduce((a,b)=>a+b)\n}\n```\nbetter:\n```javascript\nfunction arrayPlusArray(arr1, arr2) {\n  return arr1.concat(arr2).reduce((acc, cur) => acc + cur);\n}\n\nfunction arrayPlusArray(...arrays) {\n  return [].concat(...arrays).reduce((a,b) => a+b,0)\n}\n```\n\n### 18.order Array\nresult:\n```javascript\n//\"56 65 74 100 99 68 86 180 90\" \n//ordered by numbers weights becomes: \"100 180 90 56 65 74 68 86 99\"\n// 100->1+0+0 =1     56/65 -> '56'<'65'\n```\n\n```javascript\nfunction orderWeight(string) {\n    let fn = (n)=>n.split('').reduce((a,b)=>(+a)+(+b))//plus num\n    return string.split(' ').sort((a,b)=>{\n      return fn(a)==fn(b)?(a>b?1:-1):fn(a)-fn(b)\n    }).join(' ')\n}\n```\n\n### 19.Magic Squares\nresult:\n判断是否是数独\n```javascript\nvar arr = [\n[8, 1, 6] \n[3, 5, 7]\n[4, 9, 2]\n];  //return true\n```\n思路：把所有情况组成个新数组\n```javascript\nfunction magicSquare(arr){\n  if(arr.length == 0 || arr[0] == null) return false;\n  let newArr = [...arr],\n      flag = true,\n      len = arr.length,\n      sum = arr[0].reduce((a,b)=>a+b);\n      arr[0].map((i,n)=>{\n        let item = [];\n        if(n == 0){ //X\n          let item2 = []\n          for(let j = 0; j<len; j++){\n            item2.push(arr[j][j])\n          }\n          newArr.push(item2)\n        }\n        if(n == len){ //X\n          let item3 = []\n          for(let j = 0; j<len; j++){\n            item3.push(arr[j][n-j])\n          }\n          newArr.push(item3)\n        }\n        for(let j = 0; j<len; j++){ // |||\n          item.push(arr[j][n])\n        }\n        newArr.push(item)\n      })\n      newArr.map(k=>{\n        flag = flag && sum == k.reduce((a,b)=>a+b)\n      })\n      return flag\n}\n```\n\n### 20.Sum of array singles\nresult:\n```javascript\n//repeats([4,5,7,5,4,8]) = 15 \n// because only the numbers 7 and 8 occur once, and their sum is 15.\n```\n```javascript\nfunction repeats(arr){\n  return 2*([...new Set(arr)].reduce((a,b)=>a+b)) -  arr.reduce((a,b)=>a+b)\n}\n```\nbetter:\n```javascript\n//filter 索引不变代表唯一，达到筛选效果\nfunction repeats(arr){\n  return arr.filter(v => arr.indexOf(v) === arr.lastIndexOf(v)).reduce((a,b) => a + b, 0);\n}\n```\n\n\n### 21.Sentence Calculator\nresule:\nLower case [a-z]: 'a'=1, 'b'=2, 'c'=3, ..., 'z'=26\nUpper case [A-Z]: 'A'=2, 'B'=4, 'C'=6, ..., 'Z'=52\nDigits [0-9] their numeric value: '0'=0, '1'=1, '2'=2, ..., '9'=9\nOther characters: 0 value\n//lettersToNumbers(\"I Love You\"), 170\n```javascript\n function lettersToNumbers(s) {\n   let sum = 0;\n   s.split('').map(i=>{\n     let num = i.charCodeAt();\n     if(num>64 && num<91){\n       sum += (num-64)*2\n     } else if( num>96 && num<123){\n       sum += num-96\n     } else if( num>47 && num< 58 ) {\n       sum += +i\n     }\n   })\n   return sum\n }\n```\nbetter:\n```javascript\n function lettersToNumbers(s) {\n   let key = c =>\n     /[a-z]/.test(c) ? c.charCodeAt() - 96 :\n     /[A-Z]/.test(c) ? (c.charCodeAt() - 64) * 2 :\n     /\\d/.test(c) ? +c : 0\n   return [...s].reduce((s, v) => s + key(v), 0)\n }\n```\n\n\n\n\n\n\n\n","source":"_posts/js-algorithm.md","raw":"---\ntitle: js算法题\ndate: 2018-01-10 17:19:16\ntags: javascript\n---\n\n### 1.Remove String Spaces\n```javascript\nfunction noSpace(x){\n  return x.replace(/\\s/g, '');\n}\n```\n\n### 2.Sort array by string length\n```javascript\nfunction sortByLength (array) {\n  // Return an array containing the same strings, ordered from shortest to longest\n  return array.sort((a,b) = >a.length - b.length)\n}\n```\n\n### 3.Handle String\nresult：\n```javascript\naccum(\"abcd\");    // \"A-Bb-Ccc-Dddd\"\naccum(\"RqaEzty\"); // \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\"\naccum(\"cwAt\");    // \"C-Ww-Aaa-Tttt\"\n````\n\n```javascript\nfunction accum(s) {\n\t// your code\n  if(/^[A-Za-z]*$/.test(s)){\n    let arr = s.split('');\n    let newArr = [];\n    arr.map((item,index)=>{\n        let str = item.toUpperCase()\n        while(index>0){\n          str += item.toLowerCase();\n          index--\n        }\n        newArr.push(str)\n    })\n    return newArr.join('-')\n  }\n}\n```\n\nbetter:\n```javascript\nfunction accum(s) {\n  return s.split('').map((x,index) => x.toUpperCase()+Array(index+1).join(x.toLowerCase())).join('-');\n}\nfunction accum(s) {\n  return s.split('').map((c, i) => (c.toUpperCase() + c.toLowerCase().repeat(i))).join('-');\n}\n```\n\n### 4.Handle Arr\nresult：\n```text\n[\"az\", \"toto\", \"picaro\", \"zone\", \"kiwi\"] -->\n[[\"az\", \"toto picaro zone kiwi\"], \n [\"az toto\", \"picaro zone kiwi\"], \n [\"az toto picaro\", \"zone kiwi\"], \n [\"az toto picaro zone\", \"kiwi\"]]\n````\n\n```javascript\nfunction partlist(arr) {\n    // your code\n    let newArr = [],\n        preArr = [],\n        copy = arr.slice(0);//copy arr\n    for(let i = 0;i < arr.length-1;i++){\n      let newItem = [];\n      preArr.push(copy.shift());// shift arr\n      newItem.push(preArr.join(' '));\n      newItem.push(copy.join(' '));\n      newArr.push(newItem);\n    }\n    return newArr\n}\n```\nbetter\n```javascript\nvar partlist=a=>a.map((v,i)=>[a.slice(0,i).join(' '),a.slice(i).join(' ')]).slice(1)\n```\n\n### 5.Get the Middle Character\nresult：\n```text\nrunBF(\"test\\0\") should return \"es\"\n\nrunBF(\"testing\\0\") should return \"t\"\n\nrunBF(\"middle\\0\") should return \"dd\"\n\nrunBF(\"A\\0\") should return \"A\"\n```\n\n```javascript\nfunction getMiddle(s)\n{\n  let a = parseInt(s.length/2); // 5/2 -> 2\n  return s.length % 2? s.substr(a,1) : s.substr(a-1,2) //odd:even\n}\n```\nbetter:\n```javascript\nfunction getMiddle(s)\n{\n  return s.substr(Math.ceil(s.length / 2 - 1), s.length % 2 === 0 ? 2 : 1);\n}\n```\n\n### 6.Vowel Count\nresult:\n```javascript\ngetCount('aeiou'); //5 a,e,i,o,u\ngetCount('abcde'); //2 a,e\n```\n```javascript\nfunction getCount(str) {\n  var vowelsCount = 0,\n      arr = ['a','e','i','o','u'];\n  str.split('').map(i=>{\n    if(arr.indexOf(i)>=0){ //arr.indexOf('i') -> 2\n      vowelsCount++\n    }\n  })\n  return vowelsCount;\n}\n```\n\nbetter:\n```javascript\nfunction getCount(str) {\n  return (str.match(/[aeiou]/ig)||[]).length;\n}\n```\n\n### 7.Highest and Lowest\nresult:\n```javascript\nhighAndLow(\"1 2 3 4 5\"); // return \"5 1\"\nhighAndLow(\"1 2 -3 4 5\"); // return \"5 -3\"\nhighAndLow(\"1 9 3 4 -5\"); // return \"9 -5\"\n```\n\n```javascript\nfunction highAndLow(numbers){\n  let arr = numbers.split(\" \").sort((a,b)=>a-b);// sort arr\n  return arr[arr.length-1] + ' ' + arr[0]\n}\n```\n\nbetter:\n```javascript\nfunction highAndLow(numbers){\n  numbers = numbers.split(' ');\n  return `${Math.max(...numbers)} ${Math.min(...numbers)}`;\n}\n```\n\n### 8.Array Diff\nresult:\n```javascript\n//It should remove all values from list a, which are present in list b.\narray_diff([1,2],[1]) //return [2]\narray_diff([1,2,2,2,3],[2]) //return [1,3]\n```\n```javascript\nfunction array_diff(a, b) {\n// splice导致数组变化\n//   a.map((j,i)=>{\n//     if(b.indexOf(j) >= 0){\n//       a.splice(i,1)    \n//     }\n//   }) \nreturn a.filter(e => b.indexOf(e)<0)\n}\n```\nother:\n```javascript\n//includes判断数组是否有某元素\nfunction array_diff(a, b) {\n  return a.filter(e => !b.includes(e));\n}\n```\n\n### 9.Find the odd int\nresult:\n```javascript\nfindOdd([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5]) //return 5\nfindOdd([1,1,2,-2,5,2,4,4,-1,-2,5]); //return -1\nfindOdd([20,1,1,2,2,3,3,5,5,4,20,4,5]); //return 5\n```\n```javascript\nfunction findOdd(A) {\n  //happy coding! \n  let obj = {}//count obj\n  A.map(i=>{\n    for(let j = 0;j<A.length;j++){\n      if(i==A[j]){\n        obj[i] = obj[i]?obj[i]+1:1;\n        break;\n      }\n    }\n  })\n  for(let k in obj){\n    if(obj[k]%2){\n        return parseInt(k)\n    }\n  }\n  return 0;\n}\n```\nbetter\n```javascript\n//异或位运算符，看不懂\nconst findOdd = (xs) => xs.reduce((a, b) => a ^ b);\n```\n\n### 10.Persistent Bugger.\nresult:\n```javascript\n//which is the number of times you must multiply the digits in num until you reach a single digit.\npersistence(39) === 3 // because 3*9 = 27, 2*7 = 14, 1*4=4  count:3\n                       // and 4 has only one digit\n                       \npersistence(999) === 4 // because 9*9*9 = 729, 7*2*9 = 126,  count:4\n                        // 1*2*6 = 12, and finally 1*2 = 2\n\npersistence(4) === 0 // because 4 is already a one-digit number count:0\n```\n\n```javascript\nfunction persistence(num) {\n   //code me\n  let count = 0;\n  while(String(num).length > 1){\n    num = String(num).split('').map(Number).reduce((a,b) => a*b)\n    count++\n  }\n  return count\n}\n```\n\nbetter：\n```javascript\nconst persistence = num => {\n  return `${num}`.length > 1 \n    ? 1 + persistence(`${num}`.split('').reduce((a, b) => a * +b)) \n    : 0;\n}\n```\n\n\n### 11.The Supermarket Queue\n函数有两个输入变量：\n客户：表示队列的正整数数组。每个整数表示一个客户，其值是它们需要检查的时间量。\nN：一个正整数，结账柜台的数量。\n\n函数应该返回一个整数，所需的总时间。\nresult:\n```javascript\nqueueTime([5,3,4], 1)\n// should return 12\n// because when n=1, the total time is just the sum of the times\n\nqueueTime([10,2,3,3], 2)\n// should return 10\n// because here n=2 and the 2nd, 3rd, and 4th people in the \n// queue finish before the 1st person has finished.\n\nqueueTime([2,3,10], 2)\n// should return 12\n```\n```javascript\nfunction queueTime(customers, n) {\n  if(customers.length == 0) return 0;\n  let arr = customers.splice(0,n).sort((a,b)=>a-b);\n  customers.map(i=>{\n    arr[0] += i;\n    arr.sort((a,b)=>a-b)\n  })\n  return Math.max(...arr)\n}\n```\nbetter\n```javascript\n//不需要截第一个数组，不需要排序，直接对最小的值加\nfunction queueTime(customers, n) {\n  var w = new Array(n).fill(0);\n  for (let t of customers) {\n    let idx = w.indexOf(Math.min(...w));\n    w[idx] += t;\n  }\n  return Math.max(...w);\n}\n```\n\n### 12.toWeirdCase\nresult: 大写小写大写小写\n```javascript\n//even upper/ odd lower\ntoWeirdCase( \"String\" );//=> returns \"StRiNg\"\ntoWeirdCase( \"Weird string case\" );//=> returns \"WeIrD StRiNg CaSe\"\n```\n\n```javascript\nfunction toWeirdCase(string){\n  return string.split(' ').map(k=>\n    k.split('').map((e,i)=>i%2?e.toLowerCase():e.toUpperCase()).join('')\n  ).join(' ')\n}\n```\nbetter:\n```javascript\n//每匹配两个字母\nfunction toWeirdCase(string){\n  return string.replace(/(\\w{1,2})/g,(m)=>m[0].toUpperCase()+m.slice(1))\n}\n```\n\n### 13.Handle Time\nresult\n```javascript\nhumanReadable(60) //rerurn '00:01:00',\nhumanReadable(86399) //return '23:59:59'\nhumanReadable(359999) //return '99:59:59'\n```\n\n```javascript\nfunction humanReadable(seconds) {\n  let zero = m => parseInt(m)<10? '0'+parseInt(m):parseInt(m);\n  if(seconds<60){\n    return `00:00:${zero(seconds)}`\n  } else if( 60<=seconds && seconds<60*60){\n    return `00:${zero(seconds/60)}:${zero(seconds%60)}`\n  } else {\n    return `${zero(seconds/60/60)}:${zero(parseInt(seconds/60)%60)}:${zero(seconds%60)}`\n  }\n}\n```\n\n```javascript\n//傻了，不用判断时间\nfunction humanReadable(seconds) {\n  var pad = function(x) { return (x < 10) ? \"0\"+x : x; }\n  return pad(parseInt(seconds / (60*60))) + \":\" +\n         pad(parseInt(seconds / 60 % 60)) + \":\" +\n         pad(seconds % 60)\n}\n```\n\n\n### 14.Split Strings\nresult:\n```javascript\nsolution('abc') // should return ['ab', 'c_']\nsolution('abcdef') // should return ['ab', 'cd', 'ef']\n```\n```javascript\n//偶数次会导致末尾多个空,直接用match更好\nfunction solution(str){\n   return str.replace(/(\\w{1,2})/g,m=>m[1]?m[0]+m[1]+'-':m[0]+'_').split('-').filter(i=>i&&i.trim())\n}\n```\nbetter:\n```javascript\nfunction solution(str){\n   return (str + \"_\").match(/../g);\n}\n```\n\n### 15.Arrays of cats and dogs\nresult: Dog在n个节点内抓到Cat，return被抓的C\n```javascript\n//solve(['D','C','C','D','C'], 2) = 2, because the dog at index 0 (D0) catches C1 and D3 catches C4. \n//solve(['C','C','D','D','C','D'], 2) = 3, because D2 catches C0, D3 catches C1 and D5 catches C4.\n//solve(['C','C','D','D','C','D'], 1) = 2, because D2 catches C1, D3 catches C4. C0 cannot be caught because n == 1.\n//solve(['D','C','D','D','C'], 1) = 2, too many dogs, so all cats get caught!\n```\n\n```javascript\nfunction solve(arr,n){\n let count = 0;\n arr.map((k,i)=>{\n   let start = i-n>0?i-n:0;\n       catchRange = arr.slice(start,i+n+1), //be catched range\n       index = catchRange.indexOf('D');//the dog index\n   if( k=='C' && index>=0){\n     count++\n     arr[index+start] = '' //the dog catch cat,let it go\n   }\n })\n return count;\n}\n```\n\n### 16.Dont drive too long!\nresult: Drive的时间<9小时\n```javascript\n var dailyShedule = [ [\"7:00-10:30\",\"Drive\"],\n                        [\"10:30-10:45\",\"Rest\"],\n                        [\"10:45-11:45\",\"Drive\"],\n                        [\"11:45-12:15\",\"Rest\"],\n                        [\"12:15-16:45\",\"Drive\"],\n                        [\"16:45-20:15\",\"Work\"]]; \n            //-> should return false,9 hours of driving in total.\n```\n\n```javascript\nfunction shouldIBeTired(dailyShedule){\n  let time = 0\n  dailyShedule.map(i=>{\n    if(i[1]==\"Drive\"){\n      let arr = i[0].split('-');\n      time += (arr[1].split(':')[0] - arr[0].split(':')[0])+ (arr[1].split(':')[1] - arr[0].split(':')[1])/60;\n    }\n  })\n  return time>9\n}\n```\n\n### 17.Array plus array\nresult:\n```javascript\n//arrayPlusArray([1, 2, 3], [4, 5, 6]), 21\n```\n\n```javascript\nfunction arrayPlusArray(arr1, arr2) {\n  return arr1.reduce((a,b)=>a+b) + arr2.reduce((a,b)=>a+b)\n}\n```\nbetter:\n```javascript\nfunction arrayPlusArray(arr1, arr2) {\n  return arr1.concat(arr2).reduce((acc, cur) => acc + cur);\n}\n\nfunction arrayPlusArray(...arrays) {\n  return [].concat(...arrays).reduce((a,b) => a+b,0)\n}\n```\n\n### 18.order Array\nresult:\n```javascript\n//\"56 65 74 100 99 68 86 180 90\" \n//ordered by numbers weights becomes: \"100 180 90 56 65 74 68 86 99\"\n// 100->1+0+0 =1     56/65 -> '56'<'65'\n```\n\n```javascript\nfunction orderWeight(string) {\n    let fn = (n)=>n.split('').reduce((a,b)=>(+a)+(+b))//plus num\n    return string.split(' ').sort((a,b)=>{\n      return fn(a)==fn(b)?(a>b?1:-1):fn(a)-fn(b)\n    }).join(' ')\n}\n```\n\n### 19.Magic Squares\nresult:\n判断是否是数独\n```javascript\nvar arr = [\n[8, 1, 6] \n[3, 5, 7]\n[4, 9, 2]\n];  //return true\n```\n思路：把所有情况组成个新数组\n```javascript\nfunction magicSquare(arr){\n  if(arr.length == 0 || arr[0] == null) return false;\n  let newArr = [...arr],\n      flag = true,\n      len = arr.length,\n      sum = arr[0].reduce((a,b)=>a+b);\n      arr[0].map((i,n)=>{\n        let item = [];\n        if(n == 0){ //X\n          let item2 = []\n          for(let j = 0; j<len; j++){\n            item2.push(arr[j][j])\n          }\n          newArr.push(item2)\n        }\n        if(n == len){ //X\n          let item3 = []\n          for(let j = 0; j<len; j++){\n            item3.push(arr[j][n-j])\n          }\n          newArr.push(item3)\n        }\n        for(let j = 0; j<len; j++){ // |||\n          item.push(arr[j][n])\n        }\n        newArr.push(item)\n      })\n      newArr.map(k=>{\n        flag = flag && sum == k.reduce((a,b)=>a+b)\n      })\n      return flag\n}\n```\n\n### 20.Sum of array singles\nresult:\n```javascript\n//repeats([4,5,7,5,4,8]) = 15 \n// because only the numbers 7 and 8 occur once, and their sum is 15.\n```\n```javascript\nfunction repeats(arr){\n  return 2*([...new Set(arr)].reduce((a,b)=>a+b)) -  arr.reduce((a,b)=>a+b)\n}\n```\nbetter:\n```javascript\n//filter 索引不变代表唯一，达到筛选效果\nfunction repeats(arr){\n  return arr.filter(v => arr.indexOf(v) === arr.lastIndexOf(v)).reduce((a,b) => a + b, 0);\n}\n```\n\n\n### 21.Sentence Calculator\nresule:\nLower case [a-z]: 'a'=1, 'b'=2, 'c'=3, ..., 'z'=26\nUpper case [A-Z]: 'A'=2, 'B'=4, 'C'=6, ..., 'Z'=52\nDigits [0-9] their numeric value: '0'=0, '1'=1, '2'=2, ..., '9'=9\nOther characters: 0 value\n//lettersToNumbers(\"I Love You\"), 170\n```javascript\n function lettersToNumbers(s) {\n   let sum = 0;\n   s.split('').map(i=>{\n     let num = i.charCodeAt();\n     if(num>64 && num<91){\n       sum += (num-64)*2\n     } else if( num>96 && num<123){\n       sum += num-96\n     } else if( num>47 && num< 58 ) {\n       sum += +i\n     }\n   })\n   return sum\n }\n```\nbetter:\n```javascript\n function lettersToNumbers(s) {\n   let key = c =>\n     /[a-z]/.test(c) ? c.charCodeAt() - 96 :\n     /[A-Z]/.test(c) ? (c.charCodeAt() - 64) * 2 :\n     /\\d/.test(c) ? +c : 0\n   return [...s].reduce((s, v) => s + key(v), 0)\n }\n```\n\n\n\n\n\n\n\n","slug":"js-algorithm","published":1,"updated":"2018-01-23T02:30:27.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct38e000cnilw6m33luyk","content":"<h3 id=\"1-Remove-String-Spaces\"><a href=\"#1-Remove-String-Spaces\" class=\"headerlink\" title=\"1.Remove String Spaces\"></a>1.Remove String Spaces</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">noSpace</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-Sort-array-by-string-length\"><a href=\"#2-Sort-array-by-string-length\" class=\"headerlink\" title=\"2.Sort array by string length\"></a>2.Sort array by string length</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortByLength</span> (<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Return an array containing the same strings, ordered from shortest to longest</span></div><div class=\"line\">  <span class=\"keyword\">return</span> array.sort((a,b) = &gt;a.length - b.length)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-Handle-String\"><a href=\"#3-Handle-String\" class=\"headerlink\" title=\"3.Handle String\"></a>3.Handle String</h3><p>result：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">accum(<span class=\"string\">\"abcd\"</span>);    <span class=\"comment\">// \"A-Bb-Ccc-Dddd\"</span></div><div class=\"line\">accum(<span class=\"string\">\"RqaEzty\"</span>); <span class=\"comment\">// \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\"</span></div><div class=\"line\">accum(<span class=\"string\">\"cwAt\"</span>);    <span class=\"comment\">// \"C-Ww-Aaa-Tttt\"</span></div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accum</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// your code</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"regexp\">/^[A-Za-z]*$/</span>.test(s))&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> arr = s.split(<span class=\"string\">''</span>);</div><div class=\"line\">    <span class=\"keyword\">let</span> newArr = [];</div><div class=\"line\">    arr.map(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> str = item.toUpperCase()</div><div class=\"line\">        <span class=\"keyword\">while</span>(index&gt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">          str += item.toLowerCase();</div><div class=\"line\">          index--</div><div class=\"line\">        &#125;</div><div class=\"line\">        newArr.push(str)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">return</span> newArr.join(<span class=\"string\">'-'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accum</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">x,index</span>) =&gt;</span> x.toUpperCase()+<span class=\"built_in\">Array</span>(index+<span class=\"number\">1</span>).join(x.toLowerCase())).join(<span class=\"string\">'-'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accum</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">c, i</span>) =&gt;</span> (c.toUpperCase() + c.toLowerCase().repeat(i))).join(<span class=\"string\">'-'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-Handle-Arr\"><a href=\"#4-Handle-Arr\" class=\"headerlink\" title=\"4.Handle Arr\"></a>4.Handle Arr</h3><p>result：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&quot;az&quot;, &quot;toto&quot;, &quot;picaro&quot;, &quot;zone&quot;, &quot;kiwi&quot;] --&gt;</div><div class=\"line\">[[&quot;az&quot;, &quot;toto picaro zone kiwi&quot;], </div><div class=\"line\"> [&quot;az toto&quot;, &quot;picaro zone kiwi&quot;], </div><div class=\"line\"> [&quot;az toto picaro&quot;, &quot;zone kiwi&quot;], </div><div class=\"line\"> [&quot;az toto picaro zone&quot;, &quot;kiwi&quot;]]</div><div class=\"line\">`</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partlist</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// your code</span></div><div class=\"line\">    <span class=\"keyword\">let</span> newArr = [],</div><div class=\"line\">        preArr = [],</div><div class=\"line\">        copy = arr.slice(<span class=\"number\">0</span>);<span class=\"comment\">//copy arr</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; arr.length<span class=\"number\">-1</span>;i++)&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> newItem = [];</div><div class=\"line\">      preArr.push(copy.shift());<span class=\"comment\">// shift arr</span></div><div class=\"line\">      newItem.push(preArr.join(<span class=\"string\">' '</span>));</div><div class=\"line\">      newItem.push(copy.join(<span class=\"string\">' '</span>));</div><div class=\"line\">      newArr.push(newItem);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> newArr</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> partlist=<span class=\"function\"><span class=\"params\">a</span>=&gt;</span>a.map(<span class=\"function\">(<span class=\"params\">v,i</span>)=&gt;</span>[a.slice(<span class=\"number\">0</span>,i).join(<span class=\"string\">' '</span>),a.slice(i).join(<span class=\"string\">' '</span>)]).slice(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"5-Get-the-Middle-Character\"><a href=\"#5-Get-the-Middle-Character\" class=\"headerlink\" title=\"5.Get the Middle Character\"></a>5.Get the Middle Character</h3><p>result：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">runBF(&quot;test\\0&quot;) should return &quot;es&quot;</div><div class=\"line\"></div><div class=\"line\">runBF(&quot;testing\\0&quot;) should return &quot;t&quot;</div><div class=\"line\"></div><div class=\"line\">runBF(&quot;middle\\0&quot;) should return &quot;dd&quot;</div><div class=\"line\"></div><div class=\"line\">runBF(&quot;A\\0&quot;) should return &quot;A&quot;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMiddle</span>(<span class=\"params\">s</span>)</span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"built_in\">parseInt</span>(s.length/<span class=\"number\">2</span>); <span class=\"comment\">// 5/2 -&gt; 2</span></div><div class=\"line\">  <span class=\"keyword\">return</span> s.length % <span class=\"number\">2</span>? s.substr(a,<span class=\"number\">1</span>) : s.substr(a<span class=\"number\">-1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//odd:even</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMiddle</span>(<span class=\"params\">s</span>)</span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> s.substr(<span class=\"built_in\">Math</span>.ceil(s.length / <span class=\"number\">2</span> - <span class=\"number\">1</span>), s.length % <span class=\"number\">2</span> === <span class=\"number\">0</span> ? <span class=\"number\">2</span> : <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"6-Vowel-Count\"><a href=\"#6-Vowel-Count\" class=\"headerlink\" title=\"6.Vowel Count\"></a>6.Vowel Count</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">getCount(<span class=\"string\">'aeiou'</span>); <span class=\"comment\">//5 a,e,i,o,u</span></div><div class=\"line\">getCount(<span class=\"string\">'abcde'</span>); <span class=\"comment\">//2 a,e</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCount</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> vowelsCount = <span class=\"number\">0</span>,</div><div class=\"line\">      arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'o'</span>,<span class=\"string\">'u'</span>];</div><div class=\"line\">  str.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.indexOf(i)&gt;=<span class=\"number\">0</span>)&#123; <span class=\"comment\">//arr.indexOf('i') -&gt; 2</span></div><div class=\"line\">      vowelsCount++</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> vowelsCount;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCount</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (str.match(<span class=\"regexp\">/[aeiou]/ig</span>)||[]).length;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"7-Highest-and-Lowest\"><a href=\"#7-Highest-and-Lowest\" class=\"headerlink\" title=\"7.Highest and Lowest\"></a>7.Highest and Lowest</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">highAndLow(<span class=\"string\">\"1 2 3 4 5\"</span>); <span class=\"comment\">// return \"5 1\"</span></div><div class=\"line\">highAndLow(<span class=\"string\">\"1 2 -3 4 5\"</span>); <span class=\"comment\">// return \"5 -3\"</span></div><div class=\"line\">highAndLow(<span class=\"string\">\"1 9 3 4 -5\"</span>); <span class=\"comment\">// return \"9 -5\"</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">highAndLow</span>(<span class=\"params\">numbers</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> arr = numbers.split(<span class=\"string\">\" \"</span>).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b);<span class=\"comment\">// sort arr</span></div><div class=\"line\">  <span class=\"keyword\">return</span> arr[arr.length<span class=\"number\">-1</span>] + <span class=\"string\">' '</span> + arr[<span class=\"number\">0</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">highAndLow</span>(<span class=\"params\">numbers</span>)</span>&#123;</div><div class=\"line\">  numbers = numbers.split(<span class=\"string\">' '</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.max(...numbers)&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.min(...numbers)&#125;</span>`</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"8-Array-Diff\"><a href=\"#8-Array-Diff\" class=\"headerlink\" title=\"8.Array Diff\"></a>8.Array Diff</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//It should remove all values from list a, which are present in list b.</span></div><div class=\"line\">array_diff([<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>]) <span class=\"comment\">//return [2]</span></div><div class=\"line\">array_diff([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">2</span>]) <span class=\"comment\">//return [1,3]</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">array_diff</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// splice导致数组变化</span></div><div class=\"line\"><span class=\"comment\">//   a.map((j,i)=&gt;&#123;</span></div><div class=\"line\"><span class=\"comment\">//     if(b.indexOf(j) &gt;= 0)&#123;</span></div><div class=\"line\"><span class=\"comment\">//       a.splice(i,1)    </span></div><div class=\"line\"><span class=\"comment\">//     &#125;</span></div><div class=\"line\"><span class=\"comment\">//   &#125;) </span></div><div class=\"line\"><span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> b.indexOf(e)&lt;<span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>other:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//includes判断数组是否有某元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">array_diff</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> !b.includes(e));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"9-Find-the-odd-int\"><a href=\"#9-Find-the-odd-int\" class=\"headerlink\" title=\"9.Find the odd int\"></a>9.Find the odd int</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">findOdd([<span class=\"number\">20</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">20</span>,<span class=\"number\">4</span>,<span class=\"number\">-1</span>,<span class=\"number\">-2</span>,<span class=\"number\">5</span>]) <span class=\"comment\">//return 5</span></div><div class=\"line\">findOdd([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">-1</span>,<span class=\"number\">-2</span>,<span class=\"number\">5</span>]); <span class=\"comment\">//return -1</span></div><div class=\"line\">findOdd([<span class=\"number\">20</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">20</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]); <span class=\"comment\">//return 5</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findOdd</span>(<span class=\"params\">A</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//happy coding! </span></div><div class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;<span class=\"comment\">//count obj</span></div><div class=\"line\">  A.map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;A.length;j++)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(i==A[j])&#123;</div><div class=\"line\">        obj[i] = obj[i]?obj[i]+<span class=\"number\">1</span>:<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> k <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(obj[k]%<span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(k)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//异或位运算符，看不懂</span></div><div class=\"line\"><span class=\"keyword\">const</span> findOdd = <span class=\"function\">(<span class=\"params\">xs</span>) =&gt;</span> xs.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a ^ b);</div></pre></td></tr></table></figure></p>\n<h3 id=\"10-Persistent-Bugger\"><a href=\"#10-Persistent-Bugger\" class=\"headerlink\" title=\"10.Persistent Bugger.\"></a>10.Persistent Bugger.</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//which is the number of times you must multiply the digits in num until you reach a single digit.</span></div><div class=\"line\">persistence(<span class=\"number\">39</span>) === <span class=\"number\">3</span> <span class=\"comment\">// because 3*9 = 27, 2*7 = 14, 1*4=4  count:3</span></div><div class=\"line\">                       <span class=\"comment\">// and 4 has only one digit</span></div><div class=\"line\">                       </div><div class=\"line\">persistence(<span class=\"number\">999</span>) === <span class=\"number\">4</span> <span class=\"comment\">// because 9*9*9 = 729, 7*2*9 = 126,  count:4</span></div><div class=\"line\">                        <span class=\"comment\">// 1*2*6 = 12, and finally 1*2 = 2</span></div><div class=\"line\"></div><div class=\"line\">persistence(<span class=\"number\">4</span>) === <span class=\"number\">0</span> <span class=\"comment\">// because 4 is already a one-digit number count:0</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">persistence</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">//code me</span></div><div class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">String</span>(num).length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">    num = <span class=\"built_in\">String</span>(num).split(<span class=\"string\">''</span>).map(<span class=\"built_in\">Number</span>).reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a*b)</div><div class=\"line\">    count++</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> count</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> persistence = <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;num&#125;</span>`</span>.length &gt; <span class=\"number\">1</span> </div><div class=\"line\">    ? <span class=\"number\">1</span> + persistence(<span class=\"string\">`<span class=\"subst\">$&#123;num&#125;</span>`</span>.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a * +b)) </div><div class=\"line\">    : <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"11-The-Supermarket-Queue\"><a href=\"#11-The-Supermarket-Queue\" class=\"headerlink\" title=\"11.The Supermarket Queue\"></a>11.The Supermarket Queue</h3><p>函数有两个输入变量：<br>客户：表示队列的正整数数组。每个整数表示一个客户，其值是它们需要检查的时间量。<br>N：一个正整数，结账柜台的数量。</p>\n<p>函数应该返回一个整数，所需的总时间。<br>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">queueTime([<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>], <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">// should return 12</span></div><div class=\"line\"><span class=\"comment\">// because when n=1, the total time is just the sum of the times</span></div><div class=\"line\"></div><div class=\"line\">queueTime([<span class=\"number\">10</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>], <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// should return 10</span></div><div class=\"line\"><span class=\"comment\">// because here n=2 and the 2nd, 3rd, and 4th people in the </span></div><div class=\"line\"><span class=\"comment\">// queue finish before the 1st person has finished.</span></div><div class=\"line\"></div><div class=\"line\">queueTime([<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>], <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// should return 12</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueTime</span>(<span class=\"params\">customers, n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(customers.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> arr = customers.splice(<span class=\"number\">0</span>,n).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b);</div><div class=\"line\">  customers.map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;</div><div class=\"line\">    arr[<span class=\"number\">0</span>] += i;</div><div class=\"line\">    arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(...arr)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不需要截第一个数组，不需要排序，直接对最小的值加</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueTime</span>(<span class=\"params\">customers, n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> w = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n).fill(<span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> t <span class=\"keyword\">of</span> customers) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> idx = w.indexOf(<span class=\"built_in\">Math</span>.min(...w));</div><div class=\"line\">    w[idx] += t;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(...w);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"12-toWeirdCase\"><a href=\"#12-toWeirdCase\" class=\"headerlink\" title=\"12.toWeirdCase\"></a>12.toWeirdCase</h3><p>result: 大写小写大写小写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//even upper/ odd lower</span></div><div class=\"line\">toWeirdCase( <span class=\"string\">\"String\"</span> );<span class=\"comment\">//=&gt; returns \"StRiNg\"</span></div><div class=\"line\">toWeirdCase( <span class=\"string\">\"Weird string case\"</span> );<span class=\"comment\">//=&gt; returns \"WeIrD StRiNg CaSe\"</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toWeirdCase</span>(<span class=\"params\">string</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> string.split(<span class=\"string\">' '</span>).map(<span class=\"function\"><span class=\"params\">k</span>=&gt;</span></div><div class=\"line\">    k.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">e,i</span>)=&gt;</span>i%<span class=\"number\">2</span>?e.toLowerCase():e.toUpperCase()).join(<span class=\"string\">''</span>)</div><div class=\"line\">  ).join(<span class=\"string\">' '</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//每匹配两个字母</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toWeirdCase</span>(<span class=\"params\">string</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> string.replace(<span class=\"regexp\">/(\\w&#123;1,2&#125;)/g</span>,(m)=&gt;m[<span class=\"number\">0</span>].toUpperCase()+m.slice(<span class=\"number\">1</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"13-Handle-Time\"><a href=\"#13-Handle-Time\" class=\"headerlink\" title=\"13.Handle Time\"></a>13.Handle Time</h3><p>result<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">humanReadable(<span class=\"number\">60</span>) <span class=\"comment\">//rerurn '00:01:00',</span></div><div class=\"line\">humanReadable(<span class=\"number\">86399</span>) <span class=\"comment\">//return '23:59:59'</span></div><div class=\"line\">humanReadable(<span class=\"number\">359999</span>) <span class=\"comment\">//return '99:59:59'</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">humanReadable</span>(<span class=\"params\">seconds</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> zero = <span class=\"function\"><span class=\"params\">m</span> =&gt;</span> <span class=\"built_in\">parseInt</span>(m)&lt;<span class=\"number\">10</span>? <span class=\"string\">'0'</span>+<span class=\"built_in\">parseInt</span>(m):<span class=\"built_in\">parseInt</span>(m);</div><div class=\"line\">  <span class=\"keyword\">if</span>(seconds&lt;<span class=\"number\">60</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`00:00:<span class=\"subst\">$&#123;zero(seconds)&#125;</span>`</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"number\">60</span>&lt;=seconds &amp;&amp; seconds&lt;<span class=\"number\">60</span>*<span class=\"number\">60</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`00:<span class=\"subst\">$&#123;zero(seconds<span class=\"regexp\">/60)&#125;:$&#123;zero(seconds%60)&#125;`</span></span></span></div><div class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">  &#125; else &#123;</span></span></span></div><div class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">    return `$&#123;zero(seconds/</span><span class=\"number\">60</span><span class=\"regexp\">/60)&#125;:$&#123;zero(parseInt(seconds/</span><span class=\"number\">60</span>)%<span class=\"number\">60</span>)&#125;</span>:<span class=\"subst\">$&#123;zero(seconds%<span class=\"number\">60</span>)&#125;</span>`</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//傻了，不用判断时间</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">humanReadable</span>(<span class=\"params\">seconds</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> pad = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> (x &lt; <span class=\"number\">10</span>) ? <span class=\"string\">\"0\"</span>+x : x; &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> pad(<span class=\"built_in\">parseInt</span>(seconds / (<span class=\"number\">60</span>*<span class=\"number\">60</span>))) + <span class=\"string\">\":\"</span> +</div><div class=\"line\">         pad(<span class=\"built_in\">parseInt</span>(seconds / <span class=\"number\">60</span> % <span class=\"number\">60</span>)) + <span class=\"string\">\":\"</span> +</div><div class=\"line\">         pad(seconds % <span class=\"number\">60</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"14-Split-Strings\"><a href=\"#14-Split-Strings\" class=\"headerlink\" title=\"14.Split Strings\"></a>14.Split Strings</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">solution(<span class=\"string\">'abc'</span>) <span class=\"comment\">// should return ['ab', 'c_']</span></div><div class=\"line\">solution(<span class=\"string\">'abcdef'</span>) <span class=\"comment\">// should return ['ab', 'cd', 'ef']</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//偶数次会导致末尾多个空,直接用match更好</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solution</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/(\\w&#123;1,2&#125;)/g</span>,m=&gt;m[<span class=\"number\">1</span>]?m[<span class=\"number\">0</span>]+m[<span class=\"number\">1</span>]+<span class=\"string\">'-'</span>:m[<span class=\"number\">0</span>]+<span class=\"string\">'_'</span>).split(<span class=\"string\">'-'</span>).filter(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>i&amp;&amp;i.trim())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solution</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> (str + <span class=\"string\">\"_\"</span>).match(<span class=\"regexp\">/../g</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"15-Arrays-of-cats-and-dogs\"><a href=\"#15-Arrays-of-cats-and-dogs\" class=\"headerlink\" title=\"15.Arrays of cats and dogs\"></a>15.Arrays of cats and dogs</h3><p>result: Dog在n个节点内抓到Cat，return被抓的C<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//solve(['D','C','C','D','C'], 2) = 2, because the dog at index 0 (D0) catches C1 and D3 catches C4. </span></div><div class=\"line\"><span class=\"comment\">//solve(['C','C','D','D','C','D'], 2) = 3, because D2 catches C0, D3 catches C1 and D5 catches C4.</span></div><div class=\"line\"><span class=\"comment\">//solve(['C','C','D','D','C','D'], 1) = 2, because D2 catches C1, D3 catches C4. C0 cannot be caught because n == 1.</span></div><div class=\"line\"><span class=\"comment\">//solve(['D','C','D','D','C'], 1) = 2, too many dogs, so all cats get caught!</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solve</span>(<span class=\"params\">arr,n</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"> arr.map(<span class=\"function\">(<span class=\"params\">k,i</span>)=&gt;</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">let</span> start = i-n&gt;<span class=\"number\">0</span>?i-n:<span class=\"number\">0</span>;</div><div class=\"line\">       catchRange = arr.slice(start,i+n+<span class=\"number\">1</span>), <span class=\"comment\">//be catched range</span></div><div class=\"line\">       index = catchRange.indexOf(<span class=\"string\">'D'</span>);<span class=\"comment\">//the dog index</span></div><div class=\"line\">   <span class=\"keyword\">if</span>( k==<span class=\"string\">'C'</span> &amp;&amp; index&gt;=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">     count++</div><div class=\"line\">     arr[index+start] = <span class=\"string\">''</span> <span class=\"comment\">//the dog catch cat,let it go</span></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"> <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"16-Dont-drive-too-long\"><a href=\"#16-Dont-drive-too-long\" class=\"headerlink\" title=\"16.Dont drive too long!\"></a>16.Dont drive too long!</h3><p>result: Drive的时间<9小时 <figure=\"\" class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dailyShedule = [ [<span class=\"string\">\"7:00-10:30\"</span>,<span class=\"string\">\"Drive\"</span>],</div><div class=\"line\">                       [<span class=\"string\">\"10:30-10:45\"</span>,<span class=\"string\">\"Rest\"</span>],</div><div class=\"line\">                       [<span class=\"string\">\"10:45-11:45\"</span>,<span class=\"string\">\"Drive\"</span>],</div><div class=\"line\">                       [<span class=\"string\">\"11:45-12:15\"</span>,<span class=\"string\">\"Rest\"</span>],</div><div class=\"line\">                       [<span class=\"string\">\"12:15-16:45\"</span>,<span class=\"string\">\"Drive\"</span>],</div><div class=\"line\">                       [<span class=\"string\">\"16:45-20:15\"</span>,<span class=\"string\">\"Work\"</span>]]; </div><div class=\"line\">           <span class=\"comment\">//-&gt; should return false,9 hours of driving in total.</span></div></pre></td></tr></table></9小时></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shouldIBeTired</span>(<span class=\"params\">dailyShedule</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> time = <span class=\"number\">0</span></div><div class=\"line\">  dailyShedule.map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(i[<span class=\"number\">1</span>]==<span class=\"string\">\"Drive\"</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> arr = i[<span class=\"number\">0</span>].split(<span class=\"string\">'-'</span>);</div><div class=\"line\">      time += (arr[<span class=\"number\">1</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>] - arr[<span class=\"number\">0</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>])+ (arr[<span class=\"number\">1</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">1</span>] - arr[<span class=\"number\">0</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">1</span>])/<span class=\"number\">60</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> time&gt;<span class=\"number\">9</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"17-Array-plus-array\"><a href=\"#17-Array-plus-array\" class=\"headerlink\" title=\"17.Array plus array\"></a>17.Array plus array</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//arrayPlusArray([1, 2, 3], [4, 5, 6]), 21</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayPlusArray</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr1.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b) + arr2.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayPlusArray</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr1.concat(arr2).reduce(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> acc + cur);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayPlusArray</span>(<span class=\"params\">...arrays</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [].concat(...arrays).reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a+b,<span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"18-order-Array\"><a href=\"#18-order-Array\" class=\"headerlink\" title=\"18.order Array\"></a>18.order Array</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//\"56 65 74 100 99 68 86 180 90\" </span></div><div class=\"line\"><span class=\"comment\">//ordered by numbers weights becomes: \"100 180 90 56 65 74 68 86 99\"</span></div><div class=\"line\"><span class=\"comment\">// 100-&gt;1+0+0 =1     56/65 -&gt; '56'&lt;'65'</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">orderWeight</span>(<span class=\"params\">string</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fn = <span class=\"function\">(<span class=\"params\">n</span>)=&gt;</span>n.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>(+a)+(+b))<span class=\"comment\">//plus num</span></div><div class=\"line\">    <span class=\"keyword\">return</span> string.split(<span class=\"string\">' '</span>).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> fn(a)==fn(b)?(a&gt;b?<span class=\"number\">1</span>:<span class=\"number\">-1</span>):fn(a)-fn(b)</div><div class=\"line\">    &#125;).join(<span class=\"string\">' '</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"19-Magic-Squares\"><a href=\"#19-Magic-Squares\" class=\"headerlink\" title=\"19.Magic Squares\"></a>19.Magic Squares</h3><p>result:<br>判断是否是数独<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [</div><div class=\"line\">[<span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>] </div><div class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>]</div><div class=\"line\">];  <span class=\"comment\">//return true</span></div></pre></td></tr></table></figure></p>\n<p>思路：把所有情况组成个新数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">magicSquare</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(arr.length == <span class=\"number\">0</span> || arr[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> newArr = [...arr],</div><div class=\"line\">      flag = <span class=\"literal\">true</span>,</div><div class=\"line\">      len = arr.length,</div><div class=\"line\">      sum = arr[<span class=\"number\">0</span>].reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b);</div><div class=\"line\">      arr[<span class=\"number\">0</span>].map(<span class=\"function\">(<span class=\"params\">i,n</span>)=&gt;</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> item = [];</div><div class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)&#123; <span class=\"comment\">//X</span></div><div class=\"line\">          <span class=\"keyword\">let</span> item2 = []</div><div class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j&lt;len; j++)&#123;</div><div class=\"line\">            item2.push(arr[j][j])</div><div class=\"line\">          &#125;</div><div class=\"line\">          newArr.push(item2)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(n == len)&#123; <span class=\"comment\">//X</span></div><div class=\"line\">          <span class=\"keyword\">let</span> item3 = []</div><div class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j&lt;len; j++)&#123;</div><div class=\"line\">            item3.push(arr[j][n-j])</div><div class=\"line\">          &#125;</div><div class=\"line\">          newArr.push(item3)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j&lt;len; j++)&#123; <span class=\"comment\">// |||</span></div><div class=\"line\">          item.push(arr[j][n])</div><div class=\"line\">        &#125;</div><div class=\"line\">        newArr.push(item)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      newArr.map(<span class=\"function\"><span class=\"params\">k</span>=&gt;</span>&#123;</div><div class=\"line\">        flag = flag &amp;&amp; sum == k.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      <span class=\"keyword\">return</span> flag</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"20-Sum-of-array-singles\"><a href=\"#20-Sum-of-array-singles\" class=\"headerlink\" title=\"20.Sum of array singles\"></a>20.Sum of array singles</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//repeats([4,5,7,5,4,8]) = 15 </span></div><div class=\"line\"><span class=\"comment\">// because only the numbers 7 and 8 occur once, and their sum is 15.</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeats</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span>*<span class=\"function\">(<span class=\"params\">[...<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr</span>)].<span class=\"params\">reduce</span>(<span class=\"params\">(a,b</span>)=&gt;</span>a+b)) -  arr.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//filter 索引不变代表唯一，达到筛选效果</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeats</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> arr.indexOf(v) === arr.lastIndexOf(v)).reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a + b, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"21-Sentence-Calculator\"><a href=\"#21-Sentence-Calculator\" class=\"headerlink\" title=\"21.Sentence Calculator\"></a>21.Sentence Calculator</h3><p>resule:<br>Lower case [a-z]: ‘a’=1, ‘b’=2, ‘c’=3, …, ‘z’=26<br>Upper case [A-Z]: ‘A’=2, ‘B’=4, ‘C’=6, …, ‘Z’=52<br>Digits [0-9] their numeric value: ‘0’=0, ‘1’=1, ‘2’=2, …, ‘9’=9<br>Other characters: 0 value<br>//lettersToNumbers(“I Love You”), 170<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lettersToNumbers</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">  s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> num = i.charCodeAt();</div><div class=\"line\">    <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">64</span> &amp;&amp; num&lt;<span class=\"number\">91</span>)&#123;</div><div class=\"line\">      sum += (num<span class=\"number\">-64</span>)*<span class=\"number\">2</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( num&gt;<span class=\"number\">96</span> &amp;&amp; num&lt;<span class=\"number\">123</span>)&#123;</div><div class=\"line\">      sum += num<span class=\"number\">-96</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( num&gt;<span class=\"number\">47</span> &amp;&amp; num&lt; <span class=\"number\">58</span> ) &#123;</div><div class=\"line\">      sum += +i</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> sum</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lettersToNumbers</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> key = <span class=\"function\"><span class=\"params\">c</span> =&gt;</span></div><div class=\"line\">    /[a-z]/.test(c) ? c.charCodeAt() - <span class=\"number\">96</span> :</div><div class=\"line\">    /[A-Z]/.test(c) ? (c.charCodeAt() - <span class=\"number\">64</span>) * <span class=\"number\">2</span> :</div><div class=\"line\">    /\\d/.test(c) ? +c : <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">return</span> [...s].reduce(<span class=\"function\">(<span class=\"params\">s, v</span>) =&gt;</span> s + key(v), <span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-Remove-String-Spaces\"><a href=\"#1-Remove-String-Spaces\" class=\"headerlink\" title=\"1.Remove String Spaces\"></a>1.Remove String Spaces</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">noSpace</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2-Sort-array-by-string-length\"><a href=\"#2-Sort-array-by-string-length\" class=\"headerlink\" title=\"2.Sort array by string length\"></a>2.Sort array by string length</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortByLength</span> (<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Return an array containing the same strings, ordered from shortest to longest</span></div><div class=\"line\">  <span class=\"keyword\">return</span> array.sort((a,b) = &gt;a.length - b.length)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-Handle-String\"><a href=\"#3-Handle-String\" class=\"headerlink\" title=\"3.Handle String\"></a>3.Handle String</h3><p>result：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">accum(<span class=\"string\">\"abcd\"</span>);    <span class=\"comment\">// \"A-Bb-Ccc-Dddd\"</span></div><div class=\"line\">accum(<span class=\"string\">\"RqaEzty\"</span>); <span class=\"comment\">// \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\"</span></div><div class=\"line\">accum(<span class=\"string\">\"cwAt\"</span>);    <span class=\"comment\">// \"C-Ww-Aaa-Tttt\"</span></div><div class=\"line\"><span class=\"string\">`</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accum</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// your code</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"regexp\">/^[A-Za-z]*$/</span>.test(s))&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> arr = s.split(<span class=\"string\">''</span>);</div><div class=\"line\">    <span class=\"keyword\">let</span> newArr = [];</div><div class=\"line\">    arr.map(<span class=\"function\">(<span class=\"params\">item,index</span>)=&gt;</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> str = item.toUpperCase()</div><div class=\"line\">        <span class=\"keyword\">while</span>(index&gt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">          str += item.toLowerCase();</div><div class=\"line\">          index--</div><div class=\"line\">        &#125;</div><div class=\"line\">        newArr.push(str)</div><div class=\"line\">    &#125;)</div><div class=\"line\">    <span class=\"keyword\">return</span> newArr.join(<span class=\"string\">'-'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accum</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">x,index</span>) =&gt;</span> x.toUpperCase()+<span class=\"built_in\">Array</span>(index+<span class=\"number\">1</span>).join(x.toLowerCase())).join(<span class=\"string\">'-'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accum</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">c, i</span>) =&gt;</span> (c.toUpperCase() + c.toLowerCase().repeat(i))).join(<span class=\"string\">'-'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-Handle-Arr\"><a href=\"#4-Handle-Arr\" class=\"headerlink\" title=\"4.Handle Arr\"></a>4.Handle Arr</h3><p>result：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&quot;az&quot;, &quot;toto&quot;, &quot;picaro&quot;, &quot;zone&quot;, &quot;kiwi&quot;] --&gt;</div><div class=\"line\">[[&quot;az&quot;, &quot;toto picaro zone kiwi&quot;], </div><div class=\"line\"> [&quot;az toto&quot;, &quot;picaro zone kiwi&quot;], </div><div class=\"line\"> [&quot;az toto picaro&quot;, &quot;zone kiwi&quot;], </div><div class=\"line\"> [&quot;az toto picaro zone&quot;, &quot;kiwi&quot;]]</div><div class=\"line\">`</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partlist</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// your code</span></div><div class=\"line\">    <span class=\"keyword\">let</span> newArr = [],</div><div class=\"line\">        preArr = [],</div><div class=\"line\">        copy = arr.slice(<span class=\"number\">0</span>);<span class=\"comment\">//copy arr</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; arr.length<span class=\"number\">-1</span>;i++)&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> newItem = [];</div><div class=\"line\">      preArr.push(copy.shift());<span class=\"comment\">// shift arr</span></div><div class=\"line\">      newItem.push(preArr.join(<span class=\"string\">' '</span>));</div><div class=\"line\">      newItem.push(copy.join(<span class=\"string\">' '</span>));</div><div class=\"line\">      newArr.push(newItem);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> newArr</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> partlist=<span class=\"function\"><span class=\"params\">a</span>=&gt;</span>a.map(<span class=\"function\">(<span class=\"params\">v,i</span>)=&gt;</span>[a.slice(<span class=\"number\">0</span>,i).join(<span class=\"string\">' '</span>),a.slice(i).join(<span class=\"string\">' '</span>)]).slice(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"5-Get-the-Middle-Character\"><a href=\"#5-Get-the-Middle-Character\" class=\"headerlink\" title=\"5.Get the Middle Character\"></a>5.Get the Middle Character</h3><p>result：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">runBF(&quot;test\\0&quot;) should return &quot;es&quot;</div><div class=\"line\"></div><div class=\"line\">runBF(&quot;testing\\0&quot;) should return &quot;t&quot;</div><div class=\"line\"></div><div class=\"line\">runBF(&quot;middle\\0&quot;) should return &quot;dd&quot;</div><div class=\"line\"></div><div class=\"line\">runBF(&quot;A\\0&quot;) should return &quot;A&quot;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMiddle</span>(<span class=\"params\">s</span>)</span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"built_in\">parseInt</span>(s.length/<span class=\"number\">2</span>); <span class=\"comment\">// 5/2 -&gt; 2</span></div><div class=\"line\">  <span class=\"keyword\">return</span> s.length % <span class=\"number\">2</span>? s.substr(a,<span class=\"number\">1</span>) : s.substr(a<span class=\"number\">-1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//odd:even</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMiddle</span>(<span class=\"params\">s</span>)</span></div><div class=\"line\"><span class=\"function\"></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> s.substr(<span class=\"built_in\">Math</span>.ceil(s.length / <span class=\"number\">2</span> - <span class=\"number\">1</span>), s.length % <span class=\"number\">2</span> === <span class=\"number\">0</span> ? <span class=\"number\">2</span> : <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"6-Vowel-Count\"><a href=\"#6-Vowel-Count\" class=\"headerlink\" title=\"6.Vowel Count\"></a>6.Vowel Count</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">getCount(<span class=\"string\">'aeiou'</span>); <span class=\"comment\">//5 a,e,i,o,u</span></div><div class=\"line\">getCount(<span class=\"string\">'abcde'</span>); <span class=\"comment\">//2 a,e</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCount</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> vowelsCount = <span class=\"number\">0</span>,</div><div class=\"line\">      arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'e'</span>,<span class=\"string\">'i'</span>,<span class=\"string\">'o'</span>,<span class=\"string\">'u'</span>];</div><div class=\"line\">  str.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr.indexOf(i)&gt;=<span class=\"number\">0</span>)&#123; <span class=\"comment\">//arr.indexOf('i') -&gt; 2</span></div><div class=\"line\">      vowelsCount++</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> vowelsCount;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCount</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (str.match(<span class=\"regexp\">/[aeiou]/ig</span>)||[]).length;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"7-Highest-and-Lowest\"><a href=\"#7-Highest-and-Lowest\" class=\"headerlink\" title=\"7.Highest and Lowest\"></a>7.Highest and Lowest</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">highAndLow(<span class=\"string\">\"1 2 3 4 5\"</span>); <span class=\"comment\">// return \"5 1\"</span></div><div class=\"line\">highAndLow(<span class=\"string\">\"1 2 -3 4 5\"</span>); <span class=\"comment\">// return \"5 -3\"</span></div><div class=\"line\">highAndLow(<span class=\"string\">\"1 9 3 4 -5\"</span>); <span class=\"comment\">// return \"9 -5\"</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">highAndLow</span>(<span class=\"params\">numbers</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> arr = numbers.split(<span class=\"string\">\" \"</span>).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b);<span class=\"comment\">// sort arr</span></div><div class=\"line\">  <span class=\"keyword\">return</span> arr[arr.length<span class=\"number\">-1</span>] + <span class=\"string\">' '</span> + arr[<span class=\"number\">0</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">highAndLow</span>(<span class=\"params\">numbers</span>)</span>&#123;</div><div class=\"line\">  numbers = numbers.split(<span class=\"string\">' '</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.max(...numbers)&#125;</span> <span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.min(...numbers)&#125;</span>`</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"8-Array-Diff\"><a href=\"#8-Array-Diff\" class=\"headerlink\" title=\"8.Array Diff\"></a>8.Array Diff</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//It should remove all values from list a, which are present in list b.</span></div><div class=\"line\">array_diff([<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">1</span>]) <span class=\"comment\">//return [2]</span></div><div class=\"line\">array_diff([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">2</span>]) <span class=\"comment\">//return [1,3]</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">array_diff</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// splice导致数组变化</span></div><div class=\"line\"><span class=\"comment\">//   a.map((j,i)=&gt;&#123;</span></div><div class=\"line\"><span class=\"comment\">//     if(b.indexOf(j) &gt;= 0)&#123;</span></div><div class=\"line\"><span class=\"comment\">//       a.splice(i,1)    </span></div><div class=\"line\"><span class=\"comment\">//     &#125;</span></div><div class=\"line\"><span class=\"comment\">//   &#125;) </span></div><div class=\"line\"><span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> b.indexOf(e)&lt;<span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>other:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//includes判断数组是否有某元素</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">array_diff</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> !b.includes(e));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"9-Find-the-odd-int\"><a href=\"#9-Find-the-odd-int\" class=\"headerlink\" title=\"9.Find the odd int\"></a>9.Find the odd int</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">findOdd([<span class=\"number\">20</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">20</span>,<span class=\"number\">4</span>,<span class=\"number\">-1</span>,<span class=\"number\">-2</span>,<span class=\"number\">5</span>]) <span class=\"comment\">//return 5</span></div><div class=\"line\">findOdd([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">-2</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">-1</span>,<span class=\"number\">-2</span>,<span class=\"number\">5</span>]); <span class=\"comment\">//return -1</span></div><div class=\"line\">findOdd([<span class=\"number\">20</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">20</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]); <span class=\"comment\">//return 5</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findOdd</span>(<span class=\"params\">A</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//happy coding! </span></div><div class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;<span class=\"comment\">//count obj</span></div><div class=\"line\">  A.map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;j&lt;A.length;j++)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(i==A[j])&#123;</div><div class=\"line\">        obj[i] = obj[i]?obj[i]+<span class=\"number\">1</span>:<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> k <span class=\"keyword\">in</span> obj)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(obj[k]%<span class=\"number\">2</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(k)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//异或位运算符，看不懂</span></div><div class=\"line\"><span class=\"keyword\">const</span> findOdd = <span class=\"function\">(<span class=\"params\">xs</span>) =&gt;</span> xs.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a ^ b);</div></pre></td></tr></table></figure></p>\n<h3 id=\"10-Persistent-Bugger\"><a href=\"#10-Persistent-Bugger\" class=\"headerlink\" title=\"10.Persistent Bugger.\"></a>10.Persistent Bugger.</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//which is the number of times you must multiply the digits in num until you reach a single digit.</span></div><div class=\"line\">persistence(<span class=\"number\">39</span>) === <span class=\"number\">3</span> <span class=\"comment\">// because 3*9 = 27, 2*7 = 14, 1*4=4  count:3</span></div><div class=\"line\">                       <span class=\"comment\">// and 4 has only one digit</span></div><div class=\"line\">                       </div><div class=\"line\">persistence(<span class=\"number\">999</span>) === <span class=\"number\">4</span> <span class=\"comment\">// because 9*9*9 = 729, 7*2*9 = 126,  count:4</span></div><div class=\"line\">                        <span class=\"comment\">// 1*2*6 = 12, and finally 1*2 = 2</span></div><div class=\"line\"></div><div class=\"line\">persistence(<span class=\"number\">4</span>) === <span class=\"number\">0</span> <span class=\"comment\">// because 4 is already a one-digit number count:0</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">persistence</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">//code me</span></div><div class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">String</span>(num).length &gt; <span class=\"number\">1</span>)&#123;</div><div class=\"line\">    num = <span class=\"built_in\">String</span>(num).split(<span class=\"string\">''</span>).map(<span class=\"built_in\">Number</span>).reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a*b)</div><div class=\"line\">    count++</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> count</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> persistence = <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;num&#125;</span>`</span>.length &gt; <span class=\"number\">1</span> </div><div class=\"line\">    ? <span class=\"number\">1</span> + persistence(<span class=\"string\">`<span class=\"subst\">$&#123;num&#125;</span>`</span>.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a * +b)) </div><div class=\"line\">    : <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"11-The-Supermarket-Queue\"><a href=\"#11-The-Supermarket-Queue\" class=\"headerlink\" title=\"11.The Supermarket Queue\"></a>11.The Supermarket Queue</h3><p>函数有两个输入变量：<br>客户：表示队列的正整数数组。每个整数表示一个客户，其值是它们需要检查的时间量。<br>N：一个正整数，结账柜台的数量。</p>\n<p>函数应该返回一个整数，所需的总时间。<br>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">queueTime([<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>], <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">// should return 12</span></div><div class=\"line\"><span class=\"comment\">// because when n=1, the total time is just the sum of the times</span></div><div class=\"line\"></div><div class=\"line\">queueTime([<span class=\"number\">10</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>], <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// should return 10</span></div><div class=\"line\"><span class=\"comment\">// because here n=2 and the 2nd, 3rd, and 4th people in the </span></div><div class=\"line\"><span class=\"comment\">// queue finish before the 1st person has finished.</span></div><div class=\"line\"></div><div class=\"line\">queueTime([<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">10</span>], <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"comment\">// should return 12</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueTime</span>(<span class=\"params\">customers, n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(customers.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> arr = customers.splice(<span class=\"number\">0</span>,n).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b);</div><div class=\"line\">  customers.map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;</div><div class=\"line\">    arr[<span class=\"number\">0</span>] += i;</div><div class=\"line\">    arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(...arr)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不需要截第一个数组，不需要排序，直接对最小的值加</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queueTime</span>(<span class=\"params\">customers, n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> w = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(n).fill(<span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> t <span class=\"keyword\">of</span> customers) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> idx = w.indexOf(<span class=\"built_in\">Math</span>.min(...w));</div><div class=\"line\">    w[idx] += t;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(...w);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"12-toWeirdCase\"><a href=\"#12-toWeirdCase\" class=\"headerlink\" title=\"12.toWeirdCase\"></a>12.toWeirdCase</h3><p>result: 大写小写大写小写<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//even upper/ odd lower</span></div><div class=\"line\">toWeirdCase( <span class=\"string\">\"String\"</span> );<span class=\"comment\">//=&gt; returns \"StRiNg\"</span></div><div class=\"line\">toWeirdCase( <span class=\"string\">\"Weird string case\"</span> );<span class=\"comment\">//=&gt; returns \"WeIrD StRiNg CaSe\"</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toWeirdCase</span>(<span class=\"params\">string</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> string.split(<span class=\"string\">' '</span>).map(<span class=\"function\"><span class=\"params\">k</span>=&gt;</span></div><div class=\"line\">    k.split(<span class=\"string\">''</span>).map(<span class=\"function\">(<span class=\"params\">e,i</span>)=&gt;</span>i%<span class=\"number\">2</span>?e.toLowerCase():e.toUpperCase()).join(<span class=\"string\">''</span>)</div><div class=\"line\">  ).join(<span class=\"string\">' '</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//每匹配两个字母</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toWeirdCase</span>(<span class=\"params\">string</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> string.replace(<span class=\"regexp\">/(\\w&#123;1,2&#125;)/g</span>,(m)=&gt;m[<span class=\"number\">0</span>].toUpperCase()+m.slice(<span class=\"number\">1</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"13-Handle-Time\"><a href=\"#13-Handle-Time\" class=\"headerlink\" title=\"13.Handle Time\"></a>13.Handle Time</h3><p>result<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">humanReadable(<span class=\"number\">60</span>) <span class=\"comment\">//rerurn '00:01:00',</span></div><div class=\"line\">humanReadable(<span class=\"number\">86399</span>) <span class=\"comment\">//return '23:59:59'</span></div><div class=\"line\">humanReadable(<span class=\"number\">359999</span>) <span class=\"comment\">//return '99:59:59'</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">humanReadable</span>(<span class=\"params\">seconds</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> zero = <span class=\"function\"><span class=\"params\">m</span> =&gt;</span> <span class=\"built_in\">parseInt</span>(m)&lt;<span class=\"number\">10</span>? <span class=\"string\">'0'</span>+<span class=\"built_in\">parseInt</span>(m):<span class=\"built_in\">parseInt</span>(m);</div><div class=\"line\">  <span class=\"keyword\">if</span>(seconds&lt;<span class=\"number\">60</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`00:00:<span class=\"subst\">$&#123;zero(seconds)&#125;</span>`</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"number\">60</span>&lt;=seconds &amp;&amp; seconds&lt;<span class=\"number\">60</span>*<span class=\"number\">60</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`00:<span class=\"subst\">$&#123;zero(seconds<span class=\"regexp\">/60)&#125;:$&#123;zero(seconds%60)&#125;`</span></span></span></div><div class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">  &#125; else &#123;</span></span></span></div><div class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"regexp\">    return `$&#123;zero(seconds/</span><span class=\"number\">60</span><span class=\"regexp\">/60)&#125;:$&#123;zero(parseInt(seconds/</span><span class=\"number\">60</span>)%<span class=\"number\">60</span>)&#125;</span>:<span class=\"subst\">$&#123;zero(seconds%<span class=\"number\">60</span>)&#125;</span>`</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//傻了，不用判断时间</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">humanReadable</span>(<span class=\"params\">seconds</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> pad = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> (x &lt; <span class=\"number\">10</span>) ? <span class=\"string\">\"0\"</span>+x : x; &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> pad(<span class=\"built_in\">parseInt</span>(seconds / (<span class=\"number\">60</span>*<span class=\"number\">60</span>))) + <span class=\"string\">\":\"</span> +</div><div class=\"line\">         pad(<span class=\"built_in\">parseInt</span>(seconds / <span class=\"number\">60</span> % <span class=\"number\">60</span>)) + <span class=\"string\">\":\"</span> +</div><div class=\"line\">         pad(seconds % <span class=\"number\">60</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"14-Split-Strings\"><a href=\"#14-Split-Strings\" class=\"headerlink\" title=\"14.Split Strings\"></a>14.Split Strings</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">solution(<span class=\"string\">'abc'</span>) <span class=\"comment\">// should return ['ab', 'c_']</span></div><div class=\"line\">solution(<span class=\"string\">'abcdef'</span>) <span class=\"comment\">// should return ['ab', 'cd', 'ef']</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//偶数次会导致末尾多个空,直接用match更好</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solution</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> str.replace(<span class=\"regexp\">/(\\w&#123;1,2&#125;)/g</span>,m=&gt;m[<span class=\"number\">1</span>]?m[<span class=\"number\">0</span>]+m[<span class=\"number\">1</span>]+<span class=\"string\">'-'</span>:m[<span class=\"number\">0</span>]+<span class=\"string\">'_'</span>).split(<span class=\"string\">'-'</span>).filter(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>i&amp;&amp;i.trim())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solution</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> (str + <span class=\"string\">\"_\"</span>).match(<span class=\"regexp\">/../g</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"15-Arrays-of-cats-and-dogs\"><a href=\"#15-Arrays-of-cats-and-dogs\" class=\"headerlink\" title=\"15.Arrays of cats and dogs\"></a>15.Arrays of cats and dogs</h3><p>result: Dog在n个节点内抓到Cat，return被抓的C<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//solve(['D','C','C','D','C'], 2) = 2, because the dog at index 0 (D0) catches C1 and D3 catches C4. </span></div><div class=\"line\"><span class=\"comment\">//solve(['C','C','D','D','C','D'], 2) = 3, because D2 catches C0, D3 catches C1 and D5 catches C4.</span></div><div class=\"line\"><span class=\"comment\">//solve(['C','C','D','D','C','D'], 1) = 2, because D2 catches C1, D3 catches C4. C0 cannot be caught because n == 1.</span></div><div class=\"line\"><span class=\"comment\">//solve(['D','C','D','D','C'], 1) = 2, too many dogs, so all cats get caught!</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">solve</span>(<span class=\"params\">arr,n</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"> arr.map(<span class=\"function\">(<span class=\"params\">k,i</span>)=&gt;</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">let</span> start = i-n&gt;<span class=\"number\">0</span>?i-n:<span class=\"number\">0</span>;</div><div class=\"line\">       catchRange = arr.slice(start,i+n+<span class=\"number\">1</span>), <span class=\"comment\">//be catched range</span></div><div class=\"line\">       index = catchRange.indexOf(<span class=\"string\">'D'</span>);<span class=\"comment\">//the dog index</span></div><div class=\"line\">   <span class=\"keyword\">if</span>( k==<span class=\"string\">'C'</span> &amp;&amp; index&gt;=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">     count++</div><div class=\"line\">     arr[index+start] = <span class=\"string\">''</span> <span class=\"comment\">//the dog catch cat,let it go</span></div><div class=\"line\">   &#125;</div><div class=\"line\"> &#125;)</div><div class=\"line\"> <span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"16-Dont-drive-too-long\"><a href=\"#16-Dont-drive-too-long\" class=\"headerlink\" title=\"16.Dont drive too long!\"></a>16.Dont drive too long!</h3><p>result: Drive的时间<9小时 <figure=\"\" class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dailyShedule = [ [<span class=\"string\">\"7:00-10:30\"</span>,<span class=\"string\">\"Drive\"</span>],</div><div class=\"line\">                       [<span class=\"string\">\"10:30-10:45\"</span>,<span class=\"string\">\"Rest\"</span>],</div><div class=\"line\">                       [<span class=\"string\">\"10:45-11:45\"</span>,<span class=\"string\">\"Drive\"</span>],</div><div class=\"line\">                       [<span class=\"string\">\"11:45-12:15\"</span>,<span class=\"string\">\"Rest\"</span>],</div><div class=\"line\">                       [<span class=\"string\">\"12:15-16:45\"</span>,<span class=\"string\">\"Drive\"</span>],</div><div class=\"line\">                       [<span class=\"string\">\"16:45-20:15\"</span>,<span class=\"string\">\"Work\"</span>]]; </div><div class=\"line\">           <span class=\"comment\">//-&gt; should return false,9 hours of driving in total.</span></div></pre></td></tr></table></9小时></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shouldIBeTired</span>(<span class=\"params\">dailyShedule</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> time = <span class=\"number\">0</span></div><div class=\"line\">  dailyShedule.map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(i[<span class=\"number\">1</span>]==<span class=\"string\">\"Drive\"</span>)&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> arr = i[<span class=\"number\">0</span>].split(<span class=\"string\">'-'</span>);</div><div class=\"line\">      time += (arr[<span class=\"number\">1</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>] - arr[<span class=\"number\">0</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">0</span>])+ (arr[<span class=\"number\">1</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">1</span>] - arr[<span class=\"number\">0</span>].split(<span class=\"string\">':'</span>)[<span class=\"number\">1</span>])/<span class=\"number\">60</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> time&gt;<span class=\"number\">9</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"17-Array-plus-array\"><a href=\"#17-Array-plus-array\" class=\"headerlink\" title=\"17.Array plus array\"></a>17.Array plus array</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//arrayPlusArray([1, 2, 3], [4, 5, 6]), 21</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayPlusArray</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr1.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b) + arr2.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayPlusArray</span>(<span class=\"params\">arr1, arr2</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr1.concat(arr2).reduce(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> acc + cur);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayPlusArray</span>(<span class=\"params\">...arrays</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [].concat(...arrays).reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a+b,<span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"18-order-Array\"><a href=\"#18-order-Array\" class=\"headerlink\" title=\"18.order Array\"></a>18.order Array</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//\"56 65 74 100 99 68 86 180 90\" </span></div><div class=\"line\"><span class=\"comment\">//ordered by numbers weights becomes: \"100 180 90 56 65 74 68 86 99\"</span></div><div class=\"line\"><span class=\"comment\">// 100-&gt;1+0+0 =1     56/65 -&gt; '56'&lt;'65'</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">orderWeight</span>(<span class=\"params\">string</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fn = <span class=\"function\">(<span class=\"params\">n</span>)=&gt;</span>n.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>(+a)+(+b))<span class=\"comment\">//plus num</span></div><div class=\"line\">    <span class=\"keyword\">return</span> string.split(<span class=\"string\">' '</span>).sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> fn(a)==fn(b)?(a&gt;b?<span class=\"number\">1</span>:<span class=\"number\">-1</span>):fn(a)-fn(b)</div><div class=\"line\">    &#125;).join(<span class=\"string\">' '</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"19-Magic-Squares\"><a href=\"#19-Magic-Squares\" class=\"headerlink\" title=\"19.Magic Squares\"></a>19.Magic Squares</h3><p>result:<br>判断是否是数独<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [</div><div class=\"line\">[<span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>] </div><div class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>]</div><div class=\"line\">];  <span class=\"comment\">//return true</span></div></pre></td></tr></table></figure></p>\n<p>思路：把所有情况组成个新数组<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">magicSquare</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(arr.length == <span class=\"number\">0</span> || arr[<span class=\"number\">0</span>] == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> newArr = [...arr],</div><div class=\"line\">      flag = <span class=\"literal\">true</span>,</div><div class=\"line\">      len = arr.length,</div><div class=\"line\">      sum = arr[<span class=\"number\">0</span>].reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b);</div><div class=\"line\">      arr[<span class=\"number\">0</span>].map(<span class=\"function\">(<span class=\"params\">i,n</span>)=&gt;</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> item = [];</div><div class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)&#123; <span class=\"comment\">//X</span></div><div class=\"line\">          <span class=\"keyword\">let</span> item2 = []</div><div class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j&lt;len; j++)&#123;</div><div class=\"line\">            item2.push(arr[j][j])</div><div class=\"line\">          &#125;</div><div class=\"line\">          newArr.push(item2)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(n == len)&#123; <span class=\"comment\">//X</span></div><div class=\"line\">          <span class=\"keyword\">let</span> item3 = []</div><div class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j&lt;len; j++)&#123;</div><div class=\"line\">            item3.push(arr[j][n-j])</div><div class=\"line\">          &#125;</div><div class=\"line\">          newArr.push(item3)</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j&lt;len; j++)&#123; <span class=\"comment\">// |||</span></div><div class=\"line\">          item.push(arr[j][n])</div><div class=\"line\">        &#125;</div><div class=\"line\">        newArr.push(item)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      newArr.map(<span class=\"function\"><span class=\"params\">k</span>=&gt;</span>&#123;</div><div class=\"line\">        flag = flag &amp;&amp; sum == k.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b)</div><div class=\"line\">      &#125;)</div><div class=\"line\">      <span class=\"keyword\">return</span> flag</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"20-Sum-of-array-singles\"><a href=\"#20-Sum-of-array-singles\" class=\"headerlink\" title=\"20.Sum of array singles\"></a>20.Sum of array singles</h3><p>result:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//repeats([4,5,7,5,4,8]) = 15 </span></div><div class=\"line\"><span class=\"comment\">// because only the numbers 7 and 8 occur once, and their sum is 15.</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeats</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span>*<span class=\"function\">(<span class=\"params\">[...<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr</span>)].<span class=\"params\">reduce</span>(<span class=\"params\">(a,b</span>)=&gt;</span>a+b)) -  arr.reduce(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a+b)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//filter 索引不变代表唯一，达到筛选效果</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">repeats</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> arr.indexOf(v) === arr.lastIndexOf(v)).reduce(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a + b, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"21-Sentence-Calculator\"><a href=\"#21-Sentence-Calculator\" class=\"headerlink\" title=\"21.Sentence Calculator\"></a>21.Sentence Calculator</h3><p>resule:<br>Lower case [a-z]: ‘a’=1, ‘b’=2, ‘c’=3, …, ‘z’=26<br>Upper case [A-Z]: ‘A’=2, ‘B’=4, ‘C’=6, …, ‘Z’=52<br>Digits [0-9] their numeric value: ‘0’=0, ‘1’=1, ‘2’=2, …, ‘9’=9<br>Other characters: 0 value<br>//lettersToNumbers(“I Love You”), 170<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lettersToNumbers</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">  s.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">i</span>=&gt;</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> num = i.charCodeAt();</div><div class=\"line\">    <span class=\"keyword\">if</span>(num&gt;<span class=\"number\">64</span> &amp;&amp; num&lt;<span class=\"number\">91</span>)&#123;</div><div class=\"line\">      sum += (num<span class=\"number\">-64</span>)*<span class=\"number\">2</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( num&gt;<span class=\"number\">96</span> &amp;&amp; num&lt;<span class=\"number\">123</span>)&#123;</div><div class=\"line\">      sum += num<span class=\"number\">-96</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( num&gt;<span class=\"number\">47</span> &amp;&amp; num&lt; <span class=\"number\">58</span> ) &#123;</div><div class=\"line\">      sum += +i</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> sum</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>better:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lettersToNumbers</span>(<span class=\"params\">s</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> key = <span class=\"function\"><span class=\"params\">c</span> =&gt;</span></div><div class=\"line\">    /[a-z]/.test(c) ? c.charCodeAt() - <span class=\"number\">96</span> :</div><div class=\"line\">    /[A-Z]/.test(c) ? (c.charCodeAt() - <span class=\"number\">64</span>) * <span class=\"number\">2</span> :</div><div class=\"line\">    /\\d/.test(c) ? +c : <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">return</span> [...s].reduce(<span class=\"function\">(<span class=\"params\">s, v</span>) =&gt;</span> s + key(v), <span class=\"number\">0</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"javascript 设计模式","date":"2017-07-27T08:27:35.000Z","_content":"### 1.模板方法模式\n定义一个操作中的算法骨架，将一些步骤延迟到子类中。\n模板方法使用继承来改变算法的一部分，而策略模式用委托来改变整个算法。\n```javascript\n//泡咖啡\nvar Coffee = function(){};\n\nCoffee.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nCoffee.prototype.brewCoffee = function(){\n    console.log('用沸水冲泡咖啡');\n}\nCoffee.prototype.pourInCup = function(){\n    console.log('把咖啡倒进杯子');\n}\nCoffee.prototype.addSugarAndMilk = function(){\n    console.log('加糖和牛奶');\n}\nCoffee.prototype.init = function(){\n    this.boilWater();\n    this.brewCoffee();\n    this.pourInCup();\n    this.addSugarAndMilk();\n}\n\n//泡茶\nvar Tea = function(){};\n\nTea.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nTea.prototype.steepTea = function(){\n    console.log('用沸水浸泡茶叶');\n}\nTea.prototype.pourInCup = function(){\n    console.log('把茶水倒进杯子');\n}\nTea.prototype.addLemon = function(){\n    console.log('加柠檬');\n}\nTea.prototype.init = function(){\n    this.boilWater();\n    this.steepTea();\n    this.pourInCup();\n    this.addLemon();\n}\n\nvar coffee = new Coffee();\ncoffee.init();\n\nvar tea = new Tea();\ntea.init();\n```\n\n模板方法重构：分离共同点\n```javascript\n//饮料(父类)\nvar Beverage = function(){};\n\nBeverage.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nBeverage.prototype.brew = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.pourInCup = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.addCondiments = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.customerWantsCondiments = function(){\n    //钩子方法，是否加调料\n    return true;\n}\nBeverage.prototype.init = function(){\n    this.boilWater();\n    this.brew();\n    this.pourInCup();\n    if(this.customerWantsCondiments()){\n        this.addCondiments();\n    }\n    \n}\n\n//泡咖啡\nvar Coffee = function(){};\nCoffee.prototype = new Beverage();\nCoffee.prototype.brew = function(){\n    console.log('用沸水冲泡咖啡');\n}\nCoffee.prototype.pourInCup = function(){\n    console.log('把咖啡倒进杯子');\n}\nCoffee.prototype.addCondiments = function(){\n    console.log('加糖和牛奶');\n}\n\n//泡茶\nvar Tea = function(){};\nTea.prototype = new Beverage();\nTea.prototype.brew = function(){\n    console.log('用沸水浸泡茶叶');\n}\nTea.prototype.pourInCup = function(){\n    console.log('把茶水倒进杯子');\n}\nTea.prototype.addCondiments = function(){\n    console.log('加柠檬');\n}\nTea.prototype.customerWantsCondiments = function(){\n    return window.confirm('请问需要加调料吗？');//是否加调料\n}\n\n\n\nvar coffee = new Coffee();\ncoffee.init();\n\nvar tea = new Tea();\ntea.init();\n```\n### 2.策略模式\n定义一系列算法，一个个封装起来，并且可以相互替换。\n模式作用：\n* （1）所有的这些算法都是做相同的事情，只是实现不同。\n* （2）以相同的方式调用所有的方法，减少各种算法类与使用算法类之间的耦合。\n* （3）单独定义算法类，方便单元测试\n```javascript\n//年终奖 = 考核等级*基本工资\nvar calculateBonus = function(level,salary){\n    if(level === 'S'){\n        return salary*4;\n    }\n\n    if(level === 'A'){\n        return salary*3;\n    }\n\n    if(level === 'B'){\n        return salary*2;\n    }\n};\ncalculateBonus('S',2000);\n```\n策略模式代码重构：\n方便代码扩展，不会使主函数越来越庞大，核心逻辑不需修改\n```javascript\nvar strategies = {\n    S:function(salary){\n        return salary*4;\n    },\n    A:function(salary){\n        return salary*3;\n    },\n    B:function(salary){\n        return salary*2;\n    },\n    C:function(salary){\n        return salary*1.5;\n    }\n}\nvar calculateBonus = function(level,salary){\n    return strategies[level](salary);\n};\ncalculateBonus('S',2000);\n```\n### 3.中介者模式\n用一个中介对象来封装一系列的对象交互。\n```javascript\nvar Plane = function(name){\n\n}\nPlane.prototype.send = function(msg,to){\n    console.log(this.name+'发送了信息')\n    tower.send(msg,to);\n}\nPlane.prototype.receive = function(msg){\n    console.log(this.name + '[接受到]' + msg);\n}\n//中介对象\nvar tower = {\n    all:{},\n    register: function(t){\n        this.all[t.name] = t; \n    },\n    send: function(msg,to){\n        this.all[to.name].receive(msg)\n    }\n}\n\nvar plane1 = new Plane('plane1');\nvar plane2 = new Plane('plane2');\ntower.register(plane1);\ntower.register(plane2);\n//飞机1通过塔台发送消息给飞机2\nplane1.send('我马上降落，还有200米'，plane2);\n```\n","source":"_posts/js-design.md","raw":"---\ntitle: javascript 设计模式\ndate: 2017-07-27 16:27:35\ntags: javascript\n---\n### 1.模板方法模式\n定义一个操作中的算法骨架，将一些步骤延迟到子类中。\n模板方法使用继承来改变算法的一部分，而策略模式用委托来改变整个算法。\n```javascript\n//泡咖啡\nvar Coffee = function(){};\n\nCoffee.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nCoffee.prototype.brewCoffee = function(){\n    console.log('用沸水冲泡咖啡');\n}\nCoffee.prototype.pourInCup = function(){\n    console.log('把咖啡倒进杯子');\n}\nCoffee.prototype.addSugarAndMilk = function(){\n    console.log('加糖和牛奶');\n}\nCoffee.prototype.init = function(){\n    this.boilWater();\n    this.brewCoffee();\n    this.pourInCup();\n    this.addSugarAndMilk();\n}\n\n//泡茶\nvar Tea = function(){};\n\nTea.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nTea.prototype.steepTea = function(){\n    console.log('用沸水浸泡茶叶');\n}\nTea.prototype.pourInCup = function(){\n    console.log('把茶水倒进杯子');\n}\nTea.prototype.addLemon = function(){\n    console.log('加柠檬');\n}\nTea.prototype.init = function(){\n    this.boilWater();\n    this.steepTea();\n    this.pourInCup();\n    this.addLemon();\n}\n\nvar coffee = new Coffee();\ncoffee.init();\n\nvar tea = new Tea();\ntea.init();\n```\n\n模板方法重构：分离共同点\n```javascript\n//饮料(父类)\nvar Beverage = function(){};\n\nBeverage.prototype.boilWater = function(){\n    console.log('把水煮沸');\n}\nBeverage.prototype.brew = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.pourInCup = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.addCondiments = function(){\n    throw new Error('子类必须重写该方法');\n}\nBeverage.prototype.customerWantsCondiments = function(){\n    //钩子方法，是否加调料\n    return true;\n}\nBeverage.prototype.init = function(){\n    this.boilWater();\n    this.brew();\n    this.pourInCup();\n    if(this.customerWantsCondiments()){\n        this.addCondiments();\n    }\n    \n}\n\n//泡咖啡\nvar Coffee = function(){};\nCoffee.prototype = new Beverage();\nCoffee.prototype.brew = function(){\n    console.log('用沸水冲泡咖啡');\n}\nCoffee.prototype.pourInCup = function(){\n    console.log('把咖啡倒进杯子');\n}\nCoffee.prototype.addCondiments = function(){\n    console.log('加糖和牛奶');\n}\n\n//泡茶\nvar Tea = function(){};\nTea.prototype = new Beverage();\nTea.prototype.brew = function(){\n    console.log('用沸水浸泡茶叶');\n}\nTea.prototype.pourInCup = function(){\n    console.log('把茶水倒进杯子');\n}\nTea.prototype.addCondiments = function(){\n    console.log('加柠檬');\n}\nTea.prototype.customerWantsCondiments = function(){\n    return window.confirm('请问需要加调料吗？');//是否加调料\n}\n\n\n\nvar coffee = new Coffee();\ncoffee.init();\n\nvar tea = new Tea();\ntea.init();\n```\n### 2.策略模式\n定义一系列算法，一个个封装起来，并且可以相互替换。\n模式作用：\n* （1）所有的这些算法都是做相同的事情，只是实现不同。\n* （2）以相同的方式调用所有的方法，减少各种算法类与使用算法类之间的耦合。\n* （3）单独定义算法类，方便单元测试\n```javascript\n//年终奖 = 考核等级*基本工资\nvar calculateBonus = function(level,salary){\n    if(level === 'S'){\n        return salary*4;\n    }\n\n    if(level === 'A'){\n        return salary*3;\n    }\n\n    if(level === 'B'){\n        return salary*2;\n    }\n};\ncalculateBonus('S',2000);\n```\n策略模式代码重构：\n方便代码扩展，不会使主函数越来越庞大，核心逻辑不需修改\n```javascript\nvar strategies = {\n    S:function(salary){\n        return salary*4;\n    },\n    A:function(salary){\n        return salary*3;\n    },\n    B:function(salary){\n        return salary*2;\n    },\n    C:function(salary){\n        return salary*1.5;\n    }\n}\nvar calculateBonus = function(level,salary){\n    return strategies[level](salary);\n};\ncalculateBonus('S',2000);\n```\n### 3.中介者模式\n用一个中介对象来封装一系列的对象交互。\n```javascript\nvar Plane = function(name){\n\n}\nPlane.prototype.send = function(msg,to){\n    console.log(this.name+'发送了信息')\n    tower.send(msg,to);\n}\nPlane.prototype.receive = function(msg){\n    console.log(this.name + '[接受到]' + msg);\n}\n//中介对象\nvar tower = {\n    all:{},\n    register: function(t){\n        this.all[t.name] = t; \n    },\n    send: function(msg,to){\n        this.all[to.name].receive(msg)\n    }\n}\n\nvar plane1 = new Plane('plane1');\nvar plane2 = new Plane('plane2');\ntower.register(plane1);\ntower.register(plane2);\n//飞机1通过塔台发送消息给飞机2\nplane1.send('我马上降落，还有200米'，plane2);\n```\n","slug":"js-design","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct38g000enilw79fj9ig8","content":"<h3 id=\"1-模板方法模式\"><a href=\"#1-模板方法模式\" class=\"headerlink\" title=\"1.模板方法模式\"></a>1.模板方法模式</h3><p>定义一个操作中的算法骨架，将一些步骤延迟到子类中。<br>模板方法使用继承来改变算法的一部分，而策略模式用委托来改变整个算法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//泡咖啡</span></div><div class=\"line\"><span class=\"keyword\">var</span> Coffee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">Coffee.prototype.boilWater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把水煮沸'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.brewCoffee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用沸水冲泡咖啡'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.pourInCup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把咖啡倒进杯子'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.addSugarAndMilk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'加糖和牛奶'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.boilWater();</div><div class=\"line\">    <span class=\"keyword\">this</span>.brewCoffee();</div><div class=\"line\">    <span class=\"keyword\">this</span>.pourInCup();</div><div class=\"line\">    <span class=\"keyword\">this</span>.addSugarAndMilk();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//泡茶</span></div><div class=\"line\"><span class=\"keyword\">var</span> Tea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">Tea.prototype.boilWater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把水煮沸'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.steepTea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用沸水浸泡茶叶'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.pourInCup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把茶水倒进杯子'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.addLemon = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'加柠檬'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.boilWater();</div><div class=\"line\">    <span class=\"keyword\">this</span>.steepTea();</div><div class=\"line\">    <span class=\"keyword\">this</span>.pourInCup();</div><div class=\"line\">    <span class=\"keyword\">this</span>.addLemon();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> coffee = <span class=\"keyword\">new</span> Coffee();</div><div class=\"line\">coffee.init();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> tea = <span class=\"keyword\">new</span> Tea();</div><div class=\"line\">tea.init();</div></pre></td></tr></table></figure></p>\n<p>模板方法重构：分离共同点<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//饮料(父类)</span></div><div class=\"line\"><span class=\"keyword\">var</span> Beverage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">Beverage.prototype.boilWater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把水煮沸'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Beverage.prototype.brew = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写该方法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Beverage.prototype.pourInCup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写该方法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Beverage.prototype.addCondiments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写该方法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Beverage.prototype.customerWantsCondiments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//钩子方法，是否加调料</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Beverage.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.boilWater();</div><div class=\"line\">    <span class=\"keyword\">this</span>.brew();</div><div class=\"line\">    <span class=\"keyword\">this</span>.pourInCup();</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.customerWantsCondiments())&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.addCondiments();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//泡咖啡</span></div><div class=\"line\"><span class=\"keyword\">var</span> Coffee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">Coffee.prototype = <span class=\"keyword\">new</span> Beverage();</div><div class=\"line\">Coffee.prototype.brew = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用沸水冲泡咖啡'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.pourInCup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把咖啡倒进杯子'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.addCondiments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'加糖和牛奶'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//泡茶</span></div><div class=\"line\"><span class=\"keyword\">var</span> Tea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">Tea.prototype = <span class=\"keyword\">new</span> Beverage();</div><div class=\"line\">Tea.prototype.brew = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用沸水浸泡茶叶'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.pourInCup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把茶水倒进杯子'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.addCondiments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'加柠檬'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.customerWantsCondiments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.confirm(<span class=\"string\">'请问需要加调料吗？'</span>);<span class=\"comment\">//是否加调料</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> coffee = <span class=\"keyword\">new</span> Coffee();</div><div class=\"line\">coffee.init();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> tea = <span class=\"keyword\">new</span> Tea();</div><div class=\"line\">tea.init();</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-策略模式\"><a href=\"#2-策略模式\" class=\"headerlink\" title=\"2.策略模式\"></a>2.策略模式</h3><p>定义一系列算法，一个个封装起来，并且可以相互替换。<br>模式作用：</p>\n<ul>\n<li>（1）所有的这些算法都是做相同的事情，只是实现不同。</li>\n<li>（2）以相同的方式调用所有的方法，减少各种算法类与使用算法类之间的耦合。</li>\n<li>（3）单独定义算法类，方便单元测试<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//年终奖 = 考核等级*基本工资</span></div><div class=\"line\"><span class=\"keyword\">var</span> calculateBonus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">level,salary</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'S'</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">4</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'A'</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">3</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'B'</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">calculateBonus(<span class=\"string\">'S'</span>,<span class=\"number\">2000</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>策略模式代码重构：<br>方便代码扩展，不会使主函数越来越庞大，核心逻辑不需修改<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> strategies = &#123;</div><div class=\"line\">    S:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">4</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    A:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">3</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    B:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">2</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    C:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">1.5</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> calculateBonus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">level,salary</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> strategies[level](salary);</div><div class=\"line\">&#125;;</div><div class=\"line\">calculateBonus(<span class=\"string\">'S'</span>,<span class=\"number\">2000</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-中介者模式\"><a href=\"#3-中介者模式\" class=\"headerlink\" title=\"3.中介者模式\"></a>3.中介者模式</h3><p>用一个中介对象来封装一系列的对象交互。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Plane = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Plane.prototype.send = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg,to</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name+<span class=\"string\">'发送了信息'</span>)</div><div class=\"line\">    tower.send(msg,to);</div><div class=\"line\">&#125;</div><div class=\"line\">Plane.prototype.receive = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'[接受到]'</span> + msg);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//中介对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> tower = &#123;</div><div class=\"line\">    all:&#123;&#125;,</div><div class=\"line\">    register: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.all[t.name] = t; </div><div class=\"line\">    &#125;,</div><div class=\"line\">    send: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg,to</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.all[to.name].receive(msg)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> plane1 = <span class=\"keyword\">new</span> Plane(<span class=\"string\">'plane1'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> plane2 = <span class=\"keyword\">new</span> Plane(<span class=\"string\">'plane2'</span>);</div><div class=\"line\">tower.register(plane1);</div><div class=\"line\">tower.register(plane2);</div><div class=\"line\"><span class=\"comment\">//飞机1通过塔台发送消息给飞机2</span></div><div class=\"line\">plane1.send(<span class=\"string\">'我马上降落，还有200米'</span>，plane2);</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-模板方法模式\"><a href=\"#1-模板方法模式\" class=\"headerlink\" title=\"1.模板方法模式\"></a>1.模板方法模式</h3><p>定义一个操作中的算法骨架，将一些步骤延迟到子类中。<br>模板方法使用继承来改变算法的一部分，而策略模式用委托来改变整个算法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//泡咖啡</span></div><div class=\"line\"><span class=\"keyword\">var</span> Coffee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">Coffee.prototype.boilWater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把水煮沸'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.brewCoffee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用沸水冲泡咖啡'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.pourInCup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把咖啡倒进杯子'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.addSugarAndMilk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'加糖和牛奶'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.boilWater();</div><div class=\"line\">    <span class=\"keyword\">this</span>.brewCoffee();</div><div class=\"line\">    <span class=\"keyword\">this</span>.pourInCup();</div><div class=\"line\">    <span class=\"keyword\">this</span>.addSugarAndMilk();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//泡茶</span></div><div class=\"line\"><span class=\"keyword\">var</span> Tea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">Tea.prototype.boilWater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把水煮沸'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.steepTea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用沸水浸泡茶叶'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.pourInCup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把茶水倒进杯子'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.addLemon = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'加柠檬'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.boilWater();</div><div class=\"line\">    <span class=\"keyword\">this</span>.steepTea();</div><div class=\"line\">    <span class=\"keyword\">this</span>.pourInCup();</div><div class=\"line\">    <span class=\"keyword\">this</span>.addLemon();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> coffee = <span class=\"keyword\">new</span> Coffee();</div><div class=\"line\">coffee.init();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> tea = <span class=\"keyword\">new</span> Tea();</div><div class=\"line\">tea.init();</div></pre></td></tr></table></figure></p>\n<p>模板方法重构：分离共同点<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//饮料(父类)</span></div><div class=\"line\"><span class=\"keyword\">var</span> Beverage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">Beverage.prototype.boilWater = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把水煮沸'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Beverage.prototype.brew = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写该方法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Beverage.prototype.pourInCup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写该方法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Beverage.prototype.addCondiments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写该方法'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Beverage.prototype.customerWantsCondiments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//钩子方法，是否加调料</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Beverage.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.boilWater();</div><div class=\"line\">    <span class=\"keyword\">this</span>.brew();</div><div class=\"line\">    <span class=\"keyword\">this</span>.pourInCup();</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.customerWantsCondiments())&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.addCondiments();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//泡咖啡</span></div><div class=\"line\"><span class=\"keyword\">var</span> Coffee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">Coffee.prototype = <span class=\"keyword\">new</span> Beverage();</div><div class=\"line\">Coffee.prototype.brew = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用沸水冲泡咖啡'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.pourInCup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把咖啡倒进杯子'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Coffee.prototype.addCondiments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'加糖和牛奶'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//泡茶</span></div><div class=\"line\"><span class=\"keyword\">var</span> Tea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">Tea.prototype = <span class=\"keyword\">new</span> Beverage();</div><div class=\"line\">Tea.prototype.brew = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'用沸水浸泡茶叶'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.pourInCup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'把茶水倒进杯子'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.addCondiments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'加柠檬'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">Tea.prototype.customerWantsCondiments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.confirm(<span class=\"string\">'请问需要加调料吗？'</span>);<span class=\"comment\">//是否加调料</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> coffee = <span class=\"keyword\">new</span> Coffee();</div><div class=\"line\">coffee.init();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> tea = <span class=\"keyword\">new</span> Tea();</div><div class=\"line\">tea.init();</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-策略模式\"><a href=\"#2-策略模式\" class=\"headerlink\" title=\"2.策略模式\"></a>2.策略模式</h3><p>定义一系列算法，一个个封装起来，并且可以相互替换。<br>模式作用：</p>\n<ul>\n<li>（1）所有的这些算法都是做相同的事情，只是实现不同。</li>\n<li>（2）以相同的方式调用所有的方法，减少各种算法类与使用算法类之间的耦合。</li>\n<li>（3）单独定义算法类，方便单元测试<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//年终奖 = 考核等级*基本工资</span></div><div class=\"line\"><span class=\"keyword\">var</span> calculateBonus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">level,salary</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'S'</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">4</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'A'</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">3</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(level === <span class=\"string\">'B'</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">calculateBonus(<span class=\"string\">'S'</span>,<span class=\"number\">2000</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>策略模式代码重构：<br>方便代码扩展，不会使主函数越来越庞大，核心逻辑不需修改<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> strategies = &#123;</div><div class=\"line\">    S:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">4</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    A:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">3</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    B:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">2</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    C:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">salary</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> salary*<span class=\"number\">1.5</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> calculateBonus = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">level,salary</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> strategies[level](salary);</div><div class=\"line\">&#125;;</div><div class=\"line\">calculateBonus(<span class=\"string\">'S'</span>,<span class=\"number\">2000</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-中介者模式\"><a href=\"#3-中介者模式\" class=\"headerlink\" title=\"3.中介者模式\"></a>3.中介者模式</h3><p>用一个中介对象来封装一系列的对象交互。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Plane = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Plane.prototype.send = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg,to</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name+<span class=\"string\">'发送了信息'</span>)</div><div class=\"line\">    tower.send(msg,to);</div><div class=\"line\">&#125;</div><div class=\"line\">Plane.prototype.receive = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">'[接受到]'</span> + msg);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//中介对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> tower = &#123;</div><div class=\"line\">    all:&#123;&#125;,</div><div class=\"line\">    register: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">t</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.all[t.name] = t; </div><div class=\"line\">    &#125;,</div><div class=\"line\">    send: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">msg,to</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.all[to.name].receive(msg)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> plane1 = <span class=\"keyword\">new</span> Plane(<span class=\"string\">'plane1'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> plane2 = <span class=\"keyword\">new</span> Plane(<span class=\"string\">'plane2'</span>);</div><div class=\"line\">tower.register(plane1);</div><div class=\"line\">tower.register(plane2);</div><div class=\"line\"><span class=\"comment\">//飞机1通过塔台发送消息给飞机2</span></div><div class=\"line\">plane1.send(<span class=\"string\">'我马上降落，还有200米'</span>，plane2);</div></pre></td></tr></table></figure></p>\n"},{"title":"jQuery源码浅析","date":"2017-10-28T00:22:47.000Z","_content":"\n### 1.jQuery闭包结构\n\n```javascript\n(function(window, undefined) {\n   // jQuery 代码\n})(window);\n```\njQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。\n\n还有另一种写法：\n```javascript\n(function(window) {\n   // jQuery 代码\n})(window, undefined);\n```\n不足之处在于早期的环境中（ie8）,undefined的值可以被变量覆盖。\n而且第一种写法有一个针对压缩优化细节：\n```javascript\n// 压缩策略\n// w -> windwow , u -> undefined\n(function(w, u) {\n \n})(window);\n```\n\n### 2.jQuery无new构造\n```javascript\n// 无 new 构造\n$('#test').text('Test');\n \n// 当然也可以使用 new,两种写法相同\nvar test = new $('#test');\ntest.text('Test');\n```\njQuery内部实现的方式：\n```javascript\n(function(window, undefined) {\n    var\n    // ...\n    jQuery = function(selector, context) {\n        // The jQuery object is actually just the init constructor 'enhanced'\n        // 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init\n        return new jQuery.fn.init(selector, context, rootjQuery);\n    },\n \n    // jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用\n    jQuery.fn = jQuery.prototype = {\n        // 实例化化方法，这个方法可以称作 jQuery 对象构造器\n        init: function(selector, context, rootjQuery) {\n            // ...\n        }\n    }\n    // 这一句很关键，也很绕\n    // jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数\n    // 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例\n    // 且实例还要能正确访问 jQuery 类原型上的属性与方法\n    // jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype\n    // 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法\n    jQuery.fn.init.prototype = jQuery.fn;\n \n})(window);\n```\n实例化方法存在的关系链：\n(1)jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;\n(2)new jQuery.fn.init() 相当于 new jQuery() ;\n(3)jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。\n\n### 3.jQuery方法的重载\n当我们实例化一个jquery对象时，他的内部实现有着9种不同的方法重载场景。\n```javascript\n// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器\njQuery([selector,[context]])\n// 传入单个 DOM\njQuery(element)\n// 传入 DOM 数组\njQuery(elementArray)\n// 传入 JS 对象\njQuery(object)\n// 传入 jQuery 对象\njQuery(jQuery object)\n// 传入原始 HTML 的字符串来创建 DOM 元素\njQuery(html,[ownerDocument])\njQuery(html,[attributes])\n// 传入空参数\njQuery()\n// 绑定一个在 DOM 文档载入完成后执行的函数\njQuery(callback)\n```\n\n### 4.jQuery.fn.extend 与 jQuery.extend\n不同之处在于：\n<1>\njQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法；\n\njQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn 上的方法（上文有提到，jQuery.fn = jQuery.prototype ）。 \n\n<2>\n使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），\n\n而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。\n\n<3>\n在 jQuery.extend() 中，this 的指向是 jQuery 对象(或者说是 jQuery 类)，所以这里扩展在 jQuery 上；\n\n在 jQuery.fn.extend() 中，this 的指向是 fn 对象，前面有提到 jQuery.fn = jQuery.prototype ，也就是这里增加的是原型方法，也就是对象方法。\n\n\n### 5.jQuery 的链式调用及回溯\n```javascript\n// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合\n$('div').eq(0).show().end().eq(1).hide();\n\n```\n其内部实现其实是依靠添加了 prevObject 这个属性,源码实现：\n```javascript\njQuery.fn = jQuery.prototype = {\n    // 将一个 DOM 元素集合加入到 jQuery 栈\n    // 此方法在 jQuery 的 DOM 操作中被频繁的使用, 如在 parent(), find(), filter() 中\n    // pushStack() 方法通过改变一个 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合\n    // 当我们在链式调用 end() 方法后, 内部就返回当前 jQuery 对象的 prevObject 属性\n    pushStack: function(elems) {\n        // 构建一个新的jQuery对象，无参的 this.constructor()，只是返回引用this\n        // jQuery.merge 把 elems 节点合并到新的 jQuery 对象\n        // this.constructor 就是 jQuery 的构造函数 jQuery.fn.init，所以 this.constructor() 返回一个 jQuery 对象\n        // 由于 jQuery.merge 函数返回的对象是第二个函数附加到第一个上面，所以 ret 也是一个 jQuery 对象，这里可以解释为什么 pushStack 出入的 DOM 对象也可以用 CSS 方法进行操作\n        var ret = jQuery.merge(this.constructor(), elems);\n \n        // 给返回的新 jQuery 对象添加属性 prevObject\n        // 所以也就是为什么通过 prevObject 能取到上一个合集的引用了\n        ret.prevObject = this;\n        ret.context = this.context;\n \n        // Return the newly-formed element set\n        return ret;\n    },\n    // 回溯链式调用的上一个对象\n    end: function() {\n        // 回溯的关键是返回 prevObject 属性\n        // 而 prevObject 属性保存了上一步操作的 jQuery 对象集合\n        return this.prevObject || this.constructor(null);\n    },\n    // 取当前 jQuery 对象的第 i 个\n    eq: function(i) {\n        // jQuery 对象集合的长度\n        var len = this.length,\n            j = +i + (i < 0 ? len : 0);\n \n        // 利用 pushStack 返回\n        return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    }, \n}\n\n```\n总的来说，\n\n1）end() 方法返回 prevObject 属性，这个属性记录了上一步操作的 jQuery 对象合集；\n\n2）而 prevObject 属性由 pushStack() 方法生成，该方法将一个 DOM 元素集合加入到 jQuery 内部管理的一个栈中，通过改变 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合\n\n3）当我们在链式调用 end() 方法后，内部就返回当前 jQuery 对象的 prevObject 属性，完成回溯。\n\n\n### 6.jQuery 变量冲突处理\n当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：\n```javascript\n(function(window, undefined) {\n    var\n        // Map over jQuery in case of overwrite\n        // 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖\n        _jQuery = window.jQuery,\n        _$ = window.$;\n \n    jQuery.extend({\n        // noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了\n        // 通过全名替代简写的方式来使用 jQuery\n        // deep -- 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)\n        noConflict: function(deep) {\n            // 判断全局 $ 变量是否等于 jQuery 变量\n            // 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）\n            if (window.$ === jQuery) {\n                // 此时 jQuery 别名 $ 失效\n                window.$ = _$;\n            }\n            // 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况\n            if (deep && window.jQuery === jQuery) {\n                // 如果 deep 为 true，此时 jQuery 失效\n                window.jQuery = _jQuery;\n            }\n \n            // 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()）\n            // 像使用 $ 一样尽情使用它吧\n            return jQuery;\n        }\n    })\n}(window)\n```\n\n\n\n\n","source":"_posts/jquery.md","raw":"---\ntitle: jQuery源码浅析\ndate: 2017-10-28 08:22:47\ntags: [jQuery,javascript]\n---\n\n### 1.jQuery闭包结构\n\n```javascript\n(function(window, undefined) {\n   // jQuery 代码\n})(window);\n```\njQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。\n\n还有另一种写法：\n```javascript\n(function(window) {\n   // jQuery 代码\n})(window, undefined);\n```\n不足之处在于早期的环境中（ie8）,undefined的值可以被变量覆盖。\n而且第一种写法有一个针对压缩优化细节：\n```javascript\n// 压缩策略\n// w -> windwow , u -> undefined\n(function(w, u) {\n \n})(window);\n```\n\n### 2.jQuery无new构造\n```javascript\n// 无 new 构造\n$('#test').text('Test');\n \n// 当然也可以使用 new,两种写法相同\nvar test = new $('#test');\ntest.text('Test');\n```\njQuery内部实现的方式：\n```javascript\n(function(window, undefined) {\n    var\n    // ...\n    jQuery = function(selector, context) {\n        // The jQuery object is actually just the init constructor 'enhanced'\n        // 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init\n        return new jQuery.fn.init(selector, context, rootjQuery);\n    },\n \n    // jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用\n    jQuery.fn = jQuery.prototype = {\n        // 实例化化方法，这个方法可以称作 jQuery 对象构造器\n        init: function(selector, context, rootjQuery) {\n            // ...\n        }\n    }\n    // 这一句很关键，也很绕\n    // jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数\n    // 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例\n    // 且实例还要能正确访问 jQuery 类原型上的属性与方法\n    // jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype\n    // 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法\n    jQuery.fn.init.prototype = jQuery.fn;\n \n})(window);\n```\n实例化方法存在的关系链：\n(1)jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;\n(2)new jQuery.fn.init() 相当于 new jQuery() ;\n(3)jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。\n\n### 3.jQuery方法的重载\n当我们实例化一个jquery对象时，他的内部实现有着9种不同的方法重载场景。\n```javascript\n// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器\njQuery([selector,[context]])\n// 传入单个 DOM\njQuery(element)\n// 传入 DOM 数组\njQuery(elementArray)\n// 传入 JS 对象\njQuery(object)\n// 传入 jQuery 对象\njQuery(jQuery object)\n// 传入原始 HTML 的字符串来创建 DOM 元素\njQuery(html,[ownerDocument])\njQuery(html,[attributes])\n// 传入空参数\njQuery()\n// 绑定一个在 DOM 文档载入完成后执行的函数\njQuery(callback)\n```\n\n### 4.jQuery.fn.extend 与 jQuery.extend\n不同之处在于：\n<1>\njQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法；\n\njQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn 上的方法（上文有提到，jQuery.fn = jQuery.prototype ）。 \n\n<2>\n使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），\n\n而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。\n\n<3>\n在 jQuery.extend() 中，this 的指向是 jQuery 对象(或者说是 jQuery 类)，所以这里扩展在 jQuery 上；\n\n在 jQuery.fn.extend() 中，this 的指向是 fn 对象，前面有提到 jQuery.fn = jQuery.prototype ，也就是这里增加的是原型方法，也就是对象方法。\n\n\n### 5.jQuery 的链式调用及回溯\n```javascript\n// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合\n$('div').eq(0).show().end().eq(1).hide();\n\n```\n其内部实现其实是依靠添加了 prevObject 这个属性,源码实现：\n```javascript\njQuery.fn = jQuery.prototype = {\n    // 将一个 DOM 元素集合加入到 jQuery 栈\n    // 此方法在 jQuery 的 DOM 操作中被频繁的使用, 如在 parent(), find(), filter() 中\n    // pushStack() 方法通过改变一个 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合\n    // 当我们在链式调用 end() 方法后, 内部就返回当前 jQuery 对象的 prevObject 属性\n    pushStack: function(elems) {\n        // 构建一个新的jQuery对象，无参的 this.constructor()，只是返回引用this\n        // jQuery.merge 把 elems 节点合并到新的 jQuery 对象\n        // this.constructor 就是 jQuery 的构造函数 jQuery.fn.init，所以 this.constructor() 返回一个 jQuery 对象\n        // 由于 jQuery.merge 函数返回的对象是第二个函数附加到第一个上面，所以 ret 也是一个 jQuery 对象，这里可以解释为什么 pushStack 出入的 DOM 对象也可以用 CSS 方法进行操作\n        var ret = jQuery.merge(this.constructor(), elems);\n \n        // 给返回的新 jQuery 对象添加属性 prevObject\n        // 所以也就是为什么通过 prevObject 能取到上一个合集的引用了\n        ret.prevObject = this;\n        ret.context = this.context;\n \n        // Return the newly-formed element set\n        return ret;\n    },\n    // 回溯链式调用的上一个对象\n    end: function() {\n        // 回溯的关键是返回 prevObject 属性\n        // 而 prevObject 属性保存了上一步操作的 jQuery 对象集合\n        return this.prevObject || this.constructor(null);\n    },\n    // 取当前 jQuery 对象的第 i 个\n    eq: function(i) {\n        // jQuery 对象集合的长度\n        var len = this.length,\n            j = +i + (i < 0 ? len : 0);\n \n        // 利用 pushStack 返回\n        return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n    }, \n}\n\n```\n总的来说，\n\n1）end() 方法返回 prevObject 属性，这个属性记录了上一步操作的 jQuery 对象合集；\n\n2）而 prevObject 属性由 pushStack() 方法生成，该方法将一个 DOM 元素集合加入到 jQuery 内部管理的一个栈中，通过改变 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合\n\n3）当我们在链式调用 end() 方法后，内部就返回当前 jQuery 对象的 prevObject 属性，完成回溯。\n\n\n### 6.jQuery 变量冲突处理\n当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：\n```javascript\n(function(window, undefined) {\n    var\n        // Map over jQuery in case of overwrite\n        // 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖\n        _jQuery = window.jQuery,\n        _$ = window.$;\n \n    jQuery.extend({\n        // noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了\n        // 通过全名替代简写的方式来使用 jQuery\n        // deep -- 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)\n        noConflict: function(deep) {\n            // 判断全局 $ 变量是否等于 jQuery 变量\n            // 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）\n            if (window.$ === jQuery) {\n                // 此时 jQuery 别名 $ 失效\n                window.$ = _$;\n            }\n            // 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况\n            if (deep && window.jQuery === jQuery) {\n                // 如果 deep 为 true，此时 jQuery 失效\n                window.jQuery = _jQuery;\n            }\n \n            // 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()）\n            // 像使用 $ 一样尽情使用它吧\n            return jQuery;\n        }\n    })\n}(window)\n```\n\n\n\n\n","slug":"jquery","published":1,"updated":"2017-10-28T00:47:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct38j000hnilwnuuod2d8","content":"<h3 id=\"1-jQuery闭包结构\"><a href=\"#1-jQuery闭包结构\" class=\"headerlink\" title=\"1.jQuery闭包结构\"></a>1.jQuery闭包结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, undefined</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// jQuery 代码</span></div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</div></pre></td></tr></table></figure>\n<p>jQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。</p>\n<p>还有另一种写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// jQuery 代码</span></div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>, <span class=\"literal\">undefined</span>);</div></pre></td></tr></table></figure></p>\n<p>不足之处在于早期的环境中（ie8）,undefined的值可以被变量覆盖。<br>而且第一种写法有一个针对压缩优化细节：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 压缩策略</span></div><div class=\"line\"><span class=\"comment\">// w -&gt; windwow , u -&gt; undefined</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w, u</span>) </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-jQuery无new构造\"><a href=\"#2-jQuery无new构造\" class=\"headerlink\" title=\"2.jQuery无new构造\"></a>2.jQuery无new构造</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 无 new 构造</span></div><div class=\"line\">$(<span class=\"string\">'#test'</span>).text(<span class=\"string\">'Test'</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 当然也可以使用 new,两种写法相同</span></div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> $(<span class=\"string\">'#test'</span>);</div><div class=\"line\">test.text(<span class=\"string\">'Test'</span>);</div></pre></td></tr></table></figure>\n<p>jQuery内部实现的方式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, undefined</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector, context</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// The jQuery object is actually just the init constructor 'enhanced'</span></div><div class=\"line\">        <span class=\"comment\">// 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init(selector, context, rootjQuery);</div><div class=\"line\">    &#125;,</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">// jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用</span></div><div class=\"line\">    jQuery.fn = jQuery.prototype = &#123;</div><div class=\"line\">        <span class=\"comment\">// 实例化化方法，这个方法可以称作 jQuery 对象构造器</span></div><div class=\"line\">        init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector, context, rootjQuery</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 这一句很关键，也很绕</span></div><div class=\"line\">    <span class=\"comment\">// jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数</span></div><div class=\"line\">    <span class=\"comment\">// 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例</span></div><div class=\"line\">    <span class=\"comment\">// 且实例还要能正确访问 jQuery 类原型上的属性与方法</span></div><div class=\"line\">    <span class=\"comment\">// jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype</span></div><div class=\"line\">    <span class=\"comment\">// 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法</span></div><div class=\"line\">    jQuery.fn.init.prototype = jQuery.fn;</div><div class=\"line\"> </div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</div></pre></td></tr></table></figure></p>\n<p>实例化方法存在的关系链：<br>(1)jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;<br>(2)new jQuery.fn.init() 相当于 new jQuery() ;<br>(3)jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。</p>\n<h3 id=\"3-jQuery方法的重载\"><a href=\"#3-jQuery方法的重载\" class=\"headerlink\" title=\"3.jQuery方法的重载\"></a>3.jQuery方法的重载</h3><p>当我们实例化一个jquery对象时，他的内部实现有着9种不同的方法重载场景。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器</span></div><div class=\"line\">jQuery([selector,[context]])</div><div class=\"line\"><span class=\"comment\">// 传入单个 DOM</span></div><div class=\"line\">jQuery(element)</div><div class=\"line\"><span class=\"comment\">// 传入 DOM 数组</span></div><div class=\"line\">jQuery(elementArray)</div><div class=\"line\"><span class=\"comment\">// 传入 JS 对象</span></div><div class=\"line\">jQuery(object)</div><div class=\"line\"><span class=\"comment\">// 传入 jQuery 对象</span></div><div class=\"line\">jQuery(jQuery object)</div><div class=\"line\"><span class=\"comment\">// 传入原始 HTML 的字符串来创建 DOM 元素</span></div><div class=\"line\">jQuery(html,[ownerDocument])</div><div class=\"line\">jQuery(html,[attributes])</div><div class=\"line\"><span class=\"comment\">// 传入空参数</span></div><div class=\"line\">jQuery()</div><div class=\"line\"><span class=\"comment\">// 绑定一个在 DOM 文档载入完成后执行的函数</span></div><div class=\"line\">jQuery(callback)</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-jQuery-fn-extend-与-jQuery-extend\"><a href=\"#4-jQuery-fn-extend-与-jQuery-extend\" class=\"headerlink\" title=\"4.jQuery.fn.extend 与 jQuery.extend\"></a>4.jQuery.fn.extend 与 jQuery.extend</h3><p>不同之处在于：</p>\n<p><1><br>jQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法；</1></p>\n<p>jQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn 上的方法（上文有提到，jQuery.fn = jQuery.prototype ）。 </p>\n<p><2><br>使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），</2></p>\n<p>而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。</p>\n<p><3><br>在 jQuery.extend() 中，this 的指向是 jQuery 对象(或者说是 jQuery 类)，所以这里扩展在 jQuery 上；</3></p>\n<p>在 jQuery.fn.extend() 中，this 的指向是 fn 对象，前面有提到 jQuery.fn = jQuery.prototype ，也就是这里增加的是原型方法，也就是对象方法。</p>\n<h3 id=\"5-jQuery-的链式调用及回溯\"><a href=\"#5-jQuery-的链式调用及回溯\" class=\"headerlink\" title=\"5.jQuery 的链式调用及回溯\"></a>5.jQuery 的链式调用及回溯</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合</span></div><div class=\"line\">$(<span class=\"string\">'div'</span>).eq(<span class=\"number\">0</span>).show().end().eq(<span class=\"number\">1</span>).hide();</div></pre></td></tr></table></figure>\n<p>其内部实现其实是依靠添加了 prevObject 这个属性,源码实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fn = jQuery.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">// 将一个 DOM 元素集合加入到 jQuery 栈</span></div><div class=\"line\">    <span class=\"comment\">// 此方法在 jQuery 的 DOM 操作中被频繁的使用, 如在 parent(), find(), filter() 中</span></div><div class=\"line\">    <span class=\"comment\">// pushStack() 方法通过改变一个 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</span></div><div class=\"line\">    <span class=\"comment\">// 当我们在链式调用 end() 方法后, 内部就返回当前 jQuery 对象的 prevObject 属性</span></div><div class=\"line\">    pushStack: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elems</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 构建一个新的jQuery对象，无参的 this.constructor()，只是返回引用this</span></div><div class=\"line\">        <span class=\"comment\">// jQuery.merge 把 elems 节点合并到新的 jQuery 对象</span></div><div class=\"line\">        <span class=\"comment\">// this.constructor 就是 jQuery 的构造函数 jQuery.fn.init，所以 this.constructor() 返回一个 jQuery 对象</span></div><div class=\"line\">        <span class=\"comment\">// 由于 jQuery.merge 函数返回的对象是第二个函数附加到第一个上面，所以 ret 也是一个 jQuery 对象，这里可以解释为什么 pushStack 出入的 DOM 对象也可以用 CSS 方法进行操作</span></div><div class=\"line\">        <span class=\"keyword\">var</span> ret = jQuery.merge(<span class=\"keyword\">this</span>.constructor(), elems);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// 给返回的新 jQuery 对象添加属性 prevObject</span></div><div class=\"line\">        <span class=\"comment\">// 所以也就是为什么通过 prevObject 能取到上一个合集的引用了</span></div><div class=\"line\">        ret.prevObject = <span class=\"keyword\">this</span>;</div><div class=\"line\">        ret.context = <span class=\"keyword\">this</span>.context;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// Return the newly-formed element set</span></div><div class=\"line\">        <span class=\"keyword\">return</span> ret;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 回溯链式调用的上一个对象</span></div><div class=\"line\">    end: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 回溯的关键是返回 prevObject 属性</span></div><div class=\"line\">        <span class=\"comment\">// 而 prevObject 属性保存了上一步操作的 jQuery 对象集合</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prevObject || <span class=\"keyword\">this</span>.constructor(<span class=\"literal\">null</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 取当前 jQuery 对象的第 i 个</span></div><div class=\"line\">    eq: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// jQuery 对象集合的长度</span></div><div class=\"line\">        <span class=\"keyword\">var</span> len = <span class=\"keyword\">this</span>.length,</div><div class=\"line\">            j = +i + (i &lt; <span class=\"number\">0</span> ? len : <span class=\"number\">0</span>);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// 利用 pushStack 返回</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pushStack(j &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; len ? [<span class=\"keyword\">this</span>[j]] : []);</div><div class=\"line\">    &#125;, </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>总的来说，</p>\n<p>1）end() 方法返回 prevObject 属性，这个属性记录了上一步操作的 jQuery 对象合集；</p>\n<p>2）而 prevObject 属性由 pushStack() 方法生成，该方法将一个 DOM 元素集合加入到 jQuery 内部管理的一个栈中，通过改变 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</p>\n<p>3）当我们在链式调用 end() 方法后，内部就返回当前 jQuery 对象的 prevObject 属性，完成回溯。</p>\n<h3 id=\"6-jQuery-变量冲突处理\"><a href=\"#6-jQuery-变量冲突处理\" class=\"headerlink\" title=\"6.jQuery 变量冲突处理\"></a>6.jQuery 变量冲突处理</h3><p>当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, undefined</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span></div><div class=\"line\">        <span class=\"comment\">// Map over jQuery in case of overwrite</span></div><div class=\"line\">        <span class=\"comment\">// 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖</span></div><div class=\"line\">        _jQuery = <span class=\"built_in\">window</span>.jQuery,</div><div class=\"line\">        _$ = <span class=\"built_in\">window</span>.$;</div><div class=\"line\"> </div><div class=\"line\">    jQuery.extend(&#123;</div><div class=\"line\">        <span class=\"comment\">// noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了</span></div><div class=\"line\">        <span class=\"comment\">// 通过全名替代简写的方式来使用 jQuery</span></div><div class=\"line\">        <span class=\"comment\">// deep -- 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)</span></div><div class=\"line\">        noConflict: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">deep</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 判断全局 $ 变量是否等于 jQuery 变量</span></div><div class=\"line\">            <span class=\"comment\">// 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.$ === jQuery) &#123;</div><div class=\"line\">                <span class=\"comment\">// 此时 jQuery 别名 $ 失效</span></div><div class=\"line\">                <span class=\"built_in\">window</span>.$ = _$;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (deep &amp;&amp; <span class=\"built_in\">window</span>.jQuery === jQuery) &#123;</div><div class=\"line\">                <span class=\"comment\">// 如果 deep 为 true，此时 jQuery 失效</span></div><div class=\"line\">                <span class=\"built_in\">window</span>.jQuery = _jQuery;</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"comment\">// 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()）</span></div><div class=\"line\">            <span class=\"comment\">// 像使用 $ 一样尽情使用它吧</span></div><div class=\"line\">            <span class=\"keyword\">return</span> jQuery;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>)</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-jQuery闭包结构\"><a href=\"#1-jQuery闭包结构\" class=\"headerlink\" title=\"1.jQuery闭包结构\"></a>1.jQuery闭包结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, undefined</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// jQuery 代码</span></div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</div></pre></td></tr></table></figure>\n<p>jQuery 具体的实现，都被包含在了一个立即执行函数构造的闭包里面，为了不污染全局作用域，只在后面暴露 $ 和 jQuery 这 2 个变量给外界，尽量的避开变量冲突。</p>\n<p>还有另一种写法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// jQuery 代码</span></div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>, <span class=\"literal\">undefined</span>);</div></pre></td></tr></table></figure></p>\n<p>不足之处在于早期的环境中（ie8）,undefined的值可以被变量覆盖。<br>而且第一种写法有一个针对压缩优化细节：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 压缩策略</span></div><div class=\"line\"><span class=\"comment\">// w -&gt; windwow , u -&gt; undefined</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w, u</span>) </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-jQuery无new构造\"><a href=\"#2-jQuery无new构造\" class=\"headerlink\" title=\"2.jQuery无new构造\"></a>2.jQuery无new构造</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 无 new 构造</span></div><div class=\"line\">$(<span class=\"string\">'#test'</span>).text(<span class=\"string\">'Test'</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 当然也可以使用 new,两种写法相同</span></div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> $(<span class=\"string\">'#test'</span>);</div><div class=\"line\">test.text(<span class=\"string\">'Test'</span>);</div></pre></td></tr></table></figure>\n<p>jQuery内部实现的方式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, undefined</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span></div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector, context</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// The jQuery object is actually just the init constructor 'enhanced'</span></div><div class=\"line\">        <span class=\"comment\">// 看这里，实例化方法 jQuery() 实际上是调用了其拓展的原型方法 jQuery.fn.init</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init(selector, context, rootjQuery);</div><div class=\"line\">    &#125;,</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">// jQuery.prototype 即是 jQuery 的原型，挂载在上面的方法，即可让所有生成的 jQuery 对象使用</span></div><div class=\"line\">    jQuery.fn = jQuery.prototype = &#123;</div><div class=\"line\">        <span class=\"comment\">// 实例化化方法，这个方法可以称作 jQuery 对象构造器</span></div><div class=\"line\">        init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">selector, context, rootjQuery</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// ...</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 这一句很关键，也很绕</span></div><div class=\"line\">    <span class=\"comment\">// jQuery 没有使用 new 运算符将 jQuery 实例化，而是直接调用其函数</span></div><div class=\"line\">    <span class=\"comment\">// 要实现这样,那么 jQuery 就要看成一个类，且返回一个正确的实例</span></div><div class=\"line\">    <span class=\"comment\">// 且实例还要能正确访问 jQuery 类原型上的属性与方法</span></div><div class=\"line\">    <span class=\"comment\">// jQuery 的方式是通过原型传递解决问题，把 jQuery 的原型传递给jQuery.prototype.init.prototype</span></div><div class=\"line\">    <span class=\"comment\">// 所以通过这个方法生成的实例 this 所指向的仍然是 jQuery.fn，所以能正确访问 jQuery 类原型上的属性与方法</span></div><div class=\"line\">    jQuery.fn.init.prototype = jQuery.fn;</div><div class=\"line\"> </div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</div></pre></td></tr></table></figure></p>\n<p>实例化方法存在的关系链：<br>(1)jQuery.fn.init.prototype = jQuery.fn = jQuery.prototype ;<br>(2)new jQuery.fn.init() 相当于 new jQuery() ;<br>(3)jQuery() 返回的是 new jQuery.fn.init()，而 var obj = new jQuery()，所以这 2 者是相当的，所以我们可以无 new 实例化 jQuery 对象。</p>\n<h3 id=\"3-jQuery方法的重载\"><a href=\"#3-jQuery方法的重载\" class=\"headerlink\" title=\"3.jQuery方法的重载\"></a>3.jQuery方法的重载</h3><p>当我们实例化一个jquery对象时，他的内部实现有着9种不同的方法重载场景。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 接受一个字符串，其中包含了用于匹配元素集合的 CSS 选择器</span></div><div class=\"line\">jQuery([selector,[context]])</div><div class=\"line\"><span class=\"comment\">// 传入单个 DOM</span></div><div class=\"line\">jQuery(element)</div><div class=\"line\"><span class=\"comment\">// 传入 DOM 数组</span></div><div class=\"line\">jQuery(elementArray)</div><div class=\"line\"><span class=\"comment\">// 传入 JS 对象</span></div><div class=\"line\">jQuery(object)</div><div class=\"line\"><span class=\"comment\">// 传入 jQuery 对象</span></div><div class=\"line\">jQuery(jQuery object)</div><div class=\"line\"><span class=\"comment\">// 传入原始 HTML 的字符串来创建 DOM 元素</span></div><div class=\"line\">jQuery(html,[ownerDocument])</div><div class=\"line\">jQuery(html,[attributes])</div><div class=\"line\"><span class=\"comment\">// 传入空参数</span></div><div class=\"line\">jQuery()</div><div class=\"line\"><span class=\"comment\">// 绑定一个在 DOM 文档载入完成后执行的函数</span></div><div class=\"line\">jQuery(callback)</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-jQuery-fn-extend-与-jQuery-extend\"><a href=\"#4-jQuery-fn-extend-与-jQuery-extend\" class=\"headerlink\" title=\"4.jQuery.fn.extend 与 jQuery.extend\"></a>4.jQuery.fn.extend 与 jQuery.extend</h3><p>不同之处在于：</p>\n<p><1><br>jQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法；</1></p>\n<p>jQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn 上的方法（上文有提到，jQuery.fn = jQuery.prototype ）。 </p>\n<p><2><br>使用 jQuery.extend() 拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），</2></p>\n<p>而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。</p>\n<p><3><br>在 jQuery.extend() 中，this 的指向是 jQuery 对象(或者说是 jQuery 类)，所以这里扩展在 jQuery 上；</3></p>\n<p>在 jQuery.fn.extend() 中，this 的指向是 fn 对象，前面有提到 jQuery.fn = jQuery.prototype ，也就是这里增加的是原型方法，也就是对象方法。</p>\n<h3 id=\"5-jQuery-的链式调用及回溯\"><a href=\"#5-jQuery-的链式调用及回溯\" class=\"headerlink\" title=\"5.jQuery 的链式调用及回溯\"></a>5.jQuery 的链式调用及回溯</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 通过 end() 方法终止在当前链的最新过滤操作，返回上一个对象集合</span></div><div class=\"line\">$(<span class=\"string\">'div'</span>).eq(<span class=\"number\">0</span>).show().end().eq(<span class=\"number\">1</span>).hide();</div></pre></td></tr></table></figure>\n<p>其内部实现其实是依靠添加了 prevObject 这个属性,源码实现：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fn = jQuery.prototype = &#123;</div><div class=\"line\">    <span class=\"comment\">// 将一个 DOM 元素集合加入到 jQuery 栈</span></div><div class=\"line\">    <span class=\"comment\">// 此方法在 jQuery 的 DOM 操作中被频繁的使用, 如在 parent(), find(), filter() 中</span></div><div class=\"line\">    <span class=\"comment\">// pushStack() 方法通过改变一个 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</span></div><div class=\"line\">    <span class=\"comment\">// 当我们在链式调用 end() 方法后, 内部就返回当前 jQuery 对象的 prevObject 属性</span></div><div class=\"line\">    pushStack: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elems</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 构建一个新的jQuery对象，无参的 this.constructor()，只是返回引用this</span></div><div class=\"line\">        <span class=\"comment\">// jQuery.merge 把 elems 节点合并到新的 jQuery 对象</span></div><div class=\"line\">        <span class=\"comment\">// this.constructor 就是 jQuery 的构造函数 jQuery.fn.init，所以 this.constructor() 返回一个 jQuery 对象</span></div><div class=\"line\">        <span class=\"comment\">// 由于 jQuery.merge 函数返回的对象是第二个函数附加到第一个上面，所以 ret 也是一个 jQuery 对象，这里可以解释为什么 pushStack 出入的 DOM 对象也可以用 CSS 方法进行操作</span></div><div class=\"line\">        <span class=\"keyword\">var</span> ret = jQuery.merge(<span class=\"keyword\">this</span>.constructor(), elems);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// 给返回的新 jQuery 对象添加属性 prevObject</span></div><div class=\"line\">        <span class=\"comment\">// 所以也就是为什么通过 prevObject 能取到上一个合集的引用了</span></div><div class=\"line\">        ret.prevObject = <span class=\"keyword\">this</span>;</div><div class=\"line\">        ret.context = <span class=\"keyword\">this</span>.context;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// Return the newly-formed element set</span></div><div class=\"line\">        <span class=\"keyword\">return</span> ret;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 回溯链式调用的上一个对象</span></div><div class=\"line\">    end: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 回溯的关键是返回 prevObject 属性</span></div><div class=\"line\">        <span class=\"comment\">// 而 prevObject 属性保存了上一步操作的 jQuery 对象集合</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.prevObject || <span class=\"keyword\">this</span>.constructor(<span class=\"literal\">null</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 取当前 jQuery 对象的第 i 个</span></div><div class=\"line\">    eq: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// jQuery 对象集合的长度</span></div><div class=\"line\">        <span class=\"keyword\">var</span> len = <span class=\"keyword\">this</span>.length,</div><div class=\"line\">            j = +i + (i &lt; <span class=\"number\">0</span> ? len : <span class=\"number\">0</span>);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"comment\">// 利用 pushStack 返回</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.pushStack(j &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; len ? [<span class=\"keyword\">this</span>[j]] : []);</div><div class=\"line\">    &#125;, </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>总的来说，</p>\n<p>1）end() 方法返回 prevObject 属性，这个属性记录了上一步操作的 jQuery 对象合集；</p>\n<p>2）而 prevObject 属性由 pushStack() 方法生成，该方法将一个 DOM 元素集合加入到 jQuery 内部管理的一个栈中，通过改变 jQuery 对象的 prevObject 属性来跟踪链式调用中前一个方法返回的 DOM 结果集合</p>\n<p>3）当我们在链式调用 end() 方法后，内部就返回当前 jQuery 对象的 prevObject 属性，完成回溯。</p>\n<h3 id=\"6-jQuery-变量冲突处理\"><a href=\"#6-jQuery-变量冲突处理\" class=\"headerlink\" title=\"6.jQuery 变量冲突处理\"></a>6.jQuery 变量冲突处理</h3><p>当需要处理冲突的时候，调用静态方法 noConflict()，让出变量的控制权，源码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">window, undefined</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span></div><div class=\"line\">        <span class=\"comment\">// Map over jQuery in case of overwrite</span></div><div class=\"line\">        <span class=\"comment\">// 设置别名，通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖</span></div><div class=\"line\">        _jQuery = <span class=\"built_in\">window</span>.jQuery,</div><div class=\"line\">        _$ = <span class=\"built_in\">window</span>.$;</div><div class=\"line\"> </div><div class=\"line\">    jQuery.extend(&#123;</div><div class=\"line\">        <span class=\"comment\">// noConflict() 方法让出变量 $ 的 jQuery 控制权，这样其他脚本就可以使用它了</span></div><div class=\"line\">        <span class=\"comment\">// 通过全名替代简写的方式来使用 jQuery</span></div><div class=\"line\">        <span class=\"comment\">// deep -- 布尔值，指示是否允许彻底将 jQuery 变量还原(移交 $ 引用的同时是否移交 jQuery 对象本身)</span></div><div class=\"line\">        noConflict: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">deep</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 判断全局 $ 变量是否等于 jQuery 变量</span></div><div class=\"line\">            <span class=\"comment\">// 如果等于，则重新还原全局变量 $ 为 jQuery 运行之前的变量（存储在内部变量 _$ 中）</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.$ === jQuery) &#123;</div><div class=\"line\">                <span class=\"comment\">// 此时 jQuery 别名 $ 失效</span></div><div class=\"line\">                <span class=\"built_in\">window</span>.$ = _$;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 当开启深度冲突处理并且全局变量 jQuery 等于内部 jQuery，则把全局 jQuery 还原成之前的状况</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (deep &amp;&amp; <span class=\"built_in\">window</span>.jQuery === jQuery) &#123;</div><div class=\"line\">                <span class=\"comment\">// 如果 deep 为 true，此时 jQuery 失效</span></div><div class=\"line\">                <span class=\"built_in\">window</span>.jQuery = _jQuery;</div><div class=\"line\">            &#125;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"comment\">// 这里返回的是 jQuery 库内部的 jQuery 构造函数（new jQuery.fn.init()）</span></div><div class=\"line\">            <span class=\"comment\">// 像使用 $ 一样尽情使用它吧</span></div><div class=\"line\">            <span class=\"keyword\">return</span> jQuery;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;(<span class=\"built_in\">window</span>)</div></pre></td></tr></table></figure></p>\n"},{"title":"前端面试题(基础)","date":"2017-08-29T07:29:14.000Z","_content":"### 1.js的数据类型相关\n(1)基本数据类型\nUndefined、Null、Boolean、Number、String\n(2)typeof返回哪些数据类型\nObject、function、number、boolean、underfind、string\n```javascript\ntypeof null; // 'object'\ntypeof []; // 'object'\ntypeof {}; // 'object'\n\ntypeof new Number(123); // 'object' 包装对象,不要使用\nnew Number(123) === 123; // false\n```\n判断Array要使用Array.isArray(arr);\n判断null请使用myVar === null;\n判断某个全局变量是否存在用typeof window.myVar === 'undefined';\nnull和undefined没有toString()方法;\n```javascript\n123.toString(); // SyntaxError\n\n123..toString(); // '123', 注意是两个点！\n(123).toString(); // '123'\n```\n\n### 2.==和===的区别\n(1)==包含隐式类型转换，===类型不同则结果不同\n(2)对于Array,Object等高级类型，==和===是没有区别的，进行“指针地址”比较\n(3)==的隐式类型转换应遵循一下几条规则：\n    <1>布尔值转数值 false->0,true->1\n    <2>字符串和数值比较，先将字符串转数值 'false'->NaN\n    <3>对象和其他比较，先调用对象valueOf()方法，用得到的基本类型值按照前面的规则进行比较。\n```javascript\nnull === null //true\nundefined === undefined //true\n\nfalse == 'false'  //false  false->0 'false'->NaN\nfalse == '0' //true\n\n'' == '0' //false 不转\n0 == '' //true ''->0\n0 == '0' //true\n\nnull == undefined //true\n\n' \\t\\r\\n ' == 0     // true\n```\nNaN与所有其他值都不等\n```javascript\nNaN === NaN; // false\n\n//唯一能判断NaN的方法是通过isNaN()函数\nisNaN(NaN); // true\n```\n\n### 3.null和undefined的区别\n(1)null表示一个空的值，转为数值时为0，多数情况用null\n(2)undefined表示值未定义，转为数值时为NaN\n(3)if里把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true\nundefined：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\nnull：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n### 4.字符串相关\n#### 4.1 如果字符串内部既包含'又包含\"怎么办？\n可以用转义字符\\来标识，比如：\n```javascript\n'I\\'m \\\"OK\\\"!'; //I'm \"OK\"!\n```\n转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\\\表示的字符就是\\。\n#### 4.2 多行字符串，之前用\\n拼接，ES6用反引号``\n#### 4.3 模板字符串\n```javascript\n//old\nvar name = '小明';\nvar age = 20;\nvar message = '你好, ' + name + ', 你今年' + age + '岁了!';\n//ES6\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\n```\n#### 4.4 slice,substr和substring的区别\nslice和substring接收的是起始位置和结束位置(不包括结束位置)，而substr接收的则是起始位置和所要返回的字符串长度。\n```javascript\nvar test = 'hello world';\n\ntest.substr(4,7) //o world\ntest.slice(4,7) //o w\ntest.substring(4,7) //o w\ntest.substring(7,4) //o w  按大小排\n\n//负数时\ntest.slice(-3) //rld  如果start为负数，则start=str.length+start。\ntest.substring(-3) //hello world  直接将负数转成0\ntest.substr(-3) //rld  如果start为负数，则start=str.length+start。\n\ntest.slice(3,-4) //lo w  如果end为负数，则end=str.length+end。\ntest.substring(3,-4) //hel  直接将负数转成0\ntest.substr(3,-4) //空字符串  如果end为负数，则转为0。\n```\n\n### 5.数组相关\n#### 5.1 Array的length/索引赋值会导致Array的变化\n#### 5.2 slice()\n```javascript\nvar arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\narr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']\narr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']\n```\n#### 5.3 splice()\n```javascript\nvar arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];\n// 从索引2开始删除3个元素,然后再添加两个元素:\narr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n// 只删除,不添加:\narr.splice(2, 2); // ['Google', 'Facebook']\narr; // ['Microsoft', 'Apple', 'Oracle']\n// 只添加,不删除:\narr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n```\n#### 5.4 split()和join()\n```javascript\n'A-B-C-1-2-3'.split(\"-\")    //['A', 'B', 'C', 1, 2, 3]\n['A', 'B', 'C', 1, 2, 3].join('-'); // 'A-B-C-1-2-3'\n```\n\n#### 5.5 map(),reduce(),filter()\n```javascript\n//map\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr.map(x => x*x); // [1, 4, 9, 16, 25, 36, 49, 64, 81]\narr.map(String); // ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n//reduce\nvar arr2 = [1, 3, 5, 7, 9];\narr2.reduce((x, y) => x + y); // 25\narr2.reduce((x, y) => x*10 + y) ;//13579\n\n//filter\nvar arr3 = ['A', '', 'B', null, undefined, 'A', '  '];\narr3.filter(s => s && s.trim()); // ['A', 'B', 'C'] 除空字符串\narr3.filter((ele, index, self) => self.indexOf(ele) === index); \n//[\"A\", \"\", \"B\", null, undefined, \"  \"] 去重\n//参数表示某元素，元素的位置和数组本身\n\n```\n\n### 6.for...in和for...of的区别\n(1)for...of是ES6提出用来遍历iterable类型的,只循环集合本身的元素\n(2)for...in是遍历对象的属性名称\n```javascript\nvar a = ['A', 'B', 'C'];\na.name = 'Hello';\n//for...in包括name,但Array的length却不包括\nfor (var x in a) {\n    alert(x); // '0', '1', '2', 'name'\n}\nfor (var x of a) {\n    alert(x); // 'A', 'B', 'C'\n}\n//更好的用forEach(iterable内置方法)\na.forEach(function (element, index, array) {\n    // element: 指向当前元素的值\n    // index: 指向当前索引\n    // array: 指向Array对象本身\n    alert(element);\n});\n```\n(3)forEach对Set和map的区别：\nSet没有索引，因此回调函数的前两个参数都是元素本身；\nMap的回调函数参数依次为value、key和map本身\n\n### 7.函数相关\n#### 7.1 arguments对象\n只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。\narguments类似Array但它不是一个Array。\narguments最常用于判断传入参数的个数。\n```javascript\nfunction foo(x) {\n    alert(x); // 10\n    if(arguments>1){\n\t    for (var i=0; i<arguments.length; i++) {\n\t        alert(arguments[i]); // 10, 20, 30\n\t    }\n    }\n}\nfoo(10, 20, 30);\n```\narguments.callee返回此arguments对象所在的当前函数引用。\n在使用函数递归调用时推荐使用arguments.callee代替函数名本身。\n```javascript\nfunction count(a){\n\t  if(a==1){\n\t     return 1;\n\t  } \n\t  return a + arguments.callee(--a);\n}\nvar mm = count(10);\n```\nES6引入rest参数也能返回所有参数\n```javascript\nfunction sum(...rest) {\n\t  let sum = 0;\n\t  for(let i of rest){\n\t     sum += i\n\t\t}\n\t\treturn sum\n}\nsum(2,3,5) //10\n```\n#### 7.2 this对象的理解\nthis总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；\n\n#### 7.3 call() 和 apply() 的区别和作用\n作用是控制this的指向。\napply()函数有两个参数：第一个参数是需要绑定的this变量，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。\n如：function.apply(this,[1,2,3]);\ncall()的第一个参数是需要绑定的this变量，后续是实例传入的参数序列。\n如：function.call(this,1,2,3);\n\n利用apply()，我们还可以动态改变函数的行为。\n```javascript\n//统计一下代码一共调用了多少次parseInt()\nvar count = 0;\nvar oldParseInt = parseInt; // 保存原函数\n\nwindow.parseInt = function () {\n    count += 1;\n    return oldParseInt.apply(null, arguments); // 调用原函数\n};\n\n// 测试:\nparseInt('10');\nparseInt('20');\nparseInt('30');\ncount; // 3\n```\n\n#### 7.4 闭包\n当函数里嵌套函数时，内部的函数可以访问外部函数里的变量。\n```javascript\n//创建一个匿名函数并立刻执行\n(function (x) {\n    return x * x;\n})(3); // 9\n```\n\n#### 8 JSON的了解\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\n它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。\n格式：采用键值对，例如：{'age':'12', 'name':'back'}\nJSON.stringify() //序列化成JSON格式的字符串,第二个参数(array)用于控制筛选对象的键值\nJSON.parse() //反序列化成JavaScript对象\n\n#### 9 对象相关\n### 9.1 new操作符具体干了什么\n（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n（2）属性和方法被加入到 this 引用的对象中。\n（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n用new创建的对象还从原型上获得了一个constructor属性，它指向构造函数本身。\n\n### 9.2 JavaScript如何实现继承\n一般使用构造函数与原型混合方式\n```javascript\nfunction Parent(){\n    this.name = 'wang';\n}\n\nfunction Child(){\n    this.age = 28;\n}\nChild.prototype = new Parent();//继承了Parent，通过原型\nvar demo = new Child();\nalert(demo.age);\nalert(demo.name);//得到被继承的属性\n```\n更好的继承,通过引入空函数\n```javascript\nfunction inherits(Child, Parent) {\n    var F = function(){};\n    F.prototype = Parent.prototype;\n    Child.prototype = new F();\n    Child.prototype.constructor = Child;\n}\n```\n\n\n\n\n\n\n\n\n\n### 10.你有哪些性能优化的方法\n（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\n（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n（4） 当需要设置的样式很多时设置className而不是直接操作style。\n（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n### 11.ajax过程\n(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.\n(3)设置响应HTTP请求状态变化的函数.\n(4)发送HTTP请求.\n(5)获取异步调用返回的数据.\n(6)使用JavaScript和DOM实现局部刷新.\n\n### 12.AMD和CMD的区别\nAMD（异步模块定义） 是 RequireJS 在推广过程中对模块定义的规范化产出。\nCMD（通用模块定义） 是 SeaJS 在推广过程中对模块定义的规范化产出。\n（1）AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行。\n（2）CMD 推崇依赖就近，AMD 推崇依赖前置。\n```javascript\n// CMD\ndefine(function(require, exports, module) {\n   var a = require('./a')\n   a.doSomething()   \n   // 此处略去 100 行   \n   var b = require('./b') // 依赖可以就近书写   \n   b.doSomething()   // ... })\n\n// AMD 默认推荐的是\ndefine(['./a', './b'], function(a, b) {  \n\t// 依赖必须一开始就写好    \n\ta.doSomething()    \n\t// 此处略去 100 行    \n\tb.doSomething()    \n\t...\n})\n```\n(3)AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。\nCMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。\n\n\n\n","source":"_posts/js-interview.md","raw":"---\ntitle: 前端面试题(基础)\ndate: 2017-08-29 15:29:14\ntags: javascript\n---\n### 1.js的数据类型相关\n(1)基本数据类型\nUndefined、Null、Boolean、Number、String\n(2)typeof返回哪些数据类型\nObject、function、number、boolean、underfind、string\n```javascript\ntypeof null; // 'object'\ntypeof []; // 'object'\ntypeof {}; // 'object'\n\ntypeof new Number(123); // 'object' 包装对象,不要使用\nnew Number(123) === 123; // false\n```\n判断Array要使用Array.isArray(arr);\n判断null请使用myVar === null;\n判断某个全局变量是否存在用typeof window.myVar === 'undefined';\nnull和undefined没有toString()方法;\n```javascript\n123.toString(); // SyntaxError\n\n123..toString(); // '123', 注意是两个点！\n(123).toString(); // '123'\n```\n\n### 2.==和===的区别\n(1)==包含隐式类型转换，===类型不同则结果不同\n(2)对于Array,Object等高级类型，==和===是没有区别的，进行“指针地址”比较\n(3)==的隐式类型转换应遵循一下几条规则：\n    <1>布尔值转数值 false->0,true->1\n    <2>字符串和数值比较，先将字符串转数值 'false'->NaN\n    <3>对象和其他比较，先调用对象valueOf()方法，用得到的基本类型值按照前面的规则进行比较。\n```javascript\nnull === null //true\nundefined === undefined //true\n\nfalse == 'false'  //false  false->0 'false'->NaN\nfalse == '0' //true\n\n'' == '0' //false 不转\n0 == '' //true ''->0\n0 == '0' //true\n\nnull == undefined //true\n\n' \\t\\r\\n ' == 0     // true\n```\nNaN与所有其他值都不等\n```javascript\nNaN === NaN; // false\n\n//唯一能判断NaN的方法是通过isNaN()函数\nisNaN(NaN); // true\n```\n\n### 3.null和undefined的区别\n(1)null表示一个空的值，转为数值时为0，多数情况用null\n(2)undefined表示值未定义，转为数值时为NaN\n(3)if里把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true\nundefined：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\nnull：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n### 4.字符串相关\n#### 4.1 如果字符串内部既包含'又包含\"怎么办？\n可以用转义字符\\来标识，比如：\n```javascript\n'I\\'m \\\"OK\\\"!'; //I'm \"OK\"!\n```\n转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\\\表示的字符就是\\。\n#### 4.2 多行字符串，之前用\\n拼接，ES6用反引号``\n#### 4.3 模板字符串\n```javascript\n//old\nvar name = '小明';\nvar age = 20;\nvar message = '你好, ' + name + ', 你今年' + age + '岁了!';\n//ES6\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\n```\n#### 4.4 slice,substr和substring的区别\nslice和substring接收的是起始位置和结束位置(不包括结束位置)，而substr接收的则是起始位置和所要返回的字符串长度。\n```javascript\nvar test = 'hello world';\n\ntest.substr(4,7) //o world\ntest.slice(4,7) //o w\ntest.substring(4,7) //o w\ntest.substring(7,4) //o w  按大小排\n\n//负数时\ntest.slice(-3) //rld  如果start为负数，则start=str.length+start。\ntest.substring(-3) //hello world  直接将负数转成0\ntest.substr(-3) //rld  如果start为负数，则start=str.length+start。\n\ntest.slice(3,-4) //lo w  如果end为负数，则end=str.length+end。\ntest.substring(3,-4) //hel  直接将负数转成0\ntest.substr(3,-4) //空字符串  如果end为负数，则转为0。\n```\n\n### 5.数组相关\n#### 5.1 Array的length/索引赋值会导致Array的变化\n#### 5.2 slice()\n```javascript\nvar arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\narr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']\narr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']\n```\n#### 5.3 splice()\n```javascript\nvar arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];\n// 从索引2开始删除3个元素,然后再添加两个元素:\narr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n// 只删除,不添加:\narr.splice(2, 2); // ['Google', 'Facebook']\narr; // ['Microsoft', 'Apple', 'Oracle']\n// 只添加,不删除:\narr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素\narr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']\n```\n#### 5.4 split()和join()\n```javascript\n'A-B-C-1-2-3'.split(\"-\")    //['A', 'B', 'C', 1, 2, 3]\n['A', 'B', 'C', 1, 2, 3].join('-'); // 'A-B-C-1-2-3'\n```\n\n#### 5.5 map(),reduce(),filter()\n```javascript\n//map\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\narr.map(x => x*x); // [1, 4, 9, 16, 25, 36, 49, 64, 81]\narr.map(String); // ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n//reduce\nvar arr2 = [1, 3, 5, 7, 9];\narr2.reduce((x, y) => x + y); // 25\narr2.reduce((x, y) => x*10 + y) ;//13579\n\n//filter\nvar arr3 = ['A', '', 'B', null, undefined, 'A', '  '];\narr3.filter(s => s && s.trim()); // ['A', 'B', 'C'] 除空字符串\narr3.filter((ele, index, self) => self.indexOf(ele) === index); \n//[\"A\", \"\", \"B\", null, undefined, \"  \"] 去重\n//参数表示某元素，元素的位置和数组本身\n\n```\n\n### 6.for...in和for...of的区别\n(1)for...of是ES6提出用来遍历iterable类型的,只循环集合本身的元素\n(2)for...in是遍历对象的属性名称\n```javascript\nvar a = ['A', 'B', 'C'];\na.name = 'Hello';\n//for...in包括name,但Array的length却不包括\nfor (var x in a) {\n    alert(x); // '0', '1', '2', 'name'\n}\nfor (var x of a) {\n    alert(x); // 'A', 'B', 'C'\n}\n//更好的用forEach(iterable内置方法)\na.forEach(function (element, index, array) {\n    // element: 指向当前元素的值\n    // index: 指向当前索引\n    // array: 指向Array对象本身\n    alert(element);\n});\n```\n(3)forEach对Set和map的区别：\nSet没有索引，因此回调函数的前两个参数都是元素本身；\nMap的回调函数参数依次为value、key和map本身\n\n### 7.函数相关\n#### 7.1 arguments对象\n只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。\narguments类似Array但它不是一个Array。\narguments最常用于判断传入参数的个数。\n```javascript\nfunction foo(x) {\n    alert(x); // 10\n    if(arguments>1){\n\t    for (var i=0; i<arguments.length; i++) {\n\t        alert(arguments[i]); // 10, 20, 30\n\t    }\n    }\n}\nfoo(10, 20, 30);\n```\narguments.callee返回此arguments对象所在的当前函数引用。\n在使用函数递归调用时推荐使用arguments.callee代替函数名本身。\n```javascript\nfunction count(a){\n\t  if(a==1){\n\t     return 1;\n\t  } \n\t  return a + arguments.callee(--a);\n}\nvar mm = count(10);\n```\nES6引入rest参数也能返回所有参数\n```javascript\nfunction sum(...rest) {\n\t  let sum = 0;\n\t  for(let i of rest){\n\t     sum += i\n\t\t}\n\t\treturn sum\n}\nsum(2,3,5) //10\n```\n#### 7.2 this对象的理解\nthis总是指向函数的直接调用者（而非间接调用者）；\n如果有new关键字，this指向new出来的那个对象；\n在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；\n\n#### 7.3 call() 和 apply() 的区别和作用\n作用是控制this的指向。\napply()函数有两个参数：第一个参数是需要绑定的this变量，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。\n如：function.apply(this,[1,2,3]);\ncall()的第一个参数是需要绑定的this变量，后续是实例传入的参数序列。\n如：function.call(this,1,2,3);\n\n利用apply()，我们还可以动态改变函数的行为。\n```javascript\n//统计一下代码一共调用了多少次parseInt()\nvar count = 0;\nvar oldParseInt = parseInt; // 保存原函数\n\nwindow.parseInt = function () {\n    count += 1;\n    return oldParseInt.apply(null, arguments); // 调用原函数\n};\n\n// 测试:\nparseInt('10');\nparseInt('20');\nparseInt('30');\ncount; // 3\n```\n\n#### 7.4 闭包\n当函数里嵌套函数时，内部的函数可以访问外部函数里的变量。\n```javascript\n//创建一个匿名函数并立刻执行\n(function (x) {\n    return x * x;\n})(3); // 9\n```\n\n#### 8 JSON的了解\nJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。\n它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。\n格式：采用键值对，例如：{'age':'12', 'name':'back'}\nJSON.stringify() //序列化成JSON格式的字符串,第二个参数(array)用于控制筛选对象的键值\nJSON.parse() //反序列化成JavaScript对象\n\n#### 9 对象相关\n### 9.1 new操作符具体干了什么\n（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。\n（2）属性和方法被加入到 this 引用的对象中。\n（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。\n用new创建的对象还从原型上获得了一个constructor属性，它指向构造函数本身。\n\n### 9.2 JavaScript如何实现继承\n一般使用构造函数与原型混合方式\n```javascript\nfunction Parent(){\n    this.name = 'wang';\n}\n\nfunction Child(){\n    this.age = 28;\n}\nChild.prototype = new Parent();//继承了Parent，通过原型\nvar demo = new Child();\nalert(demo.age);\nalert(demo.name);//得到被继承的属性\n```\n更好的继承,通过引入空函数\n```javascript\nfunction inherits(Child, Parent) {\n    var F = function(){};\n    F.prototype = Parent.prototype;\n    Child.prototype = new F();\n    Child.prototype.constructor = Child;\n}\n```\n\n\n\n\n\n\n\n\n\n### 10.你有哪些性能优化的方法\n（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。\n（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数\n（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。\n（4） 当需要设置的样式很多时设置className而不是直接操作style。\n（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。\n（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。\n（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。\n\n### 11.ajax过程\n(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.\n(3)设置响应HTTP请求状态变化的函数.\n(4)发送HTTP请求.\n(5)获取异步调用返回的数据.\n(6)使用JavaScript和DOM实现局部刷新.\n\n### 12.AMD和CMD的区别\nAMD（异步模块定义） 是 RequireJS 在推广过程中对模块定义的规范化产出。\nCMD（通用模块定义） 是 SeaJS 在推广过程中对模块定义的规范化产出。\n（1）AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行。\n（2）CMD 推崇依赖就近，AMD 推崇依赖前置。\n```javascript\n// CMD\ndefine(function(require, exports, module) {\n   var a = require('./a')\n   a.doSomething()   \n   // 此处略去 100 行   \n   var b = require('./b') // 依赖可以就近书写   \n   b.doSomething()   // ... })\n\n// AMD 默认推荐的是\ndefine(['./a', './b'], function(a, b) {  \n\t// 依赖必须一开始就写好    \n\ta.doSomething()    \n\t// 此处略去 100 行    \n\tb.doSomething()    \n\t...\n})\n```\n(3)AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。\nCMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。\n\n\n\n","slug":"js-interview","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct38m000jnilwwgqlwoa2","content":"<h3 id=\"1-js的数据类型相关\"><a href=\"#1-js的数据类型相关\" class=\"headerlink\" title=\"1.js的数据类型相关\"></a>1.js的数据类型相关</h3><p>(1)基本数据类型<br>Undefined、Null、Boolean、Number、String<br>(2)typeof返回哪些数据类型<br>Object、function、number、boolean、underfind、string<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 'object'</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> []; <span class=\"comment\">// 'object'</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125;; <span class=\"comment\">// 'object'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>); <span class=\"comment\">// 'object' 包装对象,不要使用</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>) === <span class=\"number\">123</span>; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>判断Array要使用Array.isArray(arr);<br>判断null请使用myVar === null;<br>判断某个全局变量是否存在用typeof window.myVar === ‘undefined’;<br>null和undefined没有toString()方法;<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">123.</span>toString(); <span class=\"comment\">// SyntaxError</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">123.</span>.toString(); <span class=\"comment\">// '123', 注意是两个点！</span></div><div class=\"line\">(<span class=\"number\">123</span>).toString(); <span class=\"comment\">// '123'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-和-的区别\"><a href=\"#2-和-的区别\" class=\"headerlink\" title=\"2.==和===的区别\"></a>2.==和===的区别</h3><p>(1)==包含隐式类型转换，===类型不同则结果不同<br>(2)对于Array,Object等高级类型，==和===是没有区别的，进行“指针地址”比较<br>(3)==的隐式类型转换应遵循一下几条规则：<br>    <1>布尔值转数值 false-&gt;0,true-&gt;1<br>    <2>字符串和数值比较，先将字符串转数值 ‘false’-&gt;NaN<br>    <3>对象和其他比较，先调用对象valueOf()方法，用得到的基本类型值按照前面的规则进行比较。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">null</span> <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"literal\">undefined</span> === <span class=\"literal\">undefined</span> <span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">'false'</span>  <span class=\"comment\">//false  false-&gt;0 'false'-&gt;NaN</span></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">'0'</span> <span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">''</span> == <span class=\"string\">'0'</span> <span class=\"comment\">//false 不转</span></div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">''</span> <span class=\"comment\">//true ''-&gt;0</span></div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">'0'</span> <span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">' \\t\\r\\n '</span> == <span class=\"number\">0</span>     <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></3></2></1></p>\n<p>NaN与所有其他值都不等<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>; <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//唯一能判断NaN的方法是通过isNaN()函数</span></div><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-null和undefined的区别\"><a href=\"#3-null和undefined的区别\" class=\"headerlink\" title=\"3.null和undefined的区别\"></a>3.null和undefined的区别</h3><p>(1)null表示一个空的值，转为数值时为0，多数情况用null<br>(2)undefined表示值未定义，转为数值时为NaN<br>(3)if里把null、undefined、0、NaN和空字符串’’视为false，其他值一概视为true<br>undefined：<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<br>null：<br>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p>\n<h3 id=\"4-字符串相关\"><a href=\"#4-字符串相关\" class=\"headerlink\" title=\"4.字符串相关\"></a>4.字符串相关</h3><h4 id=\"4-1-如果字符串内部既包含’又包含”怎么办？\"><a href=\"#4-1-如果字符串内部既包含’又包含”怎么办？\" class=\"headerlink\" title=\"4.1 如果字符串内部既包含’又包含”怎么办？\"></a>4.1 如果字符串内部既包含’又包含”怎么办？</h4><p>可以用转义字符\\来标识，比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'I\\'m \\\"OK\\\"!'</span>; <span class=\"comment\">//I'm \"OK\"!</span></div></pre></td></tr></table></figure></p>\n<p>转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\表示的字符就是\\。</p>\n<h4 id=\"4-2-多行字符串，之前用-n拼接，ES6用反引号\"><a href=\"#4-2-多行字符串，之前用-n拼接，ES6用反引号\" class=\"headerlink\" title=\"4.2 多行字符串，之前用\\n拼接，ES6用反引号``\"></a>4.2 多行字符串，之前用\\n拼接，ES6用反引号``</h4><h4 id=\"4-3-模板字符串\"><a href=\"#4-3-模板字符串\" class=\"headerlink\" title=\"4.3 模板字符串\"></a>4.3 模板字符串</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//old</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'你好, '</span> + name + <span class=\"string\">', 你今年'</span> + age + <span class=\"string\">'岁了!'</span>;</div><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">`你好, <span class=\"subst\">$&#123;name&#125;</span>, 你今年<span class=\"subst\">$&#123;age&#125;</span>岁了!`</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"4-4-slice-substr和substring的区别\"><a href=\"#4-4-slice-substr和substring的区别\" class=\"headerlink\" title=\"4.4 slice,substr和substring的区别\"></a>4.4 slice,substr和substring的区别</h4><p>slice和substring接收的是起始位置和结束位置(不包括结束位置)，而substr接收的则是起始位置和所要返回的字符串长度。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">'hello world'</span>;</div><div class=\"line\"></div><div class=\"line\">test.substr(<span class=\"number\">4</span>,<span class=\"number\">7</span>) <span class=\"comment\">//o world</span></div><div class=\"line\">test.slice(<span class=\"number\">4</span>,<span class=\"number\">7</span>) <span class=\"comment\">//o w</span></div><div class=\"line\">test.substring(<span class=\"number\">4</span>,<span class=\"number\">7</span>) <span class=\"comment\">//o w</span></div><div class=\"line\">test.substring(<span class=\"number\">7</span>,<span class=\"number\">4</span>) <span class=\"comment\">//o w  按大小排</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//负数时</span></div><div class=\"line\">test.slice(<span class=\"number\">-3</span>) <span class=\"comment\">//rld  如果start为负数，则start=str.length+start。</span></div><div class=\"line\">test.substring(<span class=\"number\">-3</span>) <span class=\"comment\">//hello world  直接将负数转成0</span></div><div class=\"line\">test.substr(<span class=\"number\">-3</span>) <span class=\"comment\">//rld  如果start为负数，则start=str.length+start。</span></div><div class=\"line\"></div><div class=\"line\">test.slice(<span class=\"number\">3</span>,<span class=\"number\">-4</span>) <span class=\"comment\">//lo w  如果end为负数，则end=str.length+end。</span></div><div class=\"line\">test.substring(<span class=\"number\">3</span>,<span class=\"number\">-4</span>) <span class=\"comment\">//hel  直接将负数转成0</span></div><div class=\"line\">test.substr(<span class=\"number\">3</span>,<span class=\"number\">-4</span>) <span class=\"comment\">//空字符串  如果end为负数，则转为0。</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"5-数组相关\"><a href=\"#5-数组相关\" class=\"headerlink\" title=\"5.数组相关\"></a>5.数组相关</h3><h4 id=\"5-1-Array的length-索引赋值会导致Array的变化\"><a href=\"#5-1-Array的length-索引赋值会导致Array的变化\" class=\"headerlink\" title=\"5.1 Array的length/索引赋值会导致Array的变化\"></a>5.1 Array的length/索引赋值会导致Array的变化</h4><h4 id=\"5-2-slice\"><a href=\"#5-2-slice\" class=\"headerlink\" title=\"5.2 slice()\"></a>5.2 slice()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>];</div><div class=\"line\">arr.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span></div><div class=\"line\">arr.slice(<span class=\"number\">3</span>); <span class=\"comment\">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-3-splice\"><a href=\"#5-3-splice\" class=\"headerlink\" title=\"5.3 splice()\"></a>5.3 splice()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'Microsoft'</span>, <span class=\"string\">'Apple'</span>, <span class=\"string\">'Yahoo'</span>, <span class=\"string\">'AOL'</span>, <span class=\"string\">'Excite'</span>, <span class=\"string\">'Oracle'</span>];</div><div class=\"line\"><span class=\"comment\">// 从索引2开始删除3个元素,然后再添加两个元素:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'Google'</span>, <span class=\"string\">'Facebook'</span>); <span class=\"comment\">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div><div class=\"line\"><span class=\"comment\">// 只删除,不添加:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">2</span>); <span class=\"comment\">// ['Google', 'Facebook']</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Oracle']</span></div><div class=\"line\"><span class=\"comment\">// 只添加,不删除:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'Google'</span>, <span class=\"string\">'Facebook'</span>); <span class=\"comment\">// 返回[],因为没有删除任何元素</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-4-split-和join\"><a href=\"#5-4-split-和join\" class=\"headerlink\" title=\"5.4 split()和join()\"></a>5.4 split()和join()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'A-B-C-1-2-3'</span>.split(<span class=\"string\">\"-\"</span>)    <span class=\"comment\">//['A', 'B', 'C', 1, 2, 3]</span></div><div class=\"line\">[<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].join(<span class=\"string\">'-'</span>); <span class=\"comment\">// 'A-B-C-1-2-3'</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-5-map-reduce-filter\"><a href=\"#5-5-map-reduce-filter\" class=\"headerlink\" title=\"5.5 map(),reduce(),filter()\"></a>5.5 map(),reduce(),filter()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//map</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x*x); <span class=\"comment\">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></div><div class=\"line\">arr.map(<span class=\"built_in\">String</span>); <span class=\"comment\">// ['1', '2', '3', '4', '5', '6', '7', '8', '9']</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//reduce</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr2.reduce(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y); <span class=\"comment\">// 25</span></div><div class=\"line\">arr2.reduce(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x*<span class=\"number\">10</span> + y) ;<span class=\"comment\">//13579</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//filter</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'A'</span>, <span class=\"string\">''</span>, <span class=\"string\">'B'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'  '</span>];</div><div class=\"line\">arr3.filter(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s &amp;&amp; s.trim()); <span class=\"comment\">// ['A', 'B', 'C'] 除空字符串</span></div><div class=\"line\">arr3.filter(<span class=\"function\">(<span class=\"params\">ele, index, self</span>) =&gt;</span> self.indexOf(ele) === index); </div><div class=\"line\"><span class=\"comment\">//[\"A\", \"\", \"B\", null, undefined, \"  \"] 去重</span></div><div class=\"line\"><span class=\"comment\">//参数表示某元素，元素的位置和数组本身</span></div></pre></td></tr></table></figure>\n<h3 id=\"6-for…in和for…of的区别\"><a href=\"#6-for…in和for…of的区别\" class=\"headerlink\" title=\"6.for…in和for…of的区别\"></a>6.for…in和for…of的区别</h3><p>(1)for…of是ES6提出用来遍历iterable类型的,只循环集合本身的元素<br>(2)for…in是遍历对象的属性名称<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.name = <span class=\"string\">'Hello'</span>;</div><div class=\"line\"><span class=\"comment\">//for...in包括name,但Array的length却不包括</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">    alert(x); <span class=\"comment\">// '0', '1', '2', 'name'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> a) &#123;</div><div class=\"line\">    alert(x); <span class=\"comment\">// 'A', 'B', 'C'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//更好的用forEach(iterable内置方法)</span></div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// element: 指向当前元素的值</span></div><div class=\"line\">    <span class=\"comment\">// index: 指向当前索引</span></div><div class=\"line\">    <span class=\"comment\">// array: 指向Array对象本身</span></div><div class=\"line\">    alert(element);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>(3)forEach对Set和map的区别：<br>Set没有索引，因此回调函数的前两个参数都是元素本身；<br>Map的回调函数参数依次为value、key和map本身</p>\n<h3 id=\"7-函数相关\"><a href=\"#7-函数相关\" class=\"headerlink\" title=\"7.函数相关\"></a>7.函数相关</h3><h4 id=\"7-1-arguments对象\"><a href=\"#7-1-arguments对象\" class=\"headerlink\" title=\"7.1 arguments对象\"></a>7.1 arguments对象</h4><p>只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<br>arguments类似Array但它不是一个Array。<br>arguments最常用于判断传入参数的个数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    alert(x); <span class=\"comment\">// 10</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>&gt;<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"built_in\">arguments</span>.length; i++) &#123;</div><div class=\"line\">\t        alert(<span class=\"built_in\">arguments</span>[i]); <span class=\"comment\">// 10, 20, 30</span></div><div class=\"line\">\t    &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</div></pre></td></tr></table></figure></p>\n<p>arguments.callee返回此arguments对象所在的当前函数引用。<br>在使用函数递归调用时推荐使用arguments.callee代替函数名本身。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">\t  <span class=\"keyword\">if</span>(a==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t     <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t  &#125; </div><div class=\"line\">\t  <span class=\"keyword\">return</span> a + <span class=\"built_in\">arguments</span>.callee(--a);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> mm = count(<span class=\"number\">10</span>);</div></pre></td></tr></table></figure></p>\n<p>ES6引入rest参数也能返回所有参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">...rest</span>) </span>&#123;</div><div class=\"line\">\t  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> rest)&#123;</div><div class=\"line\">\t     sum += i</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sum</div><div class=\"line\">&#125;</div><div class=\"line\">sum(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>) <span class=\"comment\">//10</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"7-2-this对象的理解\"><a href=\"#7-2-this对象的理解\" class=\"headerlink\" title=\"7.2 this对象的理解\"></a>7.2 this对象的理解</h4><p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</p>\n<h4 id=\"7-3-call-和-apply-的区别和作用\"><a href=\"#7-3-call-和-apply-的区别和作用\" class=\"headerlink\" title=\"7.3 call() 和 apply() 的区别和作用\"></a>7.3 call() 和 apply() 的区别和作用</h4><p>作用是控制this的指向。<br>apply()函数有两个参数：第一个参数是需要绑定的this变量，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。<br>如：function.apply(this,[1,2,3]);<br>call()的第一个参数是需要绑定的this变量，后续是实例传入的参数序列。<br>如：function.call(this,1,2,3);</p>\n<p>利用apply()，我们还可以动态改变函数的行为。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//统计一下代码一共调用了多少次parseInt()</span></div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> oldParseInt = <span class=\"built_in\">parseInt</span>; <span class=\"comment\">// 保存原函数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.parseInt = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    count += <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> oldParseInt.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// 调用原函数</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 测试:</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'10'</span>);</div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'20'</span>);</div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'30'</span>);</div><div class=\"line\">count; <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"7-4-闭包\"><a href=\"#7-4-闭包\" class=\"headerlink\" title=\"7.4 闭包\"></a>7.4 闭包</h4><p>当函数里嵌套函数时，内部的函数可以访问外部函数里的变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建一个匿名函数并立刻执行</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;)(<span class=\"number\">3</span>); <span class=\"comment\">// 9</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"8-JSON的了解\"><a href=\"#8-JSON的了解\" class=\"headerlink\" title=\"8 JSON的了解\"></a>8 JSON的了解</h4><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。<br>它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。<br>格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’}<br>JSON.stringify() //序列化成JSON格式的字符串,第二个参数(array)用于控制筛选对象的键值<br>JSON.parse() //反序列化成JavaScript对象</p>\n<h4 id=\"9-对象相关\"><a href=\"#9-对象相关\" class=\"headerlink\" title=\"9 对象相关\"></a>9 对象相关</h4><h3 id=\"9-1-new操作符具体干了什么\"><a href=\"#9-1-new操作符具体干了什么\" class=\"headerlink\" title=\"9.1 new操作符具体干了什么\"></a>9.1 new操作符具体干了什么</h3><p>（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>（2）属性和方法被加入到 this 引用的对象中。<br>（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。<br>用new创建的对象还从原型上获得了一个constructor属性，它指向构造函数本身。</p>\n<h3 id=\"9-2-JavaScript如何实现继承\"><a href=\"#9-2-JavaScript如何实现继承\" class=\"headerlink\" title=\"9.2 JavaScript如何实现继承\"></a>9.2 JavaScript如何实现继承</h3><p>一般使用构造函数与原型混合方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'wang'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">28</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();<span class=\"comment\">//继承了Parent，通过原型</span></div><div class=\"line\"><span class=\"keyword\">var</span> demo = <span class=\"keyword\">new</span> Child();</div><div class=\"line\">alert(demo.age);</div><div class=\"line\">alert(demo.name);<span class=\"comment\">//得到被继承的属性</span></div></pre></td></tr></table></figure></p>\n<p>更好的继承,通过引入空函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherits</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    F.prototype = Parent.prototype;</div><div class=\"line\">    Child.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">    Child.prototype.constructor = Child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"10-你有哪些性能优化的方法\"><a href=\"#10-你有哪些性能优化的方法\" class=\"headerlink\" title=\"10.你有哪些性能优化的方法\"></a>10.你有哪些性能优化的方法</h3><p>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。<br>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数<br>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。<br>（4） 当需要设置的样式很多时设置className而不是直接操作style。<br>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。<br>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。<br>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>\n<h3 id=\"11-ajax过程\"><a href=\"#11-ajax过程\" class=\"headerlink\" title=\"11.ajax过程\"></a>11.ajax过程</h3><p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.<br>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.<br>(3)设置响应HTTP请求状态变化的函数.<br>(4)发送HTTP请求.<br>(5)获取异步调用返回的数据.<br>(6)使用JavaScript和DOM实现局部刷新.</p>\n<h3 id=\"12-AMD和CMD的区别\"><a href=\"#12-AMD和CMD的区别\" class=\"headerlink\" title=\"12.AMD和CMD的区别\"></a>12.AMD和CMD的区别</h3><p>AMD（异步模块定义） 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD（通用模块定义） 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>（1）AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行。<br>（2）CMD 推崇依赖就近，AMD 推崇依赖前置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// CMD</span></div><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)</div><div class=\"line\">   a.doSomething()   </div><div class=\"line\">   <span class=\"comment\">// 此处略去 100 行   </span></div><div class=\"line\">   <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>) <span class=\"comment\">// 依赖可以就近书写   </span></div><div class=\"line\">   b.doSomething()   <span class=\"comment\">// ... &#125;)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// AMD 默认推荐的是</span></div><div class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  </div><div class=\"line\">\t<span class=\"comment\">// 依赖必须一开始就写好    </span></div><div class=\"line\">\ta.doSomething()    </div><div class=\"line\">\t<span class=\"comment\">// 此处略去 100 行    </span></div><div class=\"line\">\tb.doSomething()    </div><div class=\"line\">\t...</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>(3)AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。<br>CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-js的数据类型相关\"><a href=\"#1-js的数据类型相关\" class=\"headerlink\" title=\"1.js的数据类型相关\"></a>1.js的数据类型相关</h3><p>(1)基本数据类型<br>Undefined、Null、Boolean、Number、String<br>(2)typeof返回哪些数据类型<br>Object、function、number、boolean、underfind、string<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 'object'</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> []; <span class=\"comment\">// 'object'</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125;; <span class=\"comment\">// 'object'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>); <span class=\"comment\">// 'object' 包装对象,不要使用</span></div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">123</span>) === <span class=\"number\">123</span>; <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<p>判断Array要使用Array.isArray(arr);<br>判断null请使用myVar === null;<br>判断某个全局变量是否存在用typeof window.myVar === ‘undefined’;<br>null和undefined没有toString()方法;<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">123.</span>toString(); <span class=\"comment\">// SyntaxError</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">123.</span>.toString(); <span class=\"comment\">// '123', 注意是两个点！</span></div><div class=\"line\">(<span class=\"number\">123</span>).toString(); <span class=\"comment\">// '123'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-和-的区别\"><a href=\"#2-和-的区别\" class=\"headerlink\" title=\"2.==和===的区别\"></a>2.==和===的区别</h3><p>(1)==包含隐式类型转换，===类型不同则结果不同<br>(2)对于Array,Object等高级类型，==和===是没有区别的，进行“指针地址”比较<br>(3)==的隐式类型转换应遵循一下几条规则：<br>    <1>布尔值转数值 false-&gt;0,true-&gt;1<br>    <2>字符串和数值比较，先将字符串转数值 ‘false’-&gt;NaN<br>    <3>对象和其他比较，先调用对象valueOf()方法，用得到的基本类型值按照前面的规则进行比较。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">null</span> <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"literal\">undefined</span> === <span class=\"literal\">undefined</span> <span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">'false'</span>  <span class=\"comment\">//false  false-&gt;0 'false'-&gt;NaN</span></div><div class=\"line\"><span class=\"literal\">false</span> == <span class=\"string\">'0'</span> <span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">''</span> == <span class=\"string\">'0'</span> <span class=\"comment\">//false 不转</span></div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">''</span> <span class=\"comment\">//true ''-&gt;0</span></div><div class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">'0'</span> <span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">//true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">' \\t\\r\\n '</span> == <span class=\"number\">0</span>     <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></3></2></1></p>\n<p>NaN与所有其他值都不等<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span>; <span class=\"comment\">// false</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//唯一能判断NaN的方法是通过isNaN()函数</span></div><div class=\"line\"><span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-null和undefined的区别\"><a href=\"#3-null和undefined的区别\" class=\"headerlink\" title=\"3.null和undefined的区别\"></a>3.null和undefined的区别</h3><p>(1)null表示一个空的值，转为数值时为0，多数情况用null<br>(2)undefined表示值未定义，转为数值时为NaN<br>(3)if里把null、undefined、0、NaN和空字符串’’视为false，其他值一概视为true<br>undefined：<br>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。<br>null：<br>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p>\n<h3 id=\"4-字符串相关\"><a href=\"#4-字符串相关\" class=\"headerlink\" title=\"4.字符串相关\"></a>4.字符串相关</h3><h4 id=\"4-1-如果字符串内部既包含’又包含”怎么办？\"><a href=\"#4-1-如果字符串内部既包含’又包含”怎么办？\" class=\"headerlink\" title=\"4.1 如果字符串内部既包含’又包含”怎么办？\"></a>4.1 如果字符串内部既包含’又包含”怎么办？</h4><p>可以用转义字符\\来标识，比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'I\\'m \\\"OK\\\"!'</span>; <span class=\"comment\">//I'm \"OK\"!</span></div></pre></td></tr></table></figure></p>\n<p>转义字符\\可以转义很多字符，比如\\n表示换行，\\t表示制表符，字符\\本身也要转义，所以\\表示的字符就是\\。</p>\n<h4 id=\"4-2-多行字符串，之前用-n拼接，ES6用反引号\"><a href=\"#4-2-多行字符串，之前用-n拼接，ES6用反引号\" class=\"headerlink\" title=\"4.2 多行字符串，之前用\\n拼接，ES6用反引号``\"></a>4.2 多行字符串，之前用\\n拼接，ES6用反引号``</h4><h4 id=\"4-3-模板字符串\"><a href=\"#4-3-模板字符串\" class=\"headerlink\" title=\"4.3 模板字符串\"></a>4.3 模板字符串</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//old</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">'你好, '</span> + name + <span class=\"string\">', 你今年'</span> + age + <span class=\"string\">'岁了!'</span>;</div><div class=\"line\"><span class=\"comment\">//ES6</span></div><div class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'小明'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"string\">`你好, <span class=\"subst\">$&#123;name&#125;</span>, 你今年<span class=\"subst\">$&#123;age&#125;</span>岁了!`</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"4-4-slice-substr和substring的区别\"><a href=\"#4-4-slice-substr和substring的区别\" class=\"headerlink\" title=\"4.4 slice,substr和substring的区别\"></a>4.4 slice,substr和substring的区别</h4><p>slice和substring接收的是起始位置和结束位置(不包括结束位置)，而substr接收的则是起始位置和所要返回的字符串长度。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">'hello world'</span>;</div><div class=\"line\"></div><div class=\"line\">test.substr(<span class=\"number\">4</span>,<span class=\"number\">7</span>) <span class=\"comment\">//o world</span></div><div class=\"line\">test.slice(<span class=\"number\">4</span>,<span class=\"number\">7</span>) <span class=\"comment\">//o w</span></div><div class=\"line\">test.substring(<span class=\"number\">4</span>,<span class=\"number\">7</span>) <span class=\"comment\">//o w</span></div><div class=\"line\">test.substring(<span class=\"number\">7</span>,<span class=\"number\">4</span>) <span class=\"comment\">//o w  按大小排</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//负数时</span></div><div class=\"line\">test.slice(<span class=\"number\">-3</span>) <span class=\"comment\">//rld  如果start为负数，则start=str.length+start。</span></div><div class=\"line\">test.substring(<span class=\"number\">-3</span>) <span class=\"comment\">//hello world  直接将负数转成0</span></div><div class=\"line\">test.substr(<span class=\"number\">-3</span>) <span class=\"comment\">//rld  如果start为负数，则start=str.length+start。</span></div><div class=\"line\"></div><div class=\"line\">test.slice(<span class=\"number\">3</span>,<span class=\"number\">-4</span>) <span class=\"comment\">//lo w  如果end为负数，则end=str.length+end。</span></div><div class=\"line\">test.substring(<span class=\"number\">3</span>,<span class=\"number\">-4</span>) <span class=\"comment\">//hel  直接将负数转成0</span></div><div class=\"line\">test.substr(<span class=\"number\">3</span>,<span class=\"number\">-4</span>) <span class=\"comment\">//空字符串  如果end为负数，则转为0。</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"5-数组相关\"><a href=\"#5-数组相关\" class=\"headerlink\" title=\"5.数组相关\"></a>5.数组相关</h3><h4 id=\"5-1-Array的length-索引赋值会导致Array的变化\"><a href=\"#5-1-Array的length-索引赋值会导致Array的变化\" class=\"headerlink\" title=\"5.1 Array的length/索引赋值会导致Array的变化\"></a>5.1 Array的length/索引赋值会导致Array的变化</h4><h4 id=\"5-2-slice\"><a href=\"#5-2-slice\" class=\"headerlink\" title=\"5.2 slice()\"></a>5.2 slice()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>];</div><div class=\"line\">arr.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span></div><div class=\"line\">arr.slice(<span class=\"number\">3</span>); <span class=\"comment\">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-3-splice\"><a href=\"#5-3-splice\" class=\"headerlink\" title=\"5.3 splice()\"></a>5.3 splice()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'Microsoft'</span>, <span class=\"string\">'Apple'</span>, <span class=\"string\">'Yahoo'</span>, <span class=\"string\">'AOL'</span>, <span class=\"string\">'Excite'</span>, <span class=\"string\">'Oracle'</span>];</div><div class=\"line\"><span class=\"comment\">// 从索引2开始删除3个元素,然后再添加两个元素:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"string\">'Google'</span>, <span class=\"string\">'Facebook'</span>); <span class=\"comment\">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div><div class=\"line\"><span class=\"comment\">// 只删除,不添加:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">2</span>); <span class=\"comment\">// ['Google', 'Facebook']</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Oracle']</span></div><div class=\"line\"><span class=\"comment\">// 只添加,不删除:</span></div><div class=\"line\">arr.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">'Google'</span>, <span class=\"string\">'Facebook'</span>); <span class=\"comment\">// 返回[],因为没有删除任何元素</span></div><div class=\"line\">arr; <span class=\"comment\">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-4-split-和join\"><a href=\"#5-4-split-和join\" class=\"headerlink\" title=\"5.4 split()和join()\"></a>5.4 split()和join()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'A-B-C-1-2-3'</span>.split(<span class=\"string\">\"-\"</span>)    <span class=\"comment\">//['A', 'B', 'C', 1, 2, 3]</span></div><div class=\"line\">[<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].join(<span class=\"string\">'-'</span>); <span class=\"comment\">// 'A-B-C-1-2-3'</span></div></pre></td></tr></table></figure>\n<h4 id=\"5-5-map-reduce-filter\"><a href=\"#5-5-map-reduce-filter\" class=\"headerlink\" title=\"5.5 map(),reduce(),filter()\"></a>5.5 map(),reduce(),filter()</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//map</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x*x); <span class=\"comment\">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></div><div class=\"line\">arr.map(<span class=\"built_in\">String</span>); <span class=\"comment\">// ['1', '2', '3', '4', '5', '6', '7', '8', '9']</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//reduce</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</div><div class=\"line\">arr2.reduce(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y); <span class=\"comment\">// 25</span></div><div class=\"line\">arr2.reduce(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x*<span class=\"number\">10</span> + y) ;<span class=\"comment\">//13579</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//filter</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'A'</span>, <span class=\"string\">''</span>, <span class=\"string\">'B'</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'  '</span>];</div><div class=\"line\">arr3.filter(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s &amp;&amp; s.trim()); <span class=\"comment\">// ['A', 'B', 'C'] 除空字符串</span></div><div class=\"line\">arr3.filter(<span class=\"function\">(<span class=\"params\">ele, index, self</span>) =&gt;</span> self.indexOf(ele) === index); </div><div class=\"line\"><span class=\"comment\">//[\"A\", \"\", \"B\", null, undefined, \"  \"] 去重</span></div><div class=\"line\"><span class=\"comment\">//参数表示某元素，元素的位置和数组本身</span></div></pre></td></tr></table></figure>\n<h3 id=\"6-for…in和for…of的区别\"><a href=\"#6-for…in和for…of的区别\" class=\"headerlink\" title=\"6.for…in和for…of的区别\"></a>6.for…in和for…of的区别</h3><p>(1)for…of是ES6提出用来遍历iterable类型的,只循环集合本身的元素<br>(2)for…in是遍历对象的属性名称<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>];</div><div class=\"line\">a.name = <span class=\"string\">'Hello'</span>;</div><div class=\"line\"><span class=\"comment\">//for...in包括name,但Array的length却不包括</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">in</span> a) &#123;</div><div class=\"line\">    alert(x); <span class=\"comment\">// '0', '1', '2', 'name'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> a) &#123;</div><div class=\"line\">    alert(x); <span class=\"comment\">// 'A', 'B', 'C'</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//更好的用forEach(iterable内置方法)</span></div><div class=\"line\">a.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, index, array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// element: 指向当前元素的值</span></div><div class=\"line\">    <span class=\"comment\">// index: 指向当前索引</span></div><div class=\"line\">    <span class=\"comment\">// array: 指向Array对象本身</span></div><div class=\"line\">    alert(element);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>(3)forEach对Set和map的区别：<br>Set没有索引，因此回调函数的前两个参数都是元素本身；<br>Map的回调函数参数依次为value、key和map本身</p>\n<h3 id=\"7-函数相关\"><a href=\"#7-函数相关\" class=\"headerlink\" title=\"7.函数相关\"></a>7.函数相关</h3><h4 id=\"7-1-arguments对象\"><a href=\"#7-1-arguments对象\" class=\"headerlink\" title=\"7.1 arguments对象\"></a>7.1 arguments对象</h4><p>只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<br>arguments类似Array但它不是一个Array。<br>arguments最常用于判断传入参数的个数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    alert(x); <span class=\"comment\">// 10</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>&gt;<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"built_in\">arguments</span>.length; i++) &#123;</div><div class=\"line\">\t        alert(<span class=\"built_in\">arguments</span>[i]); <span class=\"comment\">// 10, 20, 30</span></div><div class=\"line\">\t    &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</div></pre></td></tr></table></figure></p>\n<p>arguments.callee返回此arguments对象所在的当前函数引用。<br>在使用函数递归调用时推荐使用arguments.callee代替函数名本身。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">\t  <span class=\"keyword\">if</span>(a==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t     <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">\t  &#125; </div><div class=\"line\">\t  <span class=\"keyword\">return</span> a + <span class=\"built_in\">arguments</span>.callee(--a);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> mm = count(<span class=\"number\">10</span>);</div></pre></td></tr></table></figure></p>\n<p>ES6引入rest参数也能返回所有参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">...rest</span>) </span>&#123;</div><div class=\"line\">\t  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">\t  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> rest)&#123;</div><div class=\"line\">\t     sum += i</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> sum</div><div class=\"line\">&#125;</div><div class=\"line\">sum(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>) <span class=\"comment\">//10</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"7-2-this对象的理解\"><a href=\"#7-2-this对象的理解\" class=\"headerlink\" title=\"7.2 this对象的理解\"></a>7.2 this对象的理解</h4><p>this总是指向函数的直接调用者（而非间接调用者）；<br>如果有new关键字，this指向new出来的那个对象；<br>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</p>\n<h4 id=\"7-3-call-和-apply-的区别和作用\"><a href=\"#7-3-call-和-apply-的区别和作用\" class=\"headerlink\" title=\"7.3 call() 和 apply() 的区别和作用\"></a>7.3 call() 和 apply() 的区别和作用</h4><p>作用是控制this的指向。<br>apply()函数有两个参数：第一个参数是需要绑定的this变量，第二个参数是参数组成的数组。如果上下文是null，则使用全局对象代替。<br>如：function.apply(this,[1,2,3]);<br>call()的第一个参数是需要绑定的this变量，后续是实例传入的参数序列。<br>如：function.call(this,1,2,3);</p>\n<p>利用apply()，我们还可以动态改变函数的行为。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//统计一下代码一共调用了多少次parseInt()</span></div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> oldParseInt = <span class=\"built_in\">parseInt</span>; <span class=\"comment\">// 保存原函数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">window</span>.parseInt = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    count += <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> oldParseInt.apply(<span class=\"literal\">null</span>, <span class=\"built_in\">arguments</span>); <span class=\"comment\">// 调用原函数</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 测试:</span></div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'10'</span>);</div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'20'</span>);</div><div class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'30'</span>);</div><div class=\"line\">count; <span class=\"comment\">// 3</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"7-4-闭包\"><a href=\"#7-4-闭包\" class=\"headerlink\" title=\"7.4 闭包\"></a>7.4 闭包</h4><p>当函数里嵌套函数时，内部的函数可以访问外部函数里的变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建一个匿名函数并立刻执行</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;)(<span class=\"number\">3</span>); <span class=\"comment\">// 9</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"8-JSON的了解\"><a href=\"#8-JSON的了解\" class=\"headerlink\" title=\"8 JSON的了解\"></a>8 JSON的了解</h4><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。<br>它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小。<br>格式：采用键值对，例如：{‘age’:’12’, ‘name’:’back’}<br>JSON.stringify() //序列化成JSON格式的字符串,第二个参数(array)用于控制筛选对象的键值<br>JSON.parse() //反序列化成JavaScript对象</p>\n<h4 id=\"9-对象相关\"><a href=\"#9-对象相关\" class=\"headerlink\" title=\"9 对象相关\"></a>9 对象相关</h4><h3 id=\"9-1-new操作符具体干了什么\"><a href=\"#9-1-new操作符具体干了什么\" class=\"headerlink\" title=\"9.1 new操作符具体干了什么\"></a>9.1 new操作符具体干了什么</h3><p>（1）创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>（2）属性和方法被加入到 this 引用的对象中。<br>（3）新创建的对象由 this 所引用，并且最后隐式的返回 this 。<br>用new创建的对象还从原型上获得了一个constructor属性，它指向构造函数本身。</p>\n<h3 id=\"9-2-JavaScript如何实现继承\"><a href=\"#9-2-JavaScript如何实现继承\" class=\"headerlink\" title=\"9.2 JavaScript如何实现继承\"></a>9.2 JavaScript如何实现继承</h3><p>一般使用构造函数与原型混合方式<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'wang'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">28</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();<span class=\"comment\">//继承了Parent，通过原型</span></div><div class=\"line\"><span class=\"keyword\">var</span> demo = <span class=\"keyword\">new</span> Child();</div><div class=\"line\">alert(demo.age);</div><div class=\"line\">alert(demo.name);<span class=\"comment\">//得到被继承的属性</span></div></pre></td></tr></table></figure></p>\n<p>更好的继承,通过引入空函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherits</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    F.prototype = Parent.prototype;</div><div class=\"line\">    Child.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">    Child.prototype.constructor = Child;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"10-你有哪些性能优化的方法\"><a href=\"#10-你有哪些性能优化的方法\" class=\"headerlink\" title=\"10.你有哪些性能优化的方法\"></a>10.你有哪些性能优化的方法</h3><p>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。<br>（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数<br>（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。<br>（4） 当需要设置的样式很多时设置className而不是直接操作style。<br>（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。<br>（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。<br>（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p>\n<h3 id=\"11-ajax过程\"><a href=\"#11-ajax过程\" class=\"headerlink\" title=\"11.ajax过程\"></a>11.ajax过程</h3><p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.<br>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.<br>(3)设置响应HTTP请求状态变化的函数.<br>(4)发送HTTP请求.<br>(5)获取异步调用返回的数据.<br>(6)使用JavaScript和DOM实现局部刷新.</p>\n<h3 id=\"12-AMD和CMD的区别\"><a href=\"#12-AMD和CMD的区别\" class=\"headerlink\" title=\"12.AMD和CMD的区别\"></a>12.AMD和CMD的区别</h3><p>AMD（异步模块定义） 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD（通用模块定义） 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>（1）AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行。<br>（2）CMD 推崇依赖就近，AMD 推崇依赖前置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// CMD</span></div><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)</div><div class=\"line\">   a.doSomething()   </div><div class=\"line\">   <span class=\"comment\">// 此处略去 100 行   </span></div><div class=\"line\">   <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>) <span class=\"comment\">// 依赖可以就近书写   </span></div><div class=\"line\">   b.doSomething()   <span class=\"comment\">// ... &#125;)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// AMD 默认推荐的是</span></div><div class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  </div><div class=\"line\">\t<span class=\"comment\">// 依赖必须一开始就写好    </span></div><div class=\"line\">\ta.doSomething()    </div><div class=\"line\">\t<span class=\"comment\">// 此处略去 100 行    </span></div><div class=\"line\">\tb.doSomething()    </div><div class=\"line\">\t...</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>(3)AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。<br>CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。</p>\n"},{"title":"js函数递归调用与数组全排列","date":"2018-01-22T07:03:09.000Z","_content":"\n### 1.递归的定义\n递归就是函数自己调用自己。\n递归需要有出口return，不然会栈溢出。\n```javascript\nfunction fun(){\n\tfun()\n}\nfun()\n```\n可以实现类似阶乘的算法\n```javascript\nfunction func(n){\n    if (n === 1){\n        return 1;\n    }\n    // func(n-1) 因为传递的参数是 n-1,那么就是求 (n-1) 的阶乘\n    return n * func(n-1);\n}\nfunc(5) //5*4*3*2*1\n```\n还有斐波拉契数列: 1， 1， 2， 3， 5， 8， 13， 21\n```javascript\nfunction fib (n){  \n  if(n<=2){  \n    return 1;\n  }  \n  return fib(n-1) + fib(n-2);    \n}  \nfib(5); // 2+3 = 5\n```\n\n### 2.[数组的全排列](http://www.jb51.net/article/39291.htm)\nA(3,3)=6\nresult: [1,2,3] --->\n[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]\n####(1)递归交换\n```javascript\n/*  \n全排列（递归交换）算法  \n1、将第一个位置分别放置各个不同的元素；  \n2、对剩余的位置进行全排列（递归）；  \n3、递归出口为只对一个元素进行全排列。  \n*/ \nfunction swap(arr,i,j) {  //交换位置\n    if(i!=j) {  \n        var temp=arr[i];  \n        arr[i]=arr[j];  \n        arr[j]=temp;  \n    }  \n}\nlet newArr = [];\nfunction perm(arr) {\n\t\n    (function fn(n) { //为第n个位置选择元素  \n        for(var i=n;i<arr.length;i++) {  \n            swap(arr,i,n);  \n            if(n+1<arr.length-1){\n            \t//判断数组中剩余的待全排列的元素是否大于1个  \n                fn(n+1); //从第n+1个下标进行全排列  \n            } else {\n            \tconsole.log(newArr)\n            \tnewArr.push(arr); //显示一组结果\n            }   \n            swap(arr,i,n);  \n        }  \n    })(0); \n    \n}  \nperm([1,2,3,4]);  \n```\n\n#### (2).递归链接\n```javascript\n/*  \n全排列（递归链接）算法  \n1、设定源数组为输入数组，结果数组存放排列结果（初始化为空数组）；  \n2、逐一将源数组的每个元素链接到结果数组中（生成新数组对象）；  \n3、从原数组中删除被链接的元素（生成新数组对象）；  \n4、将新的源数组和结果数组作为参数递归调用步骤2、3，直到源数组为空，则输出一个排列。  \n*/ \nfunction perm(arr) { \n\tlet newArr = [];\n    (function fn(source, result) {  \n        if (source.length == 0)  \n            newArr.push(result) //result;  \n        else \n            for (var i = 0; i < source.length; i++)  \n                fn(source.slice(0, i).concat(source.slice(i + 1)), result.concat(source[i]));  \n    })(arr, []);  \n    return newArr\n}  \nperm([1,2,3,4]);  \n```\n\n#### (3).递归回溯\n```javascript\n/*  \n全排列（递归回溯）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、建立递归函数，用来搜索第n个位置；  \n3、第n个位置搜索方式与八皇后问题类似。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction seek(index, n) {  \n    if (n >= 0) //判断是否已回溯到了第一个位置之前，即已经找到了所有位置排列  \n        if (index[n] < index.length - 1) { //还有下一个位置可选  \n            index[n]++; //选择下一个位置  \n            if ((function () { //该匿名函数判断该位置是否已经被选择过  \n                for (var i = 0; i < n; i++)  \n                    if (index[i] == index[n]) return true; //已选择  \n                return false; //未选择  \n            })())  \n                return seek(index, n); //重新找位置  \n            else \n                return true; //找到  \n        }  \n        else { //当前无位置可选，进行递归回溯  \n            index[n] = -1; //取消当前位置  \n            if (seek(index, n - 1)) //继续找上一个位置  \n                return seek(index, n); //重新找当前位置  \n            else \n                return false; //已无位置可选  \n        }  \n    else \n        return false;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = -1; //初始化所有位置为-1，以便++后为0  \n    for (i = 0; i < index.length - 1; i++)  \n        seek(index, i); //先搜索前n-1个位置  \n    while (seek(index, index.length - 1)) { //不断搜索第n个位置，即找到所有位置排列  \n        var temp = [];  \n        for (i = 0; i < index.length; i++) //将位置之转换为元素  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]); \n```\n\n#### (4).非递归回溯\n```javascript\n/*  \n全排列（非递归回溯）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、第n个位置搜索方式与八皇后问题类似。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction seek(index, n) {  \n    var flag = false, m = n; //flag为找到位置排列的标志，m保存正在搜索哪个位置  \n    do {  \n        index[n]++;  \n        if (index[n] == index.length) //已无位置可用  \n            index[n--] = -1; //重置当前位置，回退到上一个位置  \n        else if (!(function () {  \n            for (var i = 0; i < n; i++)  \n                if (index[i] == index[n]) return true;  \n            return false;  \n        })()) //该位置未被选择  \n            if (m == n) //当前位置搜索完成  \n                flag = true;  \n            else \n                n++;  \n    } while (!flag && n >= 0)  \n    return flag;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = -1;  \n    for (i = 0; i < index.length - 1; i++)  \n        seek(index, i);  \n    while (seek(index, index.length - 1)) {  \n        var temp = [];  \n        for (i = 0; i < index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);  \n```\n\n#### (5).非递归求顺序\n```javascript\n/*  \n全排列（非递归求顺序）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、按如下算法求全排列：  \n设P是1～n(位置编号)的一个全排列：p = p1,p2...pn = p1,p2...pj-1,pj,pj+1...pk-1,pk,pk+1...pn  \n(1)从排列的尾部开始，找出第一个比右边位置编号小的索引j（j从首部开始计算），即j = max{i | pi < pi+1}  \n(2)在pj的右边的位置编号中，找出所有比pj大的位置编号中最小的位置编号的索引k，即 k = max{i | pi > pj}  \n   pj右边的位置编号是从右至左递增的，因此k是所有大于pj的位置编号中索引最大的  \n(3)交换pj与pk  \n(4)再将pj+1...pk-1,pk,pk+1...pn翻转得到排列p' = p1,p2...pj-1,pj,pn...pk+1,pk,pk-1...pj+1  \n(5)p'便是排列p的下一个排列  \n\n例如：  \n24310是位置编号0～4的一个排列，求它下一个排列的步骤如下：  \n(1)从右至左找出排列中第一个比右边数字小的数字2；  \n(2)在该数字后的数字中找出比2大的数中最小的一个3；  \n(3)将2与3交换得到34210；  \n(4)将原来2（当前3）后面的所有数字翻转，即翻转4210，得30124；  \n(5)求得24310的下一个排列为30124。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction swap(arr, i, j) {  \n    var t = arr[i];  \n    arr[i] = arr[j];  \n    arr[j] = t;  \n\n}  \nfunction sort(index) {  \n    for (var j = index.length - 2; j >= 0 && index[j] > index[j + 1]; j--)  \n        ; //本循环从位置数组的末尾开始，找到第一个左边小于右边的位置，即j  \n    if (j < 0) return false; //已完成全部排列  \n    for (var k = index.length - 1; index[k] < index[j]; k--)  \n        ; //本循环从位置数组的末尾开始，找到比j位置大的位置中最小的，即k  \n    swap(index, j, k);  \n    for (j = j + 1, k = index.length - 1; j < k; j++, k--)  \n        swap(index, j, k); //本循环翻转j+1到末尾的所有位置  \n    return true;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = i;  \n    do {  \n        var temp = [];  \n        for (i = 0; i < index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    } while (sort(index));  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);\n```\n\n#### (6).非递归求模\n```javascript\n/*  \n全排列（非递归求模）算法  \n1、初始化存放全排列结果的数组result，与原数组的元素个数相等；  \n2、计算n个元素全排列的总数，即n!；  \n3、从>=0的任意整数开始循环n!次，每次累加1，记为index；  \n4、取第1个元素arr[0]，求1进制的表达最低位，即求index模1的值w，将第1个元素（arr[0]）插入result的w位置，并将index迭代为index\\1；  \n5、取第2个元素arr[1]，求2进制的表达最低位，即求index模2的值w，将第2个元素（arr[1]）插入result的w位置，并将index迭代为index\\2；  \n6、取第3个元素arr[2]，求3进制的表达最低位，即求index模3的值w，将第3个元素（arr[2]）插入result的w位置，并将index迭代为index\\3；  \n7、……  \n8、直到取最后一个元素arr[arr.length-1]，此时求得一个排列；  \n9、当index循环完成，便求得所有排列。  \n\n例：  \n求4个元素[\"a\", \"b\", \"c\", \"d\"]的全排列, 共循环4!=24次，可从任意>=0的整数index开始循环，每次累加1，直到循环完index+23后结束；  \n假设index=13（或13+24，13+2*24，13+3*24…），因为共4个元素，故迭代4次，则得到的这一个排列的过程为：  \n第1次迭代，13/1，商=13，余数=0，故第1个元素插入第0个位置（即下标为0），得[\"a\"]；  \n第2次迭代，13/2, 商=6，余数=1，故第2个元素插入第1个位置（即下标为1），得[\"a\", \"b\"]；  \n第3次迭代，6/3, 商=2，余数=0，故第3个元素插入第0个位置（即下标为0），得[\"c\", \"a\", \"b\"]；  \n第4次迭代，2/4，商=0，余数=2, 故第4个元素插入第2个位置（即下标为2），得[\"c\", \"a\", \"d\", \"b\"]；  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction perm(arr) {  \n    var result = new Array(arr.length);  \n    var fac = 1;  \n    for (var i = 2; i <= arr.length; i++)  \n        fac *= i;  \n    for (index = 0; index < fac; index++) {  \n        var t = index;  \n        for (i = 1; i <= arr.length; i++) {  \n            var w = t % i;  \n            for (j = i - 1; j > w; j--)  \n                result[j] = result[j - 1];  \n            result[w] = arr[i - 1];  \n            t = Math.floor(t / i);  \n        }  \n        show(result);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);  \n```","source":"_posts/js-fn-01.md","raw":"---\ntitle: js函数递归调用与数组全排列\ndate: 2018-01-22 15:03:09\ntags: javascript\n---\n\n### 1.递归的定义\n递归就是函数自己调用自己。\n递归需要有出口return，不然会栈溢出。\n```javascript\nfunction fun(){\n\tfun()\n}\nfun()\n```\n可以实现类似阶乘的算法\n```javascript\nfunction func(n){\n    if (n === 1){\n        return 1;\n    }\n    // func(n-1) 因为传递的参数是 n-1,那么就是求 (n-1) 的阶乘\n    return n * func(n-1);\n}\nfunc(5) //5*4*3*2*1\n```\n还有斐波拉契数列: 1， 1， 2， 3， 5， 8， 13， 21\n```javascript\nfunction fib (n){  \n  if(n<=2){  \n    return 1;\n  }  \n  return fib(n-1) + fib(n-2);    \n}  \nfib(5); // 2+3 = 5\n```\n\n### 2.[数组的全排列](http://www.jb51.net/article/39291.htm)\nA(3,3)=6\nresult: [1,2,3] --->\n[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]\n####(1)递归交换\n```javascript\n/*  \n全排列（递归交换）算法  \n1、将第一个位置分别放置各个不同的元素；  \n2、对剩余的位置进行全排列（递归）；  \n3、递归出口为只对一个元素进行全排列。  \n*/ \nfunction swap(arr,i,j) {  //交换位置\n    if(i!=j) {  \n        var temp=arr[i];  \n        arr[i]=arr[j];  \n        arr[j]=temp;  \n    }  \n}\nlet newArr = [];\nfunction perm(arr) {\n\t\n    (function fn(n) { //为第n个位置选择元素  \n        for(var i=n;i<arr.length;i++) {  \n            swap(arr,i,n);  \n            if(n+1<arr.length-1){\n            \t//判断数组中剩余的待全排列的元素是否大于1个  \n                fn(n+1); //从第n+1个下标进行全排列  \n            } else {\n            \tconsole.log(newArr)\n            \tnewArr.push(arr); //显示一组结果\n            }   \n            swap(arr,i,n);  \n        }  \n    })(0); \n    \n}  \nperm([1,2,3,4]);  \n```\n\n#### (2).递归链接\n```javascript\n/*  \n全排列（递归链接）算法  \n1、设定源数组为输入数组，结果数组存放排列结果（初始化为空数组）；  \n2、逐一将源数组的每个元素链接到结果数组中（生成新数组对象）；  \n3、从原数组中删除被链接的元素（生成新数组对象）；  \n4、将新的源数组和结果数组作为参数递归调用步骤2、3，直到源数组为空，则输出一个排列。  \n*/ \nfunction perm(arr) { \n\tlet newArr = [];\n    (function fn(source, result) {  \n        if (source.length == 0)  \n            newArr.push(result) //result;  \n        else \n            for (var i = 0; i < source.length; i++)  \n                fn(source.slice(0, i).concat(source.slice(i + 1)), result.concat(source[i]));  \n    })(arr, []);  \n    return newArr\n}  \nperm([1,2,3,4]);  \n```\n\n#### (3).递归回溯\n```javascript\n/*  \n全排列（递归回溯）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、建立递归函数，用来搜索第n个位置；  \n3、第n个位置搜索方式与八皇后问题类似。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction seek(index, n) {  \n    if (n >= 0) //判断是否已回溯到了第一个位置之前，即已经找到了所有位置排列  \n        if (index[n] < index.length - 1) { //还有下一个位置可选  \n            index[n]++; //选择下一个位置  \n            if ((function () { //该匿名函数判断该位置是否已经被选择过  \n                for (var i = 0; i < n; i++)  \n                    if (index[i] == index[n]) return true; //已选择  \n                return false; //未选择  \n            })())  \n                return seek(index, n); //重新找位置  \n            else \n                return true; //找到  \n        }  \n        else { //当前无位置可选，进行递归回溯  \n            index[n] = -1; //取消当前位置  \n            if (seek(index, n - 1)) //继续找上一个位置  \n                return seek(index, n); //重新找当前位置  \n            else \n                return false; //已无位置可选  \n        }  \n    else \n        return false;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = -1; //初始化所有位置为-1，以便++后为0  \n    for (i = 0; i < index.length - 1; i++)  \n        seek(index, i); //先搜索前n-1个位置  \n    while (seek(index, index.length - 1)) { //不断搜索第n个位置，即找到所有位置排列  \n        var temp = [];  \n        for (i = 0; i < index.length; i++) //将位置之转换为元素  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]); \n```\n\n#### (4).非递归回溯\n```javascript\n/*  \n全排列（非递归回溯）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、第n个位置搜索方式与八皇后问题类似。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction seek(index, n) {  \n    var flag = false, m = n; //flag为找到位置排列的标志，m保存正在搜索哪个位置  \n    do {  \n        index[n]++;  \n        if (index[n] == index.length) //已无位置可用  \n            index[n--] = -1; //重置当前位置，回退到上一个位置  \n        else if (!(function () {  \n            for (var i = 0; i < n; i++)  \n                if (index[i] == index[n]) return true;  \n            return false;  \n        })()) //该位置未被选择  \n            if (m == n) //当前位置搜索完成  \n                flag = true;  \n            else \n                n++;  \n    } while (!flag && n >= 0)  \n    return flag;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = -1;  \n    for (i = 0; i < index.length - 1; i++)  \n        seek(index, i);  \n    while (seek(index, index.length - 1)) {  \n        var temp = [];  \n        for (i = 0; i < index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);  \n```\n\n#### (5).非递归求顺序\n```javascript\n/*  \n全排列（非递归求顺序）算法  \n1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  \n2、按如下算法求全排列：  \n设P是1～n(位置编号)的一个全排列：p = p1,p2...pn = p1,p2...pj-1,pj,pj+1...pk-1,pk,pk+1...pn  \n(1)从排列的尾部开始，找出第一个比右边位置编号小的索引j（j从首部开始计算），即j = max{i | pi < pi+1}  \n(2)在pj的右边的位置编号中，找出所有比pj大的位置编号中最小的位置编号的索引k，即 k = max{i | pi > pj}  \n   pj右边的位置编号是从右至左递增的，因此k是所有大于pj的位置编号中索引最大的  \n(3)交换pj与pk  \n(4)再将pj+1...pk-1,pk,pk+1...pn翻转得到排列p' = p1,p2...pj-1,pj,pn...pk+1,pk,pk-1...pj+1  \n(5)p'便是排列p的下一个排列  \n\n例如：  \n24310是位置编号0～4的一个排列，求它下一个排列的步骤如下：  \n(1)从右至左找出排列中第一个比右边数字小的数字2；  \n(2)在该数字后的数字中找出比2大的数中最小的一个3；  \n(3)将2与3交换得到34210；  \n(4)将原来2（当前3）后面的所有数字翻转，即翻转4210，得30124；  \n(5)求得24310的下一个排列为30124。  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction swap(arr, i, j) {  \n    var t = arr[i];  \n    arr[i] = arr[j];  \n    arr[j] = t;  \n\n}  \nfunction sort(index) {  \n    for (var j = index.length - 2; j >= 0 && index[j] > index[j + 1]; j--)  \n        ; //本循环从位置数组的末尾开始，找到第一个左边小于右边的位置，即j  \n    if (j < 0) return false; //已完成全部排列  \n    for (var k = index.length - 1; index[k] < index[j]; k--)  \n        ; //本循环从位置数组的末尾开始，找到比j位置大的位置中最小的，即k  \n    swap(index, j, k);  \n    for (j = j + 1, k = index.length - 1; j < k; j++, k--)  \n        swap(index, j, k); //本循环翻转j+1到末尾的所有位置  \n    return true;  \n}  \nfunction perm(arr) {  \n    var index = new Array(arr.length);  \n    for (var i = 0; i < index.length; i++)  \n        index[i] = i;  \n    do {  \n        var temp = [];  \n        for (i = 0; i < index.length; i++)  \n            temp.push(arr[index[i]]);  \n        show(temp);  \n    } while (sort(index));  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);\n```\n\n#### (6).非递归求模\n```javascript\n/*  \n全排列（非递归求模）算法  \n1、初始化存放全排列结果的数组result，与原数组的元素个数相等；  \n2、计算n个元素全排列的总数，即n!；  \n3、从>=0的任意整数开始循环n!次，每次累加1，记为index；  \n4、取第1个元素arr[0]，求1进制的表达最低位，即求index模1的值w，将第1个元素（arr[0]）插入result的w位置，并将index迭代为index\\1；  \n5、取第2个元素arr[1]，求2进制的表达最低位，即求index模2的值w，将第2个元素（arr[1]）插入result的w位置，并将index迭代为index\\2；  \n6、取第3个元素arr[2]，求3进制的表达最低位，即求index模3的值w，将第3个元素（arr[2]）插入result的w位置，并将index迭代为index\\3；  \n7、……  \n8、直到取最后一个元素arr[arr.length-1]，此时求得一个排列；  \n9、当index循环完成，便求得所有排列。  \n\n例：  \n求4个元素[\"a\", \"b\", \"c\", \"d\"]的全排列, 共循环4!=24次，可从任意>=0的整数index开始循环，每次累加1，直到循环完index+23后结束；  \n假设index=13（或13+24，13+2*24，13+3*24…），因为共4个元素，故迭代4次，则得到的这一个排列的过程为：  \n第1次迭代，13/1，商=13，余数=0，故第1个元素插入第0个位置（即下标为0），得[\"a\"]；  \n第2次迭代，13/2, 商=6，余数=1，故第2个元素插入第1个位置（即下标为1），得[\"a\", \"b\"]；  \n第3次迭代，6/3, 商=2，余数=0，故第3个元素插入第0个位置（即下标为0），得[\"c\", \"a\", \"b\"]；  \n第4次迭代，2/4，商=0，余数=2, 故第4个元素插入第2个位置（即下标为2），得[\"c\", \"a\", \"d\", \"b\"]；  \n*/ \nvar count = 0;  \nfunction show(arr) {  \n    document.write(\"P<sub>\" + ++count + \"</sub>: \" + arr + \"<br />\");  \n}  \nfunction perm(arr) {  \n    var result = new Array(arr.length);  \n    var fac = 1;  \n    for (var i = 2; i <= arr.length; i++)  \n        fac *= i;  \n    for (index = 0; index < fac; index++) {  \n        var t = index;  \n        for (i = 1; i <= arr.length; i++) {  \n            var w = t % i;  \n            for (j = i - 1; j > w; j--)  \n                result[j] = result[j - 1];  \n            result[w] = arr[i - 1];  \n            t = Math.floor(t / i);  \n        }  \n        show(result);  \n    }  \n}  \nperm([\"e1\", \"e2\", \"e3\", \"e4\"]);  \n```","slug":"js-fn-01","published":1,"updated":"2018-01-22T08:07:40.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3910010nilwrhf22kop","content":"<h3 id=\"1-递归的定义\"><a href=\"#1-递归的定义\" class=\"headerlink\" title=\"1.递归的定义\"></a>1.递归的定义</h3><p>递归就是函数自己调用自己。<br>递归需要有出口return，不然会栈溢出。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tfun()</div><div class=\"line\">&#125;</div><div class=\"line\">fun()</div></pre></td></tr></table></figure></p>\n<p>可以实现类似阶乘的算法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// func(n-1) 因为传递的参数是 n-1,那么就是求 (n-1) 的阶乘</span></div><div class=\"line\">    <span class=\"keyword\">return</span> n * func(n<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">func(<span class=\"number\">5</span>) <span class=\"comment\">//5*4*3*2*1</span></div></pre></td></tr></table></figure></p>\n<p>还有斐波拉契数列: 1， 1， 2， 3， 5， 8， 13， 21<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span> (<span class=\"params\">n</span>)</span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">2</span>)&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>) + fib(n<span class=\"number\">-2</span>);    </div><div class=\"line\">&#125;  </div><div class=\"line\">fib(<span class=\"number\">5</span>); <span class=\"comment\">// 2+3 = 5</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-数组的全排列\"><a href=\"#2-数组的全排列\" class=\"headerlink\" title=\"2.数组的全排列\"></a>2.<a href=\"http://www.jb51.net/article/39291.htm\" target=\"_blank\" rel=\"external\">数组的全排列</a></h3><p>A(3,3)=6<br>result: [1,2,3] —&gt;<br>[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]</p>\n<p>####(1)递归交换<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（递归交换）算法  </span></div><div class=\"line\"><span class=\"comment\">1、将第一个位置分别放置各个不同的元素；  </span></div><div class=\"line\"><span class=\"comment\">2、对剩余的位置进行全排列（递归）；  </span></div><div class=\"line\"><span class=\"comment\">3、递归出口为只对一个元素进行全排列。  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr,i,j</span>) </span>&#123;  <span class=\"comment\">//交换位置</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(i!=j) &#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> temp=arr[i];  </div><div class=\"line\">        arr[i]=arr[j];  </div><div class=\"line\">        arr[j]=temp;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> newArr = [];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">n</span>) </span>&#123; <span class=\"comment\">//为第n个位置选择元素  </span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=n;i&lt;arr.length;i++) &#123;  </div><div class=\"line\">            swap(arr,i,n);  </div><div class=\"line\">            <span class=\"keyword\">if</span>(n+<span class=\"number\">1</span>&lt;arr.length<span class=\"number\">-1</span>)&#123;</div><div class=\"line\">            \t<span class=\"comment\">//判断数组中剩余的待全排列的元素是否大于1个  </span></div><div class=\"line\">                fn(n+<span class=\"number\">1</span>); <span class=\"comment\">//从第n+1个下标进行全排列  </span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            \t<span class=\"built_in\">console</span>.log(newArr)</div><div class=\"line\">            \tnewArr.push(arr); <span class=\"comment\">//显示一组结果</span></div><div class=\"line\">            &#125;   </div><div class=\"line\">            swap(arr,i,n);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;)(<span class=\"number\">0</span>); </div><div class=\"line\">    </div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]);</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-递归链接\"><a href=\"#2-递归链接\" class=\"headerlink\" title=\"(2).递归链接\"></a>(2).递归链接</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（递归链接）算法  </span></div><div class=\"line\"><span class=\"comment\">1、设定源数组为输入数组，结果数组存放排列结果（初始化为空数组）；  </span></div><div class=\"line\"><span class=\"comment\">2、逐一将源数组的每个元素链接到结果数组中（生成新数组对象）；  </span></div><div class=\"line\"><span class=\"comment\">3、从原数组中删除被链接的元素（生成新数组对象）；  </span></div><div class=\"line\"><span class=\"comment\">4、将新的源数组和结果数组作为参数递归调用步骤2、3，直到源数组为空，则输出一个排列。  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123; </div><div class=\"line\">\t<span class=\"keyword\">let</span> newArr = [];</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">source, result</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (source.length == <span class=\"number\">0</span>)  </div><div class=\"line\">            newArr.push(result) <span class=\"comment\">//result;  </span></div><div class=\"line\">        <span class=\"keyword\">else</span> </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; source.length; i++)  </div><div class=\"line\">                fn(source.slice(<span class=\"number\">0</span>, i).concat(source.slice(i + <span class=\"number\">1</span>)), result.concat(source[i]));  </div><div class=\"line\">    &#125;)(arr, []);  </div><div class=\"line\">    <span class=\"keyword\">return</span> newArr</div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]);</div></pre></td></tr></table></figure>\n<h4 id=\"3-递归回溯\"><a href=\"#3-递归回溯\" class=\"headerlink\" title=\"(3).递归回溯\"></a>(3).递归回溯</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（递归回溯）算法  </span></div><div class=\"line\"><span class=\"comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span></div><div class=\"line\"><span class=\"comment\">2、建立递归函数，用来搜索第n个位置；  </span></div><div class=\"line\"><span class=\"comment\">3、第n个位置搜索方式与八皇后问题类似。  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"P&lt;sub&gt;\"</span> + ++count + <span class=\"string\">\"&lt;/sub&gt;: \"</span> + arr + <span class=\"string\">\"&lt;br /&gt;\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">seek</span>(<span class=\"params\">index, n</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">0</span>) <span class=\"comment\">//判断是否已回溯到了第一个位置之前，即已经找到了所有位置排列  </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (index[n] &lt; index.length - <span class=\"number\">1</span>) &#123; <span class=\"comment\">//还有下一个位置可选  </span></div><div class=\"line\">            index[n]++; <span class=\"comment\">//选择下一个位置  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> ((<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//该匿名函数判断该位置是否已经被选择过  </span></div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++)  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (index[i] == index[n]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">//已选择  </span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//未选择  </span></div><div class=\"line\">            &#125;)())  </div><div class=\"line\">                <span class=\"keyword\">return</span> seek(index, n); <span class=\"comment\">//重新找位置  </span></div><div class=\"line\">            <span class=\"keyword\">else</span> </div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">//找到  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//当前无位置可选，进行递归回溯  </span></div><div class=\"line\">            index[n] = <span class=\"number\">-1</span>; <span class=\"comment\">//取消当前位置  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (seek(index, n - <span class=\"number\">1</span>)) <span class=\"comment\">//继续找上一个位置  </span></div><div class=\"line\">                <span class=\"keyword\">return</span> seek(index, n); <span class=\"comment\">//重新找当前位置  </span></div><div class=\"line\">            <span class=\"keyword\">else</span> </div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//已无位置可选  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);  </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; index.length; i++)  </div><div class=\"line\">        index[i] = <span class=\"number\">-1</span>; <span class=\"comment\">//初始化所有位置为-1，以便++后为0  </span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; index.length - <span class=\"number\">1</span>; i++)  </div><div class=\"line\">        seek(index, i); <span class=\"comment\">//先搜索前n-1个位置  </span></div><div class=\"line\">    <span class=\"keyword\">while</span> (seek(index, index.length - <span class=\"number\">1</span>)) &#123; <span class=\"comment\">//不断搜索第n个位置，即找到所有位置排列  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> temp = [];  </div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; index.length; i++) <span class=\"comment\">//将位置之转换为元素  </span></div><div class=\"line\">            temp.push(arr[index[i]]);  </div><div class=\"line\">        show(temp);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"string\">\"e1\"</span>, <span class=\"string\">\"e2\"</span>, <span class=\"string\">\"e3\"</span>, <span class=\"string\">\"e4\"</span>]);</div></pre></td></tr></table></figure>\n<h4 id=\"4-非递归回溯\"><a href=\"#4-非递归回溯\" class=\"headerlink\" title=\"(4).非递归回溯\"></a>(4).非递归回溯</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（非递归回溯）算法  </span></div><div class=\"line\"><span class=\"comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span></div><div class=\"line\"><span class=\"comment\">2、第n个位置搜索方式与八皇后问题类似。  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"P&lt;sub&gt;\"</span> + ++count + <span class=\"string\">\"&lt;/sub&gt;: \"</span> + arr + <span class=\"string\">\"&lt;br /&gt;\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">seek</span>(<span class=\"params\">index, n</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>, m = n; <span class=\"comment\">//flag为找到位置排列的标志，m保存正在搜索哪个位置  </span></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;  </div><div class=\"line\">        index[n]++;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (index[n] == index.length) <span class=\"comment\">//已无位置可用  </span></div><div class=\"line\">            index[n--] = <span class=\"number\">-1</span>; <span class=\"comment\">//重置当前位置，回退到上一个位置  </span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++)  </div><div class=\"line\">                <span class=\"keyword\">if</span> (index[i] == index[n]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </div><div class=\"line\">        &#125;)()) <span class=\"comment\">//该位置未被选择  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (m == n) <span class=\"comment\">//当前位置搜索完成  </span></div><div class=\"line\">                flag = <span class=\"literal\">true</span>;  </div><div class=\"line\">            <span class=\"keyword\">else</span> </div><div class=\"line\">                n++;  </div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (!flag &amp;&amp; n &gt;= <span class=\"number\">0</span>)  </div><div class=\"line\">    <span class=\"keyword\">return</span> flag;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);  </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; index.length; i++)  </div><div class=\"line\">        index[i] = <span class=\"number\">-1</span>;  </div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; index.length - <span class=\"number\">1</span>; i++)  </div><div class=\"line\">        seek(index, i);  </div><div class=\"line\">    <span class=\"keyword\">while</span> (seek(index, index.length - <span class=\"number\">1</span>)) &#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> temp = [];  </div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; index.length; i++)  </div><div class=\"line\">            temp.push(arr[index[i]]);  </div><div class=\"line\">        show(temp);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"string\">\"e1\"</span>, <span class=\"string\">\"e2\"</span>, <span class=\"string\">\"e3\"</span>, <span class=\"string\">\"e4\"</span>]);</div></pre></td></tr></table></figure>\n<h4 id=\"5-非递归求顺序\"><a href=\"#5-非递归求顺序\" class=\"headerlink\" title=\"(5).非递归求顺序\"></a>(5).非递归求顺序</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（非递归求顺序）算法  </span></div><div class=\"line\"><span class=\"comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span></div><div class=\"line\"><span class=\"comment\">2、按如下算法求全排列：  </span></div><div class=\"line\"><span class=\"comment\">设P是1～n(位置编号)的一个全排列：p = p1,p2...pn = p1,p2...pj-1,pj,pj+1...pk-1,pk,pk+1...pn  </span></div><div class=\"line\"><span class=\"comment\">(1)从排列的尾部开始，找出第一个比右边位置编号小的索引j（j从首部开始计算），即j = max&#123;i | pi &lt; pi+1&#125;  </span></div><div class=\"line\"><span class=\"comment\">(2)在pj的右边的位置编号中，找出所有比pj大的位置编号中最小的位置编号的索引k，即 k = max&#123;i | pi &gt; pj&#125;  </span></div><div class=\"line\"><span class=\"comment\">   pj右边的位置编号是从右至左递增的，因此k是所有大于pj的位置编号中索引最大的  </span></div><div class=\"line\"><span class=\"comment\">(3)交换pj与pk  </span></div><div class=\"line\"><span class=\"comment\">(4)再将pj+1...pk-1,pk,pk+1...pn翻转得到排列p' = p1,p2...pj-1,pj,pn...pk+1,pk,pk-1...pj+1  </span></div><div class=\"line\"><span class=\"comment\">(5)p'便是排列p的下一个排列  </span></div><div class=\"line\"><span class=\"comment\"></span></div><div class=\"line\"><span class=\"comment\">例如：  </span></div><div class=\"line\"><span class=\"comment\">24310是位置编号0～4的一个排列，求它下一个排列的步骤如下：  </span></div><div class=\"line\"><span class=\"comment\">(1)从右至左找出排列中第一个比右边数字小的数字2；  </span></div><div class=\"line\"><span class=\"comment\">(2)在该数字后的数字中找出比2大的数中最小的一个3；  </span></div><div class=\"line\"><span class=\"comment\">(3)将2与3交换得到34210；  </span></div><div class=\"line\"><span class=\"comment\">(4)将原来2（当前3）后面的所有数字翻转，即翻转4210，得30124；  </span></div><div class=\"line\"><span class=\"comment\">(5)求得24310的下一个排列为30124。  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"P&lt;sub&gt;\"</span> + ++count + <span class=\"string\">\"&lt;/sub&gt;: \"</span> + arr + <span class=\"string\">\"&lt;br /&gt;\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, i, j</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> t = arr[i];  </div><div class=\"line\">    arr[i] = arr[j];  </div><div class=\"line\">    arr[j] = t;  </div><div class=\"line\"></div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">index</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = index.length - <span class=\"number\">2</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; index[j] &gt; index[j + <span class=\"number\">1</span>]; j--)  </div><div class=\"line\">        ; <span class=\"comment\">//本循环从位置数组的末尾开始，找到第一个左边小于右边的位置，即j  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//已完成全部排列  </span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = index.length - <span class=\"number\">1</span>; index[k] &lt; index[j]; k--)  </div><div class=\"line\">        ; <span class=\"comment\">//本循环从位置数组的末尾开始，找到比j位置大的位置中最小的，即k  </span></div><div class=\"line\">    swap(index, j, k);  </div><div class=\"line\">    <span class=\"keyword\">for</span> (j = j + <span class=\"number\">1</span>, k = index.length - <span class=\"number\">1</span>; j &lt; k; j++, k--)  </div><div class=\"line\">        swap(index, j, k); <span class=\"comment\">//本循环翻转j+1到末尾的所有位置  </span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);  </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; index.length; i++)  </div><div class=\"line\">        index[i] = i;  </div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> temp = [];  </div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; index.length; i++)  </div><div class=\"line\">            temp.push(arr[index[i]]);  </div><div class=\"line\">        show(temp);  </div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (sort(index));  </div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"string\">\"e1\"</span>, <span class=\"string\">\"e2\"</span>, <span class=\"string\">\"e3\"</span>, <span class=\"string\">\"e4\"</span>]);</div></pre></td></tr></table></figure>\n<h4 id=\"6-非递归求模\"><a href=\"#6-非递归求模\" class=\"headerlink\" title=\"(6).非递归求模\"></a>(6).非递归求模</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（非递归求模）算法  </span></div><div class=\"line\"><span class=\"comment\">1、初始化存放全排列结果的数组result，与原数组的元素个数相等；  </span></div><div class=\"line\"><span class=\"comment\">2、计算n个元素全排列的总数，即n!；  </span></div><div class=\"line\"><span class=\"comment\">3、从&gt;=0的任意整数开始循环n!次，每次累加1，记为index；  </span></div><div class=\"line\"><span class=\"comment\">4、取第1个元素arr[0]，求1进制的表达最低位，即求index模1的值w，将第1个元素（arr[0]）插入result的w位置，并将index迭代为index\\1；  </span></div><div class=\"line\"><span class=\"comment\">5、取第2个元素arr[1]，求2进制的表达最低位，即求index模2的值w，将第2个元素（arr[1]）插入result的w位置，并将index迭代为index\\2；  </span></div><div class=\"line\"><span class=\"comment\">6、取第3个元素arr[2]，求3进制的表达最低位，即求index模3的值w，将第3个元素（arr[2]）插入result的w位置，并将index迭代为index\\3；  </span></div><div class=\"line\"><span class=\"comment\">7、……  </span></div><div class=\"line\"><span class=\"comment\">8、直到取最后一个元素arr[arr.length-1]，此时求得一个排列；  </span></div><div class=\"line\"><span class=\"comment\">9、当index循环完成，便求得所有排列。  </span></div><div class=\"line\"><span class=\"comment\"></span></div><div class=\"line\"><span class=\"comment\">例：  </span></div><div class=\"line\"><span class=\"comment\">求4个元素[\"a\", \"b\", \"c\", \"d\"]的全排列, 共循环4!=24次，可从任意&gt;=0的整数index开始循环，每次累加1，直到循环完index+23后结束；  </span></div><div class=\"line\"><span class=\"comment\">假设index=13（或13+24，13+2*24，13+3*24…），因为共4个元素，故迭代4次，则得到的这一个排列的过程为：  </span></div><div class=\"line\"><span class=\"comment\">第1次迭代，13/1，商=13，余数=0，故第1个元素插入第0个位置（即下标为0），得[\"a\"]；  </span></div><div class=\"line\"><span class=\"comment\">第2次迭代，13/2, 商=6，余数=1，故第2个元素插入第1个位置（即下标为1），得[\"a\", \"b\"]；  </span></div><div class=\"line\"><span class=\"comment\">第3次迭代，6/3, 商=2，余数=0，故第3个元素插入第0个位置（即下标为0），得[\"c\", \"a\", \"b\"]；  </span></div><div class=\"line\"><span class=\"comment\">第4次迭代，2/4，商=0，余数=2, 故第4个元素插入第2个位置（即下标为2），得[\"c\", \"a\", \"d\", \"b\"]；  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"P&lt;sub&gt;\"</span> + ++count + <span class=\"string\">\"&lt;/sub&gt;: \"</span> + arr + <span class=\"string\">\"&lt;br /&gt;\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);  </div><div class=\"line\">    <span class=\"keyword\">var</span> fac = <span class=\"number\">1</span>;  </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= arr.length; i++)  </div><div class=\"line\">        fac *= i;  </div><div class=\"line\">    <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; fac; index++) &#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> t = index;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= arr.length; i++) &#123;  </div><div class=\"line\">            <span class=\"keyword\">var</span> w = t % i;  </div><div class=\"line\">            <span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt; w; j--)  </div><div class=\"line\">                result[j] = result[j - <span class=\"number\">1</span>];  </div><div class=\"line\">            result[w] = arr[i - <span class=\"number\">1</span>];  </div><div class=\"line\">            t = <span class=\"built_in\">Math</span>.floor(t / i);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        show(result);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"string\">\"e1\"</span>, <span class=\"string\">\"e2\"</span>, <span class=\"string\">\"e3\"</span>, <span class=\"string\">\"e4\"</span>]);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-递归的定义\"><a href=\"#1-递归的定义\" class=\"headerlink\" title=\"1.递归的定义\"></a>1.递归的定义</h3><p>递归就是函数自己调用自己。<br>递归需要有出口return，不然会栈溢出。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tfun()</div><div class=\"line\">&#125;</div><div class=\"line\">fun()</div></pre></td></tr></table></figure></p>\n<p>可以实现类似阶乘的算法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// func(n-1) 因为传递的参数是 n-1,那么就是求 (n-1) 的阶乘</span></div><div class=\"line\">    <span class=\"keyword\">return</span> n * func(n<span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">func(<span class=\"number\">5</span>) <span class=\"comment\">//5*4*3*2*1</span></div></pre></td></tr></table></figure></p>\n<p>还有斐波拉契数列: 1， 1， 2， 3， 5， 8， 13， 21<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fib</span> (<span class=\"params\">n</span>)</span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">if</span>(n&lt;=<span class=\"number\">2</span>)&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"keyword\">return</span> fib(n<span class=\"number\">-1</span>) + fib(n<span class=\"number\">-2</span>);    </div><div class=\"line\">&#125;  </div><div class=\"line\">fib(<span class=\"number\">5</span>); <span class=\"comment\">// 2+3 = 5</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"2-数组的全排列\"><a href=\"#2-数组的全排列\" class=\"headerlink\" title=\"2.数组的全排列\"></a>2.<a href=\"http://www.jb51.net/article/39291.htm\" target=\"_blank\" rel=\"external\">数组的全排列</a></h3><p>A(3,3)=6<br>result: [1,2,3] —&gt;<br>[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]</p>\n<p>####(1)递归交换<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（递归交换）算法  </span></div><div class=\"line\"><span class=\"comment\">1、将第一个位置分别放置各个不同的元素；  </span></div><div class=\"line\"><span class=\"comment\">2、对剩余的位置进行全排列（递归）；  </span></div><div class=\"line\"><span class=\"comment\">3、递归出口为只对一个元素进行全排列。  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr,i,j</span>) </span>&#123;  <span class=\"comment\">//交换位置</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(i!=j) &#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> temp=arr[i];  </div><div class=\"line\">        arr[i]=arr[j];  </div><div class=\"line\">        arr[j]=temp;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> newArr = [];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">n</span>) </span>&#123; <span class=\"comment\">//为第n个位置选择元素  </span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=n;i&lt;arr.length;i++) &#123;  </div><div class=\"line\">            swap(arr,i,n);  </div><div class=\"line\">            <span class=\"keyword\">if</span>(n+<span class=\"number\">1</span>&lt;arr.length<span class=\"number\">-1</span>)&#123;</div><div class=\"line\">            \t<span class=\"comment\">//判断数组中剩余的待全排列的元素是否大于1个  </span></div><div class=\"line\">                fn(n+<span class=\"number\">1</span>); <span class=\"comment\">//从第n+1个下标进行全排列  </span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            \t<span class=\"built_in\">console</span>.log(newArr)</div><div class=\"line\">            \tnewArr.push(arr); <span class=\"comment\">//显示一组结果</span></div><div class=\"line\">            &#125;   </div><div class=\"line\">            swap(arr,i,n);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;)(<span class=\"number\">0</span>); </div><div class=\"line\">    </div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]);</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-递归链接\"><a href=\"#2-递归链接\" class=\"headerlink\" title=\"(2).递归链接\"></a>(2).递归链接</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（递归链接）算法  </span></div><div class=\"line\"><span class=\"comment\">1、设定源数组为输入数组，结果数组存放排列结果（初始化为空数组）；  </span></div><div class=\"line\"><span class=\"comment\">2、逐一将源数组的每个元素链接到结果数组中（生成新数组对象）；  </span></div><div class=\"line\"><span class=\"comment\">3、从原数组中删除被链接的元素（生成新数组对象）；  </span></div><div class=\"line\"><span class=\"comment\">4、将新的源数组和结果数组作为参数递归调用步骤2、3，直到源数组为空，则输出一个排列。  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123; </div><div class=\"line\">\t<span class=\"keyword\">let</span> newArr = [];</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">source, result</span>) </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (source.length == <span class=\"number\">0</span>)  </div><div class=\"line\">            newArr.push(result) <span class=\"comment\">//result;  </span></div><div class=\"line\">        <span class=\"keyword\">else</span> </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; source.length; i++)  </div><div class=\"line\">                fn(source.slice(<span class=\"number\">0</span>, i).concat(source.slice(i + <span class=\"number\">1</span>)), result.concat(source[i]));  </div><div class=\"line\">    &#125;)(arr, []);  </div><div class=\"line\">    <span class=\"keyword\">return</span> newArr</div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]);</div></pre></td></tr></table></figure>\n<h4 id=\"3-递归回溯\"><a href=\"#3-递归回溯\" class=\"headerlink\" title=\"(3).递归回溯\"></a>(3).递归回溯</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（递归回溯）算法  </span></div><div class=\"line\"><span class=\"comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span></div><div class=\"line\"><span class=\"comment\">2、建立递归函数，用来搜索第n个位置；  </span></div><div class=\"line\"><span class=\"comment\">3、第n个位置搜索方式与八皇后问题类似。  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"P&lt;sub&gt;\"</span> + ++count + <span class=\"string\">\"&lt;/sub&gt;: \"</span> + arr + <span class=\"string\">\"&lt;br /&gt;\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">seek</span>(<span class=\"params\">index, n</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt;= <span class=\"number\">0</span>) <span class=\"comment\">//判断是否已回溯到了第一个位置之前，即已经找到了所有位置排列  </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (index[n] &lt; index.length - <span class=\"number\">1</span>) &#123; <span class=\"comment\">//还有下一个位置可选  </span></div><div class=\"line\">            index[n]++; <span class=\"comment\">//选择下一个位置  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> ((<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//该匿名函数判断该位置是否已经被选择过  </span></div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++)  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (index[i] == index[n]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">//已选择  </span></div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//未选择  </span></div><div class=\"line\">            &#125;)())  </div><div class=\"line\">                <span class=\"keyword\">return</span> seek(index, n); <span class=\"comment\">//重新找位置  </span></div><div class=\"line\">            <span class=\"keyword\">else</span> </div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">//找到  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//当前无位置可选，进行递归回溯  </span></div><div class=\"line\">            index[n] = <span class=\"number\">-1</span>; <span class=\"comment\">//取消当前位置  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (seek(index, n - <span class=\"number\">1</span>)) <span class=\"comment\">//继续找上一个位置  </span></div><div class=\"line\">                <span class=\"keyword\">return</span> seek(index, n); <span class=\"comment\">//重新找当前位置  </span></div><div class=\"line\">            <span class=\"keyword\">else</span> </div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//已无位置可选  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);  </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; index.length; i++)  </div><div class=\"line\">        index[i] = <span class=\"number\">-1</span>; <span class=\"comment\">//初始化所有位置为-1，以便++后为0  </span></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; index.length - <span class=\"number\">1</span>; i++)  </div><div class=\"line\">        seek(index, i); <span class=\"comment\">//先搜索前n-1个位置  </span></div><div class=\"line\">    <span class=\"keyword\">while</span> (seek(index, index.length - <span class=\"number\">1</span>)) &#123; <span class=\"comment\">//不断搜索第n个位置，即找到所有位置排列  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> temp = [];  </div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; index.length; i++) <span class=\"comment\">//将位置之转换为元素  </span></div><div class=\"line\">            temp.push(arr[index[i]]);  </div><div class=\"line\">        show(temp);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"string\">\"e1\"</span>, <span class=\"string\">\"e2\"</span>, <span class=\"string\">\"e3\"</span>, <span class=\"string\">\"e4\"</span>]);</div></pre></td></tr></table></figure>\n<h4 id=\"4-非递归回溯\"><a href=\"#4-非递归回溯\" class=\"headerlink\" title=\"(4).非递归回溯\"></a>(4).非递归回溯</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（非递归回溯）算法  </span></div><div class=\"line\"><span class=\"comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span></div><div class=\"line\"><span class=\"comment\">2、第n个位置搜索方式与八皇后问题类似。  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"P&lt;sub&gt;\"</span> + ++count + <span class=\"string\">\"&lt;/sub&gt;: \"</span> + arr + <span class=\"string\">\"&lt;br /&gt;\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">seek</span>(<span class=\"params\">index, n</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>, m = n; <span class=\"comment\">//flag为找到位置排列的标志，m保存正在搜索哪个位置  </span></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;  </div><div class=\"line\">        index[n]++;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (index[n] == index.length) <span class=\"comment\">//已无位置可用  </span></div><div class=\"line\">            index[n--] = <span class=\"number\">-1</span>; <span class=\"comment\">//重置当前位置，回退到上一个位置  </span></div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++)  </div><div class=\"line\">                <span class=\"keyword\">if</span> (index[i] == index[n]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </div><div class=\"line\">        &#125;)()) <span class=\"comment\">//该位置未被选择  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (m == n) <span class=\"comment\">//当前位置搜索完成  </span></div><div class=\"line\">                flag = <span class=\"literal\">true</span>;  </div><div class=\"line\">            <span class=\"keyword\">else</span> </div><div class=\"line\">                n++;  </div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (!flag &amp;&amp; n &gt;= <span class=\"number\">0</span>)  </div><div class=\"line\">    <span class=\"keyword\">return</span> flag;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);  </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; index.length; i++)  </div><div class=\"line\">        index[i] = <span class=\"number\">-1</span>;  </div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; index.length - <span class=\"number\">1</span>; i++)  </div><div class=\"line\">        seek(index, i);  </div><div class=\"line\">    <span class=\"keyword\">while</span> (seek(index, index.length - <span class=\"number\">1</span>)) &#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> temp = [];  </div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; index.length; i++)  </div><div class=\"line\">            temp.push(arr[index[i]]);  </div><div class=\"line\">        show(temp);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"string\">\"e1\"</span>, <span class=\"string\">\"e2\"</span>, <span class=\"string\">\"e3\"</span>, <span class=\"string\">\"e4\"</span>]);</div></pre></td></tr></table></figure>\n<h4 id=\"5-非递归求顺序\"><a href=\"#5-非递归求顺序\" class=\"headerlink\" title=\"(5).非递归求顺序\"></a>(5).非递归求顺序</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（非递归求顺序）算法  </span></div><div class=\"line\"><span class=\"comment\">1、建立位置数组，即对位置进行排列，排列成功后转换为元素的排列；  </span></div><div class=\"line\"><span class=\"comment\">2、按如下算法求全排列：  </span></div><div class=\"line\"><span class=\"comment\">设P是1～n(位置编号)的一个全排列：p = p1,p2...pn = p1,p2...pj-1,pj,pj+1...pk-1,pk,pk+1...pn  </span></div><div class=\"line\"><span class=\"comment\">(1)从排列的尾部开始，找出第一个比右边位置编号小的索引j（j从首部开始计算），即j = max&#123;i | pi &lt; pi+1&#125;  </span></div><div class=\"line\"><span class=\"comment\">(2)在pj的右边的位置编号中，找出所有比pj大的位置编号中最小的位置编号的索引k，即 k = max&#123;i | pi &gt; pj&#125;  </span></div><div class=\"line\"><span class=\"comment\">   pj右边的位置编号是从右至左递增的，因此k是所有大于pj的位置编号中索引最大的  </span></div><div class=\"line\"><span class=\"comment\">(3)交换pj与pk  </span></div><div class=\"line\"><span class=\"comment\">(4)再将pj+1...pk-1,pk,pk+1...pn翻转得到排列p' = p1,p2...pj-1,pj,pn...pk+1,pk,pk-1...pj+1  </span></div><div class=\"line\"><span class=\"comment\">(5)p'便是排列p的下一个排列  </span></div><div class=\"line\"><span class=\"comment\"></span></div><div class=\"line\"><span class=\"comment\">例如：  </span></div><div class=\"line\"><span class=\"comment\">24310是位置编号0～4的一个排列，求它下一个排列的步骤如下：  </span></div><div class=\"line\"><span class=\"comment\">(1)从右至左找出排列中第一个比右边数字小的数字2；  </span></div><div class=\"line\"><span class=\"comment\">(2)在该数字后的数字中找出比2大的数中最小的一个3；  </span></div><div class=\"line\"><span class=\"comment\">(3)将2与3交换得到34210；  </span></div><div class=\"line\"><span class=\"comment\">(4)将原来2（当前3）后面的所有数字翻转，即翻转4210，得30124；  </span></div><div class=\"line\"><span class=\"comment\">(5)求得24310的下一个排列为30124。  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"P&lt;sub&gt;\"</span> + ++count + <span class=\"string\">\"&lt;/sub&gt;: \"</span> + arr + <span class=\"string\">\"&lt;br /&gt;\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, i, j</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> t = arr[i];  </div><div class=\"line\">    arr[i] = arr[j];  </div><div class=\"line\">    arr[j] = t;  </div><div class=\"line\"></div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">index</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = index.length - <span class=\"number\">2</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; index[j] &gt; index[j + <span class=\"number\">1</span>]; j--)  </div><div class=\"line\">        ; <span class=\"comment\">//本循环从位置数组的末尾开始，找到第一个左边小于右边的位置，即j  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">//已完成全部排列  </span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = index.length - <span class=\"number\">1</span>; index[k] &lt; index[j]; k--)  </div><div class=\"line\">        ; <span class=\"comment\">//本循环从位置数组的末尾开始，找到比j位置大的位置中最小的，即k  </span></div><div class=\"line\">    swap(index, j, k);  </div><div class=\"line\">    <span class=\"keyword\">for</span> (j = j + <span class=\"number\">1</span>, k = index.length - <span class=\"number\">1</span>; j &lt; k; j++, k--)  </div><div class=\"line\">        swap(index, j, k); <span class=\"comment\">//本循环翻转j+1到末尾的所有位置  </span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> index = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);  </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; index.length; i++)  </div><div class=\"line\">        index[i] = i;  </div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> temp = [];  </div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; index.length; i++)  </div><div class=\"line\">            temp.push(arr[index[i]]);  </div><div class=\"line\">        show(temp);  </div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (sort(index));  </div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"string\">\"e1\"</span>, <span class=\"string\">\"e2\"</span>, <span class=\"string\">\"e3\"</span>, <span class=\"string\">\"e4\"</span>]);</div></pre></td></tr></table></figure>\n<h4 id=\"6-非递归求模\"><a href=\"#6-非递归求模\" class=\"headerlink\" title=\"(6).非递归求模\"></a>(6).非递归求模</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*  </span></div><div class=\"line\"><span class=\"comment\">全排列（非递归求模）算法  </span></div><div class=\"line\"><span class=\"comment\">1、初始化存放全排列结果的数组result，与原数组的元素个数相等；  </span></div><div class=\"line\"><span class=\"comment\">2、计算n个元素全排列的总数，即n!；  </span></div><div class=\"line\"><span class=\"comment\">3、从&gt;=0的任意整数开始循环n!次，每次累加1，记为index；  </span></div><div class=\"line\"><span class=\"comment\">4、取第1个元素arr[0]，求1进制的表达最低位，即求index模1的值w，将第1个元素（arr[0]）插入result的w位置，并将index迭代为index\\1；  </span></div><div class=\"line\"><span class=\"comment\">5、取第2个元素arr[1]，求2进制的表达最低位，即求index模2的值w，将第2个元素（arr[1]）插入result的w位置，并将index迭代为index\\2；  </span></div><div class=\"line\"><span class=\"comment\">6、取第3个元素arr[2]，求3进制的表达最低位，即求index模3的值w，将第3个元素（arr[2]）插入result的w位置，并将index迭代为index\\3；  </span></div><div class=\"line\"><span class=\"comment\">7、……  </span></div><div class=\"line\"><span class=\"comment\">8、直到取最后一个元素arr[arr.length-1]，此时求得一个排列；  </span></div><div class=\"line\"><span class=\"comment\">9、当index循环完成，便求得所有排列。  </span></div><div class=\"line\"><span class=\"comment\"></span></div><div class=\"line\"><span class=\"comment\">例：  </span></div><div class=\"line\"><span class=\"comment\">求4个元素[\"a\", \"b\", \"c\", \"d\"]的全排列, 共循环4!=24次，可从任意&gt;=0的整数index开始循环，每次累加1，直到循环完index+23后结束；  </span></div><div class=\"line\"><span class=\"comment\">假设index=13（或13+24，13+2*24，13+3*24…），因为共4个元素，故迭代4次，则得到的这一个排列的过程为：  </span></div><div class=\"line\"><span class=\"comment\">第1次迭代，13/1，商=13，余数=0，故第1个元素插入第0个位置（即下标为0），得[\"a\"]；  </span></div><div class=\"line\"><span class=\"comment\">第2次迭代，13/2, 商=6，余数=1，故第2个元素插入第1个位置（即下标为1），得[\"a\", \"b\"]；  </span></div><div class=\"line\"><span class=\"comment\">第3次迭代，6/3, 商=2，余数=0，故第3个元素插入第0个位置（即下标为0），得[\"c\", \"a\", \"b\"]；  </span></div><div class=\"line\"><span class=\"comment\">第4次迭代，2/4，商=0，余数=2, 故第4个元素插入第2个位置（即下标为2），得[\"c\", \"a\", \"d\", \"b\"]；  </span></div><div class=\"line\"><span class=\"comment\">*/</span> </div><div class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">\"P&lt;sub&gt;\"</span> + ++count + <span class=\"string\">\"&lt;/sub&gt;: \"</span> + arr + <span class=\"string\">\"&lt;br /&gt;\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">perm</span>(<span class=\"params\">arr</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(arr.length);  </div><div class=\"line\">    <span class=\"keyword\">var</span> fac = <span class=\"number\">1</span>;  </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= arr.length; i++)  </div><div class=\"line\">        fac *= i;  </div><div class=\"line\">    <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; fac; index++) &#123;  </div><div class=\"line\">        <span class=\"keyword\">var</span> t = index;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= arr.length; i++) &#123;  </div><div class=\"line\">            <span class=\"keyword\">var</span> w = t % i;  </div><div class=\"line\">            <span class=\"keyword\">for</span> (j = i - <span class=\"number\">1</span>; j &gt; w; j--)  </div><div class=\"line\">                result[j] = result[j - <span class=\"number\">1</span>];  </div><div class=\"line\">            result[w] = arr[i - <span class=\"number\">1</span>];  </div><div class=\"line\">            t = <span class=\"built_in\">Math</span>.floor(t / i);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        show(result);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">perm([<span class=\"string\">\"e1\"</span>, <span class=\"string\">\"e2\"</span>, <span class=\"string\">\"e3\"</span>, <span class=\"string\">\"e4\"</span>]);</div></pre></td></tr></table></figure>"},{"title":"js星级评分的实现","date":"2017-07-26T02:17:05.000Z","_content":"\n### 1.第一种写法\n```html\n<style>\n    body, ul , li {margin: 0;padding: 0}\n    li{list-style: none;}\n    .rating {width: 200px;height: 34px;margin: 100px auto;}\n    .rating-item{\n        float: left;\n        width: 34px;\n        height: 34px;\n        background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) no-repeat;\n        cursor: pointer;\n    }\n</style>\n<!--index.html-->\n<ul class=\"rating\" id=\"rating\">\n    <li class=\"rating-item\" title=\"很不好\"></li>\n    <li class=\"rating-item\" title=\"不好\"></li>\n    <li class=\"rating-item\" title=\"一般\"></li>\n    <li class=\"rating-item\" title=\"好\"></li>\n    <li class=\"rating-item\" title=\"很好\"></li>\n</ul>\n```\n\n```javascript\n//index.js\nvar num=2,\n    $rating = $('#rating'),\n    $item = $rating.find('.rating-item');\n\n//点亮\nvar lightOn=function(num){\n   $item.each(function(index){\n      if(index<num){\n         $(this).css('background-position','0 -40px');\n      }else{\n         $(this).css('background-position','0 0');\n      }\n   });\n}\n\n//初始化\nlightOn(num);\n\n//事件绑定\n$item.on('mouseover',function(){\n   lightOn($(this).index()+1)\n}).on('click',function(){\n    num = $(this).index()+1\n});\n$rating.on('mouseout',function(){\n    lightOn(num);\n})\n\n```\n（1）改进代码：\n* 1.闭包防止全局变量污染\n* 2.事件委托防止多次绑定事件\n* 3.代码复用\n```javascript\n//index.js\n//闭包\nvar rating = (function(){\n    //点亮，这个函数是通用的\n    var lightOn=function($item,num){\n       $item.each(function(index){\n          if(index<num){\n             $(this).css('background-position','0 -40px');\n          }else{\n             $(this).css('background-position','0 0');\n          }\n       });\n    }\n    //代码复用\n    var init = function(el,num){\n        var $rating = $(el),\n            $item = $rating.find('.rating-item');\n\n        //初始化\n        lightOn($item,num);\n\n        //事件委托，将子元素事件委托给父元素\n        $rating.on('mouseover','.rating-item',function(){\n           lightOn($item,$(this).index()+1) \n        }).on('click','.rating-item',function(){\n            num = $(this).index()+1\n        }).on('mouseout',function(){\n            lightOn($item,num);\n        })\n    }\n    \n    //jQuery插件\n    $.fn.extend({\n        rating: function(num){\n            return this.each(function(){\n                init(this,num);    \n            })\n        }\n    });\n\n    return {\n        init: init\n    }\n\n    \n})()\n\nrating.init('#rating',2);\n//raring.init('#rating2',3);//第二个评分\n$('#rating2').rating(4);//jquery插件调用\n\n```\n（2）设计模式\n封装一个函数是复用代码，使用一个设计模式是复用他人的经验\n* <1>创建型模式，就是对创建对象进行封装。如单例，抽象工厂，建造者，工厂，原型。\n* <2>结构型模式，主要解决类之间的耦合关系。如适配器，桥接，装饰，组合，外观，享元，代理。\n* <3>行为型模式，是对象之间的常用交流模式。如模板方法，命令，迭代器，观察者，中介者，备忘录，解释器，状态，策略，责任链，访问者。\n\n（3）模板方法模式\n需求：点亮半颗星星\n再次扩展\n```javascript\nvar rating = (function(){\n  //点亮整颗\n  var LightEntire = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n  };\n  LightEntire.prototype.init = function(){\n    this.lightOn(this.opts.num);\n    if(!this.opts.readOnly){\n        this.bindEvent();\n    }\n  };\n  LightEntire.prototype.lightOn = function(num){\n    num = parseInt(num);\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n  };\n  LightEntire.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n    self.$el.on('mouseover','.rating-item',function(){\n        var num = $(this).index()+self.add;\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index()+self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n         self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n        self.lightOn(self.opts.num);\n    })\n  }\n\n  //点亮半颗\n  var LightHalf = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n    this.add = 1;\n  };\n  LightHalf.prototype.init = function(){\n    this.lightOn(this.opts.num);\n    if(!this.opts.readOnly){\n        this.bindEvent();\n    }\n  };\n  LightHalf.prototype.lightOn = function(num){\n    var count = parseInt(num),\n        isHalf = count!==num;\n\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n\n    if(isHalf){\n            this.$item.eq(count).css('background-position','0 -80px')\n    }\n  };\n  LightHalf.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n\n    self.$el.on('mousemove','.rating-item',function(e){\n        var $this = $(this),\n            num = 0;\n\n        if(e.pageX-$this.offset().left < $this.width()/2){//半颗\n            self.add = 0.5;\n        }else{//整颗\n            self.add = 1;\n        }\n        num = $this.index() + self.add;\n\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index() + self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n       self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n        self.lightOn(self.opts.num);\n    })\n  }\n\n  //默认参数\n  var defaults = {\n    mode: 'LightEntire',//半颗 LightHalf\n    num: 0,\n    readOnly: false,\n    select: function(){},\n    chosen: function(){}\n  };\n  //做个映射\n  var mode = {\n    'LightEntire' : LightEntire,\n    'LightHalf' : LightHalf\n  }\n\n  //初始化\n  var init = function(el,options){\n    options = $.extend({},defaults,options);\n    if(!mode[options.mode]){//容错\n        options.mode = 'LightEntire';\n    }\n    //new LightEntire(el,options).init();\n    //new LightHalf(el,options).init();\n    new mode[options.mode](el,options).init();\n  };\n\n  return {\n    init: init\n  }\n})();\n\nrating.init('#rating',{\n    mode: 'LightHalf',\n  num : 2.5,\n  // select : function(num, total) {\n  //    console.log(this)\n  //    console.log(num + '/' + total)\n  //  }\n})\n$('#rating').on('select',function(e,num,total){\n    console.log(num + '/' +total)\n}).on('chosen',function(e,num,total){\n    console.log(num + '/' +total)\n})\n```\n抽象出父类,实现继承\n完善初始化,增加选完后解绑事件\n完善jQuery插件\n```javascript\nvar rating = (function(){\n    //原型链继承 不需要构造函数里的东西，如果构造函数里东西多，会影响性能\n    //LightEntire.prototype = new Light();\n    //继承 改造\n    var extend = function(subClass,superClass){\n        var F = function(){};//构造函数是空的\n        F.prototype = superClass.prototype;\n        subClass.prototype = new F();\n        subClass.prototype.construtor = subClass;\n    }\n\n\n  //点亮 父类\n  var Light = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n    this.add = 1;\n    this.selectEvent = 'mouseover';\n  };\n  Light.prototype.init = function(){\n        this.lightOn(this.opts.num);\n        if(!this.opts.readOnly){\n            this.bindEvent();\n        }\n  };\n  Light.prototype.lightOn = function(num){\n    num = parseInt(num);\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n  };\n  Light.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n    //事件处理\n    self.$el.on(this.selectEvent,'.rating-item',function(e){\n        var $this = $(this),\n            num = 0;\n\n        //不同的方法需要子类里重写\n        self.select(e,$this);\n\n        num = $(this).index()+self.add;\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index()+self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n       self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n       self.lightOn(self.opts.num);\n    })\n  };\n  Light.prototype.select = function(){\n    throw new Error('子类必须重写此方法');\n  };\n  Light.prototype.unbindEvent = function(){\n    this.$el.off();\n  }\n\n  //点亮整颗\n  var LightEntire = function(el,options){\n    Light.call(this,el,options)\n    this.selectEvent = 'mouseover';\n  };\n  extend(LightEntire,Light);//继承原型里的方法\n  LightEntire.prototype.lightOn = function(num){\n    Light.prototype.lightOn.call(this,num)\n  };\n  LightEntire.prototype.select = function(){\n    self.add = 1\n  }\n\n\n  //点亮半颗\n  var LightHalf = function(el,options){\n    Light.call(this,el,options);\n    this.selectEvent = 'mousemove';\n  };\n  extend(LightHalf,Light);//继承原型里的方法\n  LightHalf.prototype.lightOn = function(num){\n    var count = parseInt(num),\n        isHalf = count!==num;\n\n    Light.prototype.lightOn.call(this,count)\n\n    if(isHalf){\n       this.$item.eq(count).css('background-position','0 -80px')\n    }\n  };\n  LightHalf.prototype.select = function(e,$this){\n    if(e.pageX-$this.offset().left < $this.width()/2){//半颗\n        this.add = 0.5;\n    }else{//整颗\n        this.add = 1;\n    }\n  };\n\n\n  //默认参数\n  var defaults = {\n    mode: 'LightEntire',//半颗 LightHalf\n    num: 0,\n    readOnly: false,\n    select: function(){},\n    chosen: function(){}\n  };\n  //做个映射\n  var mode = {\n    'LightEntire' : LightEntire,\n    'LightHalf' : LightHalf\n  }\n\n  //初始化\n  var init = function(el,option){\n    var $el = $(el),\n        rating = $el.data('rating'),\n        options = $.extend({},defaults,typeof option === 'object' && option);\n    if(!mode[options.mode]){//容错\n        options.mode = 'LightEntire';\n    }\n    //new LightEntire(el,options).init();\n    //new LightHalf(el,options).init();\n    //防止重复调用时重复实例化（单例模式）\n    if(!rating){\n        $el.data('rating',(rating = new mode[options.mode](el,options)));\n        rating.init();\n    }\n    //如option是字符串，执行以字符串相应的方法\n    if(typeof option === 'string') rating[option]()\n    \n  };\n\n    //jQuery插件\n    $.fn.extend({\n        rating: function(option){\n            return this.each(function(){\n                init(this,option);\n            })\n        }\n    });\n    \n\n  return {\n    init: init\n  }\n})();\n\nrating.init('#rating',{\n  mode: 'LightHalf',\n  num : 2.5,\n  // select : function(num, total) {\n  //    console.log(this)\n  //    console.log(num + '/' + total)\n  //  }\n  chosen: function(){\n    rating.init('#rating','unbindEvent')\n  }\n})\n\n$('#rating').on('select',function(e,num,total){\n    console.log(num + '/' +total)\n}).on('chosen',function(e,num,total){\n    console.log(num + '/' +total)\n})\n\n$('#rating2').rating({\n  mode: 'LightEntire',\n  num : 4,\n})\n\n$('#rating2').on('chosen',function(){\n  $(this).rating('unbindEvent')\n})\n```\n[最终源码](https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star1.html)\n\n### 2.第二种写法\n通过控制宽度来点亮星星，相比第一种扩展了星星个数可控\nstyle:\n```css\nbody,ul,li{\n    padding: 0;\n    margin: 0;\n}\nli{\n    list-style: none;\n}\n.rating{\n    position: relative;\n    width: 165px;\n    height: 33px;\n    background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x;\n    margin: 100px auto;\n}\n.rating-display{\n    width: 0;\n    height: 33px;\n    background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x 0 -40px;\n}\n.rating-mask{\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n}\n.rating-item{\n    float: left;\n    width: 33px;\n    height: 33px;\n    cursor: pointer;\n}\n```\nhtml动态生成\n```html\n<div id=\"rating\" class=\"rating\">\n    <!-- <div class=\"rating-display\"></div>\n    <ul class=\"rating-mask\">\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n    </ul> -->\n</div>\n```\njavascript\n```javascript\nvar rating = (function(){\n    //评分\n    var Rating = function(el,options){\n        this.$el = $(el);\n        this.opts = $.extend({},Rating.DEFAULTS, options);\n\n        //半颗星星需求\n        this.opts.total *= 2;\n        this.opts.num *= 2;\n\n        this.itemWidth = 33/2;//星星默认宽度\n        this.displayWidth = this.opts.num*this.itemWidth;//展示层默认宽度\n    };\n    Rating.DEFAULTS = {\n        total : 5,\n        num : 2,\n        readOnly : false,\n        select : function(){},\n        chosen : function(){} \n    };\n    Rating.prototype.init = function(){\n        this.buildHTML();\n        this.setCSS();\n        //if(!this.opts.readOnly){\n            this.bindEvent();\n        //}\n    };\n    Rating.prototype.buildHTML = function(){//创建html\n        var html = '';\n        html += '<div class=\"rating-display\"></div><ul class=\"rating-mask\">';\n        for(var i = 0;i<this.opts.total;i++){\n            html += '<li class=\"rating-item\"></li>'\n        }\n        html +='</ul>';\n\n        this.$el.html(html);\n    };\n    Rating.prototype.setCSS = function(){//设置CSS\n        this.$el.width(this.opts.total*this.itemWidth);\n        this.$display = this.$el.find('.rating-display');\n        this.$display.width(this.displayWidth);\n        this.$el.find('.rating-item').width(this.itemWidth);\n    };\n    Rating.prototype.bindEvent = function(){//绑定事件\n        var self = this;\n        self.$el.on('mouseover','.rating-item',function(){\n            var count = $(this).index() + 1;\n\n            self.$display.width(count*self.itemWidth);\n\n            (typeof self.opts.select === 'function') && self.opts.select.call(this,count,self.opts.total);\n            self.$el.trigger('select',[count,self.opts.total]);\n        }).on('click','.rating-item',function(){\n            var count = $(this).index() + 1;\n\n            self.displayWidth = count*self.itemWidth;\n            (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this,count,self.opts.total);\n            self.$el.trigger('chosen',[count,self.opts.total]);\n        }).on('mouseout',function(){\n            self.$display.width(self.displayWidth);\n        });\n    };\n    Rating.prototype.unbindEvent = function(){//解绑事件\n        this.$el.off();\n    };\n\n    var init = function(el,option){\n        var $el = $(el),\n            rating = $el.data('rating');\n\n        if(!rating){\n            $el.data('rating',\n                (rating = new Rating(el,typeof option === 'object' &&option))\n            );\n            rating.init();\n        }\n        \n        if(typeof option === 'string')rating[option]();\n    };\n\n    //jQuery插件\n    $.fn.extend({\n        rating: function(option){\n            return this.each(function(){\n                init(this,option)\n            })\n        }\n    });\n        \n\n    return {\n        init: init\n    }\n})()\n\n$('#rating').rating({\n    total: 7,\n    num: 4,\n    chosen: function(count,total){\n        rating.init('#rating','unbindEvent')\n    }\n})\n\n// rating.init('#rating',{\n//  total : 6,\n//  num: 3,\n//  // select: function(count,total){\n//  //  console.log(this);\n//  //  console.log(count + '/' + total);\n//  // }\n//  chosen: function(count,total){\n//      rating.init('#rating','unbindEvent')\n//  }\n// });\n```\n策略模式重构代码\n策略模式：定义一系列算法，一个个封装起来，并且可以相互替换\n只需评分前增加策略类\n```javascript\n    //策略\n    var strategies = {\n        entire: function(){\n            return 1;\n        },\n        half: function(){\n            return 2;\n        },\n        quarter: function(){\n            return 4;\n        }\n    }\n\n    //评分\n    var Rating = function(el,options){\n        this.$el = $(el);\n        this.opts = $.extend({},Rating.DEFAULTS, options);\n        \n        if(!strategies[this.opts.mode]){//容错判断\n            this.opts.mode = 'entire';\n        }\n        this.ratio = strategies[this.opts.mode]();\n        this.opts.total *= this.ratio;\n        this.opts.num *= this.ratio;\n\n        this.itemWidth = 33/this.ratio;//星星默认宽度\n        this.displayWidth = this.opts.num*this.itemWidth;//展示层默认宽度\n    };\n    Rating.DEFAULTS = {\n        mode: 'entire',\n        total : 5,\n        num : 2,\n        readOnly : false,\n        select : function(){},\n        chosen : function(){} \n    };\n\n```\n[源码](https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star2.html)","source":"_posts/js-star.md","raw":"---\ntitle: js星级评分的实现\ndate: 2017-07-26 10:17:05\ntags: javascript\n---\n\n### 1.第一种写法\n```html\n<style>\n    body, ul , li {margin: 0;padding: 0}\n    li{list-style: none;}\n    .rating {width: 200px;height: 34px;margin: 100px auto;}\n    .rating-item{\n        float: left;\n        width: 34px;\n        height: 34px;\n        background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) no-repeat;\n        cursor: pointer;\n    }\n</style>\n<!--index.html-->\n<ul class=\"rating\" id=\"rating\">\n    <li class=\"rating-item\" title=\"很不好\"></li>\n    <li class=\"rating-item\" title=\"不好\"></li>\n    <li class=\"rating-item\" title=\"一般\"></li>\n    <li class=\"rating-item\" title=\"好\"></li>\n    <li class=\"rating-item\" title=\"很好\"></li>\n</ul>\n```\n\n```javascript\n//index.js\nvar num=2,\n    $rating = $('#rating'),\n    $item = $rating.find('.rating-item');\n\n//点亮\nvar lightOn=function(num){\n   $item.each(function(index){\n      if(index<num){\n         $(this).css('background-position','0 -40px');\n      }else{\n         $(this).css('background-position','0 0');\n      }\n   });\n}\n\n//初始化\nlightOn(num);\n\n//事件绑定\n$item.on('mouseover',function(){\n   lightOn($(this).index()+1)\n}).on('click',function(){\n    num = $(this).index()+1\n});\n$rating.on('mouseout',function(){\n    lightOn(num);\n})\n\n```\n（1）改进代码：\n* 1.闭包防止全局变量污染\n* 2.事件委托防止多次绑定事件\n* 3.代码复用\n```javascript\n//index.js\n//闭包\nvar rating = (function(){\n    //点亮，这个函数是通用的\n    var lightOn=function($item,num){\n       $item.each(function(index){\n          if(index<num){\n             $(this).css('background-position','0 -40px');\n          }else{\n             $(this).css('background-position','0 0');\n          }\n       });\n    }\n    //代码复用\n    var init = function(el,num){\n        var $rating = $(el),\n            $item = $rating.find('.rating-item');\n\n        //初始化\n        lightOn($item,num);\n\n        //事件委托，将子元素事件委托给父元素\n        $rating.on('mouseover','.rating-item',function(){\n           lightOn($item,$(this).index()+1) \n        }).on('click','.rating-item',function(){\n            num = $(this).index()+1\n        }).on('mouseout',function(){\n            lightOn($item,num);\n        })\n    }\n    \n    //jQuery插件\n    $.fn.extend({\n        rating: function(num){\n            return this.each(function(){\n                init(this,num);    \n            })\n        }\n    });\n\n    return {\n        init: init\n    }\n\n    \n})()\n\nrating.init('#rating',2);\n//raring.init('#rating2',3);//第二个评分\n$('#rating2').rating(4);//jquery插件调用\n\n```\n（2）设计模式\n封装一个函数是复用代码，使用一个设计模式是复用他人的经验\n* <1>创建型模式，就是对创建对象进行封装。如单例，抽象工厂，建造者，工厂，原型。\n* <2>结构型模式，主要解决类之间的耦合关系。如适配器，桥接，装饰，组合，外观，享元，代理。\n* <3>行为型模式，是对象之间的常用交流模式。如模板方法，命令，迭代器，观察者，中介者，备忘录，解释器，状态，策略，责任链，访问者。\n\n（3）模板方法模式\n需求：点亮半颗星星\n再次扩展\n```javascript\nvar rating = (function(){\n  //点亮整颗\n  var LightEntire = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n  };\n  LightEntire.prototype.init = function(){\n    this.lightOn(this.opts.num);\n    if(!this.opts.readOnly){\n        this.bindEvent();\n    }\n  };\n  LightEntire.prototype.lightOn = function(num){\n    num = parseInt(num);\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n  };\n  LightEntire.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n    self.$el.on('mouseover','.rating-item',function(){\n        var num = $(this).index()+self.add;\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index()+self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n         self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n        self.lightOn(self.opts.num);\n    })\n  }\n\n  //点亮半颗\n  var LightHalf = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n    this.add = 1;\n  };\n  LightHalf.prototype.init = function(){\n    this.lightOn(this.opts.num);\n    if(!this.opts.readOnly){\n        this.bindEvent();\n    }\n  };\n  LightHalf.prototype.lightOn = function(num){\n    var count = parseInt(num),\n        isHalf = count!==num;\n\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n\n    if(isHalf){\n            this.$item.eq(count).css('background-position','0 -80px')\n    }\n  };\n  LightHalf.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n\n    self.$el.on('mousemove','.rating-item',function(e){\n        var $this = $(this),\n            num = 0;\n\n        if(e.pageX-$this.offset().left < $this.width()/2){//半颗\n            self.add = 0.5;\n        }else{//整颗\n            self.add = 1;\n        }\n        num = $this.index() + self.add;\n\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index() + self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n       self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n        self.lightOn(self.opts.num);\n    })\n  }\n\n  //默认参数\n  var defaults = {\n    mode: 'LightEntire',//半颗 LightHalf\n    num: 0,\n    readOnly: false,\n    select: function(){},\n    chosen: function(){}\n  };\n  //做个映射\n  var mode = {\n    'LightEntire' : LightEntire,\n    'LightHalf' : LightHalf\n  }\n\n  //初始化\n  var init = function(el,options){\n    options = $.extend({},defaults,options);\n    if(!mode[options.mode]){//容错\n        options.mode = 'LightEntire';\n    }\n    //new LightEntire(el,options).init();\n    //new LightHalf(el,options).init();\n    new mode[options.mode](el,options).init();\n  };\n\n  return {\n    init: init\n  }\n})();\n\nrating.init('#rating',{\n    mode: 'LightHalf',\n  num : 2.5,\n  // select : function(num, total) {\n  //    console.log(this)\n  //    console.log(num + '/' + total)\n  //  }\n})\n$('#rating').on('select',function(e,num,total){\n    console.log(num + '/' +total)\n}).on('chosen',function(e,num,total){\n    console.log(num + '/' +total)\n})\n```\n抽象出父类,实现继承\n完善初始化,增加选完后解绑事件\n完善jQuery插件\n```javascript\nvar rating = (function(){\n    //原型链继承 不需要构造函数里的东西，如果构造函数里东西多，会影响性能\n    //LightEntire.prototype = new Light();\n    //继承 改造\n    var extend = function(subClass,superClass){\n        var F = function(){};//构造函数是空的\n        F.prototype = superClass.prototype;\n        subClass.prototype = new F();\n        subClass.prototype.construtor = subClass;\n    }\n\n\n  //点亮 父类\n  var Light = function(el,options){\n    this.$el = $(el);\n    this.$item = this.$el.find('.rating-item');\n    this.opts = options;\n    this.add = 1;\n    this.selectEvent = 'mouseover';\n  };\n  Light.prototype.init = function(){\n        this.lightOn(this.opts.num);\n        if(!this.opts.readOnly){\n            this.bindEvent();\n        }\n  };\n  Light.prototype.lightOn = function(num){\n    num = parseInt(num);\n    this.$item.each(function(index){\n        if(index<num){\n           $(this).css('background-position','0 -40px');\n        }else{\n           $(this).css('background-position','0 0');\n        }\n     });\n  };\n  Light.prototype.bindEvent = function(){\n    var self = this,\n        itemLength = self.$item.length;\n    //事件处理\n    self.$el.on(this.selectEvent,'.rating-item',function(e){\n        var $this = $(this),\n            num = 0;\n\n        //不同的方法需要子类里重写\n        self.select(e,$this);\n\n        num = $(this).index()+self.add;\n        self.lightOn(num);\n\n        //短路符，先判断传入的是否函数。call改变this指向\n        (typeof self.opts.select === 'function') && self.opts.select.call(this ,num, itemLength)\n        //触发select事件\n        self.$el.trigger('select',[num,itemLength])\n    }).on('click','.rating-item',function(){\n       self.opts.num = $(this).index()+self.add;\n\n       (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this ,self.opts.num, itemLength)\n    \n       self.$el.trigger('chosen',[self.opts.num,itemLength])\n    }).on('mouseout',function(){\n       self.lightOn(self.opts.num);\n    })\n  };\n  Light.prototype.select = function(){\n    throw new Error('子类必须重写此方法');\n  };\n  Light.prototype.unbindEvent = function(){\n    this.$el.off();\n  }\n\n  //点亮整颗\n  var LightEntire = function(el,options){\n    Light.call(this,el,options)\n    this.selectEvent = 'mouseover';\n  };\n  extend(LightEntire,Light);//继承原型里的方法\n  LightEntire.prototype.lightOn = function(num){\n    Light.prototype.lightOn.call(this,num)\n  };\n  LightEntire.prototype.select = function(){\n    self.add = 1\n  }\n\n\n  //点亮半颗\n  var LightHalf = function(el,options){\n    Light.call(this,el,options);\n    this.selectEvent = 'mousemove';\n  };\n  extend(LightHalf,Light);//继承原型里的方法\n  LightHalf.prototype.lightOn = function(num){\n    var count = parseInt(num),\n        isHalf = count!==num;\n\n    Light.prototype.lightOn.call(this,count)\n\n    if(isHalf){\n       this.$item.eq(count).css('background-position','0 -80px')\n    }\n  };\n  LightHalf.prototype.select = function(e,$this){\n    if(e.pageX-$this.offset().left < $this.width()/2){//半颗\n        this.add = 0.5;\n    }else{//整颗\n        this.add = 1;\n    }\n  };\n\n\n  //默认参数\n  var defaults = {\n    mode: 'LightEntire',//半颗 LightHalf\n    num: 0,\n    readOnly: false,\n    select: function(){},\n    chosen: function(){}\n  };\n  //做个映射\n  var mode = {\n    'LightEntire' : LightEntire,\n    'LightHalf' : LightHalf\n  }\n\n  //初始化\n  var init = function(el,option){\n    var $el = $(el),\n        rating = $el.data('rating'),\n        options = $.extend({},defaults,typeof option === 'object' && option);\n    if(!mode[options.mode]){//容错\n        options.mode = 'LightEntire';\n    }\n    //new LightEntire(el,options).init();\n    //new LightHalf(el,options).init();\n    //防止重复调用时重复实例化（单例模式）\n    if(!rating){\n        $el.data('rating',(rating = new mode[options.mode](el,options)));\n        rating.init();\n    }\n    //如option是字符串，执行以字符串相应的方法\n    if(typeof option === 'string') rating[option]()\n    \n  };\n\n    //jQuery插件\n    $.fn.extend({\n        rating: function(option){\n            return this.each(function(){\n                init(this,option);\n            })\n        }\n    });\n    \n\n  return {\n    init: init\n  }\n})();\n\nrating.init('#rating',{\n  mode: 'LightHalf',\n  num : 2.5,\n  // select : function(num, total) {\n  //    console.log(this)\n  //    console.log(num + '/' + total)\n  //  }\n  chosen: function(){\n    rating.init('#rating','unbindEvent')\n  }\n})\n\n$('#rating').on('select',function(e,num,total){\n    console.log(num + '/' +total)\n}).on('chosen',function(e,num,total){\n    console.log(num + '/' +total)\n})\n\n$('#rating2').rating({\n  mode: 'LightEntire',\n  num : 4,\n})\n\n$('#rating2').on('chosen',function(){\n  $(this).rating('unbindEvent')\n})\n```\n[最终源码](https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star1.html)\n\n### 2.第二种写法\n通过控制宽度来点亮星星，相比第一种扩展了星星个数可控\nstyle:\n```css\nbody,ul,li{\n    padding: 0;\n    margin: 0;\n}\nli{\n    list-style: none;\n}\n.rating{\n    position: relative;\n    width: 165px;\n    height: 33px;\n    background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x;\n    margin: 100px auto;\n}\n.rating-display{\n    width: 0;\n    height: 33px;\n    background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x 0 -40px;\n}\n.rating-mask{\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n}\n.rating-item{\n    float: left;\n    width: 33px;\n    height: 33px;\n    cursor: pointer;\n}\n```\nhtml动态生成\n```html\n<div id=\"rating\" class=\"rating\">\n    <!-- <div class=\"rating-display\"></div>\n    <ul class=\"rating-mask\">\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n        <li class=\"rating-item\"></li>\n    </ul> -->\n</div>\n```\njavascript\n```javascript\nvar rating = (function(){\n    //评分\n    var Rating = function(el,options){\n        this.$el = $(el);\n        this.opts = $.extend({},Rating.DEFAULTS, options);\n\n        //半颗星星需求\n        this.opts.total *= 2;\n        this.opts.num *= 2;\n\n        this.itemWidth = 33/2;//星星默认宽度\n        this.displayWidth = this.opts.num*this.itemWidth;//展示层默认宽度\n    };\n    Rating.DEFAULTS = {\n        total : 5,\n        num : 2,\n        readOnly : false,\n        select : function(){},\n        chosen : function(){} \n    };\n    Rating.prototype.init = function(){\n        this.buildHTML();\n        this.setCSS();\n        //if(!this.opts.readOnly){\n            this.bindEvent();\n        //}\n    };\n    Rating.prototype.buildHTML = function(){//创建html\n        var html = '';\n        html += '<div class=\"rating-display\"></div><ul class=\"rating-mask\">';\n        for(var i = 0;i<this.opts.total;i++){\n            html += '<li class=\"rating-item\"></li>'\n        }\n        html +='</ul>';\n\n        this.$el.html(html);\n    };\n    Rating.prototype.setCSS = function(){//设置CSS\n        this.$el.width(this.opts.total*this.itemWidth);\n        this.$display = this.$el.find('.rating-display');\n        this.$display.width(this.displayWidth);\n        this.$el.find('.rating-item').width(this.itemWidth);\n    };\n    Rating.prototype.bindEvent = function(){//绑定事件\n        var self = this;\n        self.$el.on('mouseover','.rating-item',function(){\n            var count = $(this).index() + 1;\n\n            self.$display.width(count*self.itemWidth);\n\n            (typeof self.opts.select === 'function') && self.opts.select.call(this,count,self.opts.total);\n            self.$el.trigger('select',[count,self.opts.total]);\n        }).on('click','.rating-item',function(){\n            var count = $(this).index() + 1;\n\n            self.displayWidth = count*self.itemWidth;\n            (typeof self.opts.chosen === 'function') && self.opts.chosen.call(this,count,self.opts.total);\n            self.$el.trigger('chosen',[count,self.opts.total]);\n        }).on('mouseout',function(){\n            self.$display.width(self.displayWidth);\n        });\n    };\n    Rating.prototype.unbindEvent = function(){//解绑事件\n        this.$el.off();\n    };\n\n    var init = function(el,option){\n        var $el = $(el),\n            rating = $el.data('rating');\n\n        if(!rating){\n            $el.data('rating',\n                (rating = new Rating(el,typeof option === 'object' &&option))\n            );\n            rating.init();\n        }\n        \n        if(typeof option === 'string')rating[option]();\n    };\n\n    //jQuery插件\n    $.fn.extend({\n        rating: function(option){\n            return this.each(function(){\n                init(this,option)\n            })\n        }\n    });\n        \n\n    return {\n        init: init\n    }\n})()\n\n$('#rating').rating({\n    total: 7,\n    num: 4,\n    chosen: function(count,total){\n        rating.init('#rating','unbindEvent')\n    }\n})\n\n// rating.init('#rating',{\n//  total : 6,\n//  num: 3,\n//  // select: function(count,total){\n//  //  console.log(this);\n//  //  console.log(count + '/' + total);\n//  // }\n//  chosen: function(count,total){\n//      rating.init('#rating','unbindEvent')\n//  }\n// });\n```\n策略模式重构代码\n策略模式：定义一系列算法，一个个封装起来，并且可以相互替换\n只需评分前增加策略类\n```javascript\n    //策略\n    var strategies = {\n        entire: function(){\n            return 1;\n        },\n        half: function(){\n            return 2;\n        },\n        quarter: function(){\n            return 4;\n        }\n    }\n\n    //评分\n    var Rating = function(el,options){\n        this.$el = $(el);\n        this.opts = $.extend({},Rating.DEFAULTS, options);\n        \n        if(!strategies[this.opts.mode]){//容错判断\n            this.opts.mode = 'entire';\n        }\n        this.ratio = strategies[this.opts.mode]();\n        this.opts.total *= this.ratio;\n        this.opts.num *= this.ratio;\n\n        this.itemWidth = 33/this.ratio;//星星默认宽度\n        this.displayWidth = this.opts.num*this.itemWidth;//展示层默认宽度\n    };\n    Rating.DEFAULTS = {\n        mode: 'entire',\n        total : 5,\n        num : 2,\n        readOnly : false,\n        select : function(){},\n        chosen : function(){} \n    };\n\n```\n[源码](https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star2.html)","slug":"js-star","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3940011nilwmhpil4c9","content":"<h3 id=\"1-第一种写法\"><a href=\"#1-第一种写法\" class=\"headerlink\" title=\"1.第一种写法\"></a>1.第一种写法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">ul</span> , <span class=\"selector-tag\">li</span> &#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">li</span>&#123;<span class=\"attribute\">list-style</span>: none;&#125;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.rating</span> &#123;<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;<span class=\"attribute\">height</span>: <span class=\"number\">34px</span>;<span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;&#125;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.rating-item</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        width: 34px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 34px;</span></div><div class=\"line\"><span class=\"undefined\">        background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) no-repeat;</span></div><div class=\"line\"><span class=\"undefined\">        cursor: pointer;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--index.html--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rating\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating-item\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"很不好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating-item\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"不好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating-item\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"一般\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating-item\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating-item\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"很好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> num=<span class=\"number\">2</span>,</div><div class=\"line\">    $rating = $(<span class=\"string\">'#rating'</span>),</div><div class=\"line\">    $item = $rating.find(<span class=\"string\">'.rating-item'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//点亮</span></div><div class=\"line\"><span class=\"keyword\">var</span> lightOn=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">   $item.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(index&lt;num)&#123;</div><div class=\"line\">         $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -40px'</span>);</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 0'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//初始化</span></div><div class=\"line\">lightOn(num);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//事件绑定</span></div><div class=\"line\">$item.on(<span class=\"string\">'mouseover'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   lightOn($(<span class=\"keyword\">this</span>).index()+<span class=\"number\">1</span>)</div><div class=\"line\">&#125;).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    num = $(<span class=\"keyword\">this</span>).index()+<span class=\"number\">1</span></div><div class=\"line\">&#125;);</div><div class=\"line\">$rating.on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    lightOn(num);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>（1）改进代码：</p>\n<ul>\n<li>1.闭包防止全局变量污染</li>\n<li>2.事件委托防止多次绑定事件</li>\n<li>3.代码复用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//index.js</span></div><div class=\"line\"><span class=\"comment\">//闭包</span></div><div class=\"line\"><span class=\"keyword\">var</span> rating = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//点亮，这个函数是通用的</span></div><div class=\"line\">    <span class=\"keyword\">var</span> lightOn=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$item,num</span>)</span>&#123;</div><div class=\"line\">       $item.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(index&lt;num)&#123;</div><div class=\"line\">             $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -40px'</span>);</div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">             $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 0'</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//代码复用</span></div><div class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,num</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> $rating = $(el),</div><div class=\"line\">            $item = $rating.find(<span class=\"string\">'.rating-item'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//初始化</span></div><div class=\"line\">        lightOn($item,num);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//事件委托，将子元素事件委托给父元素</span></div><div class=\"line\">        $rating.on(<span class=\"string\">'mouseover'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">           lightOn($item,$(<span class=\"keyword\">this</span>).index()+<span class=\"number\">1</span>) </div><div class=\"line\">        &#125;).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            num = $(<span class=\"keyword\">this</span>).index()+<span class=\"number\">1</span></div><div class=\"line\">        &#125;).on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            lightOn($item,num);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//jQuery插件</span></div><div class=\"line\">    $.fn.extend(&#123;</div><div class=\"line\">        rating: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                init(<span class=\"keyword\">this</span>,num);    </div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        init: init</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">&#125;)()</div><div class=\"line\"></div><div class=\"line\">rating.init(<span class=\"string\">'#rating'</span>,<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">//raring.init('#rating2',3);//第二个评分</span></div><div class=\"line\">$(<span class=\"string\">'#rating2'</span>).rating(<span class=\"number\">4</span>);<span class=\"comment\">//jquery插件调用</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（2）设计模式<br>封装一个函数是复用代码，使用一个设计模式是复用他人的经验</p>\n<ul>\n<li><1>创建型模式，就是对创建对象进行封装。如单例，抽象工厂，建造者，工厂，原型。</1></li>\n<li><2>结构型模式，主要解决类之间的耦合关系。如适配器，桥接，装饰，组合，外观，享元，代理。</2></li>\n<li><3>行为型模式，是对象之间的常用交流模式。如模板方法，命令，迭代器，观察者，中介者，备忘录，解释器，状态，策略，责任链，访问者。</3></li>\n</ul>\n<p>（3）模板方法模式<br>需求：点亮半颗星星<br>再次扩展<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rating = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//点亮整颗</span></div><div class=\"line\">  <span class=\"keyword\">var</span> LightEntire = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$el = $(el);</div><div class=\"line\">    <span class=\"keyword\">this</span>.$item = <span class=\"keyword\">this</span>.$el.find(<span class=\"string\">'.rating-item'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts = options;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightEntire.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lightOn(<span class=\"keyword\">this</span>.opts.num);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.opts.readOnly)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bindEvent();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightEntire.prototype.lightOn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    num = <span class=\"built_in\">parseInt</span>(num);</div><div class=\"line\">    <span class=\"keyword\">this</span>.$item.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&lt;num)&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -40px'</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 0'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightEntire.prototype.bindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>,</div><div class=\"line\">        itemLength = self.$item.length;</div><div class=\"line\">    self.$el.on(<span class=\"string\">'mouseover'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> num = $(<span class=\"keyword\">this</span>).index()+self.add;</div><div class=\"line\">        self.lightOn(num);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//短路符，先判断传入的是否函数。call改变this指向</span></div><div class=\"line\">        (<span class=\"keyword\">typeof</span> self.opts.select === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.select.call(<span class=\"keyword\">this</span> ,num, itemLength)</div><div class=\"line\">        <span class=\"comment\">//触发select事件</span></div><div class=\"line\">        self.$el.trigger(<span class=\"string\">'select'</span>,[num,itemLength])</div><div class=\"line\">    &#125;).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       self.opts.num = $(<span class=\"keyword\">this</span>).index()+self.add;</div><div class=\"line\"></div><div class=\"line\">       (<span class=\"keyword\">typeof</span> self.opts.chosen === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class=\"keyword\">this</span> ,self.opts.num, itemLength)</div><div class=\"line\">    </div><div class=\"line\">         self.$el.trigger(<span class=\"string\">'chosen'</span>,[self.opts.num,itemLength])</div><div class=\"line\">    &#125;).on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.lightOn(self.opts.num);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//点亮半颗</span></div><div class=\"line\">  <span class=\"keyword\">var</span> LightHalf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$el = $(el);</div><div class=\"line\">    <span class=\"keyword\">this</span>.$item = <span class=\"keyword\">this</span>.$el.find(<span class=\"string\">'.rating-item'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts = options;</div><div class=\"line\">    <span class=\"keyword\">this</span>.add = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightHalf.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lightOn(<span class=\"keyword\">this</span>.opts.num);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.opts.readOnly)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bindEvent();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightHalf.prototype.lightOn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"built_in\">parseInt</span>(num),</div><div class=\"line\">        isHalf = count!==num;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.$item.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&lt;num)&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -40px'</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 0'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(isHalf)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$item.eq(count).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -80px'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightHalf.prototype.bindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>,</div><div class=\"line\">        itemLength = self.$item.length;</div><div class=\"line\"></div><div class=\"line\">    self.$el.on(<span class=\"string\">'mousemove'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>),</div><div class=\"line\">            num = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(e.pageX-$<span class=\"keyword\">this</span>.offset().left &lt; $<span class=\"keyword\">this</span>.width()/<span class=\"number\">2</span>)&#123;<span class=\"comment\">//半颗</span></div><div class=\"line\">            self.add = <span class=\"number\">0.5</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//整颗</span></div><div class=\"line\">            self.add = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        num = $<span class=\"keyword\">this</span>.index() + self.add;</div><div class=\"line\"></div><div class=\"line\">        self.lightOn(num);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//短路符，先判断传入的是否函数。call改变this指向</span></div><div class=\"line\">        (<span class=\"keyword\">typeof</span> self.opts.select === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.select.call(<span class=\"keyword\">this</span> ,num, itemLength)</div><div class=\"line\">        <span class=\"comment\">//触发select事件</span></div><div class=\"line\">        self.$el.trigger(<span class=\"string\">'select'</span>,[num,itemLength])</div><div class=\"line\"></div><div class=\"line\">    &#125;).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       self.opts.num = $(<span class=\"keyword\">this</span>).index() + self.add;</div><div class=\"line\"></div><div class=\"line\">       (<span class=\"keyword\">typeof</span> self.opts.chosen === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class=\"keyword\">this</span> ,self.opts.num, itemLength)</div><div class=\"line\">    </div><div class=\"line\">       self.$el.trigger(<span class=\"string\">'chosen'</span>,[self.opts.num,itemLength])</div><div class=\"line\">    &#125;).on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.lightOn(self.opts.num);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//默认参数</span></div><div class=\"line\">  <span class=\"keyword\">var</span> defaults = &#123;</div><div class=\"line\">    mode: <span class=\"string\">'LightEntire'</span>,<span class=\"comment\">//半颗 LightHalf</span></div><div class=\"line\">    num: <span class=\"number\">0</span>,</div><div class=\"line\">    readOnly: <span class=\"literal\">false</span>,</div><div class=\"line\">    select: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">    chosen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">//做个映射</span></div><div class=\"line\">  <span class=\"keyword\">var</span> mode = &#123;</div><div class=\"line\">    <span class=\"string\">'LightEntire'</span> : LightEntire,</div><div class=\"line\">    <span class=\"string\">'LightHalf'</span> : LightHalf</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//初始化</span></div><div class=\"line\">  <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    options = $.extend(&#123;&#125;,defaults,options);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!mode[options.mode])&#123;<span class=\"comment\">//容错</span></div><div class=\"line\">        options.mode = <span class=\"string\">'LightEntire'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//new LightEntire(el,options).init();</span></div><div class=\"line\">    <span class=\"comment\">//new LightHalf(el,options).init();</span></div><div class=\"line\">    <span class=\"keyword\">new</span> mode[options.mode](el,options).init();</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    init: init</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">rating.init(<span class=\"string\">'#rating'</span>,&#123;</div><div class=\"line\">    mode: <span class=\"string\">'LightHalf'</span>,</div><div class=\"line\">  num : <span class=\"number\">2.5</span>,</div><div class=\"line\">  <span class=\"comment\">// select : function(num, total) &#123;</span></div><div class=\"line\">  <span class=\"comment\">//    console.log(this)</span></div><div class=\"line\">  <span class=\"comment\">//    console.log(num + '/' + total)</span></div><div class=\"line\">  <span class=\"comment\">//  &#125;</span></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"string\">'#rating'</span>).on(<span class=\"string\">'select'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,num,total</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num + <span class=\"string\">'/'</span> +total)</div><div class=\"line\">&#125;).on(<span class=\"string\">'chosen'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,num,total</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num + <span class=\"string\">'/'</span> +total)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>抽象出父类,实现继承<br>完善初始化,增加选完后解绑事件<br>完善jQuery插件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rating = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//原型链继承 不需要构造函数里的东西，如果构造函数里东西多，会影响性能</span></div><div class=\"line\">    <span class=\"comment\">//LightEntire.prototype = new Light();</span></div><div class=\"line\">    <span class=\"comment\">//继承 改造</span></div><div class=\"line\">    <span class=\"keyword\">var</span> extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">subClass,superClass</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;<span class=\"comment\">//构造函数是空的</span></div><div class=\"line\">        F.prototype = superClass.prototype;</div><div class=\"line\">        subClass.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        subClass.prototype.construtor = subClass;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//点亮 父类</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Light = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$el = $(el);</div><div class=\"line\">    <span class=\"keyword\">this</span>.$item = <span class=\"keyword\">this</span>.$el.find(<span class=\"string\">'.rating-item'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts = options;</div><div class=\"line\">    <span class=\"keyword\">this</span>.add = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.selectEvent = <span class=\"string\">'mouseover'</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Light.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.lightOn(<span class=\"keyword\">this</span>.opts.num);</div><div class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.opts.readOnly)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.bindEvent();</div><div class=\"line\">        &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Light.prototype.lightOn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    num = <span class=\"built_in\">parseInt</span>(num);</div><div class=\"line\">    <span class=\"keyword\">this</span>.$item.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&lt;num)&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -40px'</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 0'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Light.prototype.bindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>,</div><div class=\"line\">        itemLength = self.$item.length;</div><div class=\"line\">    <span class=\"comment\">//事件处理</span></div><div class=\"line\">    self.$el.on(<span class=\"keyword\">this</span>.selectEvent,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>),</div><div class=\"line\">            num = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//不同的方法需要子类里重写</span></div><div class=\"line\">        self.select(e,$<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        num = $(<span class=\"keyword\">this</span>).index()+self.add;</div><div class=\"line\">        self.lightOn(num);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//短路符，先判断传入的是否函数。call改变this指向</span></div><div class=\"line\">        (<span class=\"keyword\">typeof</span> self.opts.select === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.select.call(<span class=\"keyword\">this</span> ,num, itemLength)</div><div class=\"line\">        <span class=\"comment\">//触发select事件</span></div><div class=\"line\">        self.$el.trigger(<span class=\"string\">'select'</span>,[num,itemLength])</div><div class=\"line\">    &#125;).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       self.opts.num = $(<span class=\"keyword\">this</span>).index()+self.add;</div><div class=\"line\"></div><div class=\"line\">       (<span class=\"keyword\">typeof</span> self.opts.chosen === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class=\"keyword\">this</span> ,self.opts.num, itemLength)</div><div class=\"line\">    </div><div class=\"line\">       self.$el.trigger(<span class=\"string\">'chosen'</span>,[self.opts.num,itemLength])</div><div class=\"line\">    &#125;).on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       self.lightOn(self.opts.num);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Light.prototype.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写此方法'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Light.prototype.unbindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$el.off();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//点亮整颗</span></div><div class=\"line\">  <span class=\"keyword\">var</span> LightEntire = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    Light.call(<span class=\"keyword\">this</span>,el,options)</div><div class=\"line\">    <span class=\"keyword\">this</span>.selectEvent = <span class=\"string\">'mouseover'</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  extend(LightEntire,Light);<span class=\"comment\">//继承原型里的方法</span></div><div class=\"line\">  LightEntire.prototype.lightOn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    Light.prototype.lightOn.call(<span class=\"keyword\">this</span>,num)</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightEntire.prototype.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    self.add = <span class=\"number\">1</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//点亮半颗</span></div><div class=\"line\">  <span class=\"keyword\">var</span> LightHalf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    Light.call(<span class=\"keyword\">this</span>,el,options);</div><div class=\"line\">    <span class=\"keyword\">this</span>.selectEvent = <span class=\"string\">'mousemove'</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  extend(LightHalf,Light);<span class=\"comment\">//继承原型里的方法</span></div><div class=\"line\">  LightHalf.prototype.lightOn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"built_in\">parseInt</span>(num),</div><div class=\"line\">        isHalf = count!==num;</div><div class=\"line\"></div><div class=\"line\">    Light.prototype.lightOn.call(<span class=\"keyword\">this</span>,count)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(isHalf)&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.$item.eq(count).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -80px'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightHalf.prototype.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,$this</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(e.pageX-$<span class=\"keyword\">this</span>.offset().left &lt; $<span class=\"keyword\">this</span>.width()/<span class=\"number\">2</span>)&#123;<span class=\"comment\">//半颗</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.add = <span class=\"number\">0.5</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//整颗</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.add = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//默认参数</span></div><div class=\"line\">  <span class=\"keyword\">var</span> defaults = &#123;</div><div class=\"line\">    mode: <span class=\"string\">'LightEntire'</span>,<span class=\"comment\">//半颗 LightHalf</span></div><div class=\"line\">    num: <span class=\"number\">0</span>,</div><div class=\"line\">    readOnly: <span class=\"literal\">false</span>,</div><div class=\"line\">    select: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">    chosen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">//做个映射</span></div><div class=\"line\">  <span class=\"keyword\">var</span> mode = &#123;</div><div class=\"line\">    <span class=\"string\">'LightEntire'</span> : LightEntire,</div><div class=\"line\">    <span class=\"string\">'LightHalf'</span> : LightHalf</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//初始化</span></div><div class=\"line\">  <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,option</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> $el = $(el),</div><div class=\"line\">        rating = $el.data(<span class=\"string\">'rating'</span>),</div><div class=\"line\">        options = $.extend(&#123;&#125;,defaults,<span class=\"keyword\">typeof</span> option === <span class=\"string\">'object'</span> &amp;&amp; option);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!mode[options.mode])&#123;<span class=\"comment\">//容错</span></div><div class=\"line\">        options.mode = <span class=\"string\">'LightEntire'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//new LightEntire(el,options).init();</span></div><div class=\"line\">    <span class=\"comment\">//new LightHalf(el,options).init();</span></div><div class=\"line\">    <span class=\"comment\">//防止重复调用时重复实例化（单例模式）</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!rating)&#123;</div><div class=\"line\">        $el.data(<span class=\"string\">'rating'</span>,(rating = <span class=\"keyword\">new</span> mode[options.mode](el,options)));</div><div class=\"line\">        rating.init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如option是字符串，执行以字符串相应的方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> option === <span class=\"string\">'string'</span>) rating[option]()</div><div class=\"line\">    </div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//jQuery插件</span></div><div class=\"line\">    $.fn.extend(&#123;</div><div class=\"line\">        rating: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">option</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                init(<span class=\"keyword\">this</span>,option);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    init: init</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">rating.init(<span class=\"string\">'#rating'</span>,&#123;</div><div class=\"line\">  mode: <span class=\"string\">'LightHalf'</span>,</div><div class=\"line\">  num : <span class=\"number\">2.5</span>,</div><div class=\"line\">  <span class=\"comment\">// select : function(num, total) &#123;</span></div><div class=\"line\">  <span class=\"comment\">//    console.log(this)</span></div><div class=\"line\">  <span class=\"comment\">//    console.log(num + '/' + total)</span></div><div class=\"line\">  <span class=\"comment\">//  &#125;</span></div><div class=\"line\">  chosen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    rating.init(<span class=\"string\">'#rating'</span>,<span class=\"string\">'unbindEvent'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#rating'</span>).on(<span class=\"string\">'select'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,num,total</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num + <span class=\"string\">'/'</span> +total)</div><div class=\"line\">&#125;).on(<span class=\"string\">'chosen'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,num,total</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num + <span class=\"string\">'/'</span> +total)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#rating2'</span>).rating(&#123;</div><div class=\"line\">  mode: <span class=\"string\">'LightEntire'</span>,</div><div class=\"line\">  num : <span class=\"number\">4</span>,</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#rating2'</span>).on(<span class=\"string\">'chosen'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"keyword\">this</span>).rating(<span class=\"string\">'unbindEvent'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star1.html\" target=\"_blank\" rel=\"external\">最终源码</a></p>\n<h3 id=\"2-第二种写法\"><a href=\"#2-第二种写法\" class=\"headerlink\" title=\"2.第二种写法\"></a>2.第二种写法</h3><p>通过控制宽度来点亮星星，相比第一种扩展了星星个数可控<br>style:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span>,<span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.rating</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">165px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">33px</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.rating-display</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">33px</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x <span class=\"number\">0</span> -<span class=\"number\">40px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.rating-mask</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.rating-item</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">33px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">33px</span>;</div><div class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>html动态生成<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rating\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- &lt;div class=\"rating-display\"&gt;&lt;/div&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;ul class=\"rating-mask\"&gt;</span></div><div class=\"line\"><span class=\"comment\">        &lt;li class=\"rating-item\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">        &lt;li class=\"rating-item\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">        &lt;li class=\"rating-item\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">        &lt;li class=\"rating-item\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">        &lt;li class=\"rating-item\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;/ul&gt; --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>javascript<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rating = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//评分</span></div><div class=\"line\">    <span class=\"keyword\">var</span> Rating = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$el = $(el);</div><div class=\"line\">        <span class=\"keyword\">this</span>.opts = $.extend(&#123;&#125;,Rating.DEFAULTS, options);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//半颗星星需求</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.opts.total *= <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.opts.num *= <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.itemWidth = <span class=\"number\">33</span>/<span class=\"number\">2</span>;<span class=\"comment\">//星星默认宽度</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.displayWidth = <span class=\"keyword\">this</span>.opts.num*<span class=\"keyword\">this</span>.itemWidth;<span class=\"comment\">//展示层默认宽度</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.DEFAULTS = &#123;</div><div class=\"line\">        total : <span class=\"number\">5</span>,</div><div class=\"line\">        num : <span class=\"number\">2</span>,</div><div class=\"line\">        readOnly : <span class=\"literal\">false</span>,</div><div class=\"line\">        select : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">        chosen : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; </div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.buildHTML();</div><div class=\"line\">        <span class=\"keyword\">this</span>.setCSS();</div><div class=\"line\">        <span class=\"comment\">//if(!this.opts.readOnly)&#123;</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.bindEvent();</div><div class=\"line\">        <span class=\"comment\">//&#125;</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.prototype.buildHTML = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//创建html</span></div><div class=\"line\">        <span class=\"keyword\">var</span> html = <span class=\"string\">''</span>;</div><div class=\"line\">        html += <span class=\"string\">'&lt;div class=\"rating-display\"&gt;&lt;/div&gt;&lt;ul class=\"rating-mask\"&gt;'</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"keyword\">this</span>.opts.total;i++)&#123;</div><div class=\"line\">            html += <span class=\"string\">'&lt;li class=\"rating-item\"&gt;&lt;/li&gt;'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        html +=<span class=\"string\">'&lt;/ul&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.$el.html(html);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.prototype.setCSS = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//设置CSS</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.$el.width(<span class=\"keyword\">this</span>.opts.total*<span class=\"keyword\">this</span>.itemWidth);</div><div class=\"line\">        <span class=\"keyword\">this</span>.$display = <span class=\"keyword\">this</span>.$el.find(<span class=\"string\">'.rating-display'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.$display.width(<span class=\"keyword\">this</span>.displayWidth);</div><div class=\"line\">        <span class=\"keyword\">this</span>.$el.find(<span class=\"string\">'.rating-item'</span>).width(<span class=\"keyword\">this</span>.itemWidth);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.prototype.bindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//绑定事件</span></div><div class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">        self.$el.on(<span class=\"string\">'mouseover'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> count = $(<span class=\"keyword\">this</span>).index() + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">            self.$display.width(count*self.itemWidth);</div><div class=\"line\"></div><div class=\"line\">            (<span class=\"keyword\">typeof</span> self.opts.select === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.select.call(<span class=\"keyword\">this</span>,count,self.opts.total);</div><div class=\"line\">            self.$el.trigger(<span class=\"string\">'select'</span>,[count,self.opts.total]);</div><div class=\"line\">        &#125;).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> count = $(<span class=\"keyword\">this</span>).index() + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">            self.displayWidth = count*self.itemWidth;</div><div class=\"line\">            (<span class=\"keyword\">typeof</span> self.opts.chosen === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class=\"keyword\">this</span>,count,self.opts.total);</div><div class=\"line\">            self.$el.trigger(<span class=\"string\">'chosen'</span>,[count,self.opts.total]);</div><div class=\"line\">        &#125;).on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            self.$display.width(self.displayWidth);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.prototype.unbindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//解绑事件</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.$el.off();</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,option</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> $el = $(el),</div><div class=\"line\">            rating = $el.data(<span class=\"string\">'rating'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(!rating)&#123;</div><div class=\"line\">            $el.data(<span class=\"string\">'rating'</span>,</div><div class=\"line\">                (rating = <span class=\"keyword\">new</span> Rating(el,<span class=\"keyword\">typeof</span> option === <span class=\"string\">'object'</span> &amp;&amp;option))</div><div class=\"line\">            );</div><div class=\"line\">            rating.init();</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> option === <span class=\"string\">'string'</span>)rating[option]();</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//jQuery插件</span></div><div class=\"line\">    $.fn.extend(&#123;</div><div class=\"line\">        rating: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">option</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                init(<span class=\"keyword\">this</span>,option)</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">        </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        init: init</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#rating'</span>).rating(&#123;</div><div class=\"line\">    total: <span class=\"number\">7</span>,</div><div class=\"line\">    num: <span class=\"number\">4</span>,</div><div class=\"line\">    chosen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count,total</span>)</span>&#123;</div><div class=\"line\">        rating.init(<span class=\"string\">'#rating'</span>,<span class=\"string\">'unbindEvent'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// rating.init('#rating',&#123;</span></div><div class=\"line\"><span class=\"comment\">//  total : 6,</span></div><div class=\"line\"><span class=\"comment\">//  num: 3,</span></div><div class=\"line\"><span class=\"comment\">//  // select: function(count,total)&#123;</span></div><div class=\"line\"><span class=\"comment\">//  //  console.log(this);</span></div><div class=\"line\"><span class=\"comment\">//  //  console.log(count + '/' + total);</span></div><div class=\"line\"><span class=\"comment\">//  // &#125;</span></div><div class=\"line\"><span class=\"comment\">//  chosen: function(count,total)&#123;</span></div><div class=\"line\"><span class=\"comment\">//      rating.init('#rating','unbindEvent')</span></div><div class=\"line\"><span class=\"comment\">//  &#125;</span></div><div class=\"line\"><span class=\"comment\">// &#125;);</span></div></pre></td></tr></table></figure></p>\n<p>策略模式重构代码<br>策略模式：定义一系列算法，一个个封装起来，并且可以相互替换<br>只需评分前增加策略类<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//策略</span></div><div class=\"line\"><span class=\"keyword\">var</span> strategies = &#123;</div><div class=\"line\">    entire: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    half: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    quarter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//评分</span></div><div class=\"line\"><span class=\"keyword\">var</span> Rating = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$el = $(el);</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts = $.extend(&#123;&#125;,Rating.DEFAULTS, options);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(!strategies[<span class=\"keyword\">this</span>.opts.mode])&#123;<span class=\"comment\">//容错判断</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.opts.mode = <span class=\"string\">'entire'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.ratio = strategies[<span class=\"keyword\">this</span>.opts.mode]();</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts.total *= <span class=\"keyword\">this</span>.ratio;</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts.num *= <span class=\"keyword\">this</span>.ratio;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.itemWidth = <span class=\"number\">33</span>/<span class=\"keyword\">this</span>.ratio;<span class=\"comment\">//星星默认宽度</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.displayWidth = <span class=\"keyword\">this</span>.opts.num*<span class=\"keyword\">this</span>.itemWidth;<span class=\"comment\">//展示层默认宽度</span></div><div class=\"line\">&#125;;</div><div class=\"line\">Rating.DEFAULTS = &#123;</div><div class=\"line\">    mode: <span class=\"string\">'entire'</span>,</div><div class=\"line\">    total : <span class=\"number\">5</span>,</div><div class=\"line\">    num : <span class=\"number\">2</span>,</div><div class=\"line\">    readOnly : <span class=\"literal\">false</span>,</div><div class=\"line\">    select : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">    chosen : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star2.html\" target=\"_blank\" rel=\"external\">源码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-第一种写法\"><a href=\"#1-第一种写法\" class=\"headerlink\" title=\"1.第一种写法\"></a>1.第一种写法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">ul</span> , <span class=\"selector-tag\">li</span> &#123;<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>&#125;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">li</span>&#123;<span class=\"attribute\">list-style</span>: none;&#125;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.rating</span> &#123;<span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;<span class=\"attribute\">height</span>: <span class=\"number\">34px</span>;<span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;&#125;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-class\">.rating-item</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">        float: left;</span></div><div class=\"line\"><span class=\"undefined\">        width: 34px;</span></div><div class=\"line\"><span class=\"undefined\">        height: 34px;</span></div><div class=\"line\"><span class=\"undefined\">        background: url(http://i.niupic.com/images/2017/05/31/iVPGGC.png) no-repeat;</span></div><div class=\"line\"><span class=\"undefined\">        cursor: pointer;</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!--index.html--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rating\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating-item\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"很不好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating-item\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"不好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating-item\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"一般\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating-item\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating-item\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"很好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> num=<span class=\"number\">2</span>,</div><div class=\"line\">    $rating = $(<span class=\"string\">'#rating'</span>),</div><div class=\"line\">    $item = $rating.find(<span class=\"string\">'.rating-item'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//点亮</span></div><div class=\"line\"><span class=\"keyword\">var</span> lightOn=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">   $item.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(index&lt;num)&#123;</div><div class=\"line\">         $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -40px'</span>);</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 0'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//初始化</span></div><div class=\"line\">lightOn(num);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//事件绑定</span></div><div class=\"line\">$item.on(<span class=\"string\">'mouseover'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   lightOn($(<span class=\"keyword\">this</span>).index()+<span class=\"number\">1</span>)</div><div class=\"line\">&#125;).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    num = $(<span class=\"keyword\">this</span>).index()+<span class=\"number\">1</span></div><div class=\"line\">&#125;);</div><div class=\"line\">$rating.on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    lightOn(num);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>（1）改进代码：</p>\n<ul>\n<li>1.闭包防止全局变量污染</li>\n<li>2.事件委托防止多次绑定事件</li>\n<li>3.代码复用<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//index.js</span></div><div class=\"line\"><span class=\"comment\">//闭包</span></div><div class=\"line\"><span class=\"keyword\">var</span> rating = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//点亮，这个函数是通用的</span></div><div class=\"line\">    <span class=\"keyword\">var</span> lightOn=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$item,num</span>)</span>&#123;</div><div class=\"line\">       $item.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">if</span>(index&lt;num)&#123;</div><div class=\"line\">             $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -40px'</span>);</div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">             $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 0'</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\">       &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//代码复用</span></div><div class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,num</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> $rating = $(el),</div><div class=\"line\">            $item = $rating.find(<span class=\"string\">'.rating-item'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//初始化</span></div><div class=\"line\">        lightOn($item,num);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//事件委托，将子元素事件委托给父元素</span></div><div class=\"line\">        $rating.on(<span class=\"string\">'mouseover'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">           lightOn($item,$(<span class=\"keyword\">this</span>).index()+<span class=\"number\">1</span>) </div><div class=\"line\">        &#125;).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            num = $(<span class=\"keyword\">this</span>).index()+<span class=\"number\">1</span></div><div class=\"line\">        &#125;).on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            lightOn($item,num);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//jQuery插件</span></div><div class=\"line\">    $.fn.extend(&#123;</div><div class=\"line\">        rating: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                init(<span class=\"keyword\">this</span>,num);    </div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        init: init</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">&#125;)()</div><div class=\"line\"></div><div class=\"line\">rating.init(<span class=\"string\">'#rating'</span>,<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">//raring.init('#rating2',3);//第二个评分</span></div><div class=\"line\">$(<span class=\"string\">'#rating2'</span>).rating(<span class=\"number\">4</span>);<span class=\"comment\">//jquery插件调用</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（2）设计模式<br>封装一个函数是复用代码，使用一个设计模式是复用他人的经验</p>\n<ul>\n<li><1>创建型模式，就是对创建对象进行封装。如单例，抽象工厂，建造者，工厂，原型。</1></li>\n<li><2>结构型模式，主要解决类之间的耦合关系。如适配器，桥接，装饰，组合，外观，享元，代理。</2></li>\n<li><3>行为型模式，是对象之间的常用交流模式。如模板方法，命令，迭代器，观察者，中介者，备忘录，解释器，状态，策略，责任链，访问者。</3></li>\n</ul>\n<p>（3）模板方法模式<br>需求：点亮半颗星星<br>再次扩展<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rating = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//点亮整颗</span></div><div class=\"line\">  <span class=\"keyword\">var</span> LightEntire = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$el = $(el);</div><div class=\"line\">    <span class=\"keyword\">this</span>.$item = <span class=\"keyword\">this</span>.$el.find(<span class=\"string\">'.rating-item'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts = options;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightEntire.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lightOn(<span class=\"keyword\">this</span>.opts.num);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.opts.readOnly)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bindEvent();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightEntire.prototype.lightOn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    num = <span class=\"built_in\">parseInt</span>(num);</div><div class=\"line\">    <span class=\"keyword\">this</span>.$item.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&lt;num)&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -40px'</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 0'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightEntire.prototype.bindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>,</div><div class=\"line\">        itemLength = self.$item.length;</div><div class=\"line\">    self.$el.on(<span class=\"string\">'mouseover'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> num = $(<span class=\"keyword\">this</span>).index()+self.add;</div><div class=\"line\">        self.lightOn(num);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//短路符，先判断传入的是否函数。call改变this指向</span></div><div class=\"line\">        (<span class=\"keyword\">typeof</span> self.opts.select === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.select.call(<span class=\"keyword\">this</span> ,num, itemLength)</div><div class=\"line\">        <span class=\"comment\">//触发select事件</span></div><div class=\"line\">        self.$el.trigger(<span class=\"string\">'select'</span>,[num,itemLength])</div><div class=\"line\">    &#125;).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       self.opts.num = $(<span class=\"keyword\">this</span>).index()+self.add;</div><div class=\"line\"></div><div class=\"line\">       (<span class=\"keyword\">typeof</span> self.opts.chosen === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class=\"keyword\">this</span> ,self.opts.num, itemLength)</div><div class=\"line\">    </div><div class=\"line\">         self.$el.trigger(<span class=\"string\">'chosen'</span>,[self.opts.num,itemLength])</div><div class=\"line\">    &#125;).on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.lightOn(self.opts.num);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//点亮半颗</span></div><div class=\"line\">  <span class=\"keyword\">var</span> LightHalf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$el = $(el);</div><div class=\"line\">    <span class=\"keyword\">this</span>.$item = <span class=\"keyword\">this</span>.$el.find(<span class=\"string\">'.rating-item'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts = options;</div><div class=\"line\">    <span class=\"keyword\">this</span>.add = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightHalf.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lightOn(<span class=\"keyword\">this</span>.opts.num);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.opts.readOnly)&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bindEvent();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightHalf.prototype.lightOn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"built_in\">parseInt</span>(num),</div><div class=\"line\">        isHalf = count!==num;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.$item.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&lt;num)&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -40px'</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 0'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(isHalf)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.$item.eq(count).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -80px'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightHalf.prototype.bindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>,</div><div class=\"line\">        itemLength = self.$item.length;</div><div class=\"line\"></div><div class=\"line\">    self.$el.on(<span class=\"string\">'mousemove'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>),</div><div class=\"line\">            num = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(e.pageX-$<span class=\"keyword\">this</span>.offset().left &lt; $<span class=\"keyword\">this</span>.width()/<span class=\"number\">2</span>)&#123;<span class=\"comment\">//半颗</span></div><div class=\"line\">            self.add = <span class=\"number\">0.5</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//整颗</span></div><div class=\"line\">            self.add = <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        num = $<span class=\"keyword\">this</span>.index() + self.add;</div><div class=\"line\"></div><div class=\"line\">        self.lightOn(num);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//短路符，先判断传入的是否函数。call改变this指向</span></div><div class=\"line\">        (<span class=\"keyword\">typeof</span> self.opts.select === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.select.call(<span class=\"keyword\">this</span> ,num, itemLength)</div><div class=\"line\">        <span class=\"comment\">//触发select事件</span></div><div class=\"line\">        self.$el.trigger(<span class=\"string\">'select'</span>,[num,itemLength])</div><div class=\"line\"></div><div class=\"line\">    &#125;).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       self.opts.num = $(<span class=\"keyword\">this</span>).index() + self.add;</div><div class=\"line\"></div><div class=\"line\">       (<span class=\"keyword\">typeof</span> self.opts.chosen === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class=\"keyword\">this</span> ,self.opts.num, itemLength)</div><div class=\"line\">    </div><div class=\"line\">       self.$el.trigger(<span class=\"string\">'chosen'</span>,[self.opts.num,itemLength])</div><div class=\"line\">    &#125;).on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.lightOn(self.opts.num);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//默认参数</span></div><div class=\"line\">  <span class=\"keyword\">var</span> defaults = &#123;</div><div class=\"line\">    mode: <span class=\"string\">'LightEntire'</span>,<span class=\"comment\">//半颗 LightHalf</span></div><div class=\"line\">    num: <span class=\"number\">0</span>,</div><div class=\"line\">    readOnly: <span class=\"literal\">false</span>,</div><div class=\"line\">    select: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">    chosen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">//做个映射</span></div><div class=\"line\">  <span class=\"keyword\">var</span> mode = &#123;</div><div class=\"line\">    <span class=\"string\">'LightEntire'</span> : LightEntire,</div><div class=\"line\">    <span class=\"string\">'LightHalf'</span> : LightHalf</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//初始化</span></div><div class=\"line\">  <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    options = $.extend(&#123;&#125;,defaults,options);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!mode[options.mode])&#123;<span class=\"comment\">//容错</span></div><div class=\"line\">        options.mode = <span class=\"string\">'LightEntire'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//new LightEntire(el,options).init();</span></div><div class=\"line\">    <span class=\"comment\">//new LightHalf(el,options).init();</span></div><div class=\"line\">    <span class=\"keyword\">new</span> mode[options.mode](el,options).init();</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    init: init</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">rating.init(<span class=\"string\">'#rating'</span>,&#123;</div><div class=\"line\">    mode: <span class=\"string\">'LightHalf'</span>,</div><div class=\"line\">  num : <span class=\"number\">2.5</span>,</div><div class=\"line\">  <span class=\"comment\">// select : function(num, total) &#123;</span></div><div class=\"line\">  <span class=\"comment\">//    console.log(this)</span></div><div class=\"line\">  <span class=\"comment\">//    console.log(num + '/' + total)</span></div><div class=\"line\">  <span class=\"comment\">//  &#125;</span></div><div class=\"line\">&#125;)</div><div class=\"line\">$(<span class=\"string\">'#rating'</span>).on(<span class=\"string\">'select'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,num,total</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num + <span class=\"string\">'/'</span> +total)</div><div class=\"line\">&#125;).on(<span class=\"string\">'chosen'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,num,total</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num + <span class=\"string\">'/'</span> +total)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>抽象出父类,实现继承<br>完善初始化,增加选完后解绑事件<br>完善jQuery插件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rating = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//原型链继承 不需要构造函数里的东西，如果构造函数里东西多，会影响性能</span></div><div class=\"line\">    <span class=\"comment\">//LightEntire.prototype = new Light();</span></div><div class=\"line\">    <span class=\"comment\">//继承 改造</span></div><div class=\"line\">    <span class=\"keyword\">var</span> extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">subClass,superClass</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;<span class=\"comment\">//构造函数是空的</span></div><div class=\"line\">        F.prototype = superClass.prototype;</div><div class=\"line\">        subClass.prototype = <span class=\"keyword\">new</span> F();</div><div class=\"line\">        subClass.prototype.construtor = subClass;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//点亮 父类</span></div><div class=\"line\">  <span class=\"keyword\">var</span> Light = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$el = $(el);</div><div class=\"line\">    <span class=\"keyword\">this</span>.$item = <span class=\"keyword\">this</span>.$el.find(<span class=\"string\">'.rating-item'</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts = options;</div><div class=\"line\">    <span class=\"keyword\">this</span>.add = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.selectEvent = <span class=\"string\">'mouseover'</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Light.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.lightOn(<span class=\"keyword\">this</span>.opts.num);</div><div class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.opts.readOnly)&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.bindEvent();</div><div class=\"line\">        &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Light.prototype.lightOn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    num = <span class=\"built_in\">parseInt</span>(num);</div><div class=\"line\">    <span class=\"keyword\">this</span>.$item.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(index&lt;num)&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -40px'</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">           $(<span class=\"keyword\">this</span>).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 0'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Light.prototype.bindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>,</div><div class=\"line\">        itemLength = self.$item.length;</div><div class=\"line\">    <span class=\"comment\">//事件处理</span></div><div class=\"line\">    self.$el.on(<span class=\"keyword\">this</span>.selectEvent,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>),</div><div class=\"line\">            num = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//不同的方法需要子类里重写</span></div><div class=\"line\">        self.select(e,$<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        num = $(<span class=\"keyword\">this</span>).index()+self.add;</div><div class=\"line\">        self.lightOn(num);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//短路符，先判断传入的是否函数。call改变this指向</span></div><div class=\"line\">        (<span class=\"keyword\">typeof</span> self.opts.select === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.select.call(<span class=\"keyword\">this</span> ,num, itemLength)</div><div class=\"line\">        <span class=\"comment\">//触发select事件</span></div><div class=\"line\">        self.$el.trigger(<span class=\"string\">'select'</span>,[num,itemLength])</div><div class=\"line\">    &#125;).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       self.opts.num = $(<span class=\"keyword\">this</span>).index()+self.add;</div><div class=\"line\"></div><div class=\"line\">       (<span class=\"keyword\">typeof</span> self.opts.chosen === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class=\"keyword\">this</span> ,self.opts.num, itemLength)</div><div class=\"line\">    </div><div class=\"line\">       self.$el.trigger(<span class=\"string\">'chosen'</span>,[self.opts.num,itemLength])</div><div class=\"line\">    &#125;).on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">       self.lightOn(self.opts.num);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Light.prototype.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'子类必须重写此方法'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  Light.prototype.unbindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$el.off();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//点亮整颗</span></div><div class=\"line\">  <span class=\"keyword\">var</span> LightEntire = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    Light.call(<span class=\"keyword\">this</span>,el,options)</div><div class=\"line\">    <span class=\"keyword\">this</span>.selectEvent = <span class=\"string\">'mouseover'</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  extend(LightEntire,Light);<span class=\"comment\">//继承原型里的方法</span></div><div class=\"line\">  LightEntire.prototype.lightOn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    Light.prototype.lightOn.call(<span class=\"keyword\">this</span>,num)</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightEntire.prototype.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    self.add = <span class=\"number\">1</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//点亮半颗</span></div><div class=\"line\">  <span class=\"keyword\">var</span> LightHalf = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    Light.call(<span class=\"keyword\">this</span>,el,options);</div><div class=\"line\">    <span class=\"keyword\">this</span>.selectEvent = <span class=\"string\">'mousemove'</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  extend(LightHalf,Light);<span class=\"comment\">//继承原型里的方法</span></div><div class=\"line\">  LightHalf.prototype.lightOn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"built_in\">parseInt</span>(num),</div><div class=\"line\">        isHalf = count!==num;</div><div class=\"line\"></div><div class=\"line\">    Light.prototype.lightOn.call(<span class=\"keyword\">this</span>,count)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(isHalf)&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.$item.eq(count).css(<span class=\"string\">'background-position'</span>,<span class=\"string\">'0 -80px'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  LightHalf.prototype.select = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,$this</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(e.pageX-$<span class=\"keyword\">this</span>.offset().left &lt; $<span class=\"keyword\">this</span>.width()/<span class=\"number\">2</span>)&#123;<span class=\"comment\">//半颗</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.add = <span class=\"number\">0.5</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//整颗</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.add = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//默认参数</span></div><div class=\"line\">  <span class=\"keyword\">var</span> defaults = &#123;</div><div class=\"line\">    mode: <span class=\"string\">'LightEntire'</span>,<span class=\"comment\">//半颗 LightHalf</span></div><div class=\"line\">    num: <span class=\"number\">0</span>,</div><div class=\"line\">    readOnly: <span class=\"literal\">false</span>,</div><div class=\"line\">    select: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">    chosen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"comment\">//做个映射</span></div><div class=\"line\">  <span class=\"keyword\">var</span> mode = &#123;</div><div class=\"line\">    <span class=\"string\">'LightEntire'</span> : LightEntire,</div><div class=\"line\">    <span class=\"string\">'LightHalf'</span> : LightHalf</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//初始化</span></div><div class=\"line\">  <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,option</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> $el = $(el),</div><div class=\"line\">        rating = $el.data(<span class=\"string\">'rating'</span>),</div><div class=\"line\">        options = $.extend(&#123;&#125;,defaults,<span class=\"keyword\">typeof</span> option === <span class=\"string\">'object'</span> &amp;&amp; option);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!mode[options.mode])&#123;<span class=\"comment\">//容错</span></div><div class=\"line\">        options.mode = <span class=\"string\">'LightEntire'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//new LightEntire(el,options).init();</span></div><div class=\"line\">    <span class=\"comment\">//new LightHalf(el,options).init();</span></div><div class=\"line\">    <span class=\"comment\">//防止重复调用时重复实例化（单例模式）</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!rating)&#123;</div><div class=\"line\">        $el.data(<span class=\"string\">'rating'</span>,(rating = <span class=\"keyword\">new</span> mode[options.mode](el,options)));</div><div class=\"line\">        rating.init();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如option是字符串，执行以字符串相应的方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> option === <span class=\"string\">'string'</span>) rating[option]()</div><div class=\"line\">    </div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//jQuery插件</span></div><div class=\"line\">    $.fn.extend(&#123;</div><div class=\"line\">        rating: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">option</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                init(<span class=\"keyword\">this</span>,option);</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    init: init</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">rating.init(<span class=\"string\">'#rating'</span>,&#123;</div><div class=\"line\">  mode: <span class=\"string\">'LightHalf'</span>,</div><div class=\"line\">  num : <span class=\"number\">2.5</span>,</div><div class=\"line\">  <span class=\"comment\">// select : function(num, total) &#123;</span></div><div class=\"line\">  <span class=\"comment\">//    console.log(this)</span></div><div class=\"line\">  <span class=\"comment\">//    console.log(num + '/' + total)</span></div><div class=\"line\">  <span class=\"comment\">//  &#125;</span></div><div class=\"line\">  chosen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    rating.init(<span class=\"string\">'#rating'</span>,<span class=\"string\">'unbindEvent'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#rating'</span>).on(<span class=\"string\">'select'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,num,total</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num + <span class=\"string\">'/'</span> +total)</div><div class=\"line\">&#125;).on(<span class=\"string\">'chosen'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,num,total</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(num + <span class=\"string\">'/'</span> +total)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#rating2'</span>).rating(&#123;</div><div class=\"line\">  mode: <span class=\"string\">'LightEntire'</span>,</div><div class=\"line\">  num : <span class=\"number\">4</span>,</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#rating2'</span>).on(<span class=\"string\">'chosen'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"keyword\">this</span>).rating(<span class=\"string\">'unbindEvent'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star1.html\" target=\"_blank\" rel=\"external\">最终源码</a></p>\n<h3 id=\"2-第二种写法\"><a href=\"#2-第二种写法\" class=\"headerlink\" title=\"2.第二种写法\"></a>2.第二种写法</h3><p>通过控制宽度来点亮星星，相比第一种扩展了星星个数可控<br>style:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span>,<span class=\"selector-tag\">ul</span>,<span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.rating</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">165px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">33px</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.rating-display</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">33px</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(http://i.niupic.com/images/2017/05/31/iVPGGC.png) repeat-x <span class=\"number\">0</span> -<span class=\"number\">40px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.rating-mask</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.rating-item</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">33px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">33px</span>;</div><div class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>html动态生成<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"rating\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"rating\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- &lt;div class=\"rating-display\"&gt;&lt;/div&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;ul class=\"rating-mask\"&gt;</span></div><div class=\"line\"><span class=\"comment\">        &lt;li class=\"rating-item\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">        &lt;li class=\"rating-item\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">        &lt;li class=\"rating-item\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">        &lt;li class=\"rating-item\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">        &lt;li class=\"rating-item\"&gt;&lt;/li&gt;</span></div><div class=\"line\"><span class=\"comment\">    &lt;/ul&gt; --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>javascript<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rating = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//评分</span></div><div class=\"line\">    <span class=\"keyword\">var</span> Rating = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$el = $(el);</div><div class=\"line\">        <span class=\"keyword\">this</span>.opts = $.extend(&#123;&#125;,Rating.DEFAULTS, options);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//半颗星星需求</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.opts.total *= <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.opts.num *= <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.itemWidth = <span class=\"number\">33</span>/<span class=\"number\">2</span>;<span class=\"comment\">//星星默认宽度</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.displayWidth = <span class=\"keyword\">this</span>.opts.num*<span class=\"keyword\">this</span>.itemWidth;<span class=\"comment\">//展示层默认宽度</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.DEFAULTS = &#123;</div><div class=\"line\">        total : <span class=\"number\">5</span>,</div><div class=\"line\">        num : <span class=\"number\">2</span>,</div><div class=\"line\">        readOnly : <span class=\"literal\">false</span>,</div><div class=\"line\">        select : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">        chosen : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; </div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.prototype.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.buildHTML();</div><div class=\"line\">        <span class=\"keyword\">this</span>.setCSS();</div><div class=\"line\">        <span class=\"comment\">//if(!this.opts.readOnly)&#123;</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.bindEvent();</div><div class=\"line\">        <span class=\"comment\">//&#125;</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.prototype.buildHTML = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//创建html</span></div><div class=\"line\">        <span class=\"keyword\">var</span> html = <span class=\"string\">''</span>;</div><div class=\"line\">        html += <span class=\"string\">'&lt;div class=\"rating-display\"&gt;&lt;/div&gt;&lt;ul class=\"rating-mask\"&gt;'</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"keyword\">this</span>.opts.total;i++)&#123;</div><div class=\"line\">            html += <span class=\"string\">'&lt;li class=\"rating-item\"&gt;&lt;/li&gt;'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        html +=<span class=\"string\">'&lt;/ul&gt;'</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.$el.html(html);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.prototype.setCSS = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//设置CSS</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.$el.width(<span class=\"keyword\">this</span>.opts.total*<span class=\"keyword\">this</span>.itemWidth);</div><div class=\"line\">        <span class=\"keyword\">this</span>.$display = <span class=\"keyword\">this</span>.$el.find(<span class=\"string\">'.rating-display'</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.$display.width(<span class=\"keyword\">this</span>.displayWidth);</div><div class=\"line\">        <span class=\"keyword\">this</span>.$el.find(<span class=\"string\">'.rating-item'</span>).width(<span class=\"keyword\">this</span>.itemWidth);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.prototype.bindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//绑定事件</span></div><div class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">        self.$el.on(<span class=\"string\">'mouseover'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> count = $(<span class=\"keyword\">this</span>).index() + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">            self.$display.width(count*self.itemWidth);</div><div class=\"line\"></div><div class=\"line\">            (<span class=\"keyword\">typeof</span> self.opts.select === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.select.call(<span class=\"keyword\">this</span>,count,self.opts.total);</div><div class=\"line\">            self.$el.trigger(<span class=\"string\">'select'</span>,[count,self.opts.total]);</div><div class=\"line\">        &#125;).on(<span class=\"string\">'click'</span>,<span class=\"string\">'.rating-item'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> count = $(<span class=\"keyword\">this</span>).index() + <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">            self.displayWidth = count*self.itemWidth;</div><div class=\"line\">            (<span class=\"keyword\">typeof</span> self.opts.chosen === <span class=\"string\">'function'</span>) &amp;&amp; self.opts.chosen.call(<span class=\"keyword\">this</span>,count,self.opts.total);</div><div class=\"line\">            self.$el.trigger(<span class=\"string\">'chosen'</span>,[count,self.opts.total]);</div><div class=\"line\">        &#125;).on(<span class=\"string\">'mouseout'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            self.$display.width(self.displayWidth);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    Rating.prototype.unbindEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//解绑事件</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.$el.off();</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,option</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> $el = $(el),</div><div class=\"line\">            rating = $el.data(<span class=\"string\">'rating'</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(!rating)&#123;</div><div class=\"line\">            $el.data(<span class=\"string\">'rating'</span>,</div><div class=\"line\">                (rating = <span class=\"keyword\">new</span> Rating(el,<span class=\"keyword\">typeof</span> option === <span class=\"string\">'object'</span> &amp;&amp;option))</div><div class=\"line\">            );</div><div class=\"line\">            rating.init();</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> option === <span class=\"string\">'string'</span>)rating[option]();</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//jQuery插件</span></div><div class=\"line\">    $.fn.extend(&#123;</div><div class=\"line\">        rating: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">option</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                init(<span class=\"keyword\">this</span>,option)</div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">        </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        init: init</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#rating'</span>).rating(&#123;</div><div class=\"line\">    total: <span class=\"number\">7</span>,</div><div class=\"line\">    num: <span class=\"number\">4</span>,</div><div class=\"line\">    chosen: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">count,total</span>)</span>&#123;</div><div class=\"line\">        rating.init(<span class=\"string\">'#rating'</span>,<span class=\"string\">'unbindEvent'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// rating.init('#rating',&#123;</span></div><div class=\"line\"><span class=\"comment\">//  total : 6,</span></div><div class=\"line\"><span class=\"comment\">//  num: 3,</span></div><div class=\"line\"><span class=\"comment\">//  // select: function(count,total)&#123;</span></div><div class=\"line\"><span class=\"comment\">//  //  console.log(this);</span></div><div class=\"line\"><span class=\"comment\">//  //  console.log(count + '/' + total);</span></div><div class=\"line\"><span class=\"comment\">//  // &#125;</span></div><div class=\"line\"><span class=\"comment\">//  chosen: function(count,total)&#123;</span></div><div class=\"line\"><span class=\"comment\">//      rating.init('#rating','unbindEvent')</span></div><div class=\"line\"><span class=\"comment\">//  &#125;</span></div><div class=\"line\"><span class=\"comment\">// &#125;);</span></div></pre></td></tr></table></figure></p>\n<p>策略模式重构代码<br>策略模式：定义一系列算法，一个个封装起来，并且可以相互替换<br>只需评分前增加策略类<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//策略</span></div><div class=\"line\"><span class=\"keyword\">var</span> strategies = &#123;</div><div class=\"line\">    entire: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    half: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    quarter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//评分</span></div><div class=\"line\"><span class=\"keyword\">var</span> Rating = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,options</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.$el = $(el);</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts = $.extend(&#123;&#125;,Rating.DEFAULTS, options);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(!strategies[<span class=\"keyword\">this</span>.opts.mode])&#123;<span class=\"comment\">//容错判断</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.opts.mode = <span class=\"string\">'entire'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.ratio = strategies[<span class=\"keyword\">this</span>.opts.mode]();</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts.total *= <span class=\"keyword\">this</span>.ratio;</div><div class=\"line\">    <span class=\"keyword\">this</span>.opts.num *= <span class=\"keyword\">this</span>.ratio;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.itemWidth = <span class=\"number\">33</span>/<span class=\"keyword\">this</span>.ratio;<span class=\"comment\">//星星默认宽度</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.displayWidth = <span class=\"keyword\">this</span>.opts.num*<span class=\"keyword\">this</span>.itemWidth;<span class=\"comment\">//展示层默认宽度</span></div><div class=\"line\">&#125;;</div><div class=\"line\">Rating.DEFAULTS = &#123;</div><div class=\"line\">    mode: <span class=\"string\">'entire'</span>,</div><div class=\"line\">    total : <span class=\"number\">5</span>,</div><div class=\"line\">    num : <span class=\"number\">2</span>,</div><div class=\"line\">    readOnly : <span class=\"literal\">false</span>,</div><div class=\"line\">    select : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</div><div class=\"line\">    chosen : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/blob/master/js-star/js-star2.html\" target=\"_blank\" rel=\"external\">源码</a></p>\n"},{"title":"php基础语法","date":"2018-01-26T01:57:03.000Z","_content":"\n### 1.string类型\n####（1）string中单双引号的区别\nstring的单引号中，转义序列不会被替换；\n而双引号和heredoc结构中会，如\\n换行，双引号中的变量会被解析。\nheredoc格式：\n```php\necho <<<EOT\nMy name is \"$name\". I am printing some $foo->foo.\nNow, I am printing some {$foo->bar[1]}.\nThis should print a capital 'A': \\x41\nEOT;\n```\n####（2）string中的变量解析\n```php\n$juices = array(\"apple\", \"orange\", \"koolaid1\" => \"purple\");\n\nclass people {\n    public $john = \"John Smith\";\n    public $jane = \"Jane Smith\";\n    public $robert = \"Robert Paulsen\";\n    \n    public $smith = \"Smith\";\n}\n\n$people = new people();\n\necho \"$people->john drank some $juices[0] juice.\".PHP_EOL;\necho \"$people->john then said hello to $people->jane.\".PHP_EOL;\necho \"$people->john's wife greeted $people->robert.\".PHP_EOL;\necho \"$people->robert greeted the two $people->smiths.\"; // Won't work\n\n//复杂语法：\n// 有效，只有通过花括号语法才能正确解析带引号的键名\necho \"This works: {$arr['key']}\";\n```\n####(3)string的转化\n一个布尔值 boolean 的 TRUE 被转换成 string 的 \"1\"。\nBoolean 的 FALSE 被转换成 \"\"（空字符串）。\nNULL 总是被转变成空字符串。\n直接把 array，object 或 resource 转换成 string 不会得到除了其类型之外的任何有用信息。可以使用函数 print_r() 和 var_dump() 列出这些类型的内容。\n\n\n### 2.Array数组\n\n","source":"_posts/php-01.md","raw":"---\ntitle: php基础语法\ndate: 2018-01-26 09:57:03\ntags: php\n---\n\n### 1.string类型\n####（1）string中单双引号的区别\nstring的单引号中，转义序列不会被替换；\n而双引号和heredoc结构中会，如\\n换行，双引号中的变量会被解析。\nheredoc格式：\n```php\necho <<<EOT\nMy name is \"$name\". I am printing some $foo->foo.\nNow, I am printing some {$foo->bar[1]}.\nThis should print a capital 'A': \\x41\nEOT;\n```\n####（2）string中的变量解析\n```php\n$juices = array(\"apple\", \"orange\", \"koolaid1\" => \"purple\");\n\nclass people {\n    public $john = \"John Smith\";\n    public $jane = \"Jane Smith\";\n    public $robert = \"Robert Paulsen\";\n    \n    public $smith = \"Smith\";\n}\n\n$people = new people();\n\necho \"$people->john drank some $juices[0] juice.\".PHP_EOL;\necho \"$people->john then said hello to $people->jane.\".PHP_EOL;\necho \"$people->john's wife greeted $people->robert.\".PHP_EOL;\necho \"$people->robert greeted the two $people->smiths.\"; // Won't work\n\n//复杂语法：\n// 有效，只有通过花括号语法才能正确解析带引号的键名\necho \"This works: {$arr['key']}\";\n```\n####(3)string的转化\n一个布尔值 boolean 的 TRUE 被转换成 string 的 \"1\"。\nBoolean 的 FALSE 被转换成 \"\"（空字符串）。\nNULL 总是被转变成空字符串。\n直接把 array，object 或 resource 转换成 string 不会得到除了其类型之外的任何有用信息。可以使用函数 print_r() 和 var_dump() 列出这些类型的内容。\n\n\n### 2.Array数组\n\n","slug":"php-01","published":1,"updated":"2018-01-26T02:21:10.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct39i0014nilwvbmhdyfp","content":"<h3 id=\"1-string类型\"><a href=\"#1-string类型\" class=\"headerlink\" title=\"1.string类型\"></a>1.string类型</h3><p>####（1）string中单双引号的区别<br>string的单引号中，转义序列不会被替换；<br>而双引号和heredoc结构中会，如\\n换行，双引号中的变量会被解析。<br>heredoc格式：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&lt;&lt;&lt;EOT</span></div><div class=\"line\"><span class=\"string\">My name is \"<span class=\"subst\">$name</span>\". I am printing some <span class=\"subst\">$foo</span>-&gt;foo.</span></div><div class=\"line\"><span class=\"string\">Now, I am printing some <span class=\"subst\">&#123;$foo-&gt;bar[1]&#125;</span>.</span></div><div class=\"line\"><span class=\"string\">This should print a capital 'A': \\x41</span></div><div class=\"line\"><span class=\"string\">EOT;</span></div></pre></td></tr></table></figure></p>\n<p>####（2）string中的变量解析<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$juices = <span class=\"keyword\">array</span>(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"koolaid1\"</span> =&gt; <span class=\"string\">\"purple\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $john = <span class=\"string\">\"John Smith\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> $jane = <span class=\"string\">\"Jane Smith\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> $robert = <span class=\"string\">\"Robert Paulsen\"</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> $smith = <span class=\"string\">\"Smith\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$people = <span class=\"keyword\">new</span> people();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$people-&gt;john drank some $juices[0] juice.\"</span>.PHP_EOL;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$people-&gt;john then said hello to $people-&gt;jane.\"</span>.PHP_EOL;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$people-&gt;john's wife greeted $people-&gt;robert.\"</span>.PHP_EOL;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$people-&gt;robert greeted the two $people-&gt;smiths.\"</span>; <span class=\"comment\">// Won't work</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//复杂语法：</span></div><div class=\"line\"><span class=\"comment\">// 有效，只有通过花括号语法才能正确解析带引号的键名</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"This works: &#123;$arr['key']&#125;\"</span>;</div></pre></td></tr></table></figure></p>\n<p>####(3)string的转化<br>一个布尔值 boolean 的 TRUE 被转换成 string 的 “1”。<br>Boolean 的 FALSE 被转换成 “”（空字符串）。<br>NULL 总是被转变成空字符串。<br>直接把 array，object 或 resource 转换成 string 不会得到除了其类型之外的任何有用信息。可以使用函数 print_r() 和 var_dump() 列出这些类型的内容。</p>\n<h3 id=\"2-Array数组\"><a href=\"#2-Array数组\" class=\"headerlink\" title=\"2.Array数组\"></a>2.Array数组</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-string类型\"><a href=\"#1-string类型\" class=\"headerlink\" title=\"1.string类型\"></a>1.string类型</h3><p>####（1）string中单双引号的区别<br>string的单引号中，转义序列不会被替换；<br>而双引号和heredoc结构中会，如\\n换行，双引号中的变量会被解析。<br>heredoc格式：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&lt;&lt;&lt;EOT</span></div><div class=\"line\"><span class=\"string\">My name is \"<span class=\"subst\">$name</span>\". I am printing some <span class=\"subst\">$foo</span>-&gt;foo.</span></div><div class=\"line\"><span class=\"string\">Now, I am printing some <span class=\"subst\">&#123;$foo-&gt;bar[1]&#125;</span>.</span></div><div class=\"line\"><span class=\"string\">This should print a capital 'A': \\x41</span></div><div class=\"line\"><span class=\"string\">EOT;</span></div></pre></td></tr></table></figure></p>\n<p>####（2）string中的变量解析<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$juices = <span class=\"keyword\">array</span>(<span class=\"string\">\"apple\"</span>, <span class=\"string\">\"orange\"</span>, <span class=\"string\">\"koolaid1\"</span> =&gt; <span class=\"string\">\"purple\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">people</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> $john = <span class=\"string\">\"John Smith\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> $jane = <span class=\"string\">\"Jane Smith\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> $robert = <span class=\"string\">\"Robert Paulsen\"</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> $smith = <span class=\"string\">\"Smith\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$people = <span class=\"keyword\">new</span> people();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$people-&gt;john drank some $juices[0] juice.\"</span>.PHP_EOL;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$people-&gt;john then said hello to $people-&gt;jane.\"</span>.PHP_EOL;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$people-&gt;john's wife greeted $people-&gt;robert.\"</span>.PHP_EOL;</div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"$people-&gt;robert greeted the two $people-&gt;smiths.\"</span>; <span class=\"comment\">// Won't work</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//复杂语法：</span></div><div class=\"line\"><span class=\"comment\">// 有效，只有通过花括号语法才能正确解析带引号的键名</span></div><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"This works: &#123;$arr['key']&#125;\"</span>;</div></pre></td></tr></table></figure></p>\n<p>####(3)string的转化<br>一个布尔值 boolean 的 TRUE 被转换成 string 的 “1”。<br>Boolean 的 FALSE 被转换成 “”（空字符串）。<br>NULL 总是被转变成空字符串。<br>直接把 array，object 或 resource 转换成 string 不会得到除了其类型之外的任何有用信息。可以使用函数 print_r() 和 var_dump() 列出这些类型的内容。</p>\n<h3 id=\"2-Array数组\"><a href=\"#2-Array数组\" class=\"headerlink\" title=\"2.Array数组\"></a>2.Array数组</h3>"},{"title":"mac下android的环境变量配置","date":"2018-01-03T02:14:04.000Z","_content":"## [mac下android的环境变量配置](https://stackoverflow.com/questions/19986214/setting-android-home-enviromental-variable-on-mac-os-x)\nWhere the Android-SDK is installed depends on how you installed it.\n### 1.通过官网直接下载安装\nIf you downloaded the SDK through their website and then dragged/dropped the Application to your Applications folder, it's most likely here:\n```html\n/Applications/ADT/sdk (as it is in your case).\n```\n\n### 2.通过Homebrew安装\nIf you installed the SDK using Homebrew (brew cask install android-sdk), then it's located here:\n```html\n/usr/local/Caskroom/android-sdk/{YOUR_SDK_VERSION_NUMBER}\n```\n\n### 3.通过Android Studio安装\nIf the SDK was installed automatically as part of Android Studio then it's located here:\n```html\n/Users/{YOUR_USER_NAME}/Library/Android/sdk\n```\n\n\n知道sdk目录后\n```html\nvim ~/.bash_profile\n```\n按向下箭头->按i进入编辑模式\n添加\n```html\nexport ANDROID_HOME={YOUR_PATH}\n```\n\n```html\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n\n#注：中间用冒号隔开\nexport PATH=$PATH:<PATH 1>:<PATH 2>:<PATH 3>:------:<PATH N>\n```\n\n最后：ESC后 :wq 保存并退出。\n更新变化：\n```html\nsource ~/.bash_profile\n```\n","source":"_posts/mac-android.md","raw":"---\ntitle: mac下android的环境变量配置\ndate: 2018-01-03 10:14:04\ntags: [mac,android]\n---\n## [mac下android的环境变量配置](https://stackoverflow.com/questions/19986214/setting-android-home-enviromental-variable-on-mac-os-x)\nWhere the Android-SDK is installed depends on how you installed it.\n### 1.通过官网直接下载安装\nIf you downloaded the SDK through their website and then dragged/dropped the Application to your Applications folder, it's most likely here:\n```html\n/Applications/ADT/sdk (as it is in your case).\n```\n\n### 2.通过Homebrew安装\nIf you installed the SDK using Homebrew (brew cask install android-sdk), then it's located here:\n```html\n/usr/local/Caskroom/android-sdk/{YOUR_SDK_VERSION_NUMBER}\n```\n\n### 3.通过Android Studio安装\nIf the SDK was installed automatically as part of Android Studio then it's located here:\n```html\n/Users/{YOUR_USER_NAME}/Library/Android/sdk\n```\n\n\n知道sdk目录后\n```html\nvim ~/.bash_profile\n```\n按向下箭头->按i进入编辑模式\n添加\n```html\nexport ANDROID_HOME={YOUR_PATH}\n```\n\n```html\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n\n#注：中间用冒号隔开\nexport PATH=$PATH:<PATH 1>:<PATH 2>:<PATH 3>:------:<PATH N>\n```\n\n最后：ESC后 :wq 保存并退出。\n更新变化：\n```html\nsource ~/.bash_profile\n```\n","slug":"mac-android","published":1,"updated":"2018-01-12T02:55:27.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct39m0016nilwj7o7tgsu","content":"<h2 id=\"mac下android的环境变量配置\"><a href=\"#mac下android的环境变量配置\" class=\"headerlink\" title=\"mac下android的环境变量配置\"></a><a href=\"https://stackoverflow.com/questions/19986214/setting-android-home-enviromental-variable-on-mac-os-x\" target=\"_blank\" rel=\"external\">mac下android的环境变量配置</a></h2><p>Where the Android-SDK is installed depends on how you installed it.</p>\n<h3 id=\"1-通过官网直接下载安装\"><a href=\"#1-通过官网直接下载安装\" class=\"headerlink\" title=\"1.通过官网直接下载安装\"></a>1.通过官网直接下载安装</h3><p>If you downloaded the SDK through their website and then dragged/dropped the Application to your Applications folder, it’s most likely here:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Applications/ADT/sdk (as it is in your case).</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-通过Homebrew安装\"><a href=\"#2-通过Homebrew安装\" class=\"headerlink\" title=\"2.通过Homebrew安装\"></a>2.通过Homebrew安装</h3><p>If you installed the SDK using Homebrew (brew cask install android-sdk), then it’s located here:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/Caskroom/android-sdk/&#123;YOUR_SDK_VERSION_NUMBER&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-通过Android-Studio安装\"><a href=\"#3-通过Android-Studio安装\" class=\"headerlink\" title=\"3.通过Android Studio安装\"></a>3.通过Android Studio安装</h3><p>If the SDK was installed automatically as part of Android Studio then it’s located here:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Users/&#123;YOUR_USER_NAME&#125;/Library/Android/sdk</div></pre></td></tr></table></figure></p>\n<p>知道sdk目录后<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.bash_profile</div></pre></td></tr></table></figure></p>\n<p>按向下箭头-&gt;按i进入编辑模式<br>添加<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANDROID_HOME=&#123;YOUR_PATH&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</div><div class=\"line\"></div><div class=\"line\">#注：中间用冒号隔开</div><div class=\"line\">export PATH=$PATH:<span class=\"tag\">&lt;<span class=\"name\">PATH</span> <span class=\"attr\">1</span>&gt;</span>:<span class=\"tag\">&lt;<span class=\"name\">PATH</span> <span class=\"attr\">2</span>&gt;</span>:<span class=\"tag\">&lt;<span class=\"name\">PATH</span> <span class=\"attr\">3</span>&gt;</span>:------:<span class=\"tag\">&lt;<span class=\"name\">PATH</span> <span class=\"attr\">N</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>最后：ESC后 :wq 保存并退出。<br>更新变化：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source ~/.bash_profile</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"mac下android的环境变量配置\"><a href=\"#mac下android的环境变量配置\" class=\"headerlink\" title=\"mac下android的环境变量配置\"></a><a href=\"https://stackoverflow.com/questions/19986214/setting-android-home-enviromental-variable-on-mac-os-x\" target=\"_blank\" rel=\"external\">mac下android的环境变量配置</a></h2><p>Where the Android-SDK is installed depends on how you installed it.</p>\n<h3 id=\"1-通过官网直接下载安装\"><a href=\"#1-通过官网直接下载安装\" class=\"headerlink\" title=\"1.通过官网直接下载安装\"></a>1.通过官网直接下载安装</h3><p>If you downloaded the SDK through their website and then dragged/dropped the Application to your Applications folder, it’s most likely here:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Applications/ADT/sdk (as it is in your case).</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-通过Homebrew安装\"><a href=\"#2-通过Homebrew安装\" class=\"headerlink\" title=\"2.通过Homebrew安装\"></a>2.通过Homebrew安装</h3><p>If you installed the SDK using Homebrew (brew cask install android-sdk), then it’s located here:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/local/Caskroom/android-sdk/&#123;YOUR_SDK_VERSION_NUMBER&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-通过Android-Studio安装\"><a href=\"#3-通过Android-Studio安装\" class=\"headerlink\" title=\"3.通过Android Studio安装\"></a>3.通过Android Studio安装</h3><p>If the SDK was installed automatically as part of Android Studio then it’s located here:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/Users/&#123;YOUR_USER_NAME&#125;/Library/Android/sdk</div></pre></td></tr></table></figure></p>\n<p>知道sdk目录后<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim ~/.bash_profile</div></pre></td></tr></table></figure></p>\n<p>按向下箭头-&gt;按i进入编辑模式<br>添加<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANDROID_HOME=&#123;YOUR_PATH&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</div><div class=\"line\"></div><div class=\"line\">#注：中间用冒号隔开</div><div class=\"line\">export PATH=$PATH:<span class=\"tag\">&lt;<span class=\"name\">PATH</span> <span class=\"attr\">1</span>&gt;</span>:<span class=\"tag\">&lt;<span class=\"name\">PATH</span> <span class=\"attr\">2</span>&gt;</span>:<span class=\"tag\">&lt;<span class=\"name\">PATH</span> <span class=\"attr\">3</span>&gt;</span>:------:<span class=\"tag\">&lt;<span class=\"name\">PATH</span> <span class=\"attr\">N</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>最后：ESC后 :wq 保存并退出。<br>更新变化：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source ~/.bash_profile</div></pre></td></tr></table></figure></p>\n"},{"title":"小记项目app","date":"2017-03-15T09:22:24.000Z","_content":"\n## 记账app项目\n------\n完成时间：2017.02 - 2017.02\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n[目前安卓版下载地址](https://fir.im/zehf)\n------\n## 贴一些图好了\n### 首页，本地存储，vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/1.png)\n### 用户界面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/2.png)\n### 支出记账页面，vue组件实现键盘：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/3.png)\n### 收入记账页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/4.png)\n### 调用api里的时间选择：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/5.png)\n### 备注界面，调用键盘：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/6.png)\n### 按月查看，日历是vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/7.png)\n### 饼图，canvas画圆环：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/8.png)\n### 折线图，调用官方api：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/9.png)\n### 分类操作页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/10.png)\n### 导出邮箱页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/11.png)\n### 账户安全页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/12.png)\n\n","source":"_posts/pro-note.md","raw":"---\ntitle: 小记项目app\ndate: 2017-03-15 17:22:24\ntags: project\n---\n\n## 记账app项目\n------\n完成时间：2017.02 - 2017.02\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n[目前安卓版下载地址](https://fir.im/zehf)\n------\n## 贴一些图好了\n### 首页，本地存储，vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/1.png)\n### 用户界面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/2.png)\n### 支出记账页面，vue组件实现键盘：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/3.png)\n### 收入记账页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/4.png)\n### 调用api里的时间选择：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/5.png)\n### 备注界面，调用键盘：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/6.png)\n### 按月查看，日历是vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/7.png)\n### 饼图，canvas画圆环：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/8.png)\n### 折线图，调用官方api：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/9.png)\n### 分类操作页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/10.png)\n### 导出邮箱页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/11.png)\n### 账户安全页面：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/12.png)\n\n","slug":"pro-note","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct39o0018nilwwkk3s9sc","content":"<h2 id=\"记账app项目\"><a href=\"#记账app项目\" class=\"headerlink\" title=\"记账app项目\"></a>记账app项目</h2><hr>\n<p>完成时间：2017.02 - 2017.02<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<h2 id=\"目前安卓版下载地址\"><a href=\"#目前安卓版下载地址\" class=\"headerlink\" title=\"目前安卓版下载地址\"></a><a href=\"https://fir.im/zehf\" target=\"_blank\" rel=\"external\">目前安卓版下载地址</a></h2><h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，本地存储，vue组件：\"><a href=\"#首页，本地存储，vue组件：\" class=\"headerlink\" title=\"首页，本地存储，vue组件：\"></a>首页，本地存储，vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/1.png\" alt=\"图片\"></p>\n<h3 id=\"用户界面：\"><a href=\"#用户界面：\" class=\"headerlink\" title=\"用户界面：\"></a>用户界面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/2.png\" alt=\"图片\"></p>\n<h3 id=\"支出记账页面，vue组件实现键盘：\"><a href=\"#支出记账页面，vue组件实现键盘：\" class=\"headerlink\" title=\"支出记账页面，vue组件实现键盘：\"></a>支出记账页面，vue组件实现键盘：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/3.png\" alt=\"图片\"></p>\n<h3 id=\"收入记账页面：\"><a href=\"#收入记账页面：\" class=\"headerlink\" title=\"收入记账页面：\"></a>收入记账页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/4.png\" alt=\"图片\"></p>\n<h3 id=\"调用api里的时间选择：\"><a href=\"#调用api里的时间选择：\" class=\"headerlink\" title=\"调用api里的时间选择：\"></a>调用api里的时间选择：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/5.png\" alt=\"图片\"></p>\n<h3 id=\"备注界面，调用键盘：\"><a href=\"#备注界面，调用键盘：\" class=\"headerlink\" title=\"备注界面，调用键盘：\"></a>备注界面，调用键盘：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/6.png\" alt=\"图片\"></p>\n<h3 id=\"按月查看，日历是vue组件：\"><a href=\"#按月查看，日历是vue组件：\" class=\"headerlink\" title=\"按月查看，日历是vue组件：\"></a>按月查看，日历是vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/7.png\" alt=\"图片\"></p>\n<h3 id=\"饼图，canvas画圆环：\"><a href=\"#饼图，canvas画圆环：\" class=\"headerlink\" title=\"饼图，canvas画圆环：\"></a>饼图，canvas画圆环：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/8.png\" alt=\"图片\"></p>\n<h3 id=\"折线图，调用官方api：\"><a href=\"#折线图，调用官方api：\" class=\"headerlink\" title=\"折线图，调用官方api：\"></a>折线图，调用官方api：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/9.png\" alt=\"图片\"></p>\n<h3 id=\"分类操作页面：\"><a href=\"#分类操作页面：\" class=\"headerlink\" title=\"分类操作页面：\"></a>分类操作页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/10.png\" alt=\"图片\"></p>\n<h3 id=\"导出邮箱页面：\"><a href=\"#导出邮箱页面：\" class=\"headerlink\" title=\"导出邮箱页面：\"></a>导出邮箱页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/11.png\" alt=\"图片\"></p>\n<h3 id=\"账户安全页面：\"><a href=\"#账户安全页面：\" class=\"headerlink\" title=\"账户安全页面：\"></a>账户安全页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/12.png\" alt=\"图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"记账app项目\"><a href=\"#记账app项目\" class=\"headerlink\" title=\"记账app项目\"></a>记账app项目</h2><hr>\n<p>完成时间：2017.02 - 2017.02<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<h2 id=\"目前安卓版下载地址\"><a href=\"#目前安卓版下载地址\" class=\"headerlink\" title=\"目前安卓版下载地址\"></a><a href=\"https://fir.im/zehf\" target=\"_blank\" rel=\"external\">目前安卓版下载地址</a></h2><h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，本地存储，vue组件：\"><a href=\"#首页，本地存储，vue组件：\" class=\"headerlink\" title=\"首页，本地存储，vue组件：\"></a>首页，本地存储，vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/1.png\" alt=\"图片\"></p>\n<h3 id=\"用户界面：\"><a href=\"#用户界面：\" class=\"headerlink\" title=\"用户界面：\"></a>用户界面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/2.png\" alt=\"图片\"></p>\n<h3 id=\"支出记账页面，vue组件实现键盘：\"><a href=\"#支出记账页面，vue组件实现键盘：\" class=\"headerlink\" title=\"支出记账页面，vue组件实现键盘：\"></a>支出记账页面，vue组件实现键盘：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/3.png\" alt=\"图片\"></p>\n<h3 id=\"收入记账页面：\"><a href=\"#收入记账页面：\" class=\"headerlink\" title=\"收入记账页面：\"></a>收入记账页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/4.png\" alt=\"图片\"></p>\n<h3 id=\"调用api里的时间选择：\"><a href=\"#调用api里的时间选择：\" class=\"headerlink\" title=\"调用api里的时间选择：\"></a>调用api里的时间选择：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/5.png\" alt=\"图片\"></p>\n<h3 id=\"备注界面，调用键盘：\"><a href=\"#备注界面，调用键盘：\" class=\"headerlink\" title=\"备注界面，调用键盘：\"></a>备注界面，调用键盘：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/6.png\" alt=\"图片\"></p>\n<h3 id=\"按月查看，日历是vue组件：\"><a href=\"#按月查看，日历是vue组件：\" class=\"headerlink\" title=\"按月查看，日历是vue组件：\"></a>按月查看，日历是vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/7.png\" alt=\"图片\"></p>\n<h3 id=\"饼图，canvas画圆环：\"><a href=\"#饼图，canvas画圆环：\" class=\"headerlink\" title=\"饼图，canvas画圆环：\"></a>饼图，canvas画圆环：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/8.png\" alt=\"图片\"></p>\n<h3 id=\"折线图，调用官方api：\"><a href=\"#折线图，调用官方api：\" class=\"headerlink\" title=\"折线图，调用官方api：\"></a>折线图，调用官方api：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/9.png\" alt=\"图片\"></p>\n<h3 id=\"分类操作页面：\"><a href=\"#分类操作页面：\" class=\"headerlink\" title=\"分类操作页面：\"></a>分类操作页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/10.png\" alt=\"图片\"></p>\n<h3 id=\"导出邮箱页面：\"><a href=\"#导出邮箱页面：\" class=\"headerlink\" title=\"导出邮箱页面：\"></a>导出邮箱页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/11.png\" alt=\"图片\"></p>\n<h3 id=\"账户安全页面：\"><a href=\"#账户安全页面：\" class=\"headerlink\" title=\"账户安全页面：\"></a>账户安全页面：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/12.png\" alt=\"图片\"></p>\n"},{"title":"漫画app项目","date":"2017-02-14T09:29:47.000Z","_content":"\n## 趣漫画app项目\n------\n完成时间：2016.11 - 2016.12\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n[目前安卓版下载地址](https://fir.im/5mgp)\n------\n## 贴一些图好了\n### 首页，模板渲染，ajax等等：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/1.PNG)\n### 下拉刷新：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/2.PNG)\n### 上拉加载：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/3.PNG)\n### 分类：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/4.PNG)\n### 最近更新：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/7.PNG)\n### 热门排行：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/8.PNG)\n\n### 其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\n------\n### 历史记录(localstorage)：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/5.PNG)\n### 登陆注册:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/6.PNG)\n\n------\n### 漫画分集，正序逆序，vue状态实现:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/9.PNG)\n\n\n------\n### 简易的漫画阅读器(swiper):\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/10.PNG)\n### 提示:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/11.PNG)\n### 分集:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/12.PNG)\n\n\n------\n### 搜索功能:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/13.PNG)\n\n------\n------\n\n# 动漫君app项目\n------\n由于公司业务需要另改一个，核心功能一样，就是换套UI，简单贴几个图好了\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/1.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/2.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/3.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/4.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/5.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/6.PNG)\n\n","source":"_posts/pro-comic.md","raw":"---\ntitle: 漫画app项目\ndate: 2017-02-14 17:29:47\ntags: project\n---\n\n## 趣漫画app项目\n------\n完成时间：2016.11 - 2016.12\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n[目前安卓版下载地址](https://fir.im/5mgp)\n------\n## 贴一些图好了\n### 首页，模板渲染，ajax等等：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/1.PNG)\n### 下拉刷新：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/2.PNG)\n### 上拉加载：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/3.PNG)\n### 分类：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/4.PNG)\n### 最近更新：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/7.PNG)\n### 热门排行：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/8.PNG)\n\n### 其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\n------\n### 历史记录(localstorage)：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/5.PNG)\n### 登陆注册:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/6.PNG)\n\n------\n### 漫画分集，正序逆序，vue状态实现:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/9.PNG)\n\n\n------\n### 简易的漫画阅读器(swiper):\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/10.PNG)\n### 提示:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/11.PNG)\n### 分集:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/12.PNG)\n\n\n------\n### 搜索功能:\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/13.PNG)\n\n------\n------\n\n# 动漫君app项目\n------\n由于公司业务需要另改一个，核心功能一样，就是换套UI，简单贴几个图好了\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/1.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/2.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/3.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/4.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/5.PNG)\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/6.PNG)\n\n","slug":"pro-comic","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct39r0019nilwfe660krd","content":"<h2 id=\"趣漫画app项目\"><a href=\"#趣漫画app项目\" class=\"headerlink\" title=\"趣漫画app项目\"></a>趣漫画app项目</h2><hr>\n<p>完成时间：2016.11 - 2016.12<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<h2 id=\"目前安卓版下载地址\"><a href=\"#目前安卓版下载地址\" class=\"headerlink\" title=\"目前安卓版下载地址\"></a><a href=\"https://fir.im/5mgp\" target=\"_blank\" rel=\"external\">目前安卓版下载地址</a></h2><h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，模板渲染，ajax等等：\"><a href=\"#首页，模板渲染，ajax等等：\" class=\"headerlink\" title=\"首页，模板渲染，ajax等等：\"></a>首页，模板渲染，ajax等等：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/1.PNG\" alt=\"图片\"></p>\n<h3 id=\"下拉刷新：\"><a href=\"#下拉刷新：\" class=\"headerlink\" title=\"下拉刷新：\"></a>下拉刷新：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/2.PNG\" alt=\"图片\"></p>\n<h3 id=\"上拉加载：\"><a href=\"#上拉加载：\" class=\"headerlink\" title=\"上拉加载：\"></a>上拉加载：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/3.PNG\" alt=\"图片\"></p>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/4.PNG\" alt=\"图片\"></p>\n<h3 id=\"最近更新：\"><a href=\"#最近更新：\" class=\"headerlink\" title=\"最近更新：\"></a>最近更新：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/7.PNG\" alt=\"图片\"></p>\n<h3 id=\"热门排行：\"><a href=\"#热门排行：\" class=\"headerlink\" title=\"热门排行：\"></a>热门排行：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/8.PNG\" alt=\"图片\"></p>\n<h3 id=\"其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\"><a href=\"#其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\" class=\"headerlink\" title=\"其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\"></a>其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了</h3><hr>\n<h3 id=\"历史记录-localstorage-：\"><a href=\"#历史记录-localstorage-：\" class=\"headerlink\" title=\"历史记录(localstorage)：\"></a>历史记录(localstorage)：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/5.PNG\" alt=\"图片\"></p>\n<h3 id=\"登陆注册\"><a href=\"#登陆注册\" class=\"headerlink\" title=\"登陆注册:\"></a>登陆注册:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/6.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"漫画分集，正序逆序，vue状态实现\"><a href=\"#漫画分集，正序逆序，vue状态实现\" class=\"headerlink\" title=\"漫画分集，正序逆序，vue状态实现:\"></a>漫画分集，正序逆序，vue状态实现:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/9.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"简易的漫画阅读器-swiper\"><a href=\"#简易的漫画阅读器-swiper\" class=\"headerlink\" title=\"简易的漫画阅读器(swiper):\"></a>简易的漫画阅读器(swiper):</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/10.PNG\" alt=\"图片\"></p>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示:\"></a>提示:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/11.PNG\" alt=\"图片\"></p>\n<h3 id=\"分集\"><a href=\"#分集\" class=\"headerlink\" title=\"分集:\"></a>分集:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/12.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能:\"></a>搜索功能:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/13.PNG\" alt=\"图片\"></p>\n<h2 id=\"——\"><a href=\"#——\" class=\"headerlink\" title=\"——\"></a>——</h2><h1 id=\"动漫君app项目\"><a href=\"#动漫君app项目\" class=\"headerlink\" title=\"动漫君app项目\"></a>动漫君app项目</h1><hr>\n<p>由于公司业务需要另改一个，核心功能一样，就是换套UI，简单贴几个图好了<br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/1.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/2.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/3.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/4.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/5.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/6.PNG\" alt=\"图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"趣漫画app项目\"><a href=\"#趣漫画app项目\" class=\"headerlink\" title=\"趣漫画app项目\"></a>趣漫画app项目</h2><hr>\n<p>完成时间：2016.11 - 2016.12<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<h2 id=\"目前安卓版下载地址\"><a href=\"#目前安卓版下载地址\" class=\"headerlink\" title=\"目前安卓版下载地址\"></a><a href=\"https://fir.im/5mgp\" target=\"_blank\" rel=\"external\">目前安卓版下载地址</a></h2><h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，模板渲染，ajax等等：\"><a href=\"#首页，模板渲染，ajax等等：\" class=\"headerlink\" title=\"首页，模板渲染，ajax等等：\"></a>首页，模板渲染，ajax等等：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/1.PNG\" alt=\"图片\"></p>\n<h3 id=\"下拉刷新：\"><a href=\"#下拉刷新：\" class=\"headerlink\" title=\"下拉刷新：\"></a>下拉刷新：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/2.PNG\" alt=\"图片\"></p>\n<h3 id=\"上拉加载：\"><a href=\"#上拉加载：\" class=\"headerlink\" title=\"上拉加载：\"></a>上拉加载：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/3.PNG\" alt=\"图片\"></p>\n<h3 id=\"分类：\"><a href=\"#分类：\" class=\"headerlink\" title=\"分类：\"></a>分类：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/4.PNG\" alt=\"图片\"></p>\n<h3 id=\"最近更新：\"><a href=\"#最近更新：\" class=\"headerlink\" title=\"最近更新：\"></a>最近更新：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/7.PNG\" alt=\"图片\"></p>\n<h3 id=\"热门排行：\"><a href=\"#热门排行：\" class=\"headerlink\" title=\"热门排行：\"></a>热门排行：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/8.PNG\" alt=\"图片\"></p>\n<h3 id=\"其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\"><a href=\"#其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\" class=\"headerlink\" title=\"其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了\"></a>其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了</h3><hr>\n<h3 id=\"历史记录-localstorage-：\"><a href=\"#历史记录-localstorage-：\" class=\"headerlink\" title=\"历史记录(localstorage)：\"></a>历史记录(localstorage)：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/5.PNG\" alt=\"图片\"></p>\n<h3 id=\"登陆注册\"><a href=\"#登陆注册\" class=\"headerlink\" title=\"登陆注册:\"></a>登陆注册:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/6.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"漫画分集，正序逆序，vue状态实现\"><a href=\"#漫画分集，正序逆序，vue状态实现\" class=\"headerlink\" title=\"漫画分集，正序逆序，vue状态实现:\"></a>漫画分集，正序逆序，vue状态实现:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/9.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"简易的漫画阅读器-swiper\"><a href=\"#简易的漫画阅读器-swiper\" class=\"headerlink\" title=\"简易的漫画阅读器(swiper):\"></a>简易的漫画阅读器(swiper):</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/10.PNG\" alt=\"图片\"></p>\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示:\"></a>提示:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/11.PNG\" alt=\"图片\"></p>\n<h3 id=\"分集\"><a href=\"#分集\" class=\"headerlink\" title=\"分集:\"></a>分集:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/12.PNG\" alt=\"图片\"></p>\n<hr>\n<h3 id=\"搜索功能\"><a href=\"#搜索功能\" class=\"headerlink\" title=\"搜索功能:\"></a>搜索功能:</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/13.PNG\" alt=\"图片\"></p>\n<h2 id=\"——\"><a href=\"#——\" class=\"headerlink\" title=\"——\"></a>——</h2><h1 id=\"动漫君app项目\"><a href=\"#动漫君app项目\" class=\"headerlink\" title=\"动漫君app项目\"></a>动漫君app项目</h1><hr>\n<p>由于公司业务需要另改一个，核心功能一样，就是换套UI，简单贴几个图好了<br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/1.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/2.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/3.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/4.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/5.PNG\" alt=\"图片\"><br><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/6.PNG\" alt=\"图片\"></p>\n"},{"title":"小说app项目","date":"2017-02-15T02:33:19.000Z","_content":"\n## 一本小说app项目\n------\n完成时间：2017.01 - 2017.01\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n[目前安卓版下载地址](https://fir.im/mejd)\n------\n## 贴一些图好了\n### 首页，本地存储，vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/1.PNG)\n### 置顶删除功能通过vue状态实现：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/2.PNG)\n### 搜索功能：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/3.PNG)\n### 小说分类：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/4.PNG)\n### 小说详情，下载调用api：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/5.PNG)\n### 阅读器，调用官方模块，菜单实现是再open一个frame：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/6.PNG)","source":"_posts/pro-novel.md","raw":"---\ntitle: 小说app项目\ndate: 2017-02-15 10:33:19\ntags: project\n---\n\n## 一本小说app项目\n------\n完成时间：2017.01 - 2017.01\n核心技术：apicloud,jquery,Aui,vue,artTemplate\n[目前安卓版下载地址](https://fir.im/mejd)\n------\n## 贴一些图好了\n### 首页，本地存储，vue组件：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/1.PNG)\n### 置顶删除功能通过vue状态实现：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/2.PNG)\n### 搜索功能：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/3.PNG)\n### 小说分类：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/4.PNG)\n### 小说详情，下载调用api：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/5.PNG)\n### 阅读器，调用官方模块，菜单实现是再open一个frame：\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/6.PNG)","slug":"pro-novel","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct39u001anilwixmoj3vy","content":"<h2 id=\"一本小说app项目\"><a href=\"#一本小说app项目\" class=\"headerlink\" title=\"一本小说app项目\"></a>一本小说app项目</h2><hr>\n<p>完成时间：2017.01 - 2017.01<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<h2 id=\"目前安卓版下载地址\"><a href=\"#目前安卓版下载地址\" class=\"headerlink\" title=\"目前安卓版下载地址\"></a><a href=\"https://fir.im/mejd\" target=\"_blank\" rel=\"external\">目前安卓版下载地址</a></h2><h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，本地存储，vue组件：\"><a href=\"#首页，本地存储，vue组件：\" class=\"headerlink\" title=\"首页，本地存储，vue组件：\"></a>首页，本地存储，vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/1.PNG\" alt=\"图片\"></p>\n<h3 id=\"置顶删除功能通过vue状态实现：\"><a href=\"#置顶删除功能通过vue状态实现：\" class=\"headerlink\" title=\"置顶删除功能通过vue状态实现：\"></a>置顶删除功能通过vue状态实现：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/2.PNG\" alt=\"图片\"></p>\n<h3 id=\"搜索功能：\"><a href=\"#搜索功能：\" class=\"headerlink\" title=\"搜索功能：\"></a>搜索功能：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/3.PNG\" alt=\"图片\"></p>\n<h3 id=\"小说分类：\"><a href=\"#小说分类：\" class=\"headerlink\" title=\"小说分类：\"></a>小说分类：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/4.PNG\" alt=\"图片\"></p>\n<h3 id=\"小说详情，下载调用api：\"><a href=\"#小说详情，下载调用api：\" class=\"headerlink\" title=\"小说详情，下载调用api：\"></a>小说详情，下载调用api：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/5.PNG\" alt=\"图片\"></p>\n<h3 id=\"阅读器，调用官方模块，菜单实现是再open一个frame：\"><a href=\"#阅读器，调用官方模块，菜单实现是再open一个frame：\" class=\"headerlink\" title=\"阅读器，调用官方模块，菜单实现是再open一个frame：\"></a>阅读器，调用官方模块，菜单实现是再open一个frame：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/6.PNG\" alt=\"图片\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一本小说app项目\"><a href=\"#一本小说app项目\" class=\"headerlink\" title=\"一本小说app项目\"></a>一本小说app项目</h2><hr>\n<p>完成时间：2017.01 - 2017.01<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>\n<h2 id=\"目前安卓版下载地址\"><a href=\"#目前安卓版下载地址\" class=\"headerlink\" title=\"目前安卓版下载地址\"></a><a href=\"https://fir.im/mejd\" target=\"_blank\" rel=\"external\">目前安卓版下载地址</a></h2><h2 id=\"贴一些图好了\"><a href=\"#贴一些图好了\" class=\"headerlink\" title=\"贴一些图好了\"></a>贴一些图好了</h2><h3 id=\"首页，本地存储，vue组件：\"><a href=\"#首页，本地存储，vue组件：\" class=\"headerlink\" title=\"首页，本地存储，vue组件：\"></a>首页，本地存储，vue组件：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/1.PNG\" alt=\"图片\"></p>\n<h3 id=\"置顶删除功能通过vue状态实现：\"><a href=\"#置顶删除功能通过vue状态实现：\" class=\"headerlink\" title=\"置顶删除功能通过vue状态实现：\"></a>置顶删除功能通过vue状态实现：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/2.PNG\" alt=\"图片\"></p>\n<h3 id=\"搜索功能：\"><a href=\"#搜索功能：\" class=\"headerlink\" title=\"搜索功能：\"></a>搜索功能：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/3.PNG\" alt=\"图片\"></p>\n<h3 id=\"小说分类：\"><a href=\"#小说分类：\" class=\"headerlink\" title=\"小说分类：\"></a>小说分类：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/4.PNG\" alt=\"图片\"></p>\n<h3 id=\"小说详情，下载调用api：\"><a href=\"#小说详情，下载调用api：\" class=\"headerlink\" title=\"小说详情，下载调用api：\"></a>小说详情，下载调用api：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/5.PNG\" alt=\"图片\"></p>\n<h3 id=\"阅读器，调用官方模块，菜单实现是再open一个frame：\"><a href=\"#阅读器，调用官方模块，菜单实现是再open一个frame：\" class=\"headerlink\" title=\"阅读器，调用官方模块，菜单实现是再open一个frame：\"></a>阅读器，调用官方模块，菜单实现是再open一个frame：</h3><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/6.PNG\" alt=\"图片\"></p>\n"},{"title":"关于时间的JS","date":"2017-01-16T09:52:20.000Z","_content":"\n时间函数加减 2015-10-23 \n```javascript\nfunction addByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate + num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n\nfunction reduceByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate - num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n```\n\nhttp://www.cnblogs.com/carekee/articles/1678041.html\nJs获取当前日期时间及其它操作\n\n```javascript\nvar myDate = new Date();\nmyDate.getYear();        //获取当前年份(2位)\nmyDate.getFullYear();    //获取完整的年份(4位,1970-????)\nmyDate.getMonth();       //获取当前月份(0-11,0代表1月)\nmyDate.getDate();        //获取当前日(1-31)\nmyDate.getDay();         //获取当前星期X(0-6,0代表星期天)\nmyDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)\nmyDate.getHours();       //获取当前小时数(0-23)\nmyDate.getMinutes();     //获取当前分钟数(0-59)\nmyDate.getSeconds();     //获取当前秒数(0-59)\nmyDate.getMilliseconds();    //获取当前毫秒数(0-999)\nmyDate.toLocaleDateString();     //获取当前日期\nvar mytime=myDate.toLocaleTimeString();     //获取当前时间\nmyDate.toLocaleString( );        //获取日期与时间\n```\n \n\n日期时间脚本库方法列表\n```javascript\nDate.prototype.isLeapYear 判断闰年\nDate.prototype.Format 日期格式化\nDate.prototype.DateAdd 日期计算\nDate.prototype.DateDiff 比较日期差\nDate.prototype.toString 日期转字符串\nDate.prototype.toArray 日期分割为数组\nDate.prototype.DatePart 取日期的部分信息\nDate.prototype.MaxDayOfDate 取日期所在月的最大天数\nDate.prototype.WeekNumOfYear 判断日期所在年的第几周\nStringToDate 字符串转日期型\nIsValidDate 验证日期有效性\nCheckDateTime 完整日期时间检查\ndaysBetween 日期天数差\n\njs代码：\n\n//---------------------------------------------------  \n// 判断闰年  \n//---------------------------------------------------  \n\nDate.prototype.isLeapYear = function()   \n{   \n    return (0==this.getYear()%4&&((this.getYear()%100!=0)||(this.getYear()%400==0)));   \n}   \n\n\n//---------------------------------------------------  \n// 日期格式化  \n// 格式 YYYY/yyyy/YY/yy 表示年份  \n// MM/M 月份  \n// W/w 星期  \n// dd/DD/d/D 日期  \n// hh/HH/h/H 时间  \n// mm/m 分钟  \n// ss/SS/s/S 秒  \n//---------------------------------------------------\n\nDate.prototype.Format = function(formatStr)   \n{   \n    var str = formatStr;   \n    var Week = ['日','一','二','三','四','五','六'];  \n  \n    str=str.replace(/yyyy|YYYY/,this.getFullYear());   \n    str=str.replace(/yy|YY/,(this.getYear() % 100)>9?(this.getYear() % 100).toString():'0' + (this.getYear() % 100));   \n  \n    str=str.replace(/MM/,this.getMonth()>9?this.getMonth().toString():'0' + this.getMonth());   \n    str=str.replace(/M/g,this.getMonth());   \n  \n    str=str.replace(/w|W/g,Week[this.getDay()]);   \n  \n    str=str.replace(/dd|DD/,this.getDate()>9?this.getDate().toString():'0' + this.getDate());   \n    str=str.replace(/d|D/g,this.getDate());   \n  \n    str=str.replace(/hh|HH/,this.getHours()>9?this.getHours().toString():'0' + this.getHours());   \n    str=str.replace(/h|H/g,this.getHours());   \n    str=str.replace(/mm/,this.getMinutes()>9?this.getMinutes().toString():'0' + this.getMinutes());   \n    str=str.replace(/m/g,this.getMinutes());   \n  \n    str=str.replace(/ss|SS/,this.getSeconds()>9?this.getSeconds().toString():'0' + this.getSeconds());   \n    str=str.replace(/s|S/g,this.getSeconds());   \n  \n    return str;   \n}   \n\n\n//+---------------------------------------------------  \n//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   \n//+---------------------------------------------------  \n\nfunction daysBetween(DateOne,DateTwo)  \n{   \n    var OneMonth = DateOne.substring(5,DateOne.lastIndexOf ('-'));  \n    var OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf ('-')+1);  \n    var OneYear = DateOne.substring(0,DateOne.indexOf ('-'));  \n  \n    var TwoMonth = DateTwo.substring(5,DateTwo.lastIndexOf ('-'));  \n    var TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf ('-')+1);  \n    var TwoYear = DateTwo.substring(0,DateTwo.indexOf ('-'));  \n  \n    var cha=((Date.parse(OneMonth+'/'+OneDay+'/'+OneYear)- Date.parse(TwoMonth+'/'+TwoDay+'/'+TwoYear))/86400000);   \n    return Math.abs(cha);  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期计算  \n//+---------------------------------------------------  \n\nDate.prototype.DateAdd = function(strInterval, Number) {   \n    var dtTmp = this;  \n    switch (strInterval) {   \n        case 's' :return new Date(Date.parse(dtTmp) + (1000 * Number));  \n        case 'n' :return new Date(Date.parse(dtTmp) + (60000 * Number));  \n        case 'h' :return new Date(Date.parse(dtTmp) + (3600000 * Number));  \n        case 'd' :return new Date(Date.parse(dtTmp) + (86400000 * Number));  \n        case 'w' :return new Date(Date.parse(dtTmp) + ((86400000 * 7) * Number));  \n        case 'q' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number*3, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'm' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'y' :return new Date((dtTmp.getFullYear() + Number), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n    }  \n} \n\n  \n//+---------------------------------------------------  \n//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  \n//+---------------------------------------------------  \n\nDate.prototype.DateDiff = function(strInterval, dtEnd) {   \n    var dtStart = this;  \n    if (typeof dtEnd == 'string' )//如果是字符串转换为日期型  \n    {   \n        dtEnd = StringToDate(dtEnd);  \n    }  \n    switch (strInterval) {   \n        case 's' :return parseInt((dtEnd - dtStart) / 1000);  \n        case 'n' :return parseInt((dtEnd - dtStart) / 60000);  \n        case 'h' :return parseInt((dtEnd - dtStart) / 3600000);  \n        case 'd' :return parseInt((dtEnd - dtStart) / 86400000);  \n        case 'w' :return parseInt((dtEnd - dtStart) / (86400000 * 7));  \n        case 'm' :return (dtEnd.getMonth()+1)+((dtEnd.getFullYear()-dtStart.getFullYear())*12) - (dtStart.getMonth()+1);  \n        case 'y' :return dtEnd.getFullYear() - dtStart.getFullYear();  \n    }  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期输出字符串，重载了系统的toString方法  \n//+---------------------------------------------------  \nDate.prototype.toString = function(showWeek)  \n{   \n    var myDate= this;  \n    var str = myDate.toLocaleDateString();  \n    if (showWeek)  \n    {   \n        var Week = ['日','一','二','三','四','五','六'];  \n        str += ' 星期' + Week[myDate.getDay()];  \n    }  \n    return str;  \n}  \n\n//+---------------------------------------------------  \n//| 日期合法性验证  \n//| 格式为：YYYY-MM-DD或YYYY/MM/DD  \n//+---------------------------------------------------  \nfunction IsValidDate(DateStr)   \n{   \n    var sDate=DateStr.replace(/(^\\s+|\\s+$)/g,''); //去两边空格;   \n    if(sDate=='') return true;   \n    //如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   \n    //数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   \n    var s = sDate.replace(/[\\d]{ 4,4 }[\\-/]{ 1 }[\\d]{ 1,2 }[\\-/]{ 1 }[\\d]{ 1,2 }/g,'');   \n    if (s=='') //说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   \n    {   \n        var t=new Date(sDate.replace(/\\-/g,'/'));   \n        var ar = sDate.split(/[-/:]/);   \n        if(ar[0] != t.getYear() || ar[1] != t.getMonth()+1 || ar[2] != t.getDate())   \n        {   \n            //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n            return false;   \n        }   \n    }   \n    else   \n    {   \n        //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n        return false;   \n    }   \n    return true;   \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期时间检查  \n//| 格式为：YYYY-MM-DD HH:MM:SS  \n//+---------------------------------------------------  \n\nfunction CheckDateTime(str)  \n{   \n    var reg = /^(\\d+)-(\\d{ 1,2 })-(\\d{ 1,2 }) (\\d{ 1,2 }):(\\d{ 1,2 }):(\\d{ 1,2 })$/;   \n    var r = str.match(reg);   \n    if(r==null)return false;   \n    r[2]=r[2]-1;   \n    var d= new Date(r[1],r[2],r[3],r[4],r[5],r[6]);   \n    if(d.getFullYear()!=r[1])return false;   \n    if(d.getMonth()!=r[2])return false;   \n    if(d.getDate()!=r[3])return false;   \n    if(d.getHours()!=r[4])return false;   \n    if(d.getMinutes()!=r[5])return false;   \n    if(d.getSeconds()!=r[6])return false;   \n    return true;   \n}   \n\n//+---------------------------------------------------  \n//| 把日期分割成数组  \n//+---------------------------------------------------  \n\nDate.prototype.toArray = function()  \n{   \n    var myDate = this;  \n    var myArray = Array();  \n    myArray[0] = myDate.getFullYear();  \n    myArray[1] = myDate.getMonth();  \n    myArray[2] = myDate.getDate();  \n    myArray[3] = myDate.getHours();  \n    myArray[4] = myDate.getMinutes();  \n    myArray[5] = myDate.getSeconds();  \n    return myArray;  \n}  \n\n//+---------------------------------------------------  \n//| 取得日期数据信息  \n//| 参数 interval 表示数据类型  \n//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  \n//+--------------------------------------------------- \n\nDate.prototype.DatePart = function(interval)  \n{   \n    var myDate = this;  \n    var partStr='';  \n    var Week = ['日','一','二','三','四','五','六'];  \n    switch (interval)  \n    {   \n        case 'y' :partStr = myDate.getFullYear();break;  \n        case 'm' :partStr = myDate.getMonth()+1;break;  \n        case 'd' :partStr = myDate.getDate();break;  \n        case 'w' :partStr = Week[myDate.getDay()];break;  \n        case 'ww' :partStr = myDate.WeekNumOfYear();break;  \n        case 'h' :partStr = myDate.getHours();break;  \n        case 'n' :partStr = myDate.getMinutes();break;  \n        case 's' :partStr = myDate.getSeconds();break;  \n    }  \n    return partStr;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在月的最大天数  \n//+--------------------------------------------------- \n\nDate.prototype.MaxDayOfDate = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var date1 = (new Date(ary[0],ary[1]+1,1));  \n    var date2 = date1.dateAdd(1,'m',1);  \n    var result = dateDiff(date1.Format('yyyy-MM-dd'),date2.Format('yyyy-MM-dd'));  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在周是一年中的第几周  \n//+--------------------------------------------------- \n\nDate.prototype.WeekNumOfYear = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var year = ary[0];  \n    var month = ary[1]+1;  \n    var day = ary[2];  \n    document.write('< script language=VBScript\\> \\n');  \n    document.write('myDate = Datue(''+month+'-'+day+'-'+year+'') \\n');  \n    document.write('result = DatePart('ww', myDate) \\n');  \n    document.write(' \\n');  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 字符串转成日期类型   \n//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  \n//+---------------------------------------------------\n \nfunction StringToDate(DateStr)  \n{   \n  \n    var converted = Date.parse(DateStr);  \n    var myDate = new Date(converted);  \n    if (isNaN(myDate))  \n    {   \n        //var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  \n        var arys= DateStr.split('-');  \n        myDate = new Date(arys[0],--arys[1],arys[2]);  \n    }  \n    return myDate;  \n}  \n```\n \n\n若要显示:当前日期加时间(如:2009-06-12 12:00)\n\n```javascript\nfunction CurentTime()\n    { \n        var now = new Date();\n       \n        var year = now.getFullYear();       //年\n        var month = now.getMonth() + 1;     //月\n        var day = now.getDate();            //日\n       \n        var hh = now.getHours();            //时\n        var mm = now.getMinutes();          //分\n       \n        var clock = year + \"-\";\n       \n        if(month < 10)\n            clock += \"0\";\n       \n        clock += month + \"-\";\n       \n        if(day < 10)\n            clock += \"0\";\n           \n        clock += day + \" \";\n       \n        if(hh < 10)\n            clock += \"0\";\n           \n        clock += hh + \":\";\n        if (mm < 10) clock += '0'; \n        clock += mm; \n        return(clock); \n    } \n```","source":"_posts/time.md","raw":"---\ntitle: 关于时间的JS\ndate: 2017-01-16 17:52:20\ntags: javascript\n---\n\n时间函数加减 2015-10-23 \n```javascript\nfunction addByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate + num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n\nfunction reduceByTransDate(dateParameter, num) {\n    var translateDate = \"\", dateString = \"\", monthString = \"\", dayString = \"\";\n    translateDate = dateParameter.replace(\"-\", \"/\").replace(\"-\", \"/\");\n    var newDate = new Date(translateDate);\n    newDate = newDate.valueOf();\n    newDate = newDate - num * 24 * 60 * 60 * 1000;\n    newDate = new Date(newDate);\n    //如果月份长度少于2，则前加 0 补位\n    if ((newDate.getMonth() + 1).toString().length == 1) {\n        monthString = 0 + \"\" + (newDate.getMonth() + 1).toString();\n    } else {\n        monthString = (newDate.getMonth() + 1).toString();\n    }\n    //如果天数长度少于2，则前加 0 补位\n    if (newDate.getDate().toString().length == 1) {\n        dayString = 0 + \"\" + newDate.getDate().toString();\n    } else {\n        dayString = newDate.getDate().toString();\n    }\n    dateString = newDate.getFullYear() + \"-\" + monthString + \"-\" + dayString;\n    return dateString;\n}\n```\n\nhttp://www.cnblogs.com/carekee/articles/1678041.html\nJs获取当前日期时间及其它操作\n\n```javascript\nvar myDate = new Date();\nmyDate.getYear();        //获取当前年份(2位)\nmyDate.getFullYear();    //获取完整的年份(4位,1970-????)\nmyDate.getMonth();       //获取当前月份(0-11,0代表1月)\nmyDate.getDate();        //获取当前日(1-31)\nmyDate.getDay();         //获取当前星期X(0-6,0代表星期天)\nmyDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)\nmyDate.getHours();       //获取当前小时数(0-23)\nmyDate.getMinutes();     //获取当前分钟数(0-59)\nmyDate.getSeconds();     //获取当前秒数(0-59)\nmyDate.getMilliseconds();    //获取当前毫秒数(0-999)\nmyDate.toLocaleDateString();     //获取当前日期\nvar mytime=myDate.toLocaleTimeString();     //获取当前时间\nmyDate.toLocaleString( );        //获取日期与时间\n```\n \n\n日期时间脚本库方法列表\n```javascript\nDate.prototype.isLeapYear 判断闰年\nDate.prototype.Format 日期格式化\nDate.prototype.DateAdd 日期计算\nDate.prototype.DateDiff 比较日期差\nDate.prototype.toString 日期转字符串\nDate.prototype.toArray 日期分割为数组\nDate.prototype.DatePart 取日期的部分信息\nDate.prototype.MaxDayOfDate 取日期所在月的最大天数\nDate.prototype.WeekNumOfYear 判断日期所在年的第几周\nStringToDate 字符串转日期型\nIsValidDate 验证日期有效性\nCheckDateTime 完整日期时间检查\ndaysBetween 日期天数差\n\njs代码：\n\n//---------------------------------------------------  \n// 判断闰年  \n//---------------------------------------------------  \n\nDate.prototype.isLeapYear = function()   \n{   \n    return (0==this.getYear()%4&&((this.getYear()%100!=0)||(this.getYear()%400==0)));   \n}   \n\n\n//---------------------------------------------------  \n// 日期格式化  \n// 格式 YYYY/yyyy/YY/yy 表示年份  \n// MM/M 月份  \n// W/w 星期  \n// dd/DD/d/D 日期  \n// hh/HH/h/H 时间  \n// mm/m 分钟  \n// ss/SS/s/S 秒  \n//---------------------------------------------------\n\nDate.prototype.Format = function(formatStr)   \n{   \n    var str = formatStr;   \n    var Week = ['日','一','二','三','四','五','六'];  \n  \n    str=str.replace(/yyyy|YYYY/,this.getFullYear());   \n    str=str.replace(/yy|YY/,(this.getYear() % 100)>9?(this.getYear() % 100).toString():'0' + (this.getYear() % 100));   \n  \n    str=str.replace(/MM/,this.getMonth()>9?this.getMonth().toString():'0' + this.getMonth());   \n    str=str.replace(/M/g,this.getMonth());   \n  \n    str=str.replace(/w|W/g,Week[this.getDay()]);   \n  \n    str=str.replace(/dd|DD/,this.getDate()>9?this.getDate().toString():'0' + this.getDate());   \n    str=str.replace(/d|D/g,this.getDate());   \n  \n    str=str.replace(/hh|HH/,this.getHours()>9?this.getHours().toString():'0' + this.getHours());   \n    str=str.replace(/h|H/g,this.getHours());   \n    str=str.replace(/mm/,this.getMinutes()>9?this.getMinutes().toString():'0' + this.getMinutes());   \n    str=str.replace(/m/g,this.getMinutes());   \n  \n    str=str.replace(/ss|SS/,this.getSeconds()>9?this.getSeconds().toString():'0' + this.getSeconds());   \n    str=str.replace(/s|S/g,this.getSeconds());   \n  \n    return str;   \n}   \n\n\n//+---------------------------------------------------  \n//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   \n//+---------------------------------------------------  \n\nfunction daysBetween(DateOne,DateTwo)  \n{   \n    var OneMonth = DateOne.substring(5,DateOne.lastIndexOf ('-'));  \n    var OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf ('-')+1);  \n    var OneYear = DateOne.substring(0,DateOne.indexOf ('-'));  \n  \n    var TwoMonth = DateTwo.substring(5,DateTwo.lastIndexOf ('-'));  \n    var TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf ('-')+1);  \n    var TwoYear = DateTwo.substring(0,DateTwo.indexOf ('-'));  \n  \n    var cha=((Date.parse(OneMonth+'/'+OneDay+'/'+OneYear)- Date.parse(TwoMonth+'/'+TwoDay+'/'+TwoYear))/86400000);   \n    return Math.abs(cha);  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期计算  \n//+---------------------------------------------------  \n\nDate.prototype.DateAdd = function(strInterval, Number) {   \n    var dtTmp = this;  \n    switch (strInterval) {   \n        case 's' :return new Date(Date.parse(dtTmp) + (1000 * Number));  \n        case 'n' :return new Date(Date.parse(dtTmp) + (60000 * Number));  \n        case 'h' :return new Date(Date.parse(dtTmp) + (3600000 * Number));  \n        case 'd' :return new Date(Date.parse(dtTmp) + (86400000 * Number));  \n        case 'w' :return new Date(Date.parse(dtTmp) + ((86400000 * 7) * Number));  \n        case 'q' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number*3, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'm' :return new Date(dtTmp.getFullYear(), (dtTmp.getMonth()) + Number, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n        case 'y' :return new Date((dtTmp.getFullYear() + Number), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  \n    }  \n} \n\n  \n//+---------------------------------------------------  \n//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  \n//+---------------------------------------------------  \n\nDate.prototype.DateDiff = function(strInterval, dtEnd) {   \n    var dtStart = this;  \n    if (typeof dtEnd == 'string' )//如果是字符串转换为日期型  \n    {   \n        dtEnd = StringToDate(dtEnd);  \n    }  \n    switch (strInterval) {   \n        case 's' :return parseInt((dtEnd - dtStart) / 1000);  \n        case 'n' :return parseInt((dtEnd - dtStart) / 60000);  \n        case 'h' :return parseInt((dtEnd - dtStart) / 3600000);  \n        case 'd' :return parseInt((dtEnd - dtStart) / 86400000);  \n        case 'w' :return parseInt((dtEnd - dtStart) / (86400000 * 7));  \n        case 'm' :return (dtEnd.getMonth()+1)+((dtEnd.getFullYear()-dtStart.getFullYear())*12) - (dtStart.getMonth()+1);  \n        case 'y' :return dtEnd.getFullYear() - dtStart.getFullYear();  \n    }  \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期输出字符串，重载了系统的toString方法  \n//+---------------------------------------------------  \nDate.prototype.toString = function(showWeek)  \n{   \n    var myDate= this;  \n    var str = myDate.toLocaleDateString();  \n    if (showWeek)  \n    {   \n        var Week = ['日','一','二','三','四','五','六'];  \n        str += ' 星期' + Week[myDate.getDay()];  \n    }  \n    return str;  \n}  \n\n//+---------------------------------------------------  \n//| 日期合法性验证  \n//| 格式为：YYYY-MM-DD或YYYY/MM/DD  \n//+---------------------------------------------------  \nfunction IsValidDate(DateStr)   \n{   \n    var sDate=DateStr.replace(/(^\\s+|\\s+$)/g,''); //去两边空格;   \n    if(sDate=='') return true;   \n    //如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   \n    //数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   \n    var s = sDate.replace(/[\\d]{ 4,4 }[\\-/]{ 1 }[\\d]{ 1,2 }[\\-/]{ 1 }[\\d]{ 1,2 }/g,'');   \n    if (s=='') //说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   \n    {   \n        var t=new Date(sDate.replace(/\\-/g,'/'));   \n        var ar = sDate.split(/[-/:]/);   \n        if(ar[0] != t.getYear() || ar[1] != t.getMonth()+1 || ar[2] != t.getDate())   \n        {   \n            //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n            return false;   \n        }   \n    }   \n    else   \n    {   \n        //alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   \n        return false;   \n    }   \n    return true;   \n}  \n\n  \n//+---------------------------------------------------  \n//| 日期时间检查  \n//| 格式为：YYYY-MM-DD HH:MM:SS  \n//+---------------------------------------------------  \n\nfunction CheckDateTime(str)  \n{   \n    var reg = /^(\\d+)-(\\d{ 1,2 })-(\\d{ 1,2 }) (\\d{ 1,2 }):(\\d{ 1,2 }):(\\d{ 1,2 })$/;   \n    var r = str.match(reg);   \n    if(r==null)return false;   \n    r[2]=r[2]-1;   \n    var d= new Date(r[1],r[2],r[3],r[4],r[5],r[6]);   \n    if(d.getFullYear()!=r[1])return false;   \n    if(d.getMonth()!=r[2])return false;   \n    if(d.getDate()!=r[3])return false;   \n    if(d.getHours()!=r[4])return false;   \n    if(d.getMinutes()!=r[5])return false;   \n    if(d.getSeconds()!=r[6])return false;   \n    return true;   \n}   \n\n//+---------------------------------------------------  \n//| 把日期分割成数组  \n//+---------------------------------------------------  \n\nDate.prototype.toArray = function()  \n{   \n    var myDate = this;  \n    var myArray = Array();  \n    myArray[0] = myDate.getFullYear();  \n    myArray[1] = myDate.getMonth();  \n    myArray[2] = myDate.getDate();  \n    myArray[3] = myDate.getHours();  \n    myArray[4] = myDate.getMinutes();  \n    myArray[5] = myDate.getSeconds();  \n    return myArray;  \n}  \n\n//+---------------------------------------------------  \n//| 取得日期数据信息  \n//| 参数 interval 表示数据类型  \n//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  \n//+--------------------------------------------------- \n\nDate.prototype.DatePart = function(interval)  \n{   \n    var myDate = this;  \n    var partStr='';  \n    var Week = ['日','一','二','三','四','五','六'];  \n    switch (interval)  \n    {   \n        case 'y' :partStr = myDate.getFullYear();break;  \n        case 'm' :partStr = myDate.getMonth()+1;break;  \n        case 'd' :partStr = myDate.getDate();break;  \n        case 'w' :partStr = Week[myDate.getDay()];break;  \n        case 'ww' :partStr = myDate.WeekNumOfYear();break;  \n        case 'h' :partStr = myDate.getHours();break;  \n        case 'n' :partStr = myDate.getMinutes();break;  \n        case 's' :partStr = myDate.getSeconds();break;  \n    }  \n    return partStr;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在月的最大天数  \n//+--------------------------------------------------- \n\nDate.prototype.MaxDayOfDate = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var date1 = (new Date(ary[0],ary[1]+1,1));  \n    var date2 = date1.dateAdd(1,'m',1);  \n    var result = dateDiff(date1.Format('yyyy-MM-dd'),date2.Format('yyyy-MM-dd'));  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 取得当前日期所在周是一年中的第几周  \n//+--------------------------------------------------- \n\nDate.prototype.WeekNumOfYear = function()  \n{   \n    var myDate = this;  \n    var ary = myDate.toArray();  \n    var year = ary[0];  \n    var month = ary[1]+1;  \n    var day = ary[2];  \n    document.write('< script language=VBScript\\> \\n');  \n    document.write('myDate = Datue(''+month+'-'+day+'-'+year+'') \\n');  \n    document.write('result = DatePart('ww', myDate) \\n');  \n    document.write(' \\n');  \n    return result;  \n}  \n\n//+---------------------------------------------------  \n//| 字符串转成日期类型   \n//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  \n//+---------------------------------------------------\n \nfunction StringToDate(DateStr)  \n{   \n  \n    var converted = Date.parse(DateStr);  \n    var myDate = new Date(converted);  \n    if (isNaN(myDate))  \n    {   \n        //var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  \n        var arys= DateStr.split('-');  \n        myDate = new Date(arys[0],--arys[1],arys[2]);  \n    }  \n    return myDate;  \n}  \n```\n \n\n若要显示:当前日期加时间(如:2009-06-12 12:00)\n\n```javascript\nfunction CurentTime()\n    { \n        var now = new Date();\n       \n        var year = now.getFullYear();       //年\n        var month = now.getMonth() + 1;     //月\n        var day = now.getDate();            //日\n       \n        var hh = now.getHours();            //时\n        var mm = now.getMinutes();          //分\n       \n        var clock = year + \"-\";\n       \n        if(month < 10)\n            clock += \"0\";\n       \n        clock += month + \"-\";\n       \n        if(day < 10)\n            clock += \"0\";\n           \n        clock += day + \" \";\n       \n        if(hh < 10)\n            clock += \"0\";\n           \n        clock += hh + \":\";\n        if (mm < 10) clock += '0'; \n        clock += mm; \n        return(clock); \n    } \n```","slug":"time","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct39w001dnilwe49k8ywk","content":"<p>时间函数加减 2015-10-23<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addByTransDate</span>(<span class=\"params\">dateParameter, num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> translateDate = <span class=\"string\">\"\"</span>, dateString = <span class=\"string\">\"\"</span>, monthString = <span class=\"string\">\"\"</span>, dayString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    translateDate = dateParameter.replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>).replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(translateDate);</div><div class=\"line\">    newDate = newDate.valueOf();</div><div class=\"line\">    newDate = newDate + num * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</div><div class=\"line\">    newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(newDate);</div><div class=\"line\">    <span class=\"comment\">//如果月份长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((newDate.getMonth() + <span class=\"number\">1</span>).toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        monthString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        monthString = (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果天数长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (newDate.getDate().toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        dayString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + newDate.getDate().toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dayString = newDate.getDate().toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    dateString = newDate.getFullYear() + <span class=\"string\">\"-\"</span> + monthString + <span class=\"string\">\"-\"</span> + dayString;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateString;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reduceByTransDate</span>(<span class=\"params\">dateParameter, num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> translateDate = <span class=\"string\">\"\"</span>, dateString = <span class=\"string\">\"\"</span>, monthString = <span class=\"string\">\"\"</span>, dayString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    translateDate = dateParameter.replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>).replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(translateDate);</div><div class=\"line\">    newDate = newDate.valueOf();</div><div class=\"line\">    newDate = newDate - num * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</div><div class=\"line\">    newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(newDate);</div><div class=\"line\">    <span class=\"comment\">//如果月份长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((newDate.getMonth() + <span class=\"number\">1</span>).toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        monthString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        monthString = (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果天数长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (newDate.getDate().toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        dayString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + newDate.getDate().toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dayString = newDate.getDate().toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    dateString = newDate.getFullYear() + <span class=\"string\">\"-\"</span> + monthString + <span class=\"string\">\"-\"</span> + dayString;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateString;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.cnblogs.com/carekee/articles/1678041.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/carekee/articles/1678041.html</a><br>Js获取当前日期时间及其它操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">myDate.getYear();        <span class=\"comment\">//获取当前年份(2位)</span></div><div class=\"line\">myDate.getFullYear();    <span class=\"comment\">//获取完整的年份(4位,1970-????)</span></div><div class=\"line\">myDate.getMonth();       <span class=\"comment\">//获取当前月份(0-11,0代表1月)</span></div><div class=\"line\">myDate.getDate();        <span class=\"comment\">//获取当前日(1-31)</span></div><div class=\"line\">myDate.getDay();         <span class=\"comment\">//获取当前星期X(0-6,0代表星期天)</span></div><div class=\"line\">myDate.getTime();        <span class=\"comment\">//获取当前时间(从1970.1.1开始的毫秒数)</span></div><div class=\"line\">myDate.getHours();       <span class=\"comment\">//获取当前小时数(0-23)</span></div><div class=\"line\">myDate.getMinutes();     <span class=\"comment\">//获取当前分钟数(0-59)</span></div><div class=\"line\">myDate.getSeconds();     <span class=\"comment\">//获取当前秒数(0-59)</span></div><div class=\"line\">myDate.getMilliseconds();    <span class=\"comment\">//获取当前毫秒数(0-999)</span></div><div class=\"line\">myDate.toLocaleDateString();     <span class=\"comment\">//获取当前日期</span></div><div class=\"line\"><span class=\"keyword\">var</span> mytime=myDate.toLocaleTimeString();     <span class=\"comment\">//获取当前时间</span></div><div class=\"line\">myDate.toLocaleString( );        <span class=\"comment\">//获取日期与时间</span></div></pre></td></tr></table></figure>\n<p>日期时间脚本库方法列表<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.isLeapYear 判断闰年</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.Format 日期格式化</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateAdd 日期计算</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateDiff 比较日期差</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toString 日期转字符串</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toArray 日期分割为数组</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DatePart 取日期的部分信息</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.MaxDayOfDate 取日期所在月的最大天数</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.WeekNumOfYear 判断日期所在年的第几周</div><div class=\"line\">StringToDate 字符串转日期型</div><div class=\"line\">IsValidDate 验证日期有效性</div><div class=\"line\">CheckDateTime 完整日期时间检查</div><div class=\"line\">daysBetween 日期天数差</div><div class=\"line\"></div><div class=\"line\">js代码：</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">// 判断闰年  </span></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.isLeapYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)   </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">0</span>==<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">4</span>&amp;&amp;((<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">100</span>!=<span class=\"number\">0</span>)||(<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">400</span>==<span class=\"number\">0</span>)));   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">// 日期格式化  </span></div><div class=\"line\"><span class=\"comment\">// 格式 YYYY/yyyy/YY/yy 表示年份  </span></div><div class=\"line\"><span class=\"comment\">// MM/M 月份  </span></div><div class=\"line\"><span class=\"comment\">// W/w 星期  </span></div><div class=\"line\"><span class=\"comment\">// dd/DD/d/D 日期  </span></div><div class=\"line\"><span class=\"comment\">// hh/HH/h/H 时间  </span></div><div class=\"line\"><span class=\"comment\">// mm/m 分钟  </span></div><div class=\"line\"><span class=\"comment\">// ss/SS/s/S 秒  </span></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.Format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">formatStr</span>)   </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> str = formatStr;   </div><div class=\"line\">    <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/yyyy|YYYY/</span>,<span class=\"keyword\">this</span>.getFullYear());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/yy|YY/</span>,(<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>)&gt;<span class=\"number\">9</span>?(<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>).toString():<span class=\"string\">'0'</span> + (<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>));   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/MM/</span>,<span class=\"keyword\">this</span>.getMonth()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getMonth().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getMonth());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/M/g</span>,<span class=\"keyword\">this</span>.getMonth());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/w|W/g</span>,Week[<span class=\"keyword\">this</span>.getDay()]);   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/dd|DD/</span>,<span class=\"keyword\">this</span>.getDate()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getDate().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getDate());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/d|D/g</span>,<span class=\"keyword\">this</span>.getDate());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/hh|HH/</span>,<span class=\"keyword\">this</span>.getHours()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getHours().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getHours());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/h|H/g</span>,<span class=\"keyword\">this</span>.getHours());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/mm/</span>,<span class=\"keyword\">this</span>.getMinutes()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getMinutes().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getMinutes());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/m/g</span>,<span class=\"keyword\">this</span>.getMinutes());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/ss|SS/</span>,<span class=\"keyword\">this</span>.getSeconds()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getSeconds().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getSeconds());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/s|S/g</span>,<span class=\"keyword\">this</span>.getSeconds());   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">return</span> str;   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">daysBetween</span>(<span class=\"params\">DateOne,DateTwo</span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> OneMonth = DateOne.substring(<span class=\"number\">5</span>,DateOne.lastIndexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf (<span class=\"string\">'-'</span>)+<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> OneYear = DateOne.substring(<span class=\"number\">0</span>,DateOne.indexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoMonth = DateTwo.substring(<span class=\"number\">5</span>,DateTwo.lastIndexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf (<span class=\"string\">'-'</span>)+<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoYear = DateTwo.substring(<span class=\"number\">0</span>,DateTwo.indexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> cha=((<span class=\"built_in\">Date</span>.parse(OneMonth+<span class=\"string\">'/'</span>+OneDay+<span class=\"string\">'/'</span>+OneYear)- <span class=\"built_in\">Date</span>.parse(TwoMonth+<span class=\"string\">'/'</span>+TwoDay+<span class=\"string\">'/'</span>+TwoYear))/<span class=\"number\">86400000</span>);   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(cha);  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期计算  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strInterval, Number</span>) </span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> dtTmp = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (strInterval) &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">1000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">60000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">3600000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">86400000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + ((<span class=\"number\">86400000</span> * <span class=\"number\">7</span>) * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'q'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"built_in\">Number</span>*<span class=\"number\">3</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"built_in\">Number</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>((dtTmp.getFullYear() + <span class=\"built_in\">Number</span>), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateDiff = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strInterval, dtEnd</span>) </span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> dtStart = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> dtEnd == <span class=\"string\">'string'</span> )<span class=\"comment\">//如果是字符串转换为日期型  </span></div><div class=\"line\">    &#123;   </div><div class=\"line\">        dtEnd = StringToDate(dtEnd);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (strInterval) &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">1000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">60000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">3600000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">86400000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / (<span class=\"number\">86400000</span> * <span class=\"number\">7</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :<span class=\"keyword\">return</span> (dtEnd.getMonth()+<span class=\"number\">1</span>)+((dtEnd.getFullYear()-dtStart.getFullYear())*<span class=\"number\">12</span>) - (dtStart.getMonth()+<span class=\"number\">1</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :<span class=\"keyword\">return</span> dtEnd.getFullYear() - dtStart.getFullYear();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期输出字符串，重载了系统的toString方法  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">showWeek</span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate= <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> str = myDate.toLocaleDateString();  </div><div class=\"line\">    <span class=\"keyword\">if</span> (showWeek)  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">        str += <span class=\"string\">' 星期'</span> + Week[myDate.getDay()];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> str;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期合法性验证  </span></div><div class=\"line\"><span class=\"comment\">//| 格式为：YYYY-MM-DD或YYYY/MM/DD  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IsValidDate</span>(<span class=\"params\">DateStr</span>)   </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> sDate=DateStr.replace(<span class=\"regexp\">/(^\\s+|\\s+$)/g</span>,<span class=\"string\">''</span>); <span class=\"comment\">//去两边空格;   </span></div><div class=\"line\">    <span class=\"keyword\">if</span>(sDate==<span class=\"string\">''</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">    <span class=\"comment\">//如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   </span></div><div class=\"line\">    <span class=\"comment\">//数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   </span></div><div class=\"line\">    <span class=\"keyword\">var</span> s = sDate.replace(<span class=\"regexp\">/[\\d]&#123; 4,4 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;/g</span>,<span class=\"string\">''</span>);   </div><div class=\"line\">    <span class=\"keyword\">if</span> (s==<span class=\"string\">''</span>) <span class=\"comment\">//说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   </span></div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">var</span> t=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(sDate.replace(<span class=\"regexp\">/\\-/g</span>,<span class=\"string\">'/'</span>));   </div><div class=\"line\">        <span class=\"keyword\">var</span> ar = sDate.split(<span class=\"regexp\">/[-/:]/</span>);   </div><div class=\"line\">        <span class=\"keyword\">if</span>(ar[<span class=\"number\">0</span>] != t.getYear() || ar[<span class=\"number\">1</span>] != t.getMonth()+<span class=\"number\">1</span> || ar[<span class=\"number\">2</span>] != t.getDate())   </div><div class=\"line\">        &#123;   </div><div class=\"line\">            <span class=\"comment\">//alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   </span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">else</span>   </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"comment\">//alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   </span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期时间检查  </span></div><div class=\"line\"><span class=\"comment\">//| 格式为：YYYY-MM-DD HH:MM:SS  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CheckDateTime</span>(<span class=\"params\">str</span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^(\\d+)-(\\d&#123; 1,2 &#125;)-(\\d&#123; 1,2 &#125;) (\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;)$/</span>;   </div><div class=\"line\">    <span class=\"keyword\">var</span> r = str.match(reg);   </div><div class=\"line\">    <span class=\"keyword\">if</span>(r==<span class=\"literal\">null</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    r[<span class=\"number\">2</span>]=r[<span class=\"number\">2</span>]<span class=\"number\">-1</span>;   </div><div class=\"line\">    <span class=\"keyword\">var</span> d= <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(r[<span class=\"number\">1</span>],r[<span class=\"number\">2</span>],r[<span class=\"number\">3</span>],r[<span class=\"number\">4</span>],r[<span class=\"number\">5</span>],r[<span class=\"number\">6</span>]);   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getFullYear()!=r[<span class=\"number\">1</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getMonth()!=r[<span class=\"number\">2</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getDate()!=r[<span class=\"number\">3</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getHours()!=r[<span class=\"number\">4</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getMinutes()!=r[<span class=\"number\">5</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getSeconds()!=r[<span class=\"number\">6</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 把日期分割成数组  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> myArray = <span class=\"built_in\">Array</span>();  </div><div class=\"line\">    myArray[<span class=\"number\">0</span>] = myDate.getFullYear();  </div><div class=\"line\">    myArray[<span class=\"number\">1</span>] = myDate.getMonth();  </div><div class=\"line\">    myArray[<span class=\"number\">2</span>] = myDate.getDate();  </div><div class=\"line\">    myArray[<span class=\"number\">3</span>] = myDate.getHours();  </div><div class=\"line\">    myArray[<span class=\"number\">4</span>] = myDate.getMinutes();  </div><div class=\"line\">    myArray[<span class=\"number\">5</span>] = myDate.getSeconds();  </div><div class=\"line\">    <span class=\"keyword\">return</span> myArray;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得日期数据信息  </span></div><div class=\"line\"><span class=\"comment\">//| 参数 interval 表示数据类型  </span></div><div class=\"line\"><span class=\"comment\">//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DatePart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">interval</span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> partStr=<span class=\"string\">''</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (interval)  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :partStr = myDate.getFullYear();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :partStr = myDate.getMonth()+<span class=\"number\">1</span>;<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :partStr = myDate.getDate();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :partStr = Week[myDate.getDay()];<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'ww'</span> :partStr = myDate.WeekNumOfYear();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :partStr = myDate.getHours();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :partStr = myDate.getMinutes();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :partStr = myDate.getSeconds();<span class=\"keyword\">break</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> partStr;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得当前日期所在月的最大天数  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.MaxDayOfDate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> ary = myDate.toArray();  </div><div class=\"line\">    <span class=\"keyword\">var</span> date1 = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(ary[<span class=\"number\">0</span>],ary[<span class=\"number\">1</span>]+<span class=\"number\">1</span>,<span class=\"number\">1</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> date2 = date1.dateAdd(<span class=\"number\">1</span>,<span class=\"string\">'m'</span>,<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> result = dateDiff(date1.Format(<span class=\"string\">'yyyy-MM-dd'</span>),date2.Format(<span class=\"string\">'yyyy-MM-dd'</span>));  </div><div class=\"line\">    <span class=\"keyword\">return</span> result;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得当前日期所在周是一年中的第几周  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.WeekNumOfYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> ary = myDate.toArray();  </div><div class=\"line\">    <span class=\"keyword\">var</span> year = ary[<span class=\"number\">0</span>];  </div><div class=\"line\">    <span class=\"keyword\">var</span> month = ary[<span class=\"number\">1</span>]+<span class=\"number\">1</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> day = ary[<span class=\"number\">2</span>];  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt; script language=VBScript\\&gt; \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'myDate = Datue('</span><span class=\"string\">'+month+'</span>-<span class=\"string\">'+day+'</span>-<span class=\"string\">'+year+'</span><span class=\"string\">') \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'result = DatePart('</span>ww<span class=\"string\">', myDate) \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">' \\n'</span>);  </div><div class=\"line\">    <span class=\"keyword\">return</span> result;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 字符串转成日期类型   </span></div><div class=\"line\"><span class=\"comment\">//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StringToDate</span>(<span class=\"params\">DateStr</span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> converted = <span class=\"built_in\">Date</span>.parse(DateStr);  </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(converted);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(myDate))  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"comment\">//var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> arys= DateStr.split(<span class=\"string\">'-'</span>);  </div><div class=\"line\">        myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(arys[<span class=\"number\">0</span>],--arys[<span class=\"number\">1</span>],arys[<span class=\"number\">2</span>]);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> myDate;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>若要显示:当前日期加时间(如:2009-06-12 12:00)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CurentTime</span>(<span class=\"params\"></span>)</span></div><div class=\"line\"><span class=\"function\">    </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> year = now.getFullYear();       <span class=\"comment\">//年</span></div><div class=\"line\">        <span class=\"keyword\">var</span> month = now.getMonth() + <span class=\"number\">1</span>;     <span class=\"comment\">//月</span></div><div class=\"line\">        <span class=\"keyword\">var</span> day = now.getDate();            <span class=\"comment\">//日</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> hh = now.getHours();            <span class=\"comment\">//时</span></div><div class=\"line\">        <span class=\"keyword\">var</span> mm = now.getMinutes();          <span class=\"comment\">//分</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> clock = year + <span class=\"string\">\"-\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(month &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        clock += month + <span class=\"string\">\"-\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(day &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">           </div><div class=\"line\">        clock += day + <span class=\"string\">\" \"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(hh &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">           </div><div class=\"line\">        clock += hh + <span class=\"string\">\":\"</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mm &lt; <span class=\"number\">10</span>) clock += <span class=\"string\">'0'</span>; </div><div class=\"line\">        clock += mm; </div><div class=\"line\">        <span class=\"keyword\">return</span>(clock); </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>时间函数加减 2015-10-23<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addByTransDate</span>(<span class=\"params\">dateParameter, num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> translateDate = <span class=\"string\">\"\"</span>, dateString = <span class=\"string\">\"\"</span>, monthString = <span class=\"string\">\"\"</span>, dayString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    translateDate = dateParameter.replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>).replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(translateDate);</div><div class=\"line\">    newDate = newDate.valueOf();</div><div class=\"line\">    newDate = newDate + num * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</div><div class=\"line\">    newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(newDate);</div><div class=\"line\">    <span class=\"comment\">//如果月份长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((newDate.getMonth() + <span class=\"number\">1</span>).toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        monthString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        monthString = (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果天数长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (newDate.getDate().toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        dayString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + newDate.getDate().toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dayString = newDate.getDate().toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    dateString = newDate.getFullYear() + <span class=\"string\">\"-\"</span> + monthString + <span class=\"string\">\"-\"</span> + dayString;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateString;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reduceByTransDate</span>(<span class=\"params\">dateParameter, num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> translateDate = <span class=\"string\">\"\"</span>, dateString = <span class=\"string\">\"\"</span>, monthString = <span class=\"string\">\"\"</span>, dayString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    translateDate = dateParameter.replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>).replace(<span class=\"string\">\"-\"</span>, <span class=\"string\">\"/\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(translateDate);</div><div class=\"line\">    newDate = newDate.valueOf();</div><div class=\"line\">    newDate = newDate - num * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</div><div class=\"line\">    newDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(newDate);</div><div class=\"line\">    <span class=\"comment\">//如果月份长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((newDate.getMonth() + <span class=\"number\">1</span>).toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        monthString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        monthString = (newDate.getMonth() + <span class=\"number\">1</span>).toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果天数长度少于2，则前加 0 补位</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (newDate.getDate().toString().length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        dayString = <span class=\"number\">0</span> + <span class=\"string\">\"\"</span> + newDate.getDate().toString();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        dayString = newDate.getDate().toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">    dateString = newDate.getFullYear() + <span class=\"string\">\"-\"</span> + monthString + <span class=\"string\">\"-\"</span> + dayString;</div><div class=\"line\">    <span class=\"keyword\">return</span> dateString;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://www.cnblogs.com/carekee/articles/1678041.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/carekee/articles/1678041.html</a><br>Js获取当前日期时间及其它操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">myDate.getYear();        <span class=\"comment\">//获取当前年份(2位)</span></div><div class=\"line\">myDate.getFullYear();    <span class=\"comment\">//获取完整的年份(4位,1970-????)</span></div><div class=\"line\">myDate.getMonth();       <span class=\"comment\">//获取当前月份(0-11,0代表1月)</span></div><div class=\"line\">myDate.getDate();        <span class=\"comment\">//获取当前日(1-31)</span></div><div class=\"line\">myDate.getDay();         <span class=\"comment\">//获取当前星期X(0-6,0代表星期天)</span></div><div class=\"line\">myDate.getTime();        <span class=\"comment\">//获取当前时间(从1970.1.1开始的毫秒数)</span></div><div class=\"line\">myDate.getHours();       <span class=\"comment\">//获取当前小时数(0-23)</span></div><div class=\"line\">myDate.getMinutes();     <span class=\"comment\">//获取当前分钟数(0-59)</span></div><div class=\"line\">myDate.getSeconds();     <span class=\"comment\">//获取当前秒数(0-59)</span></div><div class=\"line\">myDate.getMilliseconds();    <span class=\"comment\">//获取当前毫秒数(0-999)</span></div><div class=\"line\">myDate.toLocaleDateString();     <span class=\"comment\">//获取当前日期</span></div><div class=\"line\"><span class=\"keyword\">var</span> mytime=myDate.toLocaleTimeString();     <span class=\"comment\">//获取当前时间</span></div><div class=\"line\">myDate.toLocaleString( );        <span class=\"comment\">//获取日期与时间</span></div></pre></td></tr></table></figure>\n<p>日期时间脚本库方法列表<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.isLeapYear 判断闰年</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.Format 日期格式化</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateAdd 日期计算</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateDiff 比较日期差</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toString 日期转字符串</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toArray 日期分割为数组</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DatePart 取日期的部分信息</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.MaxDayOfDate 取日期所在月的最大天数</div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.WeekNumOfYear 判断日期所在年的第几周</div><div class=\"line\">StringToDate 字符串转日期型</div><div class=\"line\">IsValidDate 验证日期有效性</div><div class=\"line\">CheckDateTime 完整日期时间检查</div><div class=\"line\">daysBetween 日期天数差</div><div class=\"line\"></div><div class=\"line\">js代码：</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">// 判断闰年  </span></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.isLeapYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)   </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">0</span>==<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">4</span>&amp;&amp;((<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">100</span>!=<span class=\"number\">0</span>)||(<span class=\"keyword\">this</span>.getYear()%<span class=\"number\">400</span>==<span class=\"number\">0</span>)));   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">// 日期格式化  </span></div><div class=\"line\"><span class=\"comment\">// 格式 YYYY/yyyy/YY/yy 表示年份  </span></div><div class=\"line\"><span class=\"comment\">// MM/M 月份  </span></div><div class=\"line\"><span class=\"comment\">// W/w 星期  </span></div><div class=\"line\"><span class=\"comment\">// dd/DD/d/D 日期  </span></div><div class=\"line\"><span class=\"comment\">// hh/HH/h/H 时间  </span></div><div class=\"line\"><span class=\"comment\">// mm/m 分钟  </span></div><div class=\"line\"><span class=\"comment\">// ss/SS/s/S 秒  </span></div><div class=\"line\"><span class=\"comment\">//---------------------------------------------------</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.Format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">formatStr</span>)   </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> str = formatStr;   </div><div class=\"line\">    <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/yyyy|YYYY/</span>,<span class=\"keyword\">this</span>.getFullYear());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/yy|YY/</span>,(<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>)&gt;<span class=\"number\">9</span>?(<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>).toString():<span class=\"string\">'0'</span> + (<span class=\"keyword\">this</span>.getYear() % <span class=\"number\">100</span>));   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/MM/</span>,<span class=\"keyword\">this</span>.getMonth()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getMonth().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getMonth());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/M/g</span>,<span class=\"keyword\">this</span>.getMonth());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/w|W/g</span>,Week[<span class=\"keyword\">this</span>.getDay()]);   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/dd|DD/</span>,<span class=\"keyword\">this</span>.getDate()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getDate().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getDate());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/d|D/g</span>,<span class=\"keyword\">this</span>.getDate());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/hh|HH/</span>,<span class=\"keyword\">this</span>.getHours()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getHours().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getHours());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/h|H/g</span>,<span class=\"keyword\">this</span>.getHours());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/mm/</span>,<span class=\"keyword\">this</span>.getMinutes()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getMinutes().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getMinutes());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/m/g</span>,<span class=\"keyword\">this</span>.getMinutes());   </div><div class=\"line\">  </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/ss|SS/</span>,<span class=\"keyword\">this</span>.getSeconds()&gt;<span class=\"number\">9</span>?<span class=\"keyword\">this</span>.getSeconds().toString():<span class=\"string\">'0'</span> + <span class=\"keyword\">this</span>.getSeconds());   </div><div class=\"line\">    str=str.replace(<span class=\"regexp\">/s|S/g</span>,<span class=\"keyword\">this</span>.getSeconds());   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">return</span> str;   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">daysBetween</span>(<span class=\"params\">DateOne,DateTwo</span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> OneMonth = DateOne.substring(<span class=\"number\">5</span>,DateOne.lastIndexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf (<span class=\"string\">'-'</span>)+<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> OneYear = DateOne.substring(<span class=\"number\">0</span>,DateOne.indexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoMonth = DateTwo.substring(<span class=\"number\">5</span>,DateTwo.lastIndexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf (<span class=\"string\">'-'</span>)+<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> TwoYear = DateTwo.substring(<span class=\"number\">0</span>,DateTwo.indexOf (<span class=\"string\">'-'</span>));  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> cha=((<span class=\"built_in\">Date</span>.parse(OneMonth+<span class=\"string\">'/'</span>+OneDay+<span class=\"string\">'/'</span>+OneYear)- <span class=\"built_in\">Date</span>.parse(TwoMonth+<span class=\"string\">'/'</span>+TwoDay+<span class=\"string\">'/'</span>+TwoYear))/<span class=\"number\">86400000</span>);   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(cha);  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期计算  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strInterval, Number</span>) </span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> dtTmp = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (strInterval) &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">1000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">60000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">3600000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + (<span class=\"number\">86400000</span> * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.parse(dtTmp) + ((<span class=\"number\">86400000</span> * <span class=\"number\">7</span>) * <span class=\"built_in\">Number</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'q'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"built_in\">Number</span>*<span class=\"number\">3</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class=\"built_in\">Number</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>((dtTmp.getFullYear() + <span class=\"built_in\">Number</span>), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DateDiff = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strInterval, dtEnd</span>) </span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> dtStart = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> dtEnd == <span class=\"string\">'string'</span> )<span class=\"comment\">//如果是字符串转换为日期型  </span></div><div class=\"line\">    &#123;   </div><div class=\"line\">        dtEnd = StringToDate(dtEnd);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (strInterval) &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">1000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">60000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">3600000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / <span class=\"number\">86400000</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :<span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>((dtEnd - dtStart) / (<span class=\"number\">86400000</span> * <span class=\"number\">7</span>));  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :<span class=\"keyword\">return</span> (dtEnd.getMonth()+<span class=\"number\">1</span>)+((dtEnd.getFullYear()-dtStart.getFullYear())*<span class=\"number\">12</span>) - (dtStart.getMonth()+<span class=\"number\">1</span>);  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :<span class=\"keyword\">return</span> dtEnd.getFullYear() - dtStart.getFullYear();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期输出字符串，重载了系统的toString方法  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">showWeek</span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate= <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> str = myDate.toLocaleDateString();  </div><div class=\"line\">    <span class=\"keyword\">if</span> (showWeek)  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">        str += <span class=\"string\">' 星期'</span> + Week[myDate.getDay()];  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> str;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期合法性验证  </span></div><div class=\"line\"><span class=\"comment\">//| 格式为：YYYY-MM-DD或YYYY/MM/DD  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IsValidDate</span>(<span class=\"params\">DateStr</span>)   </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> sDate=DateStr.replace(<span class=\"regexp\">/(^\\s+|\\s+$)/g</span>,<span class=\"string\">''</span>); <span class=\"comment\">//去两边空格;   </span></div><div class=\"line\">    <span class=\"keyword\">if</span>(sDate==<span class=\"string\">''</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">    <span class=\"comment\">//如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   </span></div><div class=\"line\">    <span class=\"comment\">//数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   </span></div><div class=\"line\">    <span class=\"keyword\">var</span> s = sDate.replace(<span class=\"regexp\">/[\\d]&#123; 4,4 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;[\\-/]&#123; 1 &#125;[\\d]&#123; 1,2 &#125;/g</span>,<span class=\"string\">''</span>);   </div><div class=\"line\">    <span class=\"keyword\">if</span> (s==<span class=\"string\">''</span>) <span class=\"comment\">//说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   </span></div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">var</span> t=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(sDate.replace(<span class=\"regexp\">/\\-/g</span>,<span class=\"string\">'/'</span>));   </div><div class=\"line\">        <span class=\"keyword\">var</span> ar = sDate.split(<span class=\"regexp\">/[-/:]/</span>);   </div><div class=\"line\">        <span class=\"keyword\">if</span>(ar[<span class=\"number\">0</span>] != t.getYear() || ar[<span class=\"number\">1</span>] != t.getMonth()+<span class=\"number\">1</span> || ar[<span class=\"number\">2</span>] != t.getDate())   </div><div class=\"line\">        &#123;   </div><div class=\"line\">            <span class=\"comment\">//alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   </span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">        &#125;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">else</span>   </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"comment\">//alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   </span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    &#125;   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 日期时间检查  </span></div><div class=\"line\"><span class=\"comment\">//| 格式为：YYYY-MM-DD HH:MM:SS  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CheckDateTime</span>(<span class=\"params\">str</span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^(\\d+)-(\\d&#123; 1,2 &#125;)-(\\d&#123; 1,2 &#125;) (\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;):(\\d&#123; 1,2 &#125;)$/</span>;   </div><div class=\"line\">    <span class=\"keyword\">var</span> r = str.match(reg);   </div><div class=\"line\">    <span class=\"keyword\">if</span>(r==<span class=\"literal\">null</span>)<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    r[<span class=\"number\">2</span>]=r[<span class=\"number\">2</span>]<span class=\"number\">-1</span>;   </div><div class=\"line\">    <span class=\"keyword\">var</span> d= <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(r[<span class=\"number\">1</span>],r[<span class=\"number\">2</span>],r[<span class=\"number\">3</span>],r[<span class=\"number\">4</span>],r[<span class=\"number\">5</span>],r[<span class=\"number\">6</span>]);   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getFullYear()!=r[<span class=\"number\">1</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getMonth()!=r[<span class=\"number\">2</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getDate()!=r[<span class=\"number\">3</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getHours()!=r[<span class=\"number\">4</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getMinutes()!=r[<span class=\"number\">5</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">if</span>(d.getSeconds()!=r[<span class=\"number\">6</span>])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;   </div><div class=\"line\">&#125;   </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 把日期分割成数组  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.toArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> myArray = <span class=\"built_in\">Array</span>();  </div><div class=\"line\">    myArray[<span class=\"number\">0</span>] = myDate.getFullYear();  </div><div class=\"line\">    myArray[<span class=\"number\">1</span>] = myDate.getMonth();  </div><div class=\"line\">    myArray[<span class=\"number\">2</span>] = myDate.getDate();  </div><div class=\"line\">    myArray[<span class=\"number\">3</span>] = myDate.getHours();  </div><div class=\"line\">    myArray[<span class=\"number\">4</span>] = myDate.getMinutes();  </div><div class=\"line\">    myArray[<span class=\"number\">5</span>] = myDate.getSeconds();  </div><div class=\"line\">    <span class=\"keyword\">return</span> myArray;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得日期数据信息  </span></div><div class=\"line\"><span class=\"comment\">//| 参数 interval 表示数据类型  </span></div><div class=\"line\"><span class=\"comment\">//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.DatePart = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">interval</span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> partStr=<span class=\"string\">''</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> Week = [<span class=\"string\">'日'</span>,<span class=\"string\">'一'</span>,<span class=\"string\">'二'</span>,<span class=\"string\">'三'</span>,<span class=\"string\">'四'</span>,<span class=\"string\">'五'</span>,<span class=\"string\">'六'</span>];  </div><div class=\"line\">    <span class=\"keyword\">switch</span> (interval)  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'y'</span> :partStr = myDate.getFullYear();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'m'</span> :partStr = myDate.getMonth()+<span class=\"number\">1</span>;<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'d'</span> :partStr = myDate.getDate();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'w'</span> :partStr = Week[myDate.getDay()];<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'ww'</span> :partStr = myDate.WeekNumOfYear();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'h'</span> :partStr = myDate.getHours();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'n'</span> :partStr = myDate.getMinutes();<span class=\"keyword\">break</span>;  </div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'s'</span> :partStr = myDate.getSeconds();<span class=\"keyword\">break</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> partStr;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得当前日期所在月的最大天数  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.MaxDayOfDate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> ary = myDate.toArray();  </div><div class=\"line\">    <span class=\"keyword\">var</span> date1 = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(ary[<span class=\"number\">0</span>],ary[<span class=\"number\">1</span>]+<span class=\"number\">1</span>,<span class=\"number\">1</span>));  </div><div class=\"line\">    <span class=\"keyword\">var</span> date2 = date1.dateAdd(<span class=\"number\">1</span>,<span class=\"string\">'m'</span>,<span class=\"number\">1</span>);  </div><div class=\"line\">    <span class=\"keyword\">var</span> result = dateDiff(date1.Format(<span class=\"string\">'yyyy-MM-dd'</span>),date2.Format(<span class=\"string\">'yyyy-MM-dd'</span>));  </div><div class=\"line\">    <span class=\"keyword\">return</span> result;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 取得当前日期所在周是一年中的第几周  </span></div><div class=\"line\"><span class=\"comment\">//+--------------------------------------------------- </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Date</span>.prototype.WeekNumOfYear = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">this</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> ary = myDate.toArray();  </div><div class=\"line\">    <span class=\"keyword\">var</span> year = ary[<span class=\"number\">0</span>];  </div><div class=\"line\">    <span class=\"keyword\">var</span> month = ary[<span class=\"number\">1</span>]+<span class=\"number\">1</span>;  </div><div class=\"line\">    <span class=\"keyword\">var</span> day = ary[<span class=\"number\">2</span>];  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'&lt; script language=VBScript\\&gt; \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'myDate = Datue('</span><span class=\"string\">'+month+'</span>-<span class=\"string\">'+day+'</span>-<span class=\"string\">'+year+'</span><span class=\"string\">') \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">'result = DatePart('</span>ww<span class=\"string\">', myDate) \\n'</span>);  </div><div class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">' \\n'</span>);  </div><div class=\"line\">    <span class=\"keyword\">return</span> result;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------  </span></div><div class=\"line\"><span class=\"comment\">//| 字符串转成日期类型   </span></div><div class=\"line\"><span class=\"comment\">//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  </span></div><div class=\"line\"><span class=\"comment\">//+---------------------------------------------------</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">StringToDate</span>(<span class=\"params\">DateStr</span>)  </span></div><div class=\"line\"><span class=\"function\"></span>&#123;   </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">var</span> converted = <span class=\"built_in\">Date</span>.parse(DateStr);  </div><div class=\"line\">    <span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(converted);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(myDate))  </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"comment\">//var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  </span></div><div class=\"line\">        <span class=\"keyword\">var</span> arys= DateStr.split(<span class=\"string\">'-'</span>);  </div><div class=\"line\">        myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(arys[<span class=\"number\">0</span>],--arys[<span class=\"number\">1</span>],arys[<span class=\"number\">2</span>]);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> myDate;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>若要显示:当前日期加时间(如:2009-06-12 12:00)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CurentTime</span>(<span class=\"params\"></span>)</span></div><div class=\"line\"><span class=\"function\">    </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">var</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> year = now.getFullYear();       <span class=\"comment\">//年</span></div><div class=\"line\">        <span class=\"keyword\">var</span> month = now.getMonth() + <span class=\"number\">1</span>;     <span class=\"comment\">//月</span></div><div class=\"line\">        <span class=\"keyword\">var</span> day = now.getDate();            <span class=\"comment\">//日</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> hh = now.getHours();            <span class=\"comment\">//时</span></div><div class=\"line\">        <span class=\"keyword\">var</span> mm = now.getMinutes();          <span class=\"comment\">//分</span></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">var</span> clock = year + <span class=\"string\">\"-\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(month &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        clock += month + <span class=\"string\">\"-\"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(day &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">           </div><div class=\"line\">        clock += day + <span class=\"string\">\" \"</span>;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"keyword\">if</span>(hh &lt; <span class=\"number\">10</span>)</div><div class=\"line\">            clock += <span class=\"string\">\"0\"</span>;</div><div class=\"line\">           </div><div class=\"line\">        clock += hh + <span class=\"string\">\":\"</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mm &lt; <span class=\"number\">10</span>) clock += <span class=\"string\">'0'</span>; </div><div class=\"line\">        clock += mm; </div><div class=\"line\">        <span class=\"keyword\">return</span>(clock); </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>"},{"title":"vue2.0中的eventBus","date":"2018-01-26T02:40:58.000Z","_content":"### 1.定义\n主要是在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。\n\n### 2.用法\nbus.js\n```vue\nimport Vue from 'vue';  \nexport default new Vue();  \n```\n\n兄弟组件 click.vue\n```vue\n<template>\n\t<div class=\"click\" @click.stop.prevent=\"doClick($event)\"></div>  \n</template>\n\n<script>\n\timport Bus from 'common/js/bus.js';  \n\texport default{\n\t\tdata(){\n\t\t\treturn {}\n\t\t},\n\t\tmethods: {  \n           doClick(event) {  \n           \t\tBus.$emit('getTarget', event.target);   \n           }  \n        }  \n\t}\n</script>\n```\n\n兄弟组件 show.vue\n```vue\n<script >\n\timport Bus from 'common/js/bus.js';\n\texport default{\n\t\tdata(){\n\t\t\treturn {}\n\t\t},\n\t\tcreated() {  \n\t\t\tBus.$on('getTarget', target => {  \n\t\t\t\tconsole.log(target);  \n\t\t\t});  \n\t\t}\n\t}\n</script>\n```\n\n### 3.问题\n（1）$emit时，必须已经$on，否则无法监听到事件。\n（2）$on在组件销毁后不会自动解除绑定，若同一组件多次生成则会多次绑定事件，导致一次$emit，多次响应，需额外处理。\n（3）数据非\"长效\"数据，无法保存，只在$emit后生效。\n\n\n### 4.特殊的eventBus\nbus.js\n```javascript\nconst bus = new Vue({\n\tdata(){\n\t\treturn {\n\t\t\tval: ''\n\t\t}\n\t},\n\tcreated(){\n\t\tthis.$on('updateData',val=>{\n\t\t\tthis.val = val\n\t\t})\n\t}\n})\n```\n数据发出组件 click.vue\n```vue\nimport bus from 'xxx/bus'\n//触发在bus中已经绑定好的事件\nbus.$emit('updateData', 123)\n```\n数据接收组件\n```vue\n{{val}}\n\nimport bus from 'xxx/bus'\n//使用computed接收数据\ncomputed(){\n\tval(){\n\t\treturn bus.val\n\t}\n}\n```\n\n解决问题：\n(1)数据在bus上存在，所以可以不需要组件同时存在。\n(2)绑定监听都在bus上，不会重复绑定。\n(3)数据可以长效存在。\n\n这种eventBus可以达到简化版vuex的效果，通过$emit触发而不直接修改组件的值，是遵循vuex的架构。\n组件不允许直接修改属于store实例的state，而应执行action来分发（dispatch）事件通知store去改变。\n","source":"_posts/vue-01.md","raw":"---\ntitle: vue2.0中的eventBus\ndate: 2018-01-26 10:40:58\ntags: [vue,javascript]\n---\n### 1.定义\n主要是在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。\n\n### 2.用法\nbus.js\n```vue\nimport Vue from 'vue';  \nexport default new Vue();  \n```\n\n兄弟组件 click.vue\n```vue\n<template>\n\t<div class=\"click\" @click.stop.prevent=\"doClick($event)\"></div>  \n</template>\n\n<script>\n\timport Bus from 'common/js/bus.js';  \n\texport default{\n\t\tdata(){\n\t\t\treturn {}\n\t\t},\n\t\tmethods: {  \n           doClick(event) {  \n           \t\tBus.$emit('getTarget', event.target);   \n           }  \n        }  \n\t}\n</script>\n```\n\n兄弟组件 show.vue\n```vue\n<script >\n\timport Bus from 'common/js/bus.js';\n\texport default{\n\t\tdata(){\n\t\t\treturn {}\n\t\t},\n\t\tcreated() {  \n\t\t\tBus.$on('getTarget', target => {  \n\t\t\t\tconsole.log(target);  \n\t\t\t});  \n\t\t}\n\t}\n</script>\n```\n\n### 3.问题\n（1）$emit时，必须已经$on，否则无法监听到事件。\n（2）$on在组件销毁后不会自动解除绑定，若同一组件多次生成则会多次绑定事件，导致一次$emit，多次响应，需额外处理。\n（3）数据非\"长效\"数据，无法保存，只在$emit后生效。\n\n\n### 4.特殊的eventBus\nbus.js\n```javascript\nconst bus = new Vue({\n\tdata(){\n\t\treturn {\n\t\t\tval: ''\n\t\t}\n\t},\n\tcreated(){\n\t\tthis.$on('updateData',val=>{\n\t\t\tthis.val = val\n\t\t})\n\t}\n})\n```\n数据发出组件 click.vue\n```vue\nimport bus from 'xxx/bus'\n//触发在bus中已经绑定好的事件\nbus.$emit('updateData', 123)\n```\n数据接收组件\n```vue\n{{val}}\n\nimport bus from 'xxx/bus'\n//使用computed接收数据\ncomputed(){\n\tval(){\n\t\treturn bus.val\n\t}\n}\n```\n\n解决问题：\n(1)数据在bus上存在，所以可以不需要组件同时存在。\n(2)绑定监听都在bus上，不会重复绑定。\n(3)数据可以长效存在。\n\n这种eventBus可以达到简化版vuex的效果，通过$emit触发而不直接修改组件的值，是遵循vuex的架构。\n组件不允许直接修改属于store实例的state，而应执行action来分发（dispatch）事件通知store去改变。\n","slug":"vue-01","published":1,"updated":"2018-01-26T03:14:17.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct39x001enilwsncv42m3","content":"<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h3><p>主要是在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。</p>\n<h3 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h3><p>bus.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Vue from &apos;vue&apos;;  </div><div class=\"line\">export default new Vue();</div></pre></td></tr></table></figure></p>\n<p>兄弟组件 click.vue<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">\t&lt;div class=&quot;click&quot; @click.stop.prevent=&quot;doClick($event)&quot;&gt;&lt;/div&gt;  </div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\timport Bus from &apos;common/js/bus.js&apos;;  </div><div class=\"line\">\texport default&#123;</div><div class=\"line\">\t\tdata()&#123;</div><div class=\"line\">\t\t\treturn &#123;&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tmethods: &#123;  </div><div class=\"line\">           doClick(event) &#123;  </div><div class=\"line\">           \t\tBus.$emit(&apos;getTarget&apos;, event.target);   </div><div class=\"line\">           &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>兄弟组件 show.vue<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script &gt;</div><div class=\"line\">\timport Bus from &apos;common/js/bus.js&apos;;</div><div class=\"line\">\texport default&#123;</div><div class=\"line\">\t\tdata()&#123;</div><div class=\"line\">\t\t\treturn &#123;&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tcreated() &#123;  </div><div class=\"line\">\t\t\tBus.$on(&apos;getTarget&apos;, target =&gt; &#123;  </div><div class=\"line\">\t\t\t\tconsole.log(target);  </div><div class=\"line\">\t\t\t&#125;);  </div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-问题\"><a href=\"#3-问题\" class=\"headerlink\" title=\"3.问题\"></a>3.问题</h3><p>（1）$emit时，必须已经$on，否则无法监听到事件。<br>（2）$on在组件销毁后不会自动解除绑定，若同一组件多次生成则会多次绑定事件，导致一次$emit，多次响应，需额外处理。<br>（3）数据非”长效”数据，无法保存，只在$emit后生效。</p>\n<h3 id=\"4-特殊的eventBus\"><a href=\"#4-特殊的eventBus\" class=\"headerlink\" title=\"4.特殊的eventBus\"></a>4.特殊的eventBus</h3><p>bus.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> bus = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">\tdata()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t\tval: <span class=\"string\">''</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tcreated()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.$on(<span class=\"string\">'updateData'</span>,val=&gt;&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.val = val</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>数据发出组件 click.vue<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import bus from &apos;xxx/bus&apos;</div><div class=\"line\">//触发在bus中已经绑定好的事件</div><div class=\"line\">bus.$emit(&apos;updateData&apos;, 123)</div></pre></td></tr></table></figure></p>\n<p>数据接收组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;val&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">import bus from &apos;xxx/bus&apos;</div><div class=\"line\">//使用computed接收数据</div><div class=\"line\">computed()&#123;</div><div class=\"line\">\tval()&#123;</div><div class=\"line\">\t\treturn bus.val</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>解决问题：<br>(1)数据在bus上存在，所以可以不需要组件同时存在。<br>(2)绑定监听都在bus上，不会重复绑定。<br>(3)数据可以长效存在。</p>\n<p>这种eventBus可以达到简化版vuex的效果，通过$emit触发而不直接修改组件的值，是遵循vuex的架构。<br>组件不允许直接修改属于store实例的state，而应执行action来分发（dispatch）事件通知store去改变。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h3><p>主要是在要相互通信的兄弟组件之中，都引入一个新的vue实例，然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。</p>\n<h3 id=\"2-用法\"><a href=\"#2-用法\" class=\"headerlink\" title=\"2.用法\"></a>2.用法</h3><p>bus.js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Vue from &apos;vue&apos;;  </div><div class=\"line\">export default new Vue();</div></pre></td></tr></table></figure></p>\n<p>兄弟组件 click.vue<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;template&gt;</div><div class=\"line\">\t&lt;div class=&quot;click&quot; @click.stop.prevent=&quot;doClick($event)&quot;&gt;&lt;/div&gt;  </div><div class=\"line\">&lt;/template&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">\timport Bus from &apos;common/js/bus.js&apos;;  </div><div class=\"line\">\texport default&#123;</div><div class=\"line\">\t\tdata()&#123;</div><div class=\"line\">\t\t\treturn &#123;&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tmethods: &#123;  </div><div class=\"line\">           doClick(event) &#123;  </div><div class=\"line\">           \t\tBus.$emit(&apos;getTarget&apos;, event.target);   </div><div class=\"line\">           &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>兄弟组件 show.vue<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script &gt;</div><div class=\"line\">\timport Bus from &apos;common/js/bus.js&apos;;</div><div class=\"line\">\texport default&#123;</div><div class=\"line\">\t\tdata()&#123;</div><div class=\"line\">\t\t\treturn &#123;&#125;</div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\tcreated() &#123;  </div><div class=\"line\">\t\t\tBus.$on(&apos;getTarget&apos;, target =&gt; &#123;  </div><div class=\"line\">\t\t\t\tconsole.log(target);  </div><div class=\"line\">\t\t\t&#125;);  </div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-问题\"><a href=\"#3-问题\" class=\"headerlink\" title=\"3.问题\"></a>3.问题</h3><p>（1）$emit时，必须已经$on，否则无法监听到事件。<br>（2）$on在组件销毁后不会自动解除绑定，若同一组件多次生成则会多次绑定事件，导致一次$emit，多次响应，需额外处理。<br>（3）数据非”长效”数据，无法保存，只在$emit后生效。</p>\n<h3 id=\"4-特殊的eventBus\"><a href=\"#4-特殊的eventBus\" class=\"headerlink\" title=\"4.特殊的eventBus\"></a>4.特殊的eventBus</h3><p>bus.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> bus = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">\tdata()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t\tval: <span class=\"string\">''</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tcreated()&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.$on(<span class=\"string\">'updateData'</span>,val=&gt;&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">this</span>.val = val</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>数据发出组件 click.vue<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import bus from &apos;xxx/bus&apos;</div><div class=\"line\">//触发在bus中已经绑定好的事件</div><div class=\"line\">bus.$emit(&apos;updateData&apos;, 123)</div></pre></td></tr></table></figure></p>\n<p>数据接收组件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&#123;val&#125;&#125;</div><div class=\"line\"></div><div class=\"line\">import bus from &apos;xxx/bus&apos;</div><div class=\"line\">//使用computed接收数据</div><div class=\"line\">computed()&#123;</div><div class=\"line\">\tval()&#123;</div><div class=\"line\">\t\treturn bus.val</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>解决问题：<br>(1)数据在bus上存在，所以可以不需要组件同时存在。<br>(2)绑定监听都在bus上，不会重复绑定。<br>(3)数据可以长效存在。</p>\n<p>这种eventBus可以达到简化版vuex的效果，通过$emit触发而不直接修改组件的值，是遵循vuex的架构。<br>组件不允许直接修改属于store实例的state，而应执行action来分发（dispatch）事件通知store去改变。</p>\n"},{"title":"基于vue的简易日历","date":"2017-02-15T03:33:29.000Z","_content":"\n## 基于vue的简易日历\n------\n完成时间：2017.02\n核心技术：zepto,Aui,vue\n从小记app里提取出来的，代码有点乱\n\n------\n## 先看效果图\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo2.png)\n\n[点击查看webpack+vue-cli重写的](https://github.com/cry101/Some-little-projects/tree/master/vue-calendar)\n核心代码：HeaderCom.vue\n```html\n<template>\n  <div>\n    <header class=\"aui-bar aui-bar-nav\" id=\"header\">\n       <div class=\"aui-title\">\n          <span class=\"triangle triangle-left\" v-on:click=\"onReduce()\"><i></i></span>\n          <span id=\"year\">{{ year }}</span>年<span id=\"month\">{{ month }}</span>月\n          <span class=\"triangle triangle-right\" v-on:click=\"onPlus()\"><i></i></span>\n      </div>\n    </header>\n    <TableCom :year=\"year\" :month=\"month\"></TableCom>\n  </div>\n</template>\n\n<script>\nimport TableCom from 'components/TableCom'\n\nvar myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth()+1;\nexport default {\n  name: 'header',\n  data () {\n    return {\n      year: year,\n      month : month\n    }\n  },\n  components: {\n    TableCom\n  },\n  methods: {\n      onReduce: function(){\n          if(this.month == 1){\n               this.year = parseInt(this.year)-1;\n               this.month = 12;\n          }else{\n               this.month =  parseInt(this.month)-1;\n          }\n      },\n      onPlus: function(){\n          if(this.month == 12){\n               this.year = parseInt(this.year)+1;\n               this.month = 1;\n          }else{\n               this.month = parseInt(this.month)+1;\n          }\n      }           \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#header {\n    text-align: center;\n    background-color: #fff;\n    color: #000;\n    width: 100%;\n    z-index: 0;\n}\n.aui-bar-nav {\n    top: 0;\n    line-height: 2.25rem;\n    background-color: #03a9f4;\n    color: #ffffff;\n}\n.aui-bar {\n    position: relative;\n    top: 0;\n    right: 0;\n    left: 0;\n    z-index: 10;\n    width: 100%;\n    min-height: 2.25rem;\n    font-size: 0.9rem;\n    text-align: center;\n    display: table;\n}\n.aui-bar-nav .aui-title {\n    min-height: 2.25rem;\n    position: absolute;\n    margin: 0;\n    text-align: center;\n    white-space: nowrap;\n    right: 5rem;\n    left: 5rem;\n    width: auto;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    z-index: 2;\n}\n.aui-bar-nav .aui-title{\n  right: 4rem;left: 4rem;\n}\n.triangle{\n  position:absolute;\n  padding: 0 .8rem;\n}\n.triangle-left{\n    left: 0;\n}\n.triangle-right{\n    right: 0;\n}\n.triangle i{\n  display: inline-block;\n  width: 0;\n    height: 0;\n}\n.triangle-left i{\n    border-top: 5px solid transparent;\n    border-right: 10px solid #79CDA9;\n    border-bottom: 5px solid transparent;\n}\n.triangle-right i{\n    border-top: 5px solid transparent;\n    border-left: 10px solid #79CDA9;\n    border-bottom: 5px solid transparent;\n}\n</style>\n```\n\n核心代码：TableCom.vue\n```html\n<template>\n  <table class=\"calendar\" id=\"calendar\">\n    <tbody>\n        <tr class=\"date-head clearfix\">\n            <th>日</th>\n            <th>一</th>\n            <th>二</th>\n            <th>三</th>\n            <th>四</th>\n            <th>五</th>\n            <th>六</th>\n        </tr>\n        <tr class=\"date-body clearfix\">\n            <td v-for=\"day in days\">\n                <p>{{day}}</p>\n            </td>\n        </tr>\n    </tbody>\n</table> \n</template>\n\n<script>\nvar myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth()+1;\n\nexport default {\n  name: 'TableCom',\n  data () {\n    return {\n      days: ''\n    }\n  },\n  props: ['year','month'],\n  watch: {\n    month: function() {\n        var year = this.year;\n        var month = this.month;\n        var oDate0 = new Date( year , month , '0' );\n        var oDate1 = new Date( year + '-' + month + '-' + '1' );\n        var oDateDays = oDate0.getDate();//当前月的天数\n        var oDateWeek = oDate1.getDay();//当前月1号的星期\n        var dayArr = [];\n        for(var i = 0 ; i < oDateWeek ; i++){\n            dayArr.push(\"\")\n        }\n        for(var j = 1 ; j <= oDateDays ; j++){\n            dayArr.push(j)\n        }\n        this.days = dayArr\n    }\n  },\n  mounted: function(){\n      var year = this.year;\n      var month = this.month;\n      var oDate0 = new Date( year , month , '0' );\n      var oDate1 = new Date( year + '-' + month + '-' + '1' );\n      var oDateDays = oDate0.getDate();//当前月的天数\n      var oDateWeek = oDate1.getDay();//当前月1号的星期\n      var dayArr = [];\n      for(var i = 0 ; i < oDateWeek ; i++){\n          dayArr.push(\"\")\n      }\n      for(var j = 1 ; j <= oDateDays ; j++){\n          dayArr.push(j)\n      }\n      this.days = dayArr          \n  },\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.calendar{\n  width: 100%;\n  text-align: center;\n}\n.calendar .date-head{\n  height: 2rem;\n  background: #79CDA9;\n  color: #fff;\n}\n.calendar .date-head th{\n  float: left;\n  height: 2rem;\n  width: 14.2%;\n  vertical-align: middle;\n  line-height: 2rem;\n}\n.calendar .date-body td{\n  float: left;\n  height: 3rem;\n  line-height: .7rem;\n  width: 14.2%;\n  vertical-align: middle;\n  border-bottom: 1px solid #ccc;\n}\n.calendar .date-body td>p{\n  padding-top: .5rem;\n}\n.calendar .date-body td>span{\n  font-size: .6rem;\n}\n.calendar .date-body td>span.income{\n  color: #8BD4B4;\n}\n.calendar .date-body td>span.expenditure{\n  color: #FB7189;\n}\n</style>\n\n\n```\n\n\n以下代码在apicloud中写的：\n由于在apicloud中写的，本来应该头部日期和日历是个父子组件，可是apicloud中是win窗口open出frame窗口，所以就这样吧\n```javascript\n//日历实例\nvar calendar = new Vue({\n      el: '#calendar',\n      data: {\n          days: \"\"\n      },\n      mounted: function(){\n          \n      },\n      methods: {\n         \n      }\n})\nfunction setCalendar(year , month){\n      var oDate0 = new Date( year , month , '0' );\n      var oDate1 = new Date( year + '-' + month + '-' + '1' );\n      console.log(oDate1)\n      var oDateDays = oDate0.getDate();//当前月的天数\n      var oDateWeek = oDate1.getDay();//当前月1号的星期\n      console.log(oDateWeek)\n      var dayArr = [];\n      for(var i = 0 ; i < oDateWeek ; i++){\n          dayArr.push(\"\")\n      }\n      for(var j = 1 ; j <= oDateDays ; j++){\n          dayArr.push(j)\n      }\n      console.log(dayArr)\n      calendar.days = dayArr\n  }\n```\n\n月份减一：\n```javascript\n function onReduce(){\n\t    var year = document.getElementById('year').innerHTML;\n\t    var month = document.getElementById('month').innerHTML;\n\t    if(month == 1){\n\t         document.getElementById('year').innerHTML = parseInt(year)-1;\n\t         document.getElementById('month').innerHTML = 12;\n\t    }else{\n\t         document.getElementById('month').innerHTML =  parseInt(month)-1;\n\t    }\n\t    setCalendar(document.getElementById('year').innerHTML , document.getElementById('month').innerHTML)\n\t}\n```\n\n月份加一：\n```javascript\nfunction onPlus(){\n    var year = document.getElementById('year').innerHTML;\n    var month = document.getElementById('month').innerHTML;\n    if(month == 12){\n         document.getElementById('year').innerHTML = parseInt(year)+1;\n         document.getElementById('month').innerHTML = 1;\n    }else{\n         document.getElementById('month').innerHTML = parseInt(month)+1;\n    }\n    setCalendar(document.getElementById('year').innerHTML , document.getElementById('month').innerHTML)\n}\n```\n\n[从apicloud提取出来的源码地址](https://github.com/cry101/Some-little-projects/tree/master/vue)\n","source":"_posts/vue-calendar.md","raw":"---\ntitle: 基于vue的简易日历\ndate: 2017-02-15 11:33:29\ntags: vue\n---\n\n## 基于vue的简易日历\n------\n完成时间：2017.02\n核心技术：zepto,Aui,vue\n从小记app里提取出来的，代码有点乱\n\n------\n## 先看效果图\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo2.png)\n\n[点击查看webpack+vue-cli重写的](https://github.com/cry101/Some-little-projects/tree/master/vue-calendar)\n核心代码：HeaderCom.vue\n```html\n<template>\n  <div>\n    <header class=\"aui-bar aui-bar-nav\" id=\"header\">\n       <div class=\"aui-title\">\n          <span class=\"triangle triangle-left\" v-on:click=\"onReduce()\"><i></i></span>\n          <span id=\"year\">{{ year }}</span>年<span id=\"month\">{{ month }}</span>月\n          <span class=\"triangle triangle-right\" v-on:click=\"onPlus()\"><i></i></span>\n      </div>\n    </header>\n    <TableCom :year=\"year\" :month=\"month\"></TableCom>\n  </div>\n</template>\n\n<script>\nimport TableCom from 'components/TableCom'\n\nvar myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth()+1;\nexport default {\n  name: 'header',\n  data () {\n    return {\n      year: year,\n      month : month\n    }\n  },\n  components: {\n    TableCom\n  },\n  methods: {\n      onReduce: function(){\n          if(this.month == 1){\n               this.year = parseInt(this.year)-1;\n               this.month = 12;\n          }else{\n               this.month =  parseInt(this.month)-1;\n          }\n      },\n      onPlus: function(){\n          if(this.month == 12){\n               this.year = parseInt(this.year)+1;\n               this.month = 1;\n          }else{\n               this.month = parseInt(this.month)+1;\n          }\n      }           \n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#header {\n    text-align: center;\n    background-color: #fff;\n    color: #000;\n    width: 100%;\n    z-index: 0;\n}\n.aui-bar-nav {\n    top: 0;\n    line-height: 2.25rem;\n    background-color: #03a9f4;\n    color: #ffffff;\n}\n.aui-bar {\n    position: relative;\n    top: 0;\n    right: 0;\n    left: 0;\n    z-index: 10;\n    width: 100%;\n    min-height: 2.25rem;\n    font-size: 0.9rem;\n    text-align: center;\n    display: table;\n}\n.aui-bar-nav .aui-title {\n    min-height: 2.25rem;\n    position: absolute;\n    margin: 0;\n    text-align: center;\n    white-space: nowrap;\n    right: 5rem;\n    left: 5rem;\n    width: auto;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    z-index: 2;\n}\n.aui-bar-nav .aui-title{\n  right: 4rem;left: 4rem;\n}\n.triangle{\n  position:absolute;\n  padding: 0 .8rem;\n}\n.triangle-left{\n    left: 0;\n}\n.triangle-right{\n    right: 0;\n}\n.triangle i{\n  display: inline-block;\n  width: 0;\n    height: 0;\n}\n.triangle-left i{\n    border-top: 5px solid transparent;\n    border-right: 10px solid #79CDA9;\n    border-bottom: 5px solid transparent;\n}\n.triangle-right i{\n    border-top: 5px solid transparent;\n    border-left: 10px solid #79CDA9;\n    border-bottom: 5px solid transparent;\n}\n</style>\n```\n\n核心代码：TableCom.vue\n```html\n<template>\n  <table class=\"calendar\" id=\"calendar\">\n    <tbody>\n        <tr class=\"date-head clearfix\">\n            <th>日</th>\n            <th>一</th>\n            <th>二</th>\n            <th>三</th>\n            <th>四</th>\n            <th>五</th>\n            <th>六</th>\n        </tr>\n        <tr class=\"date-body clearfix\">\n            <td v-for=\"day in days\">\n                <p>{{day}}</p>\n            </td>\n        </tr>\n    </tbody>\n</table> \n</template>\n\n<script>\nvar myDate = new Date();\nvar year = myDate.getFullYear();\nvar month = myDate.getMonth()+1;\n\nexport default {\n  name: 'TableCom',\n  data () {\n    return {\n      days: ''\n    }\n  },\n  props: ['year','month'],\n  watch: {\n    month: function() {\n        var year = this.year;\n        var month = this.month;\n        var oDate0 = new Date( year , month , '0' );\n        var oDate1 = new Date( year + '-' + month + '-' + '1' );\n        var oDateDays = oDate0.getDate();//当前月的天数\n        var oDateWeek = oDate1.getDay();//当前月1号的星期\n        var dayArr = [];\n        for(var i = 0 ; i < oDateWeek ; i++){\n            dayArr.push(\"\")\n        }\n        for(var j = 1 ; j <= oDateDays ; j++){\n            dayArr.push(j)\n        }\n        this.days = dayArr\n    }\n  },\n  mounted: function(){\n      var year = this.year;\n      var month = this.month;\n      var oDate0 = new Date( year , month , '0' );\n      var oDate1 = new Date( year + '-' + month + '-' + '1' );\n      var oDateDays = oDate0.getDate();//当前月的天数\n      var oDateWeek = oDate1.getDay();//当前月1号的星期\n      var dayArr = [];\n      for(var i = 0 ; i < oDateWeek ; i++){\n          dayArr.push(\"\")\n      }\n      for(var j = 1 ; j <= oDateDays ; j++){\n          dayArr.push(j)\n      }\n      this.days = dayArr          \n  },\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.calendar{\n  width: 100%;\n  text-align: center;\n}\n.calendar .date-head{\n  height: 2rem;\n  background: #79CDA9;\n  color: #fff;\n}\n.calendar .date-head th{\n  float: left;\n  height: 2rem;\n  width: 14.2%;\n  vertical-align: middle;\n  line-height: 2rem;\n}\n.calendar .date-body td{\n  float: left;\n  height: 3rem;\n  line-height: .7rem;\n  width: 14.2%;\n  vertical-align: middle;\n  border-bottom: 1px solid #ccc;\n}\n.calendar .date-body td>p{\n  padding-top: .5rem;\n}\n.calendar .date-body td>span{\n  font-size: .6rem;\n}\n.calendar .date-body td>span.income{\n  color: #8BD4B4;\n}\n.calendar .date-body td>span.expenditure{\n  color: #FB7189;\n}\n</style>\n\n\n```\n\n\n以下代码在apicloud中写的：\n由于在apicloud中写的，本来应该头部日期和日历是个父子组件，可是apicloud中是win窗口open出frame窗口，所以就这样吧\n```javascript\n//日历实例\nvar calendar = new Vue({\n      el: '#calendar',\n      data: {\n          days: \"\"\n      },\n      mounted: function(){\n          \n      },\n      methods: {\n         \n      }\n})\nfunction setCalendar(year , month){\n      var oDate0 = new Date( year , month , '0' );\n      var oDate1 = new Date( year + '-' + month + '-' + '1' );\n      console.log(oDate1)\n      var oDateDays = oDate0.getDate();//当前月的天数\n      var oDateWeek = oDate1.getDay();//当前月1号的星期\n      console.log(oDateWeek)\n      var dayArr = [];\n      for(var i = 0 ; i < oDateWeek ; i++){\n          dayArr.push(\"\")\n      }\n      for(var j = 1 ; j <= oDateDays ; j++){\n          dayArr.push(j)\n      }\n      console.log(dayArr)\n      calendar.days = dayArr\n  }\n```\n\n月份减一：\n```javascript\n function onReduce(){\n\t    var year = document.getElementById('year').innerHTML;\n\t    var month = document.getElementById('month').innerHTML;\n\t    if(month == 1){\n\t         document.getElementById('year').innerHTML = parseInt(year)-1;\n\t         document.getElementById('month').innerHTML = 12;\n\t    }else{\n\t         document.getElementById('month').innerHTML =  parseInt(month)-1;\n\t    }\n\t    setCalendar(document.getElementById('year').innerHTML , document.getElementById('month').innerHTML)\n\t}\n```\n\n月份加一：\n```javascript\nfunction onPlus(){\n    var year = document.getElementById('year').innerHTML;\n    var month = document.getElementById('month').innerHTML;\n    if(month == 12){\n         document.getElementById('year').innerHTML = parseInt(year)+1;\n         document.getElementById('month').innerHTML = 1;\n    }else{\n         document.getElementById('month').innerHTML = parseInt(month)+1;\n    }\n    setCalendar(document.getElementById('year').innerHTML , document.getElementById('month').innerHTML)\n}\n```\n\n[从apicloud提取出来的源码地址](https://github.com/cry101/Some-little-projects/tree/master/vue)\n","slug":"vue-calendar","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3a1001hnilwlb1t615x","content":"<h2 id=\"基于vue的简易日历\"><a href=\"#基于vue的简易日历\" class=\"headerlink\" title=\"基于vue的简易日历\"></a>基于vue的简易日历</h2><hr>\n<p>完成时间：2017.02<br>核心技术：zepto,Aui,vue<br>从小记app里提取出来的，代码有点乱</p>\n<hr>\n<h2 id=\"先看效果图\"><a href=\"#先看效果图\" class=\"headerlink\" title=\"先看效果图\"></a>先看效果图</h2><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo2.png\" alt=\"图片\"></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue-calendar\" target=\"_blank\" rel=\"external\">点击查看webpack+vue-cli重写的</a><br>核心代码：HeaderCom.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aui-bar aui-bar-nav\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aui-title\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle triangle-left\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"onReduce()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"year\"</span>&gt;</span>&#123;&#123; year &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>年<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"month\"</span>&gt;</span>&#123;&#123; month &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>月</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle triangle-right\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"onPlus()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TableCom</span> <span class=\"attr\">:year</span>=<span class=\"string\">\"year\"</span> <span class=\"attr\">:month</span>=<span class=\"string\">\"month\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TableCom</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> TableCom <span class=\"keyword\">from</span> <span class=\"string\">'components/TableCom'</span></span></div><div class=\"line\"><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> year = myDate.getFullYear();</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> month = myDate.getMonth()+<span class=\"number\">1</span>;</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></div><div class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'header'</span>,</span></div><div class=\"line\"><span class=\"undefined\">  data () &#123;</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></div><div class=\"line\"><span class=\"undefined\">      year: year,</span></div><div class=\"line\"><span class=\"undefined\">      month : month</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">  &#125;,</span></div><div class=\"line\"><span class=\"undefined\">  components: &#123;</span></div><div class=\"line\"><span class=\"undefined\">    TableCom</span></div><div class=\"line\"><span class=\"undefined\">  &#125;,</span></div><div class=\"line\"><span class=\"undefined\">  methods: &#123;</span></div><div class=\"line\"><span class=\"javascript\">      onReduce: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.month == <span class=\"number\">1</span>)&#123;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.year = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.year)<span class=\"number\">-1</span>;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.month = <span class=\"number\">12</span>;</span></div><div class=\"line\"><span class=\"javascript\">          &#125;<span class=\"keyword\">else</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.month =  <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.month)<span class=\"number\">-1</span>;</span></div><div class=\"line\"><span class=\"undefined\">          &#125;</span></div><div class=\"line\"><span class=\"undefined\">      &#125;,</span></div><div class=\"line\"><span class=\"javascript\">      onPlus: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.month == <span class=\"number\">12</span>)&#123;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.year = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.year)+<span class=\"number\">1</span>;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.month = <span class=\"number\">1</span>;</span></div><div class=\"line\"><span class=\"javascript\">          &#125;<span class=\"keyword\">else</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.month = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.month)+<span class=\"number\">1</span>;</span></div><div class=\"line\"><span class=\"undefined\">          &#125;</span></div><div class=\"line\"><span class=\"undefined\">      &#125;           </span></div><div class=\"line\"><span class=\"undefined\">  &#125;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Add \"scoped\" attribute to limit CSS to this component only --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-id\">#header</span> &#123;</span></div><div class=\"line\"><span class=\"undefined\">    text-align: center;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#fff</span>;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#000</span>;</span></div><div class=\"line\"><span class=\"undefined\">    width: 100%;</span></div><div class=\"line\"><span class=\"undefined\">    z-index: 0;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.aui-bar-nav</span> &#123;</span></div><div class=\"line\"><span class=\"undefined\">    top: 0;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">line-height</span>: 2<span class=\"selector-class\">.25rem</span>;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#03a9f4</span>;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#ffffff</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.aui-bar</span> &#123;</span></div><div class=\"line\"><span class=\"undefined\">    position: relative;</span></div><div class=\"line\"><span class=\"undefined\">    top: 0;</span></div><div class=\"line\"><span class=\"undefined\">    right: 0;</span></div><div class=\"line\"><span class=\"undefined\">    left: 0;</span></div><div class=\"line\"><span class=\"undefined\">    z-index: 10;</span></div><div class=\"line\"><span class=\"undefined\">    width: 100%;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">min-height</span>: 2<span class=\"selector-class\">.25rem</span>;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-size</span>: 0<span class=\"selector-class\">.9rem</span>;</span></div><div class=\"line\"><span class=\"undefined\">    text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">    display: table;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.aui-bar-nav</span> <span class=\"selector-class\">.aui-title</span> &#123;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">min-height</span>: 2<span class=\"selector-class\">.25rem</span>;</span></div><div class=\"line\"><span class=\"undefined\">    position: absolute;</span></div><div class=\"line\"><span class=\"undefined\">    margin: 0;</span></div><div class=\"line\"><span class=\"undefined\">    text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">    white-space: nowrap;</span></div><div class=\"line\"><span class=\"undefined\">    right: 5rem;</span></div><div class=\"line\"><span class=\"undefined\">    left: 5rem;</span></div><div class=\"line\"><span class=\"undefined\">    width: auto;</span></div><div class=\"line\"><span class=\"undefined\">    overflow: hidden;</span></div><div class=\"line\"><span class=\"undefined\">    text-overflow: ellipsis;</span></div><div class=\"line\"><span class=\"undefined\">    z-index: 2;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.aui-bar-nav</span> <span class=\"selector-class\">.aui-title</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  right: 4rem;left: 4rem;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle</span>&#123;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">padding</span>: 0 <span class=\"selector-class\">.8rem</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle-left</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">    left: 0;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle-right</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">    right: 0;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle</span> <span class=\"selector-tag\">i</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  display: inline-block;</span></div><div class=\"line\"><span class=\"undefined\">  width: 0;</span></div><div class=\"line\"><span class=\"undefined\">    height: 0;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle-left</span> <span class=\"selector-tag\">i</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">    border-top: 5px solid transparent;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">border-right</span>: 10<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#79CDA9</span>;</span></div><div class=\"line\"><span class=\"undefined\">    border-bottom: 5px solid transparent;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle-right</span> <span class=\"selector-tag\">i</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">    border-top: 5px solid transparent;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">border-left</span>: 10<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#79CDA9</span>;</span></div><div class=\"line\"><span class=\"undefined\">    border-bottom: 5px solid transparent;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>核心代码：TableCom.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"calendar\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"calendar\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"date-head clearfix\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>日<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>一<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>二<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>三<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>四<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>五<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>六<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"date-body clearfix\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"day in days\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;day&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> year = myDate.getFullYear();</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> month = myDate.getMonth()+<span class=\"number\">1</span>;</span></div><div class=\"line\"><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></div><div class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'TableCom'</span>,</span></div><div class=\"line\"><span class=\"undefined\">  data () &#123;</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></div><div class=\"line\"><span class=\"javascript\">      days: <span class=\"string\">''</span></span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">  &#125;,</span></div><div class=\"line\"><span class=\"javascript\">  props: [<span class=\"string\">'year'</span>,<span class=\"string\">'month'</span>],</span></div><div class=\"line\"><span class=\"undefined\">  watch: &#123;</span></div><div class=\"line\"><span class=\"javascript\">    month: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> year = <span class=\"keyword\">this</span>.year;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> month = <span class=\"keyword\">this</span>.month;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> dayArr = [];</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</span></div><div class=\"line\"><span class=\"javascript\">            dayArr.push(<span class=\"string\">\"\"</span>)</span></div><div class=\"line\"><span class=\"undefined\">        &#125;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</span></div><div class=\"line\"><span class=\"undefined\">            dayArr.push(j)</span></div><div class=\"line\"><span class=\"undefined\">        &#125;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.days = dayArr</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">  &#125;,</span></div><div class=\"line\"><span class=\"javascript\">  mounted: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> year = <span class=\"keyword\">this</span>.year;</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> month = <span class=\"keyword\">this</span>.month;</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> dayArr = [];</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</span></div><div class=\"line\"><span class=\"javascript\">          dayArr.push(<span class=\"string\">\"\"</span>)</span></div><div class=\"line\"><span class=\"undefined\">      &#125;</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</span></div><div class=\"line\"><span class=\"undefined\">          dayArr.push(j)</span></div><div class=\"line\"><span class=\"undefined\">      &#125;</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.days = dayArr          </span></div><div class=\"line\"><span class=\"undefined\">  &#125;,</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Add \"scoped\" attribute to limit CSS to this component only --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  width: 100%;</span></div><div class=\"line\"><span class=\"undefined\">  text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-head</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  height: 2rem;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#79CDA9</span>;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-head</span> <span class=\"selector-tag\">th</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  float: left;</span></div><div class=\"line\"><span class=\"undefined\">  height: 2rem;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">width</span>: 14<span class=\"selector-class\">.2</span>%;</span></div><div class=\"line\"><span class=\"undefined\">  vertical-align: middle;</span></div><div class=\"line\"><span class=\"undefined\">  line-height: 2rem;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  float: left;</span></div><div class=\"line\"><span class=\"undefined\">  height: 3rem;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">line-height</span>: <span class=\"selector-class\">.7rem</span>;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">width</span>: 14<span class=\"selector-class\">.2</span>%;</span></div><div class=\"line\"><span class=\"undefined\">  vertical-align: middle;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">p</span>&#123;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">padding-top</span>: <span class=\"selector-class\">.5rem</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span>&#123;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">font-size</span>: <span class=\"selector-class\">.6rem</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-class\">.income</span>&#123;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#8BD4B4</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-class\">.expenditure</span>&#123;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#FB7189</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>以下代码在apicloud中写的：<br>由于在apicloud中写的，本来应该头部日期和日历是个父子组件，可是apicloud中是win窗口open出frame窗口，所以就这样吧<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//日历实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> calendar = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      el: <span class=\"string\">'#calendar'</span>,</div><div class=\"line\">      data: &#123;</div><div class=\"line\">          days: <span class=\"string\">\"\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      mounted: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          </div><div class=\"line\">      &#125;,</div><div class=\"line\">      methods: &#123;</div><div class=\"line\">         </div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCalendar</span>(<span class=\"params\">year , month</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(oDate1)</div><div class=\"line\">      <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></div><div class=\"line\">      <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(oDateWeek)</div><div class=\"line\">      <span class=\"keyword\">var</span> dayArr = [];</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class=\"line\">          dayArr.push(<span class=\"string\">\"\"</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class=\"line\">          dayArr.push(j)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(dayArr)</div><div class=\"line\">      calendar.days = dayArr</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>月份减一：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReduce</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> year = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">var</span> month = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">if</span>(month == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(year)<span class=\"number\">-1</span>;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"number\">12</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML =  <span class=\"built_in\">parseInt</span>(month)<span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setCalendar(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML , <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>月份加一：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPlus</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> year = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">var</span> month = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">if</span>(month == <span class=\"number\">12</span>)&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(year)+<span class=\"number\">1</span>;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(month)+<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setCalendar(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML , <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue\" target=\"_blank\" rel=\"external\">从apicloud提取出来的源码地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基于vue的简易日历\"><a href=\"#基于vue的简易日历\" class=\"headerlink\" title=\"基于vue的简易日历\"></a>基于vue的简易日历</h2><hr>\n<p>完成时间：2017.02<br>核心技术：zepto,Aui,vue<br>从小记app里提取出来的，代码有点乱</p>\n<hr>\n<h2 id=\"先看效果图\"><a href=\"#先看效果图\" class=\"headerlink\" title=\"先看效果图\"></a>先看效果图</h2><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo2.png\" alt=\"图片\"></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue-calendar\" target=\"_blank\" rel=\"external\">点击查看webpack+vue-cli重写的</a><br>核心代码：HeaderCom.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aui-bar aui-bar-nav\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aui-title\"</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle triangle-left\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"onReduce()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"year\"</span>&gt;</span>&#123;&#123; year &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>年<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"month\"</span>&gt;</span>&#123;&#123; month &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>月</div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"triangle triangle-right\"</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"onPlus()\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TableCom</span> <span class=\"attr\">:year</span>=<span class=\"string\">\"year\"</span> <span class=\"attr\">:month</span>=<span class=\"string\">\"month\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TableCom</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> TableCom <span class=\"keyword\">from</span> <span class=\"string\">'components/TableCom'</span></span></div><div class=\"line\"><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> year = myDate.getFullYear();</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> month = myDate.getMonth()+<span class=\"number\">1</span>;</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></div><div class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'header'</span>,</span></div><div class=\"line\"><span class=\"undefined\">  data () &#123;</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></div><div class=\"line\"><span class=\"undefined\">      year: year,</span></div><div class=\"line\"><span class=\"undefined\">      month : month</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">  &#125;,</span></div><div class=\"line\"><span class=\"undefined\">  components: &#123;</span></div><div class=\"line\"><span class=\"undefined\">    TableCom</span></div><div class=\"line\"><span class=\"undefined\">  &#125;,</span></div><div class=\"line\"><span class=\"undefined\">  methods: &#123;</span></div><div class=\"line\"><span class=\"javascript\">      onReduce: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.month == <span class=\"number\">1</span>)&#123;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.year = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.year)<span class=\"number\">-1</span>;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.month = <span class=\"number\">12</span>;</span></div><div class=\"line\"><span class=\"javascript\">          &#125;<span class=\"keyword\">else</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.month =  <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.month)<span class=\"number\">-1</span>;</span></div><div class=\"line\"><span class=\"undefined\">          &#125;</span></div><div class=\"line\"><span class=\"undefined\">      &#125;,</span></div><div class=\"line\"><span class=\"javascript\">      onPlus: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.month == <span class=\"number\">12</span>)&#123;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.year = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.year)+<span class=\"number\">1</span>;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.month = <span class=\"number\">1</span>;</span></div><div class=\"line\"><span class=\"javascript\">          &#125;<span class=\"keyword\">else</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">               <span class=\"keyword\">this</span>.month = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">this</span>.month)+<span class=\"number\">1</span>;</span></div><div class=\"line\"><span class=\"undefined\">          &#125;</span></div><div class=\"line\"><span class=\"undefined\">      &#125;           </span></div><div class=\"line\"><span class=\"undefined\">  &#125;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Add \"scoped\" attribute to limit CSS to this component only --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-id\">#header</span> &#123;</span></div><div class=\"line\"><span class=\"undefined\">    text-align: center;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#fff</span>;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#000</span>;</span></div><div class=\"line\"><span class=\"undefined\">    width: 100%;</span></div><div class=\"line\"><span class=\"undefined\">    z-index: 0;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.aui-bar-nav</span> &#123;</span></div><div class=\"line\"><span class=\"undefined\">    top: 0;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">line-height</span>: 2<span class=\"selector-class\">.25rem</span>;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#03a9f4</span>;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#ffffff</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.aui-bar</span> &#123;</span></div><div class=\"line\"><span class=\"undefined\">    position: relative;</span></div><div class=\"line\"><span class=\"undefined\">    top: 0;</span></div><div class=\"line\"><span class=\"undefined\">    right: 0;</span></div><div class=\"line\"><span class=\"undefined\">    left: 0;</span></div><div class=\"line\"><span class=\"undefined\">    z-index: 10;</span></div><div class=\"line\"><span class=\"undefined\">    width: 100%;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">min-height</span>: 2<span class=\"selector-class\">.25rem</span>;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">font-size</span>: 0<span class=\"selector-class\">.9rem</span>;</span></div><div class=\"line\"><span class=\"undefined\">    text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">    display: table;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.aui-bar-nav</span> <span class=\"selector-class\">.aui-title</span> &#123;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">min-height</span>: 2<span class=\"selector-class\">.25rem</span>;</span></div><div class=\"line\"><span class=\"undefined\">    position: absolute;</span></div><div class=\"line\"><span class=\"undefined\">    margin: 0;</span></div><div class=\"line\"><span class=\"undefined\">    text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">    white-space: nowrap;</span></div><div class=\"line\"><span class=\"undefined\">    right: 5rem;</span></div><div class=\"line\"><span class=\"undefined\">    left: 5rem;</span></div><div class=\"line\"><span class=\"undefined\">    width: auto;</span></div><div class=\"line\"><span class=\"undefined\">    overflow: hidden;</span></div><div class=\"line\"><span class=\"undefined\">    text-overflow: ellipsis;</span></div><div class=\"line\"><span class=\"undefined\">    z-index: 2;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.aui-bar-nav</span> <span class=\"selector-class\">.aui-title</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  right: 4rem;left: 4rem;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle</span>&#123;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">position</span><span class=\"selector-pseudo\">:absolute</span>;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">padding</span>: 0 <span class=\"selector-class\">.8rem</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle-left</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">    left: 0;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle-right</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">    right: 0;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle</span> <span class=\"selector-tag\">i</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  display: inline-block;</span></div><div class=\"line\"><span class=\"undefined\">  width: 0;</span></div><div class=\"line\"><span class=\"undefined\">    height: 0;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle-left</span> <span class=\"selector-tag\">i</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">    border-top: 5px solid transparent;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">border-right</span>: 10<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#79CDA9</span>;</span></div><div class=\"line\"><span class=\"undefined\">    border-bottom: 5px solid transparent;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.triangle-right</span> <span class=\"selector-tag\">i</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">    border-top: 5px solid transparent;</span></div><div class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">border-left</span>: 10<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#79CDA9</span>;</span></div><div class=\"line\"><span class=\"undefined\">    border-bottom: 5px solid transparent;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>核心代码：TableCom.vue<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"calendar\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"calendar\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"date-head clearfix\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>日<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>一<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>二<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>三<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>四<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>五<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>六<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">\"date-body clearfix\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"day in days\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;day&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> year = myDate.getFullYear();</span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> month = myDate.getMonth()+<span class=\"number\">1</span>;</span></div><div class=\"line\"><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></div><div class=\"line\"><span class=\"javascript\">  name: <span class=\"string\">'TableCom'</span>,</span></div><div class=\"line\"><span class=\"undefined\">  data () &#123;</span></div><div class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></div><div class=\"line\"><span class=\"javascript\">      days: <span class=\"string\">''</span></span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">  &#125;,</span></div><div class=\"line\"><span class=\"javascript\">  props: [<span class=\"string\">'year'</span>,<span class=\"string\">'month'</span>],</span></div><div class=\"line\"><span class=\"undefined\">  watch: &#123;</span></div><div class=\"line\"><span class=\"javascript\">    month: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> year = <span class=\"keyword\">this</span>.year;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> month = <span class=\"keyword\">this</span>.month;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> dayArr = [];</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</span></div><div class=\"line\"><span class=\"javascript\">            dayArr.push(<span class=\"string\">\"\"</span>)</span></div><div class=\"line\"><span class=\"undefined\">        &#125;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</span></div><div class=\"line\"><span class=\"undefined\">            dayArr.push(j)</span></div><div class=\"line\"><span class=\"undefined\">        &#125;</span></div><div class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.days = dayArr</span></div><div class=\"line\"><span class=\"undefined\">    &#125;</span></div><div class=\"line\"><span class=\"undefined\">  &#125;,</span></div><div class=\"line\"><span class=\"javascript\">  mounted: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> year = <span class=\"keyword\">this</span>.year;</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> month = <span class=\"keyword\">this</span>.month;</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> dayArr = [];</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</span></div><div class=\"line\"><span class=\"javascript\">          dayArr.push(<span class=\"string\">\"\"</span>)</span></div><div class=\"line\"><span class=\"undefined\">      &#125;</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</span></div><div class=\"line\"><span class=\"undefined\">          dayArr.push(j)</span></div><div class=\"line\"><span class=\"undefined\">      &#125;</span></div><div class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.days = dayArr          </span></div><div class=\"line\"><span class=\"undefined\">  &#125;,</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- Add \"scoped\" attribute to limit CSS to this component only --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  width: 100%;</span></div><div class=\"line\"><span class=\"undefined\">  text-align: center;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-head</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  height: 2rem;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#79CDA9</span>;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-head</span> <span class=\"selector-tag\">th</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  float: left;</span></div><div class=\"line\"><span class=\"undefined\">  height: 2rem;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">width</span>: 14<span class=\"selector-class\">.2</span>%;</span></div><div class=\"line\"><span class=\"undefined\">  vertical-align: middle;</span></div><div class=\"line\"><span class=\"undefined\">  line-height: 2rem;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&#123;</span></div><div class=\"line\"><span class=\"undefined\">  float: left;</span></div><div class=\"line\"><span class=\"undefined\">  height: 3rem;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">line-height</span>: <span class=\"selector-class\">.7rem</span>;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">width</span>: 14<span class=\"selector-class\">.2</span>%;</span></div><div class=\"line\"><span class=\"undefined\">  vertical-align: middle;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#ccc</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">p</span>&#123;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">padding-top</span>: <span class=\"selector-class\">.5rem</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span>&#123;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">font-size</span>: <span class=\"selector-class\">.6rem</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-class\">.income</span>&#123;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#8BD4B4</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"css\"><span class=\"selector-class\">.calendar</span> <span class=\"selector-class\">.date-body</span> <span class=\"selector-tag\">td</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-class\">.expenditure</span>&#123;</span></div><div class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#FB7189</span>;</span></div><div class=\"line\"><span class=\"undefined\">&#125;</span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>以下代码在apicloud中写的：<br>由于在apicloud中写的，本来应该头部日期和日历是个父子组件，可是apicloud中是win窗口open出frame窗口，所以就这样吧<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//日历实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> calendar = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      el: <span class=\"string\">'#calendar'</span>,</div><div class=\"line\">      data: &#123;</div><div class=\"line\">          days: <span class=\"string\">\"\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      mounted: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          </div><div class=\"line\">      &#125;,</div><div class=\"line\">      methods: &#123;</div><div class=\"line\">         </div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCalendar</span>(<span class=\"params\">year , month</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate0 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year , month , <span class=\"string\">'0'</span> );</div><div class=\"line\">      <span class=\"keyword\">var</span> oDate1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( year + <span class=\"string\">'-'</span> + month + <span class=\"string\">'-'</span> + <span class=\"string\">'1'</span> );</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(oDate1)</div><div class=\"line\">      <span class=\"keyword\">var</span> oDateDays = oDate0.getDate();<span class=\"comment\">//当前月的天数</span></div><div class=\"line\">      <span class=\"keyword\">var</span> oDateWeek = oDate1.getDay();<span class=\"comment\">//当前月1号的星期</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(oDateWeek)</div><div class=\"line\">      <span class=\"keyword\">var</span> dayArr = [];</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class=\"line\">          dayArr.push(<span class=\"string\">\"\"</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class=\"line\">          dayArr.push(j)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(dayArr)</div><div class=\"line\">      calendar.days = dayArr</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>月份减一：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReduce</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> year = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">var</span> month = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">if</span>(month == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(year)<span class=\"number\">-1</span>;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"number\">12</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML =  <span class=\"built_in\">parseInt</span>(month)<span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setCalendar(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML , <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>月份加一：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPlus</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> year = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">var</span> month = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML;</div><div class=\"line\">    <span class=\"keyword\">if</span>(month == <span class=\"number\">12</span>)&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(year)+<span class=\"number\">1</span>;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML = <span class=\"built_in\">parseInt</span>(month)+<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    setCalendar(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'year'</span>).innerHTML , <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'month'</span>).innerHTML)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue\" target=\"_blank\" rel=\"external\">从apicloud提取出来的源码地址</a></p>\n"},{"title":"前端性能优化-缓存","date":"2017-08-15T01:53:25.000Z","_content":"### 1.sessionStorage\n关闭页面自动回收，页面刷新不会清除，不可跨页面交互。\n\n### 2.userData\n早期IE用的存储方案。\n单个文件大小限制是128kb，一个域名下总共可以保存1024kb;\n在受限站点里这两个值分别是64kb和640kb;\n\n### 3.Cookie\n优点：兼容性最好，几乎所有的浏览器都支持。\n缺点：大小有限制，而且每次发送请求，请求头里都会带着Cookie一起发过去，现在基本大多数登陆的合法性验证都是用cookie验证的。\n\n### 4.openDatabase\n完整的前端数据库\n```javascript\nvar dataBase;\nthis.createDatabase = function() {\n    dataBase = openDatabase(\"teacher\", \"1.0\", \"教师表\", 1024 * 1024, function() {});\n    if (!dataBase) {\n        alert(\"数据库创建失败！\");\n    } else {\n        alert(\"数据库创建成功！\");\n    }\n}\n\nthis.createTable = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"create table if not exists teacher (id REAL UNIQUE, name TEXT)\", [],\n            function(context, result) {\n                alert('创建teacher表成功');\n            },\n            function(context, error) {\n                alert('创建teacher表失败:' + error.message);\n            });\n    });\n}\n\nthis.insertData = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"1\", 'aa老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"2\", 'bb老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"3\", 'cc老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n}\n\nthis.queryData = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"select * from teacher\", [],\n            function(context, result) {\n                console.log(result);\n                console.log(context);\n\n            },\n            function(context, error) {\n                alert('查询失败: ' + error.message);\n            });\n    });\n}\n\n//删除表\nthis.dropTable = function() {\n    dataBase.transaction(function(tx) {\n        tx.executeSql('drop table teacher');\n    });\n}\n```\n\n### 5.localstorage\n优点：兼容性中等，操作简单，就是key-value形式，几乎现代的浏览器都支持。\n缺点：存在大小限制(5M)，IE9,IE10不支持。不跨浏览器，不跨域名。\n```javascript\nlocalStorage.setItem(\"keyl\", \"valuel\");\n\nlocalStorage.clear();\n```\n","source":"_posts/web-cache.md","raw":"---\ntitle: 前端性能优化-缓存\ndate: 2017-08-15 09:53:25\ntags: [web,cookie]\n---\n### 1.sessionStorage\n关闭页面自动回收，页面刷新不会清除，不可跨页面交互。\n\n### 2.userData\n早期IE用的存储方案。\n单个文件大小限制是128kb，一个域名下总共可以保存1024kb;\n在受限站点里这两个值分别是64kb和640kb;\n\n### 3.Cookie\n优点：兼容性最好，几乎所有的浏览器都支持。\n缺点：大小有限制，而且每次发送请求，请求头里都会带着Cookie一起发过去，现在基本大多数登陆的合法性验证都是用cookie验证的。\n\n### 4.openDatabase\n完整的前端数据库\n```javascript\nvar dataBase;\nthis.createDatabase = function() {\n    dataBase = openDatabase(\"teacher\", \"1.0\", \"教师表\", 1024 * 1024, function() {});\n    if (!dataBase) {\n        alert(\"数据库创建失败！\");\n    } else {\n        alert(\"数据库创建成功！\");\n    }\n}\n\nthis.createTable = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"create table if not exists teacher (id REAL UNIQUE, name TEXT)\", [],\n            function(context, result) {\n                alert('创建teacher表成功');\n            },\n            function(context, error) {\n                alert('创建teacher表失败:' + error.message);\n            });\n    });\n}\n\nthis.insertData = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"1\", 'aa老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"2\", 'bb老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"insert into teacher (id, name) values(?, ?)\", [\"3\", 'cc老师'],\n            function() {\n                console.log('添加数据成功');\n            },\n            function(context, error) {\n                console.log('添加数据失败: ' + error.message);\n            });\n    });\n}\n\nthis.queryData = function() {\n    dataBase.transaction(function(context) {\n        context.executeSql(\n            \"select * from teacher\", [],\n            function(context, result) {\n                console.log(result);\n                console.log(context);\n\n            },\n            function(context, error) {\n                alert('查询失败: ' + error.message);\n            });\n    });\n}\n\n//删除表\nthis.dropTable = function() {\n    dataBase.transaction(function(tx) {\n        tx.executeSql('drop table teacher');\n    });\n}\n```\n\n### 5.localstorage\n优点：兼容性中等，操作简单，就是key-value形式，几乎现代的浏览器都支持。\n缺点：存在大小限制(5M)，IE9,IE10不支持。不跨浏览器，不跨域名。\n```javascript\nlocalStorage.setItem(\"keyl\", \"valuel\");\n\nlocalStorage.clear();\n```\n","slug":"web-cache","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3a5001inilwrmtjqp1w","content":"<h3 id=\"1-sessionStorage\"><a href=\"#1-sessionStorage\" class=\"headerlink\" title=\"1.sessionStorage\"></a>1.sessionStorage</h3><p>关闭页面自动回收，页面刷新不会清除，不可跨页面交互。</p>\n<h3 id=\"2-userData\"><a href=\"#2-userData\" class=\"headerlink\" title=\"2.userData\"></a>2.userData</h3><p>早期IE用的存储方案。<br>单个文件大小限制是128kb，一个域名下总共可以保存1024kb;<br>在受限站点里这两个值分别是64kb和640kb;</p>\n<h3 id=\"3-Cookie\"><a href=\"#3-Cookie\" class=\"headerlink\" title=\"3.Cookie\"></a>3.Cookie</h3><p>优点：兼容性最好，几乎所有的浏览器都支持。<br>缺点：大小有限制，而且每次发送请求，请求头里都会带着Cookie一起发过去，现在基本大多数登陆的合法性验证都是用cookie验证的。</p>\n<h3 id=\"4-openDatabase\"><a href=\"#4-openDatabase\" class=\"headerlink\" title=\"4.openDatabase\"></a>4.openDatabase</h3><p>完整的前端数据库<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dataBase;</div><div class=\"line\"><span class=\"keyword\">this</span>.createDatabase = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    dataBase = openDatabase(<span class=\"string\">\"teacher\"</span>, <span class=\"string\">\"1.0\"</span>, <span class=\"string\">\"教师表\"</span>, <span class=\"number\">1024</span> * <span class=\"number\">1024</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dataBase) &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"数据库创建失败！\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"数据库创建成功！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.createTable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">        context.executeSql(</div><div class=\"line\">            <span class=\"string\">\"create table if not exists teacher (id REAL UNIQUE, name TEXT)\"</span>, [],</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, result</span>) </span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">'创建teacher表成功'</span>);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, error</span>) </span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">'创建teacher表失败:'</span> + error.message);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.insertData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">        context.executeSql(</div><div class=\"line\">            <span class=\"string\">\"insert into teacher (id, name) values(?, ?)\"</span>, [<span class=\"string\">\"1\"</span>, <span class=\"string\">'aa老师'</span>],</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据成功'</span>);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, error</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据失败: '</span> + error.message);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">        context.executeSql(</div><div class=\"line\">            <span class=\"string\">\"insert into teacher (id, name) values(?, ?)\"</span>, [<span class=\"string\">\"2\"</span>, <span class=\"string\">'bb老师'</span>],</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据成功'</span>);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, error</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据失败: '</span> + error.message);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">        context.executeSql(</div><div class=\"line\">            <span class=\"string\">\"insert into teacher (id, name) values(?, ?)\"</span>, [<span class=\"string\">\"3\"</span>, <span class=\"string\">'cc老师'</span>],</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据成功'</span>);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, error</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据失败: '</span> + error.message);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.queryData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">        context.executeSql(</div><div class=\"line\">            <span class=\"string\">\"select * from teacher\"</span>, [],</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, result</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(context);</div><div class=\"line\"></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, error</span>) </span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">'查询失败: '</span> + error.message);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//删除表</span></div><div class=\"line\"><span class=\"keyword\">this</span>.dropTable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tx</span>) </span>&#123;</div><div class=\"line\">        tx.executeSql(<span class=\"string\">'drop table teacher'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"5-localstorage\"><a href=\"#5-localstorage\" class=\"headerlink\" title=\"5.localstorage\"></a>5.localstorage</h3><p>优点：兼容性中等，操作简单，就是key-value形式，几乎现代的浏览器都支持。<br>缺点：存在大小限制(5M)，IE9,IE10不支持。不跨浏览器，不跨域名。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">localStorage.setItem(<span class=\"string\">\"keyl\"</span>, <span class=\"string\">\"valuel\"</span>);</div><div class=\"line\"></div><div class=\"line\">localStorage.clear();</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-sessionStorage\"><a href=\"#1-sessionStorage\" class=\"headerlink\" title=\"1.sessionStorage\"></a>1.sessionStorage</h3><p>关闭页面自动回收，页面刷新不会清除，不可跨页面交互。</p>\n<h3 id=\"2-userData\"><a href=\"#2-userData\" class=\"headerlink\" title=\"2.userData\"></a>2.userData</h3><p>早期IE用的存储方案。<br>单个文件大小限制是128kb，一个域名下总共可以保存1024kb;<br>在受限站点里这两个值分别是64kb和640kb;</p>\n<h3 id=\"3-Cookie\"><a href=\"#3-Cookie\" class=\"headerlink\" title=\"3.Cookie\"></a>3.Cookie</h3><p>优点：兼容性最好，几乎所有的浏览器都支持。<br>缺点：大小有限制，而且每次发送请求，请求头里都会带着Cookie一起发过去，现在基本大多数登陆的合法性验证都是用cookie验证的。</p>\n<h3 id=\"4-openDatabase\"><a href=\"#4-openDatabase\" class=\"headerlink\" title=\"4.openDatabase\"></a>4.openDatabase</h3><p>完整的前端数据库<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> dataBase;</div><div class=\"line\"><span class=\"keyword\">this</span>.createDatabase = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    dataBase = openDatabase(<span class=\"string\">\"teacher\"</span>, <span class=\"string\">\"1.0\"</span>, <span class=\"string\">\"教师表\"</span>, <span class=\"number\">1024</span> * <span class=\"number\">1024</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!dataBase) &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"数据库创建失败！\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"数据库创建成功！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.createTable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">        context.executeSql(</div><div class=\"line\">            <span class=\"string\">\"create table if not exists teacher (id REAL UNIQUE, name TEXT)\"</span>, [],</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, result</span>) </span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">'创建teacher表成功'</span>);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, error</span>) </span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">'创建teacher表失败:'</span> + error.message);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.insertData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">        context.executeSql(</div><div class=\"line\">            <span class=\"string\">\"insert into teacher (id, name) values(?, ?)\"</span>, [<span class=\"string\">\"1\"</span>, <span class=\"string\">'aa老师'</span>],</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据成功'</span>);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, error</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据失败: '</span> + error.message);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">        context.executeSql(</div><div class=\"line\">            <span class=\"string\">\"insert into teacher (id, name) values(?, ?)\"</span>, [<span class=\"string\">\"2\"</span>, <span class=\"string\">'bb老师'</span>],</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据成功'</span>);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, error</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据失败: '</span> + error.message);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">        context.executeSql(</div><div class=\"line\">            <span class=\"string\">\"insert into teacher (id, name) values(?, ?)\"</span>, [<span class=\"string\">\"3\"</span>, <span class=\"string\">'cc老师'</span>],</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据成功'</span>);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, error</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'添加数据失败: '</span> + error.message);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">this</span>.queryData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</div><div class=\"line\">        context.executeSql(</div><div class=\"line\">            <span class=\"string\">\"select * from teacher\"</span>, [],</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, result</span>) </span>&#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(result);</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(context);</div><div class=\"line\"></div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, error</span>) </span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">'查询失败: '</span> + error.message);</div><div class=\"line\">            &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//删除表</span></div><div class=\"line\"><span class=\"keyword\">this</span>.dropTable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    dataBase.transaction(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tx</span>) </span>&#123;</div><div class=\"line\">        tx.executeSql(<span class=\"string\">'drop table teacher'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"5-localstorage\"><a href=\"#5-localstorage\" class=\"headerlink\" title=\"5.localstorage\"></a>5.localstorage</h3><p>优点：兼容性中等，操作简单，就是key-value形式，几乎现代的浏览器都支持。<br>缺点：存在大小限制(5M)，IE9,IE10不支持。不跨浏览器，不跨域名。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">localStorage.setItem(<span class=\"string\">\"keyl\"</span>, <span class=\"string\">\"valuel\"</span>);</div><div class=\"line\"></div><div class=\"line\">localStorage.clear();</div></pre></td></tr></table></figure></p>\n"},{"title":"用js替换jQuery","date":"2017-04-18T02:56:11.000Z","_content":"\n### 1.获取元素\n```javascript\n// jquery\n$('.xxx');  //class获取  \n$('#xxx');  //id获取  \n$('.xxx.ccc');  //同时包含xxx和ccc  \n$('.xxx,.zzz'); //多选  \n$('.xxx div'); //子类  \n$('.xxx p:first'); //第一个P元素  \n\n// javascript （querySelectorAll）\ndocument.querySelector('.xxx');  //class获取  \ndocument.querySelector('#xxx');//id获取  \ndocument.querySelector('.xxx.ccc');//同时包含xxx和ccc  \ndocument.querySelector('.xxx,.ccc');//多选  \ndocument.querySelector('.xxx div');//子类  \ndocument.querySelector('.xxx p:first-child');//第一个P元素  \n```\n### 2.操作class\n```javascript\n// jquery\n$('.xxx').addClass('class_name');\n$('.xxx').removeClass('class_name'); \n$('.xxx').toggleClass('class_name'); \n\n// javascript\nel.classList.add('class_name');\nel.classList.remove('class_name');\nel.classList.toggle('class_name'); \n```\n\n### 3.是否包含某个class\n```javascript\n// jquery\n$('.xxx').hasClass('class_name');\n\n// javascript\nel.classList.contains('class_name');\n```\n上面是HTML5提供的新的方法，如果你非要为了兼容所谓的IE，可以用下面的这些\n```javascript\n//是否包含class    \nfunction hasClass(o, n){  \n    return new RegExp('\\\\b'+n+'\\\\b').test(o.className);  \n};  \n//添加class    \nfunction addClass(o, n){  \n    if(!hasClass(o, n)) o.className+=' '+n;  \n};  \n//删除class    \nfunction delClass(o, n){  \n    if(hasClass(o, n)){  \n        o.className = o.className.replace(new RegExp('(?:^|\\\\s)'+n+'(?=\\\\s|$)'), '').replace(/^\\s*|\\s*$/g, '');  \n    };  \n};  \n```\n### 4.插入HTML\n```javascript\n// jquery\n$(el).before(htmlString);  \n$(parent).append(el);  \n$(el).after(htmlString);  \n\n// javascript\nparent.appendChild(el);  \nel.insertBefore(NewDom,ele);  \nele.insertAdjacentHTML(\"beforeend\", '<li>内容</li>');    \n```\n### 5.获取节点\n```javascript\n// jquery\n$('.xxx').children();\n$('.xxx').prev();\n$('.xxx').next(); \n$('.xxx').parent();\n$(ele).siblings();\n\n// javascript\nele.children;\nvar prev = ele.previousElementSibling || ele.previousSibling;  \nvar next = ele.nextElementSibling || ele.nextSibling;\nele.parentNode;\n//上下节点\nvar siblings = Array.prototype.slice.call(el.parentNode.children);  \nfor (var i = siblings.length; i--;) {  \n    if (siblings[i] === el) {  \n        siblings.splice(i, 1);  \n        break;  \n    };  \n};  \n;[].forEach.call(el.parentNode.children, function(child){  \n    if(child !== el);  \n});  \n\n```\n\n### 6.循环节点\n```javascript\n// jquery\n$(selector).each(function(i, el){  \n    //xxx  \n});  \n\n// javascript\n[].forEach.call(ele,function(el,i){  \n    //xxx  \n});  \n```\n### 7.克隆节点\n```javascript\n// jquery\n$('.xxx').clone(true);\n\n// javascript\nele.cloneNode(true);\n```\n\n### 8.操作节点\n```javascript\n// jquery\nvar ele = $('<div></div>');\n$(ele).remove();\n\n// javascript\nvar ele = document.createElement('div');\nparent.removeChild(ele);//父节点开始删除\n```\n### 9.获取、设置、删除属性\n```javascript\n// jquery\n$(ele).attr(name,value) //设置  \n$(ele).attr(name) //获取  \n$(ele).removeAttr(name) //删除\n\n// javascript\nele.setAttribute(name,value);//设置  \nele.getAttribute(name);//获取  \nele.removeAttribute(name);//删除\n```\n### 10.Data属性\n```javascript\n// jquery\n$(\"body\").data(\"foo\", 52);  //设置  \n$(\"body\").data(\"foo\");  //获取  \n$(\"body\").removeData(\"foo\");  //删除 \n\n// javascript\nele.dataset.foo = 52  //设置  \nele.dataset.foo  //获取  \n  \n//也可通过attribute方法来设置获取和删除  \nele.setAttribute('data-foo', 52);//设置  \nele.getAttribute('data-foo'); //获取  \nele.removeAttribute('data-foo');//删除 \n```\n### 11.操作内容\n```javascript\n// jquery\nvar html = $(ele).html();\n$(el).empty();\n$(ele).text();\n\n// javascript\nvar html = ele.innerHTML;\nel.innerHTML = '';\nvar txt = ele.textContent || ele.innerText;\n```\n### 12.操作CSS\n```javascript\n// jquery\n$(ele).css('height','300px');  \n$(ele).css({  \n    height:300  \n});\n$(obj).css('marginLeft');//获取CSS\n\n// javascript\nele.style.height = '300px';  \nele.style.cssText = 'height:200px;color:red;left:100px;'\nfunction getStyle(obj,attr){  \n    if(obj.currentStyle){  \n        return obj.currentStyle[attr];  \n    }else{  \n        return getComputedStyle(obj,null)[attr];  \n    };  \n};  \n```\n### 13.显示隐藏\n```javascript\n// jquery\n$(el).show();  \n$(el).hide();\n\n// javascript\nel.style.display = '';  \nel.style.display = 'none';\n```\n### 14.元素的高度（宽度同理）[height]\n```javascript\n// jquery\n$(ele).height();\n\n// javascript\nfunction height(el){      \n    var _height = el.clientHeight;      \n    var style = el.currentStyle || getComputedStyle(el);        \n    return _height - (parseInt(style.paddingTop) + parseInt(style.paddingBottom));      \n}; \n```\n元素的内高度（宽度同理）[height + padding]\n```javascript\n// jquery\n$(ele).innerHeight(); \n\n// javascript\nele.clientHeight;\n```\n元素的外高度（宽度同理）[height + padding + border]\n```javascript\n// jquery\n$(ele).outerHeight();\n\n// javascript\nele.offsetWidth;\n```\n元素的外高度（宽度同理）[height + padding + border + margin]\n```javascript\n// jquery\n$(ele).outerHeight(true);\n\n// javascript\nfunction outerHeight(el){    \n    var style = el.currentStyle || getComputedStyle(el);    \n    var height = el.offsetHeight + parseInt(style.marginTop) + parseInt(style.marginBottom);    \n    return height;    \n};\n```\n### 15.元素的位置\n```javascript\n// jquery\n$(ele).position().left;  \n$(ele).position().top;  \n  \n$(ele).offset().left;  \n$(ele).offset().top;  \n\n// javascript\nele.offsetLeft;  \nele.offsetTop;  \n  \nfunction getposi(obj){    \n    var t = 0,l = 0;    \n    while(obj){    \n        t+=obj.offsetTop;    \n        l+=obj.offsetLeft;    \n        obj = obj.offsetParent;    \n    };    \n    return {top:t,left:l};    \n};  \n//getposi(ele).left  \n//getposi(ele).top  \nele.getBoundingClientRect().top + window.pageYOffset;  \nele.getBoundingClientRect().bottom + window.pageYOffset;  \nele.getBoundingClientRect().left + window.pageYOffset;  \nele.getBoundingClientRect().right + window.pageXOffset;  \n```\n### 16.Document事件\n```javascript\n// jquery\n$(document).ready(function() {  \n    // ready \n});\n\n$(window).load(function() {  \n    // load  \n});\n\n$(document).click(function(){  \n    //添加事件  \n});\n\n$(ele).on('click',function(){  \n    //绑定事件  \n});\n\n// javascript\n//ready\ndocument.addEventListener(\"DOMContentLoaded\", function() {  \n    // Code  \n},false);\n//load\ndocument.addEventListener(\"load\", function() {  \n    // Code  \n},false);\n//添加事件\ndocument.onclick = function(){  \n        //XXX  \n};\n//绑定事件\ndocument.addEventListener(\"click\", function() {    \n        //xxx    \n},false);    \n  \n[].forEach.call(ele,function(o){  \n    o.addEventListener(\"click\", function() {    \n            //xxx    \n    },false);    \n});  \n```\n### 17.获取数据类型\n```javascript\n// jquery\n$.type(obj);\n\n// javascript\nfunction type(obj){  \n    return Object.prototype.toString.call(obj).replace(/^\\[object (.+)\\]$/, \"$1\").toLowerCase();  \n};\n```\n### 18.判断是否为数组\n```javascript\n// jquery\n$.isArray(arr);\n\n// javascript\nfunction isArray (v){  \n    return Object.prototype.toString.call(v) === '[object Array]';     \n};  \n```\n### 19.去除字符串两端的空格\n```javascript\n// jquery\n$.trim(string);\n\n// javascript\n//去除两端空格  \nString.prototype.trim = function() {  \n    var reExtraSpace = /^\\s*(.*?)\\s+$/;  \n    return this.replace(reExtraSpace, \"$1\")  \n}  \n/***扩展一下***/  \n//去除左边空格  \nString.prototype.ltrim = function() {  \n    return this.replace( /^(\\s*|　*)/, \"\");  \n}  \n//去除右边空格  \nString.prototype.rtrim = function() {  \n    return this.replace( /(\\s*|　*)$/, \"\");  \n}  \n//替换全部  \nString.prototype.replaceAll = function(s1, s2) {  \n    return this.replace(new RegExp(s1, \"gm\"), s2)  \n}  \n//去除所有空格，需要配合上面的替换全部  \nString.prototype.trimAll = function() {  \n    var reExtraSpace = /\\s*(.*?)\\s+/;  \n    return this.replaceAll(reExtraSpace, \"$1\")  \n}  \n```\n### 20.Cookie\n```javascript\n// jquery\n$.cookie('cookie'); // 读取 cookie  \n$.cookie('cookie', 'value'); // 存储 cookie  \n$.cookie('cookie', 'value', { expires: 7 }); // 存储一个带7天期限的 cookie  \n$.cookie('cookie', '', { expires: -1 }); // 删除 cookie  \n\n// javascript\nfunction setCookie(){  \n    var json = {},d;  \n    if(typeof arguments[0] ==’string’){  \n        json[arguments[0]] = arguments[1];  \n        d = arguments[2]  \n    }else{  \n        for(var i in arguments[0]){  \n            json.i = arguments[0][i]  \n            d = arguments[1];  \n        };  \n    };        \n    var t = new Date();  \n    t.setDate(t.getDate()+d);  \n    for(var j in json){  \n        document.cookie = j+’=’+json[j]+';expires=’+t;  \n    };  \n};\n\nfunction getCookie(n){  \n    var a = document.cookie.split(‘; ‘);  \n    for(var i=0;i<a.length;i++){  \n        var a2 = a[i].split(‘=’);  \n        if(a2[0]==n){  \n            return a2[1];  \n        };  \n    };  \n};\n\nfunction removeCookie(n){  \n    setCookie(n,null,-1);  \n}  \n```\n\n### 21.Ajax\n```javascript\n// jquery\n$.ajax({  \n    type: 'POST',  \n    url: '/my/url',  \n    data: data  \n});  \n\n// javascript\nvar request = new XMLHttpRequest();  \nrequest.open('POST', '/my/url', true);  \nrequest.send(data);   \n```\n","source":"_posts/user-Js.md","raw":"---\ntitle: 用js替换jQuery\ndate: 2017-04-18 10:56:11\ntags: [javascript,jQuery]\n---\n\n### 1.获取元素\n```javascript\n// jquery\n$('.xxx');  //class获取  \n$('#xxx');  //id获取  \n$('.xxx.ccc');  //同时包含xxx和ccc  \n$('.xxx,.zzz'); //多选  \n$('.xxx div'); //子类  \n$('.xxx p:first'); //第一个P元素  \n\n// javascript （querySelectorAll）\ndocument.querySelector('.xxx');  //class获取  \ndocument.querySelector('#xxx');//id获取  \ndocument.querySelector('.xxx.ccc');//同时包含xxx和ccc  \ndocument.querySelector('.xxx,.ccc');//多选  \ndocument.querySelector('.xxx div');//子类  \ndocument.querySelector('.xxx p:first-child');//第一个P元素  \n```\n### 2.操作class\n```javascript\n// jquery\n$('.xxx').addClass('class_name');\n$('.xxx').removeClass('class_name'); \n$('.xxx').toggleClass('class_name'); \n\n// javascript\nel.classList.add('class_name');\nel.classList.remove('class_name');\nel.classList.toggle('class_name'); \n```\n\n### 3.是否包含某个class\n```javascript\n// jquery\n$('.xxx').hasClass('class_name');\n\n// javascript\nel.classList.contains('class_name');\n```\n上面是HTML5提供的新的方法，如果你非要为了兼容所谓的IE，可以用下面的这些\n```javascript\n//是否包含class    \nfunction hasClass(o, n){  \n    return new RegExp('\\\\b'+n+'\\\\b').test(o.className);  \n};  \n//添加class    \nfunction addClass(o, n){  \n    if(!hasClass(o, n)) o.className+=' '+n;  \n};  \n//删除class    \nfunction delClass(o, n){  \n    if(hasClass(o, n)){  \n        o.className = o.className.replace(new RegExp('(?:^|\\\\s)'+n+'(?=\\\\s|$)'), '').replace(/^\\s*|\\s*$/g, '');  \n    };  \n};  \n```\n### 4.插入HTML\n```javascript\n// jquery\n$(el).before(htmlString);  \n$(parent).append(el);  \n$(el).after(htmlString);  \n\n// javascript\nparent.appendChild(el);  \nel.insertBefore(NewDom,ele);  \nele.insertAdjacentHTML(\"beforeend\", '<li>内容</li>');    \n```\n### 5.获取节点\n```javascript\n// jquery\n$('.xxx').children();\n$('.xxx').prev();\n$('.xxx').next(); \n$('.xxx').parent();\n$(ele).siblings();\n\n// javascript\nele.children;\nvar prev = ele.previousElementSibling || ele.previousSibling;  \nvar next = ele.nextElementSibling || ele.nextSibling;\nele.parentNode;\n//上下节点\nvar siblings = Array.prototype.slice.call(el.parentNode.children);  \nfor (var i = siblings.length; i--;) {  \n    if (siblings[i] === el) {  \n        siblings.splice(i, 1);  \n        break;  \n    };  \n};  \n;[].forEach.call(el.parentNode.children, function(child){  \n    if(child !== el);  \n});  \n\n```\n\n### 6.循环节点\n```javascript\n// jquery\n$(selector).each(function(i, el){  \n    //xxx  \n});  \n\n// javascript\n[].forEach.call(ele,function(el,i){  \n    //xxx  \n});  \n```\n### 7.克隆节点\n```javascript\n// jquery\n$('.xxx').clone(true);\n\n// javascript\nele.cloneNode(true);\n```\n\n### 8.操作节点\n```javascript\n// jquery\nvar ele = $('<div></div>');\n$(ele).remove();\n\n// javascript\nvar ele = document.createElement('div');\nparent.removeChild(ele);//父节点开始删除\n```\n### 9.获取、设置、删除属性\n```javascript\n// jquery\n$(ele).attr(name,value) //设置  \n$(ele).attr(name) //获取  \n$(ele).removeAttr(name) //删除\n\n// javascript\nele.setAttribute(name,value);//设置  \nele.getAttribute(name);//获取  \nele.removeAttribute(name);//删除\n```\n### 10.Data属性\n```javascript\n// jquery\n$(\"body\").data(\"foo\", 52);  //设置  \n$(\"body\").data(\"foo\");  //获取  \n$(\"body\").removeData(\"foo\");  //删除 \n\n// javascript\nele.dataset.foo = 52  //设置  \nele.dataset.foo  //获取  \n  \n//也可通过attribute方法来设置获取和删除  \nele.setAttribute('data-foo', 52);//设置  \nele.getAttribute('data-foo'); //获取  \nele.removeAttribute('data-foo');//删除 \n```\n### 11.操作内容\n```javascript\n// jquery\nvar html = $(ele).html();\n$(el).empty();\n$(ele).text();\n\n// javascript\nvar html = ele.innerHTML;\nel.innerHTML = '';\nvar txt = ele.textContent || ele.innerText;\n```\n### 12.操作CSS\n```javascript\n// jquery\n$(ele).css('height','300px');  \n$(ele).css({  \n    height:300  \n});\n$(obj).css('marginLeft');//获取CSS\n\n// javascript\nele.style.height = '300px';  \nele.style.cssText = 'height:200px;color:red;left:100px;'\nfunction getStyle(obj,attr){  \n    if(obj.currentStyle){  \n        return obj.currentStyle[attr];  \n    }else{  \n        return getComputedStyle(obj,null)[attr];  \n    };  \n};  \n```\n### 13.显示隐藏\n```javascript\n// jquery\n$(el).show();  \n$(el).hide();\n\n// javascript\nel.style.display = '';  \nel.style.display = 'none';\n```\n### 14.元素的高度（宽度同理）[height]\n```javascript\n// jquery\n$(ele).height();\n\n// javascript\nfunction height(el){      \n    var _height = el.clientHeight;      \n    var style = el.currentStyle || getComputedStyle(el);        \n    return _height - (parseInt(style.paddingTop) + parseInt(style.paddingBottom));      \n}; \n```\n元素的内高度（宽度同理）[height + padding]\n```javascript\n// jquery\n$(ele).innerHeight(); \n\n// javascript\nele.clientHeight;\n```\n元素的外高度（宽度同理）[height + padding + border]\n```javascript\n// jquery\n$(ele).outerHeight();\n\n// javascript\nele.offsetWidth;\n```\n元素的外高度（宽度同理）[height + padding + border + margin]\n```javascript\n// jquery\n$(ele).outerHeight(true);\n\n// javascript\nfunction outerHeight(el){    \n    var style = el.currentStyle || getComputedStyle(el);    \n    var height = el.offsetHeight + parseInt(style.marginTop) + parseInt(style.marginBottom);    \n    return height;    \n};\n```\n### 15.元素的位置\n```javascript\n// jquery\n$(ele).position().left;  \n$(ele).position().top;  \n  \n$(ele).offset().left;  \n$(ele).offset().top;  \n\n// javascript\nele.offsetLeft;  \nele.offsetTop;  \n  \nfunction getposi(obj){    \n    var t = 0,l = 0;    \n    while(obj){    \n        t+=obj.offsetTop;    \n        l+=obj.offsetLeft;    \n        obj = obj.offsetParent;    \n    };    \n    return {top:t,left:l};    \n};  \n//getposi(ele).left  \n//getposi(ele).top  \nele.getBoundingClientRect().top + window.pageYOffset;  \nele.getBoundingClientRect().bottom + window.pageYOffset;  \nele.getBoundingClientRect().left + window.pageYOffset;  \nele.getBoundingClientRect().right + window.pageXOffset;  \n```\n### 16.Document事件\n```javascript\n// jquery\n$(document).ready(function() {  \n    // ready \n});\n\n$(window).load(function() {  \n    // load  \n});\n\n$(document).click(function(){  \n    //添加事件  \n});\n\n$(ele).on('click',function(){  \n    //绑定事件  \n});\n\n// javascript\n//ready\ndocument.addEventListener(\"DOMContentLoaded\", function() {  \n    // Code  \n},false);\n//load\ndocument.addEventListener(\"load\", function() {  \n    // Code  \n},false);\n//添加事件\ndocument.onclick = function(){  \n        //XXX  \n};\n//绑定事件\ndocument.addEventListener(\"click\", function() {    \n        //xxx    \n},false);    \n  \n[].forEach.call(ele,function(o){  \n    o.addEventListener(\"click\", function() {    \n            //xxx    \n    },false);    \n});  \n```\n### 17.获取数据类型\n```javascript\n// jquery\n$.type(obj);\n\n// javascript\nfunction type(obj){  \n    return Object.prototype.toString.call(obj).replace(/^\\[object (.+)\\]$/, \"$1\").toLowerCase();  \n};\n```\n### 18.判断是否为数组\n```javascript\n// jquery\n$.isArray(arr);\n\n// javascript\nfunction isArray (v){  \n    return Object.prototype.toString.call(v) === '[object Array]';     \n};  \n```\n### 19.去除字符串两端的空格\n```javascript\n// jquery\n$.trim(string);\n\n// javascript\n//去除两端空格  \nString.prototype.trim = function() {  \n    var reExtraSpace = /^\\s*(.*?)\\s+$/;  \n    return this.replace(reExtraSpace, \"$1\")  \n}  \n/***扩展一下***/  \n//去除左边空格  \nString.prototype.ltrim = function() {  \n    return this.replace( /^(\\s*|　*)/, \"\");  \n}  \n//去除右边空格  \nString.prototype.rtrim = function() {  \n    return this.replace( /(\\s*|　*)$/, \"\");  \n}  \n//替换全部  \nString.prototype.replaceAll = function(s1, s2) {  \n    return this.replace(new RegExp(s1, \"gm\"), s2)  \n}  \n//去除所有空格，需要配合上面的替换全部  \nString.prototype.trimAll = function() {  \n    var reExtraSpace = /\\s*(.*?)\\s+/;  \n    return this.replaceAll(reExtraSpace, \"$1\")  \n}  \n```\n### 20.Cookie\n```javascript\n// jquery\n$.cookie('cookie'); // 读取 cookie  \n$.cookie('cookie', 'value'); // 存储 cookie  \n$.cookie('cookie', 'value', { expires: 7 }); // 存储一个带7天期限的 cookie  \n$.cookie('cookie', '', { expires: -1 }); // 删除 cookie  \n\n// javascript\nfunction setCookie(){  \n    var json = {},d;  \n    if(typeof arguments[0] ==’string’){  \n        json[arguments[0]] = arguments[1];  \n        d = arguments[2]  \n    }else{  \n        for(var i in arguments[0]){  \n            json.i = arguments[0][i]  \n            d = arguments[1];  \n        };  \n    };        \n    var t = new Date();  \n    t.setDate(t.getDate()+d);  \n    for(var j in json){  \n        document.cookie = j+’=’+json[j]+';expires=’+t;  \n    };  \n};\n\nfunction getCookie(n){  \n    var a = document.cookie.split(‘; ‘);  \n    for(var i=0;i<a.length;i++){  \n        var a2 = a[i].split(‘=’);  \n        if(a2[0]==n){  \n            return a2[1];  \n        };  \n    };  \n};\n\nfunction removeCookie(n){  \n    setCookie(n,null,-1);  \n}  \n```\n\n### 21.Ajax\n```javascript\n// jquery\n$.ajax({  \n    type: 'POST',  \n    url: '/my/url',  \n    data: data  \n});  \n\n// javascript\nvar request = new XMLHttpRequest();  \nrequest.open('POST', '/my/url', true);  \nrequest.send(data);   \n```\n","slug":"user-Js","published":1,"updated":"2017-10-28T00:38:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3a8001knilwtr0sfio4","content":"<h3 id=\"1-获取元素\"><a href=\"#1-获取元素\" class=\"headerlink\" title=\"1.获取元素\"></a>1.获取元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>);  <span class=\"comment\">//class获取  </span></div><div class=\"line\">$(<span class=\"string\">'#xxx'</span>);  <span class=\"comment\">//id获取  </span></div><div class=\"line\">$(<span class=\"string\">'.xxx.ccc'</span>);  <span class=\"comment\">//同时包含xxx和ccc  </span></div><div class=\"line\">$(<span class=\"string\">'.xxx,.zzz'</span>); <span class=\"comment\">//多选  </span></div><div class=\"line\">$(<span class=\"string\">'.xxx div'</span>); <span class=\"comment\">//子类  </span></div><div class=\"line\">$(<span class=\"string\">'.xxx p:first'</span>); <span class=\"comment\">//第一个P元素  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript （querySelectorAll）</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.xxx'</span>);  <span class=\"comment\">//class获取  </span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#xxx'</span>);<span class=\"comment\">//id获取  </span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.xxx.ccc'</span>);<span class=\"comment\">//同时包含xxx和ccc  </span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.xxx,.ccc'</span>);<span class=\"comment\">//多选  </span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.xxx div'</span>);<span class=\"comment\">//子类  </span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.xxx p:first-child'</span>);<span class=\"comment\">//第一个P元素</span></div></pre></td></tr></table></figure>\n<h3 id=\"2-操作class\"><a href=\"#2-操作class\" class=\"headerlink\" title=\"2.操作class\"></a>2.操作class</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).addClass(<span class=\"string\">'class_name'</span>);</div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).removeClass(<span class=\"string\">'class_name'</span>); </div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).toggleClass(<span class=\"string\">'class_name'</span>); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">el.classList.add(<span class=\"string\">'class_name'</span>);</div><div class=\"line\">el.classList.remove(<span class=\"string\">'class_name'</span>);</div><div class=\"line\">el.classList.toggle(<span class=\"string\">'class_name'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-是否包含某个class\"><a href=\"#3-是否包含某个class\" class=\"headerlink\" title=\"3.是否包含某个class\"></a>3.是否包含某个class</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).hasClass(<span class=\"string\">'class_name'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">el.classList.contains(<span class=\"string\">'class_name'</span>);</div></pre></td></tr></table></figure>\n<p>上面是HTML5提供的新的方法，如果你非要为了兼容所谓的IE，可以用下面的这些<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//是否包含class    </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">o, n</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\b'</span>+n+<span class=\"string\">'\\\\b'</span>).test(o.className);  </div><div class=\"line\">&#125;;  </div><div class=\"line\"><span class=\"comment\">//添加class    </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addClass</span>(<span class=\"params\">o, n</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(!hasClass(o, n)) o.className+=<span class=\"string\">' '</span>+n;  </div><div class=\"line\">&#125;;  </div><div class=\"line\"><span class=\"comment\">//删除class    </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delClass</span>(<span class=\"params\">o, n</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(hasClass(o, n))&#123;  </div><div class=\"line\">        o.className = o.className.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(?:^|\\\\s)'</span>+n+<span class=\"string\">'(?=\\\\s|$)'</span>), <span class=\"string\">''</span>).replace(<span class=\"regexp\">/^\\s*|\\s*$/g</span>, <span class=\"string\">''</span>);  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-插入HTML\"><a href=\"#4-插入HTML\" class=\"headerlink\" title=\"4.插入HTML\"></a>4.插入HTML</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(el).before(htmlString);  </div><div class=\"line\">$(parent).append(el);  </div><div class=\"line\">$(el).after(htmlString);  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">parent.appendChild(el);  </div><div class=\"line\">el.insertBefore(NewDom,ele);  </div><div class=\"line\">ele.insertAdjacentHTML(<span class=\"string\">\"beforeend\"</span>, <span class=\"string\">'&lt;li&gt;内容&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"5-获取节点\"><a href=\"#5-获取节点\" class=\"headerlink\" title=\"5.获取节点\"></a>5.获取节点</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).children();</div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).prev();</div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).next(); </div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).parent();</div><div class=\"line\">$(ele).siblings();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.children;</div><div class=\"line\"><span class=\"keyword\">var</span> prev = ele.previousElementSibling || ele.previousSibling;  </div><div class=\"line\"><span class=\"keyword\">var</span> next = ele.nextElementSibling || ele.nextSibling;</div><div class=\"line\">ele.parentNode;</div><div class=\"line\"><span class=\"comment\">//上下节点</span></div><div class=\"line\"><span class=\"keyword\">var</span> siblings = <span class=\"built_in\">Array</span>.prototype.slice.call(el.parentNode.children);  </div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = siblings.length; i--;) &#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (siblings[i] === el) &#123;  </div><div class=\"line\">        siblings.splice(i, <span class=\"number\">1</span>);  </div><div class=\"line\">        <span class=\"keyword\">break</span>;  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">;[].forEach.call(el.parentNode.children, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(child !== el);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"6-循环节点\"><a href=\"#6-循环节点\" class=\"headerlink\" title=\"6.循环节点\"></a>6.循环节点</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(selector).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, el</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//xxx  </span></div><div class=\"line\">&#125;);  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">[].forEach.call(ele,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,i</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//xxx  </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"7-克隆节点\"><a href=\"#7-克隆节点\" class=\"headerlink\" title=\"7.克隆节点\"></a>7.克隆节点</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).clone(<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.cloneNode(<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"8-操作节点\"><a href=\"#8-操作节点\" class=\"headerlink\" title=\"8.操作节点\"></a>8.操作节点</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\"><span class=\"keyword\">var</span> ele = $(<span class=\"string\">'&lt;div&gt;&lt;/div&gt;'</span>);</div><div class=\"line\">$(ele).remove();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">parent.removeChild(ele);<span class=\"comment\">//父节点开始删除</span></div></pre></td></tr></table></figure>\n<h3 id=\"9-获取、设置、删除属性\"><a href=\"#9-获取、设置、删除属性\" class=\"headerlink\" title=\"9.获取、设置、删除属性\"></a>9.获取、设置、删除属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).attr(name,value) <span class=\"comment\">//设置  </span></div><div class=\"line\">$(ele).attr(name) <span class=\"comment\">//获取  </span></div><div class=\"line\">$(ele).removeAttr(name) <span class=\"comment\">//删除</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.setAttribute(name,value);<span class=\"comment\">//设置  </span></div><div class=\"line\">ele.getAttribute(name);<span class=\"comment\">//获取  </span></div><div class=\"line\">ele.removeAttribute(name);<span class=\"comment\">//删除</span></div></pre></td></tr></table></figure>\n<h3 id=\"10-Data属性\"><a href=\"#10-Data属性\" class=\"headerlink\" title=\"10.Data属性\"></a>10.Data属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">\"body\"</span>).data(<span class=\"string\">\"foo\"</span>, <span class=\"number\">52</span>);  <span class=\"comment\">//设置  </span></div><div class=\"line\">$(<span class=\"string\">\"body\"</span>).data(<span class=\"string\">\"foo\"</span>);  <span class=\"comment\">//获取  </span></div><div class=\"line\">$(<span class=\"string\">\"body\"</span>).removeData(<span class=\"string\">\"foo\"</span>);  <span class=\"comment\">//删除 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.dataset.foo = <span class=\"number\">52</span>  <span class=\"comment\">//设置  </span></div><div class=\"line\">ele.dataset.foo  <span class=\"comment\">//获取  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//也可通过attribute方法来设置获取和删除  </span></div><div class=\"line\">ele.setAttribute(<span class=\"string\">'data-foo'</span>, <span class=\"number\">52</span>);<span class=\"comment\">//设置  </span></div><div class=\"line\">ele.getAttribute(<span class=\"string\">'data-foo'</span>); <span class=\"comment\">//获取  </span></div><div class=\"line\">ele.removeAttribute(<span class=\"string\">'data-foo'</span>);<span class=\"comment\">//删除</span></div></pre></td></tr></table></figure>\n<h3 id=\"11-操作内容\"><a href=\"#11-操作内容\" class=\"headerlink\" title=\"11.操作内容\"></a>11.操作内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\"><span class=\"keyword\">var</span> html = $(ele).html();</div><div class=\"line\">$(el).empty();</div><div class=\"line\">$(ele).text();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"keyword\">var</span> html = ele.innerHTML;</div><div class=\"line\">el.innerHTML = <span class=\"string\">''</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> txt = ele.textContent || ele.innerText;</div></pre></td></tr></table></figure>\n<h3 id=\"12-操作CSS\"><a href=\"#12-操作CSS\" class=\"headerlink\" title=\"12.操作CSS\"></a>12.操作CSS</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).css(<span class=\"string\">'height'</span>,<span class=\"string\">'300px'</span>);  </div><div class=\"line\">$(ele).css(&#123;  </div><div class=\"line\">    height:<span class=\"number\">300</span>  </div><div class=\"line\">&#125;);</div><div class=\"line\">$(obj).css(<span class=\"string\">'marginLeft'</span>);<span class=\"comment\">//获取CSS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.style.height = <span class=\"string\">'300px'</span>;  </div><div class=\"line\">ele.style.cssText = <span class=\"string\">'height:200px;color:red;left:100px;'</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">obj,attr</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(obj.currentStyle)&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> obj.currentStyle[attr];  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> getComputedStyle(obj,<span class=\"literal\">null</span>)[attr];  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"13-显示隐藏\"><a href=\"#13-显示隐藏\" class=\"headerlink\" title=\"13.显示隐藏\"></a>13.显示隐藏</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(el).show();  </div><div class=\"line\">$(el).hide();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">el.style.display = <span class=\"string\">''</span>;  </div><div class=\"line\">el.style.display = <span class=\"string\">'none'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"14-元素的高度（宽度同理）-height\"><a href=\"#14-元素的高度（宽度同理）-height\" class=\"headerlink\" title=\"14.元素的高度（宽度同理）[height]\"></a>14.元素的高度（宽度同理）[height]</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).height();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">height</span>(<span class=\"params\">el</span>)</span>&#123;      </div><div class=\"line\">    <span class=\"keyword\">var</span> _height = el.clientHeight;      </div><div class=\"line\">    <span class=\"keyword\">var</span> style = el.currentStyle || getComputedStyle(el);        </div><div class=\"line\">    <span class=\"keyword\">return</span> _height - (<span class=\"built_in\">parseInt</span>(style.paddingTop) + <span class=\"built_in\">parseInt</span>(style.paddingBottom));      </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>元素的内高度（宽度同理）[height + padding]<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).innerHeight(); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.clientHeight;</div></pre></td></tr></table></figure></p>\n<p>元素的外高度（宽度同理）[height + padding + border]<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).outerHeight();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.offsetWidth;</div></pre></td></tr></table></figure></p>\n<p>元素的外高度（宽度同理）[height + padding + border + margin]<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).outerHeight(<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outerHeight</span>(<span class=\"params\">el</span>)</span>&#123;    </div><div class=\"line\">    <span class=\"keyword\">var</span> style = el.currentStyle || getComputedStyle(el);    </div><div class=\"line\">    <span class=\"keyword\">var</span> height = el.offsetHeight + <span class=\"built_in\">parseInt</span>(style.marginTop) + <span class=\"built_in\">parseInt</span>(style.marginBottom);    </div><div class=\"line\">    <span class=\"keyword\">return</span> height;    </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"15-元素的位置\"><a href=\"#15-元素的位置\" class=\"headerlink\" title=\"15.元素的位置\"></a>15.元素的位置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).position().left;  </div><div class=\"line\">$(ele).position().top;  </div><div class=\"line\">  </div><div class=\"line\">$(ele).offset().left;  </div><div class=\"line\">$(ele).offset().top;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.offsetLeft;  </div><div class=\"line\">ele.offsetTop;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getposi</span>(<span class=\"params\">obj</span>)</span>&#123;    </div><div class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"number\">0</span>,l = <span class=\"number\">0</span>;    </div><div class=\"line\">    <span class=\"keyword\">while</span>(obj)&#123;    </div><div class=\"line\">        t+=obj.offsetTop;    </div><div class=\"line\">        l+=obj.offsetLeft;    </div><div class=\"line\">        obj = obj.offsetParent;    </div><div class=\"line\">    &#125;;    </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">top</span>:t,<span class=\"attr\">left</span>:l&#125;;    </div><div class=\"line\">&#125;;  </div><div class=\"line\"><span class=\"comment\">//getposi(ele).left  </span></div><div class=\"line\"><span class=\"comment\">//getposi(ele).top  </span></div><div class=\"line\">ele.getBoundingClientRect().top + <span class=\"built_in\">window</span>.pageYOffset;  </div><div class=\"line\">ele.getBoundingClientRect().bottom + <span class=\"built_in\">window</span>.pageYOffset;  </div><div class=\"line\">ele.getBoundingClientRect().left + <span class=\"built_in\">window</span>.pageYOffset;  </div><div class=\"line\">ele.getBoundingClientRect().right + <span class=\"built_in\">window</span>.pageXOffset;</div></pre></td></tr></table></figure>\n<h3 id=\"16-Document事件\"><a href=\"#16-Document事件\" class=\"headerlink\" title=\"16.Document事件\"></a>16.Document事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// ready </span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"built_in\">window</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// load  </span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"built_in\">document</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//添加事件  </span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(ele).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//绑定事件  </span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"comment\">//ready</span></div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// Code  </span></div><div class=\"line\">&#125;,<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">//load</span></div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// Code  </span></div><div class=\"line\">&#125;,<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">//添加事件</span></div><div class=\"line\"><span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//XXX  </span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//绑定事件</span></div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </div><div class=\"line\">        <span class=\"comment\">//xxx    </span></div><div class=\"line\">&#125;,<span class=\"literal\">false</span>);    </div><div class=\"line\">  </div><div class=\"line\">[].forEach.call(ele,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>)</span>&#123;  </div><div class=\"line\">    o.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </div><div class=\"line\">            <span class=\"comment\">//xxx    </span></div><div class=\"line\">    &#125;,<span class=\"literal\">false</span>);    </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"17-获取数据类型\"><a href=\"#17-获取数据类型\" class=\"headerlink\" title=\"17.获取数据类型\"></a>17.获取数据类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$.type(obj);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">type</span>(<span class=\"params\">obj</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj).replace(<span class=\"regexp\">/^\\[object (.+)\\]$/</span>, <span class=\"string\">\"$1\"</span>).toLowerCase();  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"18-判断是否为数组\"><a href=\"#18-判断是否为数组\" class=\"headerlink\" title=\"18.判断是否为数组\"></a>18.判断是否为数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$.isArray(arr);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span> (<span class=\"params\">v</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(v) === <span class=\"string\">'[object Array]'</span>;     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"19-去除字符串两端的空格\"><a href=\"#19-去除字符串两端的空格\" class=\"headerlink\" title=\"19.去除字符串两端的空格\"></a>19.去除字符串两端的空格</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$.trim(string);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"comment\">//去除两端空格  </span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> reExtraSpace = <span class=\"regexp\">/^\\s*(.*?)\\s+$/</span>;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(reExtraSpace, <span class=\"string\">\"$1\"</span>)  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">/***扩展一下***/</span>  </div><div class=\"line\"><span class=\"comment\">//去除左边空格  </span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.ltrim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace( <span class=\"regexp\">/^(\\s*|　*)/</span>, <span class=\"string\">\"\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//去除右边空格  </span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.rtrim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace( <span class=\"regexp\">/(\\s*|　*)$/</span>, <span class=\"string\">\"\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//替换全部  </span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.replaceAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s1, s2</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(s1, <span class=\"string\">\"gm\"</span>), s2)  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//去除所有空格，需要配合上面的替换全部  </span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.trimAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> reExtraSpace = <span class=\"regexp\">/\\s*(.*?)\\s+/</span>;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replaceAll(reExtraSpace, <span class=\"string\">\"$1\"</span>)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"20-Cookie\"><a href=\"#20-Cookie\" class=\"headerlink\" title=\"20.Cookie\"></a>20.Cookie</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$.cookie(<span class=\"string\">'cookie'</span>); <span class=\"comment\">// 读取 cookie  </span></div><div class=\"line\">$.cookie(<span class=\"string\">'cookie'</span>, <span class=\"string\">'value'</span>); <span class=\"comment\">// 存储 cookie  </span></div><div class=\"line\">$.cookie(<span class=\"string\">'cookie'</span>, <span class=\"string\">'value'</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">7</span> &#125;); <span class=\"comment\">// 存储一个带7天期限的 cookie  </span></div><div class=\"line\">$.cookie(<span class=\"string\">'cookie'</span>, <span class=\"string\">''</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">-1</span> &#125;); <span class=\"comment\">// 删除 cookie  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCookie</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> json = &#123;&#125;,d;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] ==’string’)&#123;  </div><div class=\"line\">        json[<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]] = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];  </div><div class=\"line\">        d = <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>]  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>])&#123;  </div><div class=\"line\">            json.i = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>][i]  </div><div class=\"line\">            d = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">    &#125;;        </div><div class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();  </div><div class=\"line\">    t.setDate(t.getDate()+d);  </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j <span class=\"keyword\">in</span> json)&#123;  </div><div class=\"line\">        <span class=\"built_in\">document</span>.cookie = j+’=’+json[j]+<span class=\"string\">';expires=’+t;  </span></div><div class=\"line\"><span class=\"string\">    &#125;;  </span></div><div class=\"line\"><span class=\"string\">&#125;;</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">function getCookie(n)&#123;  </span></div><div class=\"line\"><span class=\"string\">    var a = document.cookie.split(‘; ‘);  </span></div><div class=\"line\"><span class=\"string\">    for(var i=0;i&lt;a.length;i++)&#123;  </span></div><div class=\"line\"><span class=\"string\">        var a2 = a[i].split(‘=’);  </span></div><div class=\"line\"><span class=\"string\">        if(a2[0]==n)&#123;  </span></div><div class=\"line\"><span class=\"string\">            return a2[1];  </span></div><div class=\"line\"><span class=\"string\">        &#125;;  </span></div><div class=\"line\"><span class=\"string\">    &#125;;  </span></div><div class=\"line\"><span class=\"string\">&#125;;</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">function removeCookie(n)&#123;  </span></div><div class=\"line\"><span class=\"string\">    setCookie(n,null,-1);  </span></div><div class=\"line\"><span class=\"string\">&#125;</span></div></pre></td></tr></table></figure>\n<h3 id=\"21-Ajax\"><a href=\"#21-Ajax\" class=\"headerlink\" title=\"21.Ajax\"></a>21.Ajax</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$.ajax(&#123;  </div><div class=\"line\">    type: <span class=\"string\">'POST'</span>,  </div><div class=\"line\">    url: <span class=\"string\">'/my/url'</span>,  </div><div class=\"line\">    data: data  </div><div class=\"line\">&#125;);  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();  </div><div class=\"line\">request.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'/my/url'</span>, <span class=\"literal\">true</span>);  </div><div class=\"line\">request.send(data);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-获取元素\"><a href=\"#1-获取元素\" class=\"headerlink\" title=\"1.获取元素\"></a>1.获取元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>);  <span class=\"comment\">//class获取  </span></div><div class=\"line\">$(<span class=\"string\">'#xxx'</span>);  <span class=\"comment\">//id获取  </span></div><div class=\"line\">$(<span class=\"string\">'.xxx.ccc'</span>);  <span class=\"comment\">//同时包含xxx和ccc  </span></div><div class=\"line\">$(<span class=\"string\">'.xxx,.zzz'</span>); <span class=\"comment\">//多选  </span></div><div class=\"line\">$(<span class=\"string\">'.xxx div'</span>); <span class=\"comment\">//子类  </span></div><div class=\"line\">$(<span class=\"string\">'.xxx p:first'</span>); <span class=\"comment\">//第一个P元素  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript （querySelectorAll）</span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.xxx'</span>);  <span class=\"comment\">//class获取  </span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#xxx'</span>);<span class=\"comment\">//id获取  </span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.xxx.ccc'</span>);<span class=\"comment\">//同时包含xxx和ccc  </span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.xxx,.ccc'</span>);<span class=\"comment\">//多选  </span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.xxx div'</span>);<span class=\"comment\">//子类  </span></div><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.xxx p:first-child'</span>);<span class=\"comment\">//第一个P元素</span></div></pre></td></tr></table></figure>\n<h3 id=\"2-操作class\"><a href=\"#2-操作class\" class=\"headerlink\" title=\"2.操作class\"></a>2.操作class</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).addClass(<span class=\"string\">'class_name'</span>);</div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).removeClass(<span class=\"string\">'class_name'</span>); </div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).toggleClass(<span class=\"string\">'class_name'</span>); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">el.classList.add(<span class=\"string\">'class_name'</span>);</div><div class=\"line\">el.classList.remove(<span class=\"string\">'class_name'</span>);</div><div class=\"line\">el.classList.toggle(<span class=\"string\">'class_name'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"3-是否包含某个class\"><a href=\"#3-是否包含某个class\" class=\"headerlink\" title=\"3.是否包含某个class\"></a>3.是否包含某个class</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).hasClass(<span class=\"string\">'class_name'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">el.classList.contains(<span class=\"string\">'class_name'</span>);</div></pre></td></tr></table></figure>\n<p>上面是HTML5提供的新的方法，如果你非要为了兼容所谓的IE，可以用下面的这些<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//是否包含class    </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasClass</span>(<span class=\"params\">o, n</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'\\\\b'</span>+n+<span class=\"string\">'\\\\b'</span>).test(o.className);  </div><div class=\"line\">&#125;;  </div><div class=\"line\"><span class=\"comment\">//添加class    </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addClass</span>(<span class=\"params\">o, n</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(!hasClass(o, n)) o.className+=<span class=\"string\">' '</span>+n;  </div><div class=\"line\">&#125;;  </div><div class=\"line\"><span class=\"comment\">//删除class    </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delClass</span>(<span class=\"params\">o, n</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(hasClass(o, n))&#123;  </div><div class=\"line\">        o.className = o.className.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'(?:^|\\\\s)'</span>+n+<span class=\"string\">'(?=\\\\s|$)'</span>), <span class=\"string\">''</span>).replace(<span class=\"regexp\">/^\\s*|\\s*$/g</span>, <span class=\"string\">''</span>);  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-插入HTML\"><a href=\"#4-插入HTML\" class=\"headerlink\" title=\"4.插入HTML\"></a>4.插入HTML</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(el).before(htmlString);  </div><div class=\"line\">$(parent).append(el);  </div><div class=\"line\">$(el).after(htmlString);  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">parent.appendChild(el);  </div><div class=\"line\">el.insertBefore(NewDom,ele);  </div><div class=\"line\">ele.insertAdjacentHTML(<span class=\"string\">\"beforeend\"</span>, <span class=\"string\">'&lt;li&gt;内容&lt;/li&gt;'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"5-获取节点\"><a href=\"#5-获取节点\" class=\"headerlink\" title=\"5.获取节点\"></a>5.获取节点</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).children();</div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).prev();</div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).next(); </div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).parent();</div><div class=\"line\">$(ele).siblings();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.children;</div><div class=\"line\"><span class=\"keyword\">var</span> prev = ele.previousElementSibling || ele.previousSibling;  </div><div class=\"line\"><span class=\"keyword\">var</span> next = ele.nextElementSibling || ele.nextSibling;</div><div class=\"line\">ele.parentNode;</div><div class=\"line\"><span class=\"comment\">//上下节点</span></div><div class=\"line\"><span class=\"keyword\">var</span> siblings = <span class=\"built_in\">Array</span>.prototype.slice.call(el.parentNode.children);  </div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = siblings.length; i--;) &#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (siblings[i] === el) &#123;  </div><div class=\"line\">        siblings.splice(i, <span class=\"number\">1</span>);  </div><div class=\"line\">        <span class=\"keyword\">break</span>;  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">;[].forEach.call(el.parentNode.children, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">child</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(child !== el);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"6-循环节点\"><a href=\"#6-循环节点\" class=\"headerlink\" title=\"6.循环节点\"></a>6.循环节点</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(selector).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, el</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//xxx  </span></div><div class=\"line\">&#125;);  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">[].forEach.call(ele,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el,i</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//xxx  </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"7-克隆节点\"><a href=\"#7-克隆节点\" class=\"headerlink\" title=\"7.克隆节点\"></a>7.克隆节点</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">'.xxx'</span>).clone(<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.cloneNode(<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"8-操作节点\"><a href=\"#8-操作节点\" class=\"headerlink\" title=\"8.操作节点\"></a>8.操作节点</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\"><span class=\"keyword\">var</span> ele = $(<span class=\"string\">'&lt;div&gt;&lt;/div&gt;'</span>);</div><div class=\"line\">$(ele).remove();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">parent.removeChild(ele);<span class=\"comment\">//父节点开始删除</span></div></pre></td></tr></table></figure>\n<h3 id=\"9-获取、设置、删除属性\"><a href=\"#9-获取、设置、删除属性\" class=\"headerlink\" title=\"9.获取、设置、删除属性\"></a>9.获取、设置、删除属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).attr(name,value) <span class=\"comment\">//设置  </span></div><div class=\"line\">$(ele).attr(name) <span class=\"comment\">//获取  </span></div><div class=\"line\">$(ele).removeAttr(name) <span class=\"comment\">//删除</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.setAttribute(name,value);<span class=\"comment\">//设置  </span></div><div class=\"line\">ele.getAttribute(name);<span class=\"comment\">//获取  </span></div><div class=\"line\">ele.removeAttribute(name);<span class=\"comment\">//删除</span></div></pre></td></tr></table></figure>\n<h3 id=\"10-Data属性\"><a href=\"#10-Data属性\" class=\"headerlink\" title=\"10.Data属性\"></a>10.Data属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"string\">\"body\"</span>).data(<span class=\"string\">\"foo\"</span>, <span class=\"number\">52</span>);  <span class=\"comment\">//设置  </span></div><div class=\"line\">$(<span class=\"string\">\"body\"</span>).data(<span class=\"string\">\"foo\"</span>);  <span class=\"comment\">//获取  </span></div><div class=\"line\">$(<span class=\"string\">\"body\"</span>).removeData(<span class=\"string\">\"foo\"</span>);  <span class=\"comment\">//删除 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.dataset.foo = <span class=\"number\">52</span>  <span class=\"comment\">//设置  </span></div><div class=\"line\">ele.dataset.foo  <span class=\"comment\">//获取  </span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//也可通过attribute方法来设置获取和删除  </span></div><div class=\"line\">ele.setAttribute(<span class=\"string\">'data-foo'</span>, <span class=\"number\">52</span>);<span class=\"comment\">//设置  </span></div><div class=\"line\">ele.getAttribute(<span class=\"string\">'data-foo'</span>); <span class=\"comment\">//获取  </span></div><div class=\"line\">ele.removeAttribute(<span class=\"string\">'data-foo'</span>);<span class=\"comment\">//删除</span></div></pre></td></tr></table></figure>\n<h3 id=\"11-操作内容\"><a href=\"#11-操作内容\" class=\"headerlink\" title=\"11.操作内容\"></a>11.操作内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\"><span class=\"keyword\">var</span> html = $(ele).html();</div><div class=\"line\">$(el).empty();</div><div class=\"line\">$(ele).text();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"keyword\">var</span> html = ele.innerHTML;</div><div class=\"line\">el.innerHTML = <span class=\"string\">''</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> txt = ele.textContent || ele.innerText;</div></pre></td></tr></table></figure>\n<h3 id=\"12-操作CSS\"><a href=\"#12-操作CSS\" class=\"headerlink\" title=\"12.操作CSS\"></a>12.操作CSS</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).css(<span class=\"string\">'height'</span>,<span class=\"string\">'300px'</span>);  </div><div class=\"line\">$(ele).css(&#123;  </div><div class=\"line\">    height:<span class=\"number\">300</span>  </div><div class=\"line\">&#125;);</div><div class=\"line\">$(obj).css(<span class=\"string\">'marginLeft'</span>);<span class=\"comment\">//获取CSS</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.style.height = <span class=\"string\">'300px'</span>;  </div><div class=\"line\">ele.style.cssText = <span class=\"string\">'height:200px;color:red;left:100px;'</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">obj,attr</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(obj.currentStyle)&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> obj.currentStyle[attr];  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> getComputedStyle(obj,<span class=\"literal\">null</span>)[attr];  </div><div class=\"line\">    &#125;;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"13-显示隐藏\"><a href=\"#13-显示隐藏\" class=\"headerlink\" title=\"13.显示隐藏\"></a>13.显示隐藏</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(el).show();  </div><div class=\"line\">$(el).hide();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">el.style.display = <span class=\"string\">''</span>;  </div><div class=\"line\">el.style.display = <span class=\"string\">'none'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"14-元素的高度（宽度同理）-height\"><a href=\"#14-元素的高度（宽度同理）-height\" class=\"headerlink\" title=\"14.元素的高度（宽度同理）[height]\"></a>14.元素的高度（宽度同理）[height]</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).height();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">height</span>(<span class=\"params\">el</span>)</span>&#123;      </div><div class=\"line\">    <span class=\"keyword\">var</span> _height = el.clientHeight;      </div><div class=\"line\">    <span class=\"keyword\">var</span> style = el.currentStyle || getComputedStyle(el);        </div><div class=\"line\">    <span class=\"keyword\">return</span> _height - (<span class=\"built_in\">parseInt</span>(style.paddingTop) + <span class=\"built_in\">parseInt</span>(style.paddingBottom));      </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>元素的内高度（宽度同理）[height + padding]<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).innerHeight(); </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.clientHeight;</div></pre></td></tr></table></figure></p>\n<p>元素的外高度（宽度同理）[height + padding + border]<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).outerHeight();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.offsetWidth;</div></pre></td></tr></table></figure></p>\n<p>元素的外高度（宽度同理）[height + padding + border + margin]<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).outerHeight(<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outerHeight</span>(<span class=\"params\">el</span>)</span>&#123;    </div><div class=\"line\">    <span class=\"keyword\">var</span> style = el.currentStyle || getComputedStyle(el);    </div><div class=\"line\">    <span class=\"keyword\">var</span> height = el.offsetHeight + <span class=\"built_in\">parseInt</span>(style.marginTop) + <span class=\"built_in\">parseInt</span>(style.marginBottom);    </div><div class=\"line\">    <span class=\"keyword\">return</span> height;    </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"15-元素的位置\"><a href=\"#15-元素的位置\" class=\"headerlink\" title=\"15.元素的位置\"></a>15.元素的位置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(ele).position().left;  </div><div class=\"line\">$(ele).position().top;  </div><div class=\"line\">  </div><div class=\"line\">$(ele).offset().left;  </div><div class=\"line\">$(ele).offset().top;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\">ele.offsetLeft;  </div><div class=\"line\">ele.offsetTop;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getposi</span>(<span class=\"params\">obj</span>)</span>&#123;    </div><div class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"number\">0</span>,l = <span class=\"number\">0</span>;    </div><div class=\"line\">    <span class=\"keyword\">while</span>(obj)&#123;    </div><div class=\"line\">        t+=obj.offsetTop;    </div><div class=\"line\">        l+=obj.offsetLeft;    </div><div class=\"line\">        obj = obj.offsetParent;    </div><div class=\"line\">    &#125;;    </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">top</span>:t,<span class=\"attr\">left</span>:l&#125;;    </div><div class=\"line\">&#125;;  </div><div class=\"line\"><span class=\"comment\">//getposi(ele).left  </span></div><div class=\"line\"><span class=\"comment\">//getposi(ele).top  </span></div><div class=\"line\">ele.getBoundingClientRect().top + <span class=\"built_in\">window</span>.pageYOffset;  </div><div class=\"line\">ele.getBoundingClientRect().bottom + <span class=\"built_in\">window</span>.pageYOffset;  </div><div class=\"line\">ele.getBoundingClientRect().left + <span class=\"built_in\">window</span>.pageYOffset;  </div><div class=\"line\">ele.getBoundingClientRect().right + <span class=\"built_in\">window</span>.pageXOffset;</div></pre></td></tr></table></figure>\n<h3 id=\"16-Document事件\"><a href=\"#16-Document事件\" class=\"headerlink\" title=\"16.Document事件\"></a>16.Document事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// ready </span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"built_in\">window</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// load  </span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"built_in\">document</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//添加事件  </span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">$(ele).on(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//绑定事件  </span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"comment\">//ready</span></div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// Code  </span></div><div class=\"line\">&#125;,<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">//load</span></div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">// Code  </span></div><div class=\"line\">&#125;,<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">//添加事件</span></div><div class=\"line\"><span class=\"built_in\">document</span>.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//XXX  </span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//绑定事件</span></div><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </div><div class=\"line\">        <span class=\"comment\">//xxx    </span></div><div class=\"line\">&#125;,<span class=\"literal\">false</span>);    </div><div class=\"line\">  </div><div class=\"line\">[].forEach.call(ele,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o</span>)</span>&#123;  </div><div class=\"line\">    o.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </div><div class=\"line\">            <span class=\"comment\">//xxx    </span></div><div class=\"line\">    &#125;,<span class=\"literal\">false</span>);    </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"17-获取数据类型\"><a href=\"#17-获取数据类型\" class=\"headerlink\" title=\"17.获取数据类型\"></a>17.获取数据类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$.type(obj);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">type</span>(<span class=\"params\">obj</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj).replace(<span class=\"regexp\">/^\\[object (.+)\\]$/</span>, <span class=\"string\">\"$1\"</span>).toLowerCase();  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"18-判断是否为数组\"><a href=\"#18-判断是否为数组\" class=\"headerlink\" title=\"18.判断是否为数组\"></a>18.判断是否为数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$.isArray(arr);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span> (<span class=\"params\">v</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(v) === <span class=\"string\">'[object Array]'</span>;     </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"19-去除字符串两端的空格\"><a href=\"#19-去除字符串两端的空格\" class=\"headerlink\" title=\"19.去除字符串两端的空格\"></a>19.去除字符串两端的空格</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$.trim(string);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"comment\">//去除两端空格  </span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.trim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> reExtraSpace = <span class=\"regexp\">/^\\s*(.*?)\\s+$/</span>;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(reExtraSpace, <span class=\"string\">\"$1\"</span>)  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">/***扩展一下***/</span>  </div><div class=\"line\"><span class=\"comment\">//去除左边空格  </span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.ltrim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace( <span class=\"regexp\">/^(\\s*|　*)/</span>, <span class=\"string\">\"\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//去除右边空格  </span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.rtrim = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace( <span class=\"regexp\">/(\\s*|　*)$/</span>, <span class=\"string\">\"\"</span>);  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//替换全部  </span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.replaceAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s1, s2</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(s1, <span class=\"string\">\"gm\"</span>), s2)  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//去除所有空格，需要配合上面的替换全部  </span></div><div class=\"line\"><span class=\"built_in\">String</span>.prototype.trimAll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> reExtraSpace = <span class=\"regexp\">/\\s*(.*?)\\s+/</span>;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replaceAll(reExtraSpace, <span class=\"string\">\"$1\"</span>)  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"20-Cookie\"><a href=\"#20-Cookie\" class=\"headerlink\" title=\"20.Cookie\"></a>20.Cookie</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$.cookie(<span class=\"string\">'cookie'</span>); <span class=\"comment\">// 读取 cookie  </span></div><div class=\"line\">$.cookie(<span class=\"string\">'cookie'</span>, <span class=\"string\">'value'</span>); <span class=\"comment\">// 存储 cookie  </span></div><div class=\"line\">$.cookie(<span class=\"string\">'cookie'</span>, <span class=\"string\">'value'</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">7</span> &#125;); <span class=\"comment\">// 存储一个带7天期限的 cookie  </span></div><div class=\"line\">$.cookie(<span class=\"string\">'cookie'</span>, <span class=\"string\">''</span>, &#123; <span class=\"attr\">expires</span>: <span class=\"number\">-1</span> &#125;); <span class=\"comment\">// 删除 cookie  </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCookie</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">var</span> json = &#123;&#125;,d;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>] ==’string’)&#123;  </div><div class=\"line\">        json[<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]] = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];  </div><div class=\"line\">        d = <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>]  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>])&#123;  </div><div class=\"line\">            json.i = <span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>][i]  </div><div class=\"line\">            d = <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>];  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">    &#125;;        </div><div class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();  </div><div class=\"line\">    t.setDate(t.getDate()+d);  </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j <span class=\"keyword\">in</span> json)&#123;  </div><div class=\"line\">        <span class=\"built_in\">document</span>.cookie = j+’=’+json[j]+<span class=\"string\">';expires=’+t;  </span></div><div class=\"line\"><span class=\"string\">    &#125;;  </span></div><div class=\"line\"><span class=\"string\">&#125;;</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">function getCookie(n)&#123;  </span></div><div class=\"line\"><span class=\"string\">    var a = document.cookie.split(‘; ‘);  </span></div><div class=\"line\"><span class=\"string\">    for(var i=0;i&lt;a.length;i++)&#123;  </span></div><div class=\"line\"><span class=\"string\">        var a2 = a[i].split(‘=’);  </span></div><div class=\"line\"><span class=\"string\">        if(a2[0]==n)&#123;  </span></div><div class=\"line\"><span class=\"string\">            return a2[1];  </span></div><div class=\"line\"><span class=\"string\">        &#125;;  </span></div><div class=\"line\"><span class=\"string\">    &#125;;  </span></div><div class=\"line\"><span class=\"string\">&#125;;</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">function removeCookie(n)&#123;  </span></div><div class=\"line\"><span class=\"string\">    setCookie(n,null,-1);  </span></div><div class=\"line\"><span class=\"string\">&#125;</span></div></pre></td></tr></table></figure>\n<h3 id=\"21-Ajax\"><a href=\"#21-Ajax\" class=\"headerlink\" title=\"21.Ajax\"></a>21.Ajax</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// jquery</span></div><div class=\"line\">$.ajax(&#123;  </div><div class=\"line\">    type: <span class=\"string\">'POST'</span>,  </div><div class=\"line\">    url: <span class=\"string\">'/my/url'</span>,  </div><div class=\"line\">    data: data  </div><div class=\"line\">&#125;);  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// javascript</span></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> XMLHttpRequest();  </div><div class=\"line\">request.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'/my/url'</span>, <span class=\"literal\">true</span>);  </div><div class=\"line\">request.send(data);</div></pre></td></tr></table></figure>\n"},{"title":"基于vue的简易数字键盘","date":"2017-02-15T03:51:31.000Z","_content":"\n## 基于vue的简易数字键盘\n------\n完成时间：2017.02\n核心技术：zepto,Aui,vue\n从小记app里提取出来的，代码有点乱\n------\n## 先看效果图\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo.png)\n\n核心代码：\n事件没有用v-bind到组件上，因为移动端按键click会有300ms延迟，所以输入时会有延迟，用了apicloud的点击优化tap，或者用zepto的tap事件也行。\n分类组件：\n```javascript\n//分类组件\nvar classifyComponent = Vue.extend({\n    template: '#classifyComponent',\n    props: ['item','index'],\n    methods: {\n        onActive: function(){\n            $('#classify li').removeClass('active');\n            this.$el.className = \"aui-pull-left active\";\n        }\n    }\n})\n//分类实例\nvar classify = new Vue({\n      el: '#classify',\n      data: {\n          classify: expenditure\n      },\n      components:{\n          'classify-component': classifyComponent\n      },\n      methods: {\n         addClassify: function(){\n\n         }\n      }\n})\n\n```\n\n键盘组件：\n```javascript\n//键盘组件\nvar keybordComponent = Vue.extend({\n      template: '#keybordComponent',\n      data : function(){\n          return{\n              \n          }\n      },\n      props: ['numbers'],\n      methods: {\n          \n      }\n})\n//键盘实例\nvar keybord = new Vue({\n      el: '#keybord',\n      data: {\n          numbers: [7,8,9,4,5,6,1,2,3,'c',0,'.']\n      },\n      components:{\n          'keybord-component': keybordComponent\n      },\n      methods: {\n              onComf: function(){\n                \n              }\n          }\n})\n```\n按键操作：\n```javascript\nfunction onKeyUp(obj){\n      var count = amount.count;\n      var num = $(obj).find('span').text();\n      if(num == 'c'){\n          amount.count = 0; \n      }else if(num == '.'){\n          amount.count = count + num;\n      }else{\n         if(count === 0||count === '0'){\n             amount.count = num;\n         }else{\n             amount.count = count + num;\n         }\n      }\n      \n}\nfunction onDelete(){\n      var count = amount.count.toString();\n      if(count.length == 1) {\n          amount.count = 0;\n      }else{\n          amount.count = count.substr(0,count.length-1)\n      }\n}\n```\n\n[从apicloud提取出来的源码地址](https://github.com/cry101/Some-little-projects/tree/master/vue)\n\n","source":"_posts/vue-keybord.md","raw":"---\ntitle: 基于vue的简易数字键盘\ndate: 2017-02-15 11:51:31\ntags: vue\n---\n\n## 基于vue的简易数字键盘\n------\n完成时间：2017.02\n核心技术：zepto,Aui,vue\n从小记app里提取出来的，代码有点乱\n------\n## 先看效果图\n![图片](https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo.png)\n\n核心代码：\n事件没有用v-bind到组件上，因为移动端按键click会有300ms延迟，所以输入时会有延迟，用了apicloud的点击优化tap，或者用zepto的tap事件也行。\n分类组件：\n```javascript\n//分类组件\nvar classifyComponent = Vue.extend({\n    template: '#classifyComponent',\n    props: ['item','index'],\n    methods: {\n        onActive: function(){\n            $('#classify li').removeClass('active');\n            this.$el.className = \"aui-pull-left active\";\n        }\n    }\n})\n//分类实例\nvar classify = new Vue({\n      el: '#classify',\n      data: {\n          classify: expenditure\n      },\n      components:{\n          'classify-component': classifyComponent\n      },\n      methods: {\n         addClassify: function(){\n\n         }\n      }\n})\n\n```\n\n键盘组件：\n```javascript\n//键盘组件\nvar keybordComponent = Vue.extend({\n      template: '#keybordComponent',\n      data : function(){\n          return{\n              \n          }\n      },\n      props: ['numbers'],\n      methods: {\n          \n      }\n})\n//键盘实例\nvar keybord = new Vue({\n      el: '#keybord',\n      data: {\n          numbers: [7,8,9,4,5,6,1,2,3,'c',0,'.']\n      },\n      components:{\n          'keybord-component': keybordComponent\n      },\n      methods: {\n              onComf: function(){\n                \n              }\n          }\n})\n```\n按键操作：\n```javascript\nfunction onKeyUp(obj){\n      var count = amount.count;\n      var num = $(obj).find('span').text();\n      if(num == 'c'){\n          amount.count = 0; \n      }else if(num == '.'){\n          amount.count = count + num;\n      }else{\n         if(count === 0||count === '0'){\n             amount.count = num;\n         }else{\n             amount.count = count + num;\n         }\n      }\n      \n}\nfunction onDelete(){\n      var count = amount.count.toString();\n      if(count.length == 1) {\n          amount.count = 0;\n      }else{\n          amount.count = count.substr(0,count.length-1)\n      }\n}\n```\n\n[从apicloud提取出来的源码地址](https://github.com/cry101/Some-little-projects/tree/master/vue)\n\n","slug":"vue-keybord","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3a9001mnilw09q4a0o1","content":"<h2 id=\"基于vue的简易数字键盘\"><a href=\"#基于vue的简易数字键盘\" class=\"headerlink\" title=\"基于vue的简易数字键盘\"></a>基于vue的简易数字键盘</h2><hr>\n<p>完成时间：2017.02<br>核心技术：zepto,Aui,vue</p>\n<h2 id=\"从小记app里提取出来的，代码有点乱\"><a href=\"#从小记app里提取出来的，代码有点乱\" class=\"headerlink\" title=\"从小记app里提取出来的，代码有点乱\"></a>从小记app里提取出来的，代码有点乱</h2><h2 id=\"先看效果图\"><a href=\"#先看效果图\" class=\"headerlink\" title=\"先看效果图\"></a>先看效果图</h2><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo.png\" alt=\"图片\"></p>\n<p>核心代码：<br>事件没有用v-bind到组件上，因为移动端按键click会有300ms延迟，所以输入时会有延迟，用了apicloud的点击优化tap，或者用zepto的tap事件也行。<br>分类组件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//分类组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> classifyComponent = Vue.extend(&#123;</div><div class=\"line\">    template: <span class=\"string\">'#classifyComponent'</span>,</div><div class=\"line\">    props: [<span class=\"string\">'item'</span>,<span class=\"string\">'index'</span>],</div><div class=\"line\">    methods: &#123;</div><div class=\"line\">        onActive: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'#classify li'</span>).removeClass(<span class=\"string\">'active'</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.$el.className = <span class=\"string\">\"aui-pull-left active\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//分类实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> classify = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      el: <span class=\"string\">'#classify'</span>,</div><div class=\"line\">      data: &#123;</div><div class=\"line\">          classify: expenditure</div><div class=\"line\">      &#125;,</div><div class=\"line\">      components:&#123;</div><div class=\"line\">          <span class=\"string\">'classify-component'</span>: classifyComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      methods: &#123;</div><div class=\"line\">         addClassify: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>键盘组件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//键盘组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> keybordComponent = Vue.extend(&#123;</div><div class=\"line\">      template: <span class=\"string\">'#keybordComponent'</span>,</div><div class=\"line\">      data : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">              </div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      props: [<span class=\"string\">'numbers'</span>],</div><div class=\"line\">      methods: &#123;</div><div class=\"line\">          </div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//键盘实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> keybord = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      el: <span class=\"string\">'#keybord'</span>,</div><div class=\"line\">      data: &#123;</div><div class=\"line\">          numbers: [<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">'c'</span>,<span class=\"number\">0</span>,<span class=\"string\">'.'</span>]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      components:&#123;</div><div class=\"line\">          <span class=\"string\">'keybord-component'</span>: keybordComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      methods: &#123;</div><div class=\"line\">              onComf: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                </div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>按键操作：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onKeyUp</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> count = amount.count;</div><div class=\"line\">      <span class=\"keyword\">var</span> num = $(obj).find(<span class=\"string\">'span'</span>).text();</div><div class=\"line\">      <span class=\"keyword\">if</span>(num == <span class=\"string\">'c'</span>)&#123;</div><div class=\"line\">          amount.count = <span class=\"number\">0</span>; </div><div class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num == <span class=\"string\">'.'</span>)&#123;</div><div class=\"line\">          amount.count = count + num;</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(count === <span class=\"number\">0</span>||count === <span class=\"string\">'0'</span>)&#123;</div><div class=\"line\">             amount.count = num;</div><div class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">             amount.count = count + num;</div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onDelete</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> count = amount.count.toString();</div><div class=\"line\">      <span class=\"keyword\">if</span>(count.length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          amount.count = <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          amount.count = count.substr(<span class=\"number\">0</span>,count.length<span class=\"number\">-1</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue\" target=\"_blank\" rel=\"external\">从apicloud提取出来的源码地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基于vue的简易数字键盘\"><a href=\"#基于vue的简易数字键盘\" class=\"headerlink\" title=\"基于vue的简易数字键盘\"></a>基于vue的简易数字键盘</h2><hr>\n<p>完成时间：2017.02<br>核心技术：zepto,Aui,vue</p>\n<h2 id=\"从小记app里提取出来的，代码有点乱\"><a href=\"#从小记app里提取出来的，代码有点乱\" class=\"headerlink\" title=\"从小记app里提取出来的，代码有点乱\"></a>从小记app里提取出来的，代码有点乱</h2><h2 id=\"先看效果图\"><a href=\"#先看效果图\" class=\"headerlink\" title=\"先看效果图\"></a>先看效果图</h2><p><img src=\"https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo.png\" alt=\"图片\"></p>\n<p>核心代码：<br>事件没有用v-bind到组件上，因为移动端按键click会有300ms延迟，所以输入时会有延迟，用了apicloud的点击优化tap，或者用zepto的tap事件也行。<br>分类组件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//分类组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> classifyComponent = Vue.extend(&#123;</div><div class=\"line\">    template: <span class=\"string\">'#classifyComponent'</span>,</div><div class=\"line\">    props: [<span class=\"string\">'item'</span>,<span class=\"string\">'index'</span>],</div><div class=\"line\">    methods: &#123;</div><div class=\"line\">        onActive: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'#classify li'</span>).removeClass(<span class=\"string\">'active'</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.$el.className = <span class=\"string\">\"aui-pull-left active\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//分类实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> classify = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      el: <span class=\"string\">'#classify'</span>,</div><div class=\"line\">      data: &#123;</div><div class=\"line\">          classify: expenditure</div><div class=\"line\">      &#125;,</div><div class=\"line\">      components:&#123;</div><div class=\"line\">          <span class=\"string\">'classify-component'</span>: classifyComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      methods: &#123;</div><div class=\"line\">         addClassify: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>键盘组件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//键盘组件</span></div><div class=\"line\"><span class=\"keyword\">var</span> keybordComponent = Vue.extend(&#123;</div><div class=\"line\">      template: <span class=\"string\">'#keybordComponent'</span>,</div><div class=\"line\">      data : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">              </div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      props: [<span class=\"string\">'numbers'</span>],</div><div class=\"line\">      methods: &#123;</div><div class=\"line\">          </div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//键盘实例</span></div><div class=\"line\"><span class=\"keyword\">var</span> keybord = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">      el: <span class=\"string\">'#keybord'</span>,</div><div class=\"line\">      data: &#123;</div><div class=\"line\">          numbers: [<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">'c'</span>,<span class=\"number\">0</span>,<span class=\"string\">'.'</span>]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      components:&#123;</div><div class=\"line\">          <span class=\"string\">'keybord-component'</span>: keybordComponent</div><div class=\"line\">      &#125;,</div><div class=\"line\">      methods: &#123;</div><div class=\"line\">              onComf: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                </div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>按键操作：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onKeyUp</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> count = amount.count;</div><div class=\"line\">      <span class=\"keyword\">var</span> num = $(obj).find(<span class=\"string\">'span'</span>).text();</div><div class=\"line\">      <span class=\"keyword\">if</span>(num == <span class=\"string\">'c'</span>)&#123;</div><div class=\"line\">          amount.count = <span class=\"number\">0</span>; </div><div class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num == <span class=\"string\">'.'</span>)&#123;</div><div class=\"line\">          amount.count = count + num;</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(count === <span class=\"number\">0</span>||count === <span class=\"string\">'0'</span>)&#123;</div><div class=\"line\">             amount.count = num;</div><div class=\"line\">         &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">             amount.count = count + num;</div><div class=\"line\">         &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onDelete</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> count = amount.count.toString();</div><div class=\"line\">      <span class=\"keyword\">if</span>(count.length == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          amount.count = <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          amount.count = count.substr(<span class=\"number\">0</span>,count.length<span class=\"number\">-1</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/cry101/Some-little-projects/tree/master/vue\" target=\"_blank\" rel=\"external\">从apicloud提取出来的源码地址</a></p>\n"},{"title":"weex小记","date":"2017-12-27T09:10:25.000Z","_content":"### 1.weex和浏览器的差异\n（1）weex中不存在window对象\n\n\n\n### 2.[weex中使用scss](http://blog.csdn.net/seafishyls/article/details/64444819)\n官方lang=\"stylus\"\n使用scss则会报错: scss-loader not found\n似乎weex-loader中会自动根据lang寻找对应的loader\n然而scss使用的是sass-loader 造成了名称不对应的情况\n\n\n可通过标签引入\n```html\n<style src='./style.css' />\n```\nserve下@import同个文件，会造成px解析不对\n\n\n\n\n### 3.weex与vue-route\nvue-router不能支持导航链接，只支持编程式导航\n\n\n### 4.[weex选取图片](https://github.com/voids/weex-image-crop-picker)\n\n\n### 5.weex plugin add *** 报错，安卓环境问题\ncould not find gradle wrapper within android sdk\nhttps://www.jianshu.com/p/5d925413c79f\n\n### 6.Couldn't find preset \"env\" relative to directory\nhttps://www.cnblogs.com/ye-hcj/p/7070084.html\n\n\n### 7.为什么app端的登陆验证需要在请求头加token\n因为传统浏览器端的登陆验证是通过cookie的值，而app使用需要后端设置跨域：\n```javascript\n//Access-Control-Allow-Origin: '*',\n```\n而带cookie请求需要设置credentials mode 为 'include'\n```javascript\n//比如fetch需要设置 \n{ credentials: \"include\" }//带cookie请求\n\n//axios需要设置\n{ withCredentials: true} //带cookie请求\n```\n此时会报错\nThe value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'.\n\n所以最后的解决方案是通过把登陆校验的值放在请求头里\n\n\n### 8.打包的时候路由模式hash\n\n\n### 9.移动端字体兼容问题\n```html\n//有兼容问题的字体图标加载顺序\n@font-face {font-family: \"iconfont\";\n  src: url('iconfont.eot'); /* IE9*/\n  src: url('iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\n  url('iconfont.woff') format('woff'), /* chrome、firefox */\n  url('iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\n  url('iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */\n}\n```\n\n```html\n//移动端字体图标\n@font-face {font-family: \"iconfont\";\n  src: url('../font/iconfont.eot'); /* IE9*/\n  src: url('../font/iconfont.svg#iconfont') format('svg'), /* iOS 4.1- */\n  url('../font/iconfont.woff') format('woff'), /* chrome、firefox */\n  url('../font/iconfont.ttf') format('truetype'); /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ \n}\n```\n\n\n### 10.Cordova android emulator “cannot read property 'replace' of undefined”\nTracked it down to file /platforms/android/cordova/lib/emulator.js line 202:\n\nvar num = target.split('(API level ')1.replace(')', '');\n\nReplace it with a regex search and extraction:\n\nvar num = target.match(/\\d+/)[0];\n\n\n### 11.打包成app fetch用不了的情况：\n```html\nnpm install whatwg-fetch --save\n//文件中引入\nimport 'whatwg-fetch';\n```\n\n### 12.打包app \nhttp://blog.csdn.net/fifteen718/article/details/64125953\nassetsPublicPath: './',  // 编译发布的根目录\n\nindex.html 引入的外部文件按绝对路径\n<%=htmlWebpackPlugin.options.ImgHost %>static/xxx/xxx.js\n\n\n","source":"_posts/weex.md","raw":"---\ntitle: weex小记\ndate: 2017-12-27 17:10:25\ntags: [vue,weex]\n---\n### 1.weex和浏览器的差异\n（1）weex中不存在window对象\n\n\n\n### 2.[weex中使用scss](http://blog.csdn.net/seafishyls/article/details/64444819)\n官方lang=\"stylus\"\n使用scss则会报错: scss-loader not found\n似乎weex-loader中会自动根据lang寻找对应的loader\n然而scss使用的是sass-loader 造成了名称不对应的情况\n\n\n可通过标签引入\n```html\n<style src='./style.css' />\n```\nserve下@import同个文件，会造成px解析不对\n\n\n\n\n### 3.weex与vue-route\nvue-router不能支持导航链接，只支持编程式导航\n\n\n### 4.[weex选取图片](https://github.com/voids/weex-image-crop-picker)\n\n\n### 5.weex plugin add *** 报错，安卓环境问题\ncould not find gradle wrapper within android sdk\nhttps://www.jianshu.com/p/5d925413c79f\n\n### 6.Couldn't find preset \"env\" relative to directory\nhttps://www.cnblogs.com/ye-hcj/p/7070084.html\n\n\n### 7.为什么app端的登陆验证需要在请求头加token\n因为传统浏览器端的登陆验证是通过cookie的值，而app使用需要后端设置跨域：\n```javascript\n//Access-Control-Allow-Origin: '*',\n```\n而带cookie请求需要设置credentials mode 为 'include'\n```javascript\n//比如fetch需要设置 \n{ credentials: \"include\" }//带cookie请求\n\n//axios需要设置\n{ withCredentials: true} //带cookie请求\n```\n此时会报错\nThe value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'.\n\n所以最后的解决方案是通过把登陆校验的值放在请求头里\n\n\n### 8.打包的时候路由模式hash\n\n\n### 9.移动端字体兼容问题\n```html\n//有兼容问题的字体图标加载顺序\n@font-face {font-family: \"iconfont\";\n  src: url('iconfont.eot'); /* IE9*/\n  src: url('iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */\n  url('iconfont.woff') format('woff'), /* chrome、firefox */\n  url('iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\n  url('iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */\n}\n```\n\n```html\n//移动端字体图标\n@font-face {font-family: \"iconfont\";\n  src: url('../font/iconfont.eot'); /* IE9*/\n  src: url('../font/iconfont.svg#iconfont') format('svg'), /* iOS 4.1- */\n  url('../font/iconfont.woff') format('woff'), /* chrome、firefox */\n  url('../font/iconfont.ttf') format('truetype'); /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ \n}\n```\n\n\n### 10.Cordova android emulator “cannot read property 'replace' of undefined”\nTracked it down to file /platforms/android/cordova/lib/emulator.js line 202:\n\nvar num = target.split('(API level ')1.replace(')', '');\n\nReplace it with a regex search and extraction:\n\nvar num = target.match(/\\d+/)[0];\n\n\n### 11.打包成app fetch用不了的情况：\n```html\nnpm install whatwg-fetch --save\n//文件中引入\nimport 'whatwg-fetch';\n```\n\n### 12.打包app \nhttp://blog.csdn.net/fifteen718/article/details/64125953\nassetsPublicPath: './',  // 编译发布的根目录\n\nindex.html 引入的外部文件按绝对路径\n<%=htmlWebpackPlugin.options.ImgHost %>static/xxx/xxx.js\n\n\n","slug":"weex","published":1,"updated":"2018-01-19T03:32:37.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3ad001pnilwjm5imggk","content":"<h3 id=\"1-weex和浏览器的差异\"><a href=\"#1-weex和浏览器的差异\" class=\"headerlink\" title=\"1.weex和浏览器的差异\"></a>1.weex和浏览器的差异</h3><p>（1）weex中不存在window对象</p>\n<h3 id=\"2-weex中使用scss\"><a href=\"#2-weex中使用scss\" class=\"headerlink\" title=\"2.weex中使用scss\"></a>2.<a href=\"http://blog.csdn.net/seafishyls/article/details/64444819\" target=\"_blank\" rel=\"external\">weex中使用scss</a></h3><p>官方lang=”stylus”<br>使用scss则会报错: scss-loader not found<br>似乎weex-loader中会自动根据lang寻找对应的loader<br>然而scss使用的是sass-loader 造成了名称不对应的情况</p>\n<p>可通过标签引入<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">src</span>=<span class=\"string\">'./style.css'</span> /&gt;</span><span class=\"undefined\"></span></div></pre></td></tr></table></figure></p>\n<p>serve下@import同个文件，会造成px解析不对</p>\n<h3 id=\"3-weex与vue-route\"><a href=\"#3-weex与vue-route\" class=\"headerlink\" title=\"3.weex与vue-route\"></a>3.weex与vue-route</h3><p>vue-router不能支持导航链接，只支持编程式导航</p>\n<h3 id=\"4-weex选取图片\"><a href=\"#4-weex选取图片\" class=\"headerlink\" title=\"4.weex选取图片\"></a>4.<a href=\"https://github.com/voids/weex-image-crop-picker\" target=\"_blank\" rel=\"external\">weex选取图片</a></h3><h3 id=\"5-weex-plugin-add-报错，安卓环境问题\"><a href=\"#5-weex-plugin-add-报错，安卓环境问题\" class=\"headerlink\" title=\"5.weex plugin add * 报错，安卓环境问题\"></a>5.weex plugin add <em>*</em> 报错，安卓环境问题</h3><p>could not find gradle wrapper within android sdk<br><a href=\"https://www.jianshu.com/p/5d925413c79f\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/5d925413c79f</a></p>\n<h3 id=\"6-Couldn’t-find-preset-“env”-relative-to-directory\"><a href=\"#6-Couldn’t-find-preset-“env”-relative-to-directory\" class=\"headerlink\" title=\"6.Couldn’t find preset “env” relative to directory\"></a>6.Couldn’t find preset “env” relative to directory</h3><p><a href=\"https://www.cnblogs.com/ye-hcj/p/7070084.html\" target=\"_blank\" rel=\"external\">https://www.cnblogs.com/ye-hcj/p/7070084.html</a></p>\n<h3 id=\"7-为什么app端的登陆验证需要在请求头加token\"><a href=\"#7-为什么app端的登陆验证需要在请求头加token\" class=\"headerlink\" title=\"7.为什么app端的登陆验证需要在请求头加token\"></a>7.为什么app端的登陆验证需要在请求头加token</h3><p>因为传统浏览器端的登陆验证是通过cookie的值，而app使用需要后端设置跨域：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Access-Control-Allow-Origin: '*',</span></div></pre></td></tr></table></figure></p>\n<p>而带cookie请求需要设置credentials mode 为 ‘include’<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//比如fetch需要设置 </span></div><div class=\"line\">&#123; <span class=\"attr\">credentials</span>: <span class=\"string\">\"include\"</span> &#125;<span class=\"comment\">//带cookie请求</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//axios需要设置</span></div><div class=\"line\">&#123; <span class=\"attr\">withCredentials</span>: <span class=\"literal\">true</span>&#125; <span class=\"comment\">//带cookie请求</span></div></pre></td></tr></table></figure></p>\n<p>此时会报错<br>The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’ when the request’s credentials mode is ‘include’.</p>\n<p>所以最后的解决方案是通过把登陆校验的值放在请求头里</p>\n<h3 id=\"8-打包的时候路由模式hash\"><a href=\"#8-打包的时候路由模式hash\" class=\"headerlink\" title=\"8.打包的时候路由模式hash\"></a>8.打包的时候路由模式hash</h3><h3 id=\"9-移动端字体兼容问题\"><a href=\"#9-移动端字体兼容问题\" class=\"headerlink\" title=\"9.移动端字体兼容问题\"></a>9.移动端字体兼容问题</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//有兼容问题的字体图标加载顺序</div><div class=\"line\">@font-face &#123;font-family: \"iconfont\";</div><div class=\"line\">  src: url('iconfont.eot'); /* IE9*/</div><div class=\"line\">  src: url('iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */</div><div class=\"line\">  url('iconfont.woff') format('woff'), /* chrome、firefox */</div><div class=\"line\">  url('iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</div><div class=\"line\">  url('iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//移动端字体图标</div><div class=\"line\">@font-face &#123;font-family: \"iconfont\";</div><div class=\"line\">  src: url('../font/iconfont.eot'); /* IE9*/</div><div class=\"line\">  src: url('../font/iconfont.svg#iconfont') format('svg'), /* iOS 4.1- */</div><div class=\"line\">  url('../font/iconfont.woff') format('woff'), /* chrome、firefox */</div><div class=\"line\">  url('../font/iconfont.ttf') format('truetype'); /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"10-Cordova-android-emulator-“cannot-read-property-‘replace’-of-undefined”\"><a href=\"#10-Cordova-android-emulator-“cannot-read-property-‘replace’-of-undefined”\" class=\"headerlink\" title=\"10.Cordova android emulator “cannot read property ‘replace’ of undefined”\"></a>10.Cordova android emulator “cannot read property ‘replace’ of undefined”</h3><p>Tracked it down to file /platforms/android/cordova/lib/emulator.js line 202:</p>\n<p>var num = target.split(‘(API level ‘)1.replace(‘)’, ‘’);</p>\n<p>Replace it with a regex search and extraction:</p>\n<p>var num = target.match(/\\d+/)[0];</p>\n<h3 id=\"11-打包成app-fetch用不了的情况：\"><a href=\"#11-打包成app-fetch用不了的情况：\" class=\"headerlink\" title=\"11.打包成app fetch用不了的情况：\"></a>11.打包成app fetch用不了的情况：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install whatwg-fetch --save</div><div class=\"line\">//文件中引入</div><div class=\"line\">import 'whatwg-fetch';</div></pre></td></tr></table></figure>\n<h3 id=\"12-打包app\"><a href=\"#12-打包app\" class=\"headerlink\" title=\"12.打包app\"></a>12.打包app</h3><p><a href=\"http://blog.csdn.net/fifteen718/article/details/64125953\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/fifteen718/article/details/64125953</a><br>assetsPublicPath: ‘./‘,  // 编译发布的根目录</p>\n<p>index.html 引入的外部文件按绝对路径<br>&lt;%=htmlWebpackPlugin.options.ImgHost %&gt;static/xxx/xxx.js</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-weex和浏览器的差异\"><a href=\"#1-weex和浏览器的差异\" class=\"headerlink\" title=\"1.weex和浏览器的差异\"></a>1.weex和浏览器的差异</h3><p>（1）weex中不存在window对象</p>\n<h3 id=\"2-weex中使用scss\"><a href=\"#2-weex中使用scss\" class=\"headerlink\" title=\"2.weex中使用scss\"></a>2.<a href=\"http://blog.csdn.net/seafishyls/article/details/64444819\" target=\"_blank\" rel=\"external\">weex中使用scss</a></h3><p>官方lang=”stylus”<br>使用scss则会报错: scss-loader not found<br>似乎weex-loader中会自动根据lang寻找对应的loader<br>然而scss使用的是sass-loader 造成了名称不对应的情况</p>\n<p>可通过标签引入<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">src</span>=<span class=\"string\">'./style.css'</span> /&gt;</span><span class=\"undefined\"></span></div></pre></td></tr></table></figure></p>\n<p>serve下@import同个文件，会造成px解析不对</p>\n<h3 id=\"3-weex与vue-route\"><a href=\"#3-weex与vue-route\" class=\"headerlink\" title=\"3.weex与vue-route\"></a>3.weex与vue-route</h3><p>vue-router不能支持导航链接，只支持编程式导航</p>\n<h3 id=\"4-weex选取图片\"><a href=\"#4-weex选取图片\" class=\"headerlink\" title=\"4.weex选取图片\"></a>4.<a href=\"https://github.com/voids/weex-image-crop-picker\" target=\"_blank\" rel=\"external\">weex选取图片</a></h3><h3 id=\"5-weex-plugin-add-报错，安卓环境问题\"><a href=\"#5-weex-plugin-add-报错，安卓环境问题\" class=\"headerlink\" title=\"5.weex plugin add * 报错，安卓环境问题\"></a>5.weex plugin add <em>*</em> 报错，安卓环境问题</h3><p>could not find gradle wrapper within android sdk<br><a href=\"https://www.jianshu.com/p/5d925413c79f\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/5d925413c79f</a></p>\n<h3 id=\"6-Couldn’t-find-preset-“env”-relative-to-directory\"><a href=\"#6-Couldn’t-find-preset-“env”-relative-to-directory\" class=\"headerlink\" title=\"6.Couldn’t find preset “env” relative to directory\"></a>6.Couldn’t find preset “env” relative to directory</h3><p><a href=\"https://www.cnblogs.com/ye-hcj/p/7070084.html\" target=\"_blank\" rel=\"external\">https://www.cnblogs.com/ye-hcj/p/7070084.html</a></p>\n<h3 id=\"7-为什么app端的登陆验证需要在请求头加token\"><a href=\"#7-为什么app端的登陆验证需要在请求头加token\" class=\"headerlink\" title=\"7.为什么app端的登陆验证需要在请求头加token\"></a>7.为什么app端的登陆验证需要在请求头加token</h3><p>因为传统浏览器端的登陆验证是通过cookie的值，而app使用需要后端设置跨域：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Access-Control-Allow-Origin: '*',</span></div></pre></td></tr></table></figure></p>\n<p>而带cookie请求需要设置credentials mode 为 ‘include’<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//比如fetch需要设置 </span></div><div class=\"line\">&#123; <span class=\"attr\">credentials</span>: <span class=\"string\">\"include\"</span> &#125;<span class=\"comment\">//带cookie请求</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//axios需要设置</span></div><div class=\"line\">&#123; <span class=\"attr\">withCredentials</span>: <span class=\"literal\">true</span>&#125; <span class=\"comment\">//带cookie请求</span></div></pre></td></tr></table></figure></p>\n<p>此时会报错<br>The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’ when the request’s credentials mode is ‘include’.</p>\n<p>所以最后的解决方案是通过把登陆校验的值放在请求头里</p>\n<h3 id=\"8-打包的时候路由模式hash\"><a href=\"#8-打包的时候路由模式hash\" class=\"headerlink\" title=\"8.打包的时候路由模式hash\"></a>8.打包的时候路由模式hash</h3><h3 id=\"9-移动端字体兼容问题\"><a href=\"#9-移动端字体兼容问题\" class=\"headerlink\" title=\"9.移动端字体兼容问题\"></a>9.移动端字体兼容问题</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//有兼容问题的字体图标加载顺序</div><div class=\"line\">@font-face &#123;font-family: \"iconfont\";</div><div class=\"line\">  src: url('iconfont.eot'); /* IE9*/</div><div class=\"line\">  src: url('iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */</div><div class=\"line\">  url('iconfont.woff') format('woff'), /* chrome、firefox */</div><div class=\"line\">  url('iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</div><div class=\"line\">  url('iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//移动端字体图标</div><div class=\"line\">@font-face &#123;font-family: \"iconfont\";</div><div class=\"line\">  src: url('../font/iconfont.eot'); /* IE9*/</div><div class=\"line\">  src: url('../font/iconfont.svg#iconfont') format('svg'), /* iOS 4.1- */</div><div class=\"line\">  url('../font/iconfont.woff') format('woff'), /* chrome、firefox */</div><div class=\"line\">  url('../font/iconfont.ttf') format('truetype'); /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"10-Cordova-android-emulator-“cannot-read-property-‘replace’-of-undefined”\"><a href=\"#10-Cordova-android-emulator-“cannot-read-property-‘replace’-of-undefined”\" class=\"headerlink\" title=\"10.Cordova android emulator “cannot read property ‘replace’ of undefined”\"></a>10.Cordova android emulator “cannot read property ‘replace’ of undefined”</h3><p>Tracked it down to file /platforms/android/cordova/lib/emulator.js line 202:</p>\n<p>var num = target.split(‘(API level ‘)1.replace(‘)’, ‘’);</p>\n<p>Replace it with a regex search and extraction:</p>\n<p>var num = target.match(/\\d+/)[0];</p>\n<h3 id=\"11-打包成app-fetch用不了的情况：\"><a href=\"#11-打包成app-fetch用不了的情况：\" class=\"headerlink\" title=\"11.打包成app fetch用不了的情况：\"></a>11.打包成app fetch用不了的情况：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install whatwg-fetch --save</div><div class=\"line\">//文件中引入</div><div class=\"line\">import 'whatwg-fetch';</div></pre></td></tr></table></figure>\n<h3 id=\"12-打包app\"><a href=\"#12-打包app\" class=\"headerlink\" title=\"12.打包app\"></a>12.打包app</h3><p><a href=\"http://blog.csdn.net/fifteen718/article/details/64125953\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/fifteen718/article/details/64125953</a><br>assetsPublicPath: ‘./‘,  // 编译发布的根目录</p>\n<p>index.html 引入的外部文件按绝对路径<br>&lt;%=htmlWebpackPlugin.options.ImgHost %&gt;static/xxx/xxx.js</p>\n"},{"title":"JSON.parse 和 JSON.stringify","date":"2017-01-14T02:15:12.000Z","_content":"\n\n### 1.parse用于从一个字符串中解析出json对象,如\n\n```javascript\nvar str = '{\"name\":\"huangxiaojian\",\"age\":\"23\"}'\n```\n结果：\n\n```javascript\nJSON.parse(str)\n\nObject\n\nage: \"23\"\nname: \"huangxiaojian\"\n__proto__: Object\n```\n\n注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。\n\n\n\n### 2.stringify()用于从一个对象解析出字符串，如\n```javascript\nvar a = {a:1,b:2}\n```\n结果：\n```javascript\nJSON.stringify(a)\n\n\"{\"a\":1,\"b\":2}\" \n```","source":"_posts/JSON.md","raw":"---\ntitle: JSON.parse 和 JSON.stringify\ndate: 2017-01-14 10:15:12\ntags: javascript\n---\n\n\n### 1.parse用于从一个字符串中解析出json对象,如\n\n```javascript\nvar str = '{\"name\":\"huangxiaojian\",\"age\":\"23\"}'\n```\n结果：\n\n```javascript\nJSON.parse(str)\n\nObject\n\nage: \"23\"\nname: \"huangxiaojian\"\n__proto__: Object\n```\n\n注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。\n\n\n\n### 2.stringify()用于从一个对象解析出字符串，如\n```javascript\nvar a = {a:1,b:2}\n```\n结果：\n```javascript\nJSON.stringify(a)\n\n\"{\"a\":1,\"b\":2}\" \n```","slug":"JSON","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3av002bnilww89f0koq","content":"<h3 id=\"1-parse用于从一个字符串中解析出json对象-如\"><a href=\"#1-parse用于从一个字符串中解析出json对象-如\" class=\"headerlink\" title=\"1.parse用于从一个字符串中解析出json对象,如\"></a>1.parse用于从一个字符串中解析出json对象,如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'&#123;\"name\":\"huangxiaojian\",\"age\":\"23\"&#125;'</span></div></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(str)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span></div><div class=\"line\"></div><div class=\"line\">age: <span class=\"string\">\"23\"</span></div><div class=\"line\">name: <span class=\"string\">\"huangxiaojian\"</span></div><div class=\"line\">__proto__: <span class=\"built_in\">Object</span></div></pre></td></tr></table></figure>\n<p>注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。</p>\n<h3 id=\"2-stringify-用于从一个对象解析出字符串，如\"><a href=\"#2-stringify-用于从一个对象解析出字符串，如\" class=\"headerlink\" title=\"2.stringify()用于从一个对象解析出字符串，如\"></a>2.stringify()用于从一个对象解析出字符串，如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(a)</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>a<span class=\"string\">\":1,\"</span>b<span class=\"string\">\":2&#125;\"</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-parse用于从一个字符串中解析出json对象-如\"><a href=\"#1-parse用于从一个字符串中解析出json对象-如\" class=\"headerlink\" title=\"1.parse用于从一个字符串中解析出json对象,如\"></a>1.parse用于从一个字符串中解析出json对象,如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'&#123;\"name\":\"huangxiaojian\",\"age\":\"23\"&#125;'</span></div></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.parse(str)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span></div><div class=\"line\"></div><div class=\"line\">age: <span class=\"string\">\"23\"</span></div><div class=\"line\">name: <span class=\"string\">\"huangxiaojian\"</span></div><div class=\"line\">__proto__: <span class=\"built_in\">Object</span></div></pre></td></tr></table></figure>\n<p>注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。</p>\n<h3 id=\"2-stringify-用于从一个对象解析出字符串，如\"><a href=\"#2-stringify-用于从一个对象解析出字符串，如\" class=\"headerlink\" title=\"2.stringify()用于从一个对象解析出字符串，如\"></a>2.stringify()用于从一个对象解析出字符串，如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">JSON</span>.stringify(a)</div><div class=\"line\"></div><div class=\"line\"><span class=\"string\">\"&#123;\"</span>a<span class=\"string\">\":1,\"</span>b<span class=\"string\">\":2&#125;\"</span></div></pre></td></tr></table></figure></p>\n"},{"title":"ajax的一些小技巧","date":"2017-02-16T09:32:19.000Z","_content":"\n### 1.利用html5 formData实现ajax上传文件\n```html\n<div id=\"coverbg\">\n  <form id=\"uploadbgPic\" action=\"url/uf\" method=\"post\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"file\" accept=\"image/*\" class=\"upload2\">\n  </form>\n</div>\n```\n```javascript\n$('#coverbg').on('change','.upload2',function(){\n    var formData = new FormData($(\"#uploadbgPic\")[0]);\n    //console.log(formData)\n    $.ajax({\n        url: url + '/uf' ,\n        type: 'POST',\n        data: formData,\n        async: false,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            var data = result.data;\n            $('#coverbg').find('img').attr('src',baseAccessUploadPathPc + data);\n        },\n        error: function (err) {\n           console.log(err);\n        }\n    });\n});\n```\n\n### 2.递归运行解决ajax无顺序，不用for循环并发\n如果要重复发起请求，for循环不能保证顺序。\n```javascript\nvar n = 0;\n(function uploadPic(){\n    var formData = new FormData(n);\n    formData.append('file', file[n]);\n    $.ajax({\n        url: ctx + '/uf',\n        type: 'POST',\n        data: formData,\n        async: true,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            if (result.suc) {\n                 var data = result.data;\n                 /**\n                 * 数据处理\n                 */\n                 n++;\n                 if(n<file.length)uploadPic();\n            }else{\n                 alert(result.msg)\n            }\n        },\n        error: function (err) {\n            console.log(err);\n        }\n     });\n})(n);\n\n```\n","source":"_posts/ajax.md","raw":"---\ntitle: ajax的一些小技巧\ndate: 2017-02-16 17:32:19\ntags: ajax\n---\n\n### 1.利用html5 formData实现ajax上传文件\n```html\n<div id=\"coverbg\">\n  <form id=\"uploadbgPic\" action=\"url/uf\" method=\"post\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"file\" accept=\"image/*\" class=\"upload2\">\n  </form>\n</div>\n```\n```javascript\n$('#coverbg').on('change','.upload2',function(){\n    var formData = new FormData($(\"#uploadbgPic\")[0]);\n    //console.log(formData)\n    $.ajax({\n        url: url + '/uf' ,\n        type: 'POST',\n        data: formData,\n        async: false,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            var data = result.data;\n            $('#coverbg').find('img').attr('src',baseAccessUploadPathPc + data);\n        },\n        error: function (err) {\n           console.log(err);\n        }\n    });\n});\n```\n\n### 2.递归运行解决ajax无顺序，不用for循环并发\n如果要重复发起请求，for循环不能保证顺序。\n```javascript\nvar n = 0;\n(function uploadPic(){\n    var formData = new FormData(n);\n    formData.append('file', file[n]);\n    $.ajax({\n        url: ctx + '/uf',\n        type: 'POST',\n        data: formData,\n        async: true,\n        cache: false,\n        contentType: false,\n        processData: false,\n        success: function (result) {\n            if (result.suc) {\n                 var data = result.data;\n                 /**\n                 * 数据处理\n                 */\n                 n++;\n                 if(n<file.length)uploadPic();\n            }else{\n                 alert(result.msg)\n            }\n        },\n        error: function (err) {\n            console.log(err);\n        }\n     });\n})(n);\n\n```\n","slug":"ajax","published":1,"updated":"2017-09-19T13:16:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcvct3aw002cnilwjfzse63c","content":"<h3 id=\"1-利用html5-formData实现ajax上传文件\"><a href=\"#1-利用html5-formData实现ajax上传文件\" class=\"headerlink\" title=\"1.利用html5 formData实现ajax上传文件\"></a>1.利用html5 formData实现ajax上传文件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"coverbg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uploadbgPic\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"url/uf\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"upload2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#coverbg'</span>).on(<span class=\"string\">'change'</span>,<span class=\"string\">'.upload2'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData($(<span class=\"string\">\"#uploadbgPic\"</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"comment\">//console.log(formData)</span></div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url: url + <span class=\"string\">'/uf'</span> ,</div><div class=\"line\">        type: <span class=\"string\">'POST'</span>,</div><div class=\"line\">        data: formData,</div><div class=\"line\">        <span class=\"keyword\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        cache: <span class=\"literal\">false</span>,</div><div class=\"line\">        contentType: <span class=\"literal\">false</span>,</div><div class=\"line\">        processData: <span class=\"literal\">false</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> data = result.data;</div><div class=\"line\">            $(<span class=\"string\">'#coverbg'</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>,baseAccessUploadPathPc + data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">           <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"2-递归运行解决ajax无顺序，不用for循环并发\"><a href=\"#2-递归运行解决ajax无顺序，不用for循环并发\" class=\"headerlink\" title=\"2.递归运行解决ajax无顺序，不用for循环并发\"></a>2.递归运行解决ajax无顺序，不用for循环并发</h3><p>如果要重复发起请求，for循环不能保证顺序。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uploadPic</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(n);</div><div class=\"line\">    formData.append(<span class=\"string\">'file'</span>, file[n]);</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url: ctx + <span class=\"string\">'/uf'</span>,</div><div class=\"line\">        type: <span class=\"string\">'POST'</span>,</div><div class=\"line\">        data: formData,</div><div class=\"line\">        <span class=\"keyword\">async</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        cache: <span class=\"literal\">false</span>,</div><div class=\"line\">        contentType: <span class=\"literal\">false</span>,</div><div class=\"line\">        processData: <span class=\"literal\">false</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (result.suc) &#123;</div><div class=\"line\">                 <span class=\"keyword\">var</span> data = result.data;</div><div class=\"line\">                 <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">                 * 数据处理</span></div><div class=\"line\"><span class=\"comment\">                 */</span></div><div class=\"line\">                 n++;</div><div class=\"line\">                 <span class=\"keyword\">if</span>(n&lt;file.length)uploadPic();</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                 alert(result.msg)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">&#125;)(n);</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-利用html5-formData实现ajax上传文件\"><a href=\"#1-利用html5-formData实现ajax上传文件\" class=\"headerlink\" title=\"1.利用html5 formData实现ajax上传文件\"></a>1.利用html5 formData实现ajax上传文件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"coverbg\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uploadbgPic\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"url/uf\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/*\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"upload2\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#coverbg'</span>).on(<span class=\"string\">'change'</span>,<span class=\"string\">'.upload2'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData($(<span class=\"string\">\"#uploadbgPic\"</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"comment\">//console.log(formData)</span></div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url: url + <span class=\"string\">'/uf'</span> ,</div><div class=\"line\">        type: <span class=\"string\">'POST'</span>,</div><div class=\"line\">        data: formData,</div><div class=\"line\">        <span class=\"keyword\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        cache: <span class=\"literal\">false</span>,</div><div class=\"line\">        contentType: <span class=\"literal\">false</span>,</div><div class=\"line\">        processData: <span class=\"literal\">false</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> data = result.data;</div><div class=\"line\">            $(<span class=\"string\">'#coverbg'</span>).find(<span class=\"string\">'img'</span>).attr(<span class=\"string\">'src'</span>,baseAccessUploadPathPc + data);</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">           <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"2-递归运行解决ajax无顺序，不用for循环并发\"><a href=\"#2-递归运行解决ajax无顺序，不用for循环并发\" class=\"headerlink\" title=\"2.递归运行解决ajax无顺序，不用for循环并发\"></a>2.递归运行解决ajax无顺序，不用for循环并发</h3><p>如果要重复发起请求，for循环不能保证顺序。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">0</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uploadPic</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> formData = <span class=\"keyword\">new</span> FormData(n);</div><div class=\"line\">    formData.append(<span class=\"string\">'file'</span>, file[n]);</div><div class=\"line\">    $.ajax(&#123;</div><div class=\"line\">        url: ctx + <span class=\"string\">'/uf'</span>,</div><div class=\"line\">        type: <span class=\"string\">'POST'</span>,</div><div class=\"line\">        data: formData,</div><div class=\"line\">        <span class=\"keyword\">async</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        cache: <span class=\"literal\">false</span>,</div><div class=\"line\">        contentType: <span class=\"literal\">false</span>,</div><div class=\"line\">        processData: <span class=\"literal\">false</span>,</div><div class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (result.suc) &#123;</div><div class=\"line\">                 <span class=\"keyword\">var</span> data = result.data;</div><div class=\"line\">                 <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">                 * 数据处理</span></div><div class=\"line\"><span class=\"comment\">                 */</span></div><div class=\"line\">                 n++;</div><div class=\"line\">                 <span class=\"keyword\">if</span>(n&lt;file.length)uploadPic();</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                 alert(result.msg)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">     &#125;);</div><div class=\"line\">&#125;)(n);</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjcvct3800004nilwex6wg5la","tag_id":"cjcvct37w0002nilwdq69pzxv","_id":"cjcvct3860007nilw15txhjmt"},{"post_id":"cjcvct37p0000nilwjpcug51v","tag_id":"cjcvct37w0002nilwdq69pzxv","_id":"cjcvct3890009nilwn4wdx6q8"},{"post_id":"cjcvct37u0001nilwsw0kdbap","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct38f000dnilw5pilpvqx"},{"post_id":"cjcvct38e000cnilw6m33luyk","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct38i000gnilw6eoapvxc"},{"post_id":"cjcvct37z0003nilwh7hb7hf3","tag_id":"cjcvct37w0002nilwdq69pzxv","_id":"cjcvct38m000inilw06u59af7"},{"post_id":"cjcvct38g000enilw79fj9ig8","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct38o000lnilw14ftilm4"},{"post_id":"cjcvct38m000jnilwwgqlwoa2","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct38o000mnilwad5bn2av"},{"post_id":"cjcvct3840005nilwyra73lje","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct38p000onilwhzzl108k"},{"post_id":"cjcvct3840005nilwyra73lje","tag_id":"cjcvct38o000knilwf1phgtzw","_id":"cjcvct38p000pnilwvjv53gzp"},{"post_id":"cjcvct3870008nilwn5glbwt4","tag_id":"cjcvct38p000nnilwjwnxdf2j","_id":"cjcvct38q000rnilwld2ugnvj"},{"post_id":"cjcvct389000anilwiel3498d","tag_id":"cjcvct38p000qnilwm66bbzqi","_id":"cjcvct38s000vnilw1ggxr3h0"},{"post_id":"cjcvct389000anilwiel3498d","tag_id":"cjcvct38q000snilwz932pw4o","_id":"cjcvct38s000wnilw3nce2223"},{"post_id":"cjcvct389000anilwiel3498d","tag_id":"cjcvct38r000tnilwemffdokf","_id":"cjcvct38s000xnilwyc6pytz3"},{"post_id":"cjcvct38j000hnilwnuuod2d8","tag_id":"cjcvct38s000unilwv4l3k17s","_id":"cjcvct38s000ynilwlw3tbvu8"},{"post_id":"cjcvct38j000hnilwnuuod2d8","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct38t000znilwzogxm39j"},{"post_id":"cjcvct3910010nilwrhf22kop","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct3970012nilwkyncwms0"},{"post_id":"cjcvct3940011nilwmhpil4c9","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct3970013nilwh5246w4a"},{"post_id":"cjcvct39i0014nilwvbmhdyfp","tag_id":"cjcvct39o0017nilwl8kgvxtw","_id":"cjcvct39v001cnilwqriktfr0"},{"post_id":"cjcvct39w001dnilwe49k8ywk","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct3a0001gnilwjydkuhvj"},{"post_id":"cjcvct39m0016nilwj7o7tgsu","tag_id":"cjcvct39v001bnilwdlwbkyw7","_id":"cjcvct3a9001lnilwdtlembv3"},{"post_id":"cjcvct39m0016nilwj7o7tgsu","tag_id":"cjcvct39z001fnilwgbdkedpa","_id":"cjcvct3ac001nnilw1imludi7"},{"post_id":"cjcvct3a8001knilwtr0sfio4","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct3ai001qnilwykj1d8x5"},{"post_id":"cjcvct3a8001knilwtr0sfio4","tag_id":"cjcvct38s000unilwv4l3k17s","_id":"cjcvct3ai001rnilwy9fx98oi"},{"post_id":"cjcvct39o0018nilwwkk3s9sc","tag_id":"cjcvct3a7001jnilw5r8mwt9p","_id":"cjcvct3al001tnilw029tfgiu"},{"post_id":"cjcvct39r0019nilwfe660krd","tag_id":"cjcvct3a7001jnilw5r8mwt9p","_id":"cjcvct3am001unilw0e89w9xv"},{"post_id":"cjcvct39u001anilwixmoj3vy","tag_id":"cjcvct3a7001jnilw5r8mwt9p","_id":"cjcvct3am001wnilwid6h35hn"},{"post_id":"cjcvct39x001enilwsncv42m3","tag_id":"cjcvct3am001vnilwwqmjioge","_id":"cjcvct3an001ynilwyd6mltzm"},{"post_id":"cjcvct39x001enilwsncv42m3","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct3an001znilwmomunc68"},{"post_id":"cjcvct3a1001hnilwlb1t615x","tag_id":"cjcvct3am001vnilwwqmjioge","_id":"cjcvct3an0021nilwc5xsznno"},{"post_id":"cjcvct3a5001inilwrmtjqp1w","tag_id":"cjcvct3an0020nilwa73134fl","_id":"cjcvct3ap0024nilwo331y9su"},{"post_id":"cjcvct3a5001inilwrmtjqp1w","tag_id":"cjcvct3an0022nilw5x4kk3d1","_id":"cjcvct3ap0025nilwprx4b955"},{"post_id":"cjcvct3a9001mnilw09q4a0o1","tag_id":"cjcvct3am001vnilwwqmjioge","_id":"cjcvct3aq0027nilwsv24ndlk"},{"post_id":"cjcvct3ad001pnilwjm5imggk","tag_id":"cjcvct3am001vnilwwqmjioge","_id":"cjcvct3ar0029nilwnkprkzp7"},{"post_id":"cjcvct3ad001pnilwjm5imggk","tag_id":"cjcvct3aq0028nilwso10cgul","_id":"cjcvct3ar002anilw0jnto08x"},{"post_id":"cjcvct3av002bnilww89f0koq","tag_id":"cjcvct3860006nilwcr3q384n","_id":"cjcvct3az002dnilwo1299hm8"},{"post_id":"cjcvct3aw002cnilwjfzse63c","tag_id":"cjcvct3az002enilwlb8xje2m","_id":"cjcvct3b0002fnilw3qw3fvq8"}],"Tag":[{"name":"css","_id":"cjcvct37w0002nilwdq69pzxv"},{"name":"javascript","_id":"cjcvct3860006nilwcr3q384n"},{"name":"ie","_id":"cjcvct38o000knilwf1phgtzw"},{"name":"hexo","_id":"cjcvct38p000nnilwjwnxdf2j"},{"name":"ionic","_id":"cjcvct38p000qnilwm66bbzqi"},{"name":"angular","_id":"cjcvct38q000snilwz932pw4o"},{"name":"cordova","_id":"cjcvct38r000tnilwemffdokf"},{"name":"jQuery","_id":"cjcvct38s000unilwv4l3k17s"},{"name":"php","_id":"cjcvct39o0017nilwl8kgvxtw"},{"name":"mac","_id":"cjcvct39v001bnilwdlwbkyw7"},{"name":"android","_id":"cjcvct39z001fnilwgbdkedpa"},{"name":"project","_id":"cjcvct3a7001jnilw5r8mwt9p"},{"name":"vue","_id":"cjcvct3am001vnilwwqmjioge"},{"name":"web","_id":"cjcvct3an0020nilwa73134fl"},{"name":"cookie","_id":"cjcvct3an0022nilw5x4kk3d1"},{"name":"weex","_id":"cjcvct3aq0028nilwso10cgul"},{"name":"ajax","_id":"cjcvct3az002enilwlb8xje2m"}]}}