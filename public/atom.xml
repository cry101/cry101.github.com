<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-16T02:06:14.236Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ionic APP开发相关踩坑</title>
    <link href="http://yoursite.com/2017/06/15/ionic/"/>
    <id>http://yoursite.com/2017/06/15/ionic/</id>
    <published>2017-06-15T08:47:08.000Z</published>
    <updated>2017-06-16T02:06:14.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-配置各种环境参考资料"><a href="#1-配置各种环境参考资料" class="headerlink" title="1.配置各种环境参考资料"></a>1.配置各种环境参考资料</h3><p>（1）<a href="http://reactnative.cn/docs/0.45/getting-started.html" target="_blank" rel="external">React Native 开发文档</a><br>注：搭建android环境，sdk，之前搞了很久，忘记记录了。。<br>（2）<a href="https://angular.cn/" target="_blank" rel="external">angular 中文文档</a><br>（3）<a href="http://ionicframework.com/docs" target="_blank" rel="external">ionic 文档</a><br>（4）<a href="http://www.pc6.com/softview/SoftView_421983.html" target="_blank" rel="external">Gradle构建工具v3.3下载</a><br>注：是一个android打包工具，需要配置环境变量，官网下载太慢<br>（5）<a href="http://www.jianshu.com/p/9595eccac3d1" target="_blank" rel="external">Ionic打包过程下载Gradle失败的解决方法</a><br>注：暂时没遇到，上次打包了半小时</p>
<h3 id="2-ionic-基本功能配置"><a href="#2-ionic-基本功能配置" class="headerlink" title="2.ionic 基本功能配置"></a>2.ionic 基本功能配置</h3><p>（1）<a href="http://www.cnblogs.com/zsl123/p/6425489.html" target="_blank" rel="external">ionic2 中隐藏子页面tabs选项卡的三种方法</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.module.ts 找到</span></div><div class="line">imports: [</div><div class="line">    IonicModule.forRoot(MyApp,&#123;</div><div class="line">      <span class="attr">tabsHideOnSubPages</span>: <span class="string">'true'</span>         <span class="comment">//隐藏全部子页面tabs</span></div><div class="line">    &#125;)</div><div class="line">  ],</div></pre></td></tr></table></figure></p>
<p>（2）ionic2 返回键文字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.module.ts 默认是'back'</span></div><div class="line">imports: [</div><div class="line">    IonicModule.forRoot(MyApp,&#123;</div><div class="line">      <span class="attr">backButtonText</span>: <span class="string">''</span>, <span class="comment">//返回按钮文字</span></div><div class="line">    &#125;)</div><div class="line">  ],</div></pre></td></tr></table></figure></p>
<p>（3）<a href="http://blog.csdn.net/malonely/article/details/52777369" target="_blank" rel="external">ionic 自定义tabs样式</a><br>注：主要是scss<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//tabs.html</div><div class="line"><span class="tag">&lt;<span class="name">ion-tabs</span> <span class="attr">tabsPlacement</span>=<span class="string">"bottom"</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"tab1Root"</span> <span class="attr">tabTitle</span>=<span class="string">"tab1"</span> <span class="attr">tabIcon</span>=<span class="string">"tab-tab1"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"tab2Root"</span> <span class="attr">tabTitle</span>=<span class="string">"tab2"</span> <span class="attr">tabIcon</span>=<span class="string">"tab-tab2"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> [<span class="attr">root</span>]=<span class="string">"tab3Root"</span> <span class="attr">tabTitle</span>=<span class="string">"tab3"</span> <span class="attr">tabIcon</span>=<span class="string">"tab-tab3"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">ion-tabs</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//tabs.scss</div><div class="line">.ion-tab-icon-base &#123;  </div><div class="line">  width: 32px;  </div><div class="line">  height: 32px;  </div><div class="line">  padding: 4px 4px 2px;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">.ion-tab-icon-md-base &#123;  </div><div class="line">  min-width: 0 !important;  </div><div class="line">  height: 32px;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">$tabImageName: 'tab1' 'tab2' 'tab3';  </div><div class="line">@for $i from 1 to 4 &#123;  </div><div class="line">  //for ios  </div><div class="line">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class="line">    @extend .ion-tab-icon-base;  </div><div class="line">    content: url("../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png");  </div><div class="line">  &#125;  </div><div class="line">  .ion-ios-tab-#&#123;nth($tabImageName, $i)&#125;-outline &#123;  </div><div class="line">    @extend .ion-tab-icon-base;  </div><div class="line">    content: url("../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png");  </div><div class="line">  &#125;  </div><div class="line">  </div><div class="line">  // for android  </div><div class="line">  .tabs-md .tab-button[aria-selected=true] &#123;  </div><div class="line">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class="line">      @extend .ion-tab-icon-md-base;  </div><div class="line">      content: url("../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;_choosed.png");  </div><div class="line">    &#125;  </div><div class="line">  &#125;  </div><div class="line">  .tabs-md .tab-button[aria-selected=false] &#123;  </div><div class="line">    .ion-md-tab-#&#123;nth($tabImageName, $i)&#125; &#123;  </div><div class="line">      @extend .ion-tab-icon-md-base;  </div><div class="line">      content: url("../assets/images/tabs/#&#123;nth($tabImageName, $i)&#125;.png");  </div><div class="line">    &#125;  </div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-配置各种环境参考资料&quot;&gt;&lt;a href=&quot;#1-配置各种环境参考资料&quot; class=&quot;headerlink&quot; title=&quot;1.配置各种环境参考资料&quot;&gt;&lt;/a&gt;1.配置各种环境参考资料&lt;/h3&gt;&lt;p&gt;（1）&lt;a href=&quot;http://reactnative
    
    </summary>
    
    
      <category term="ionic + angular + cordova" scheme="http://yoursite.com/tags/ionic-angular-cordova/"/>
    
  </entry>
  
  <entry>
    <title>小记项目app</title>
    <link href="http://yoursite.com/2017/03/15/pro-note/"/>
    <id>http://yoursite.com/2017/03/15/pro-note/</id>
    <published>2017-03-15T09:22:24.000Z</published>
    <updated>2017-03-15T10:08:01.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记账app项目"><a href="#记账app项目" class="headerlink" title="记账app项目"></a>记账app项目</h2><hr>
<p>完成时间：2017.02 - 2017.02<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>
<hr>
<h2 id="贴一些图好了"><a href="#贴一些图好了" class="headerlink" title="贴一些图好了"></a>贴一些图好了</h2><h3 id="首页，本地存储，vue组件："><a href="#首页，本地存储，vue组件：" class="headerlink" title="首页，本地存储，vue组件："></a>首页，本地存储，vue组件：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/1.png" alt="图片"></p>
<h3 id="用户界面："><a href="#用户界面：" class="headerlink" title="用户界面："></a>用户界面：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/2.png" alt="图片"></p>
<h3 id="支出记账页面，vue组件实现键盘："><a href="#支出记账页面，vue组件实现键盘：" class="headerlink" title="支出记账页面，vue组件实现键盘："></a>支出记账页面，vue组件实现键盘：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/3.png" alt="图片"></p>
<h3 id="收入记账页面："><a href="#收入记账页面：" class="headerlink" title="收入记账页面："></a>收入记账页面：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/4.png" alt="图片"></p>
<h3 id="调用api里的时间选择："><a href="#调用api里的时间选择：" class="headerlink" title="调用api里的时间选择："></a>调用api里的时间选择：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/5.png" alt="图片"></p>
<h3 id="备注界面，调用键盘："><a href="#备注界面，调用键盘：" class="headerlink" title="备注界面，调用键盘："></a>备注界面，调用键盘：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/6.png" alt="图片"></p>
<h3 id="按月查看，日历是vue组件："><a href="#按月查看，日历是vue组件：" class="headerlink" title="按月查看，日历是vue组件："></a>按月查看，日历是vue组件：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/7.png" alt="图片"></p>
<h3 id="饼图，canvas画圆环："><a href="#饼图，canvas画圆环：" class="headerlink" title="饼图，canvas画圆环："></a>饼图，canvas画圆环：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/8.png" alt="图片"></p>
<h3 id="折线图，调用官方api："><a href="#折线图，调用官方api：" class="headerlink" title="折线图，调用官方api："></a>折线图，调用官方api：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/9.png" alt="图片"></p>
<h3 id="分类操作页面："><a href="#分类操作页面：" class="headerlink" title="分类操作页面："></a>分类操作页面：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/10.png" alt="图片"></p>
<h3 id="导出邮箱页面："><a href="#导出邮箱页面：" class="headerlink" title="导出邮箱页面："></a>导出邮箱页面：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/11.png" alt="图片"></p>
<h3 id="账户安全页面："><a href="#账户安全页面：" class="headerlink" title="账户安全页面："></a>账户安全页面：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/note/12.png" alt="图片"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;记账app项目&quot;&gt;&lt;a href=&quot;#记账app项目&quot; class=&quot;headerlink&quot; title=&quot;记账app项目&quot;&gt;&lt;/a&gt;记账app项目&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;完成时间：2017.02 - 2017.02&lt;br&gt;核心技术：apicloud,jquer
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6-01</title>
    <link href="http://yoursite.com/2017/03/03/ES6-01/"/>
    <id>http://yoursite.com/2017/03/03/ES6-01/</id>
    <published>2017-03-03T06:56:23.000Z</published>
    <updated>2017-07-14T02:37:27.906Z</updated>
    
    <content type="html"><![CDATA[<p>总结于：<a href="http://es6.ruanyifeng.com/#docs/" target="_blank" rel="external">ECMAScript6入门</a></p>
<h3 id="1-Babel转码器"><a href="#1-Babel转码器" class="headerlink" title="1.Babel转码器"></a>1.Babel转码器</h3><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 转码前</span></div><div class="line">input.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">// 转码后</span></div><div class="line">input.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> item + <span class="number">1</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="2-let命令"><a href="#2-let命令" class="headerlink" title="2.let命令"></a>2.let命令</h3><p>ES6新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>
<p>for循环的计数器，就很合适使用let命令。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(i);</div><div class="line"><span class="comment">//ReferenceError: i is not defined</span></div></pre></td></tr></table></figure></p>
<p>注：(1)let不存在变量提升<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// var 的情况</span></div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></div><div class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">// let 的情况</span></div><div class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></div><div class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</div></pre></td></tr></table></figure></p>
<p>(2)暂时性死区<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</div><div class="line"><span class="comment">//不受作用域外部影响</span></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></div><div class="line">  <span class="keyword">let</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(3)不允许重复声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> arg; <span class="comment">// 报错</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">let</span> arg; <span class="comment">// 不报错</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(4)let实际上为 JavaScript 新增了块级作用域。<br>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IIFE 写法</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tmp = ...;</div><div class="line">  ...</div><div class="line">&#125;());</div><div class="line"></div><div class="line"><span class="comment">// 块级作用域写法</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> tmp = ...;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h3><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。<br>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></div><div class="line">foo.prop = <span class="number">123</span>;</div><div class="line">foo.prop <span class="comment">// 123</span></div><div class="line"></div><div class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></div><div class="line">foo = &#123;&#125;; <span class="comment">// TypeError: "foo" is read-only</span></div><div class="line"></div><div class="line"><span class="comment">//如果真的想将对象冻结，应该使用Object.freeze方法。</span></div><div class="line"><span class="keyword">const</span> foo = <span class="built_in">Object</span>.freeze(&#123;&#125;);</div><div class="line"><span class="comment">// 常规模式时，下面一行不起作用；</span></div><div class="line"><span class="comment">// 严格模式时，该行会报错</span></div><div class="line">foo.prop = <span class="number">123</span>;</div></pre></td></tr></table></figure></p>
<h3 id="3-变量的解构赋值"><a href="#3-变量的解构赋值" class="headerlink" title="3.变量的解构赋值"></a>3.变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。<br>(1))数组的解构赋值：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</div><div class="line">foo <span class="comment">// 1</span></div><div class="line">bar <span class="comment">// 2</span></div><div class="line">baz <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</div><div class="line">third <span class="comment">// "baz"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">x <span class="comment">// 1</span></div><div class="line">y <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line">head <span class="comment">// 1</span></div><div class="line">tail <span class="comment">// [2, 3, 4]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</div><div class="line">x <span class="comment">// "a"</span></div><div class="line">y <span class="comment">// undefined</span></div><div class="line">z <span class="comment">// []</span></div></pre></td></tr></table></figure></p>
<p>(2)对象的解构赋值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</div><div class="line">foo <span class="comment">// "aaa"</span></div><div class="line">bar <span class="comment">// "bbb"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> foo;</div><div class="line"><span class="keyword">let</span> &#123;foo&#125; = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;; <span class="comment">// SyntaxError: Duplicate declaration "foo"</span></div><div class="line"></div><div class="line"><span class="comment">//下面代码中，let命令下面一行的圆括号是必须的，否则会报错。</span></div><div class="line"><span class="keyword">let</span> foo;</div><div class="line">(&#123;foo&#125; = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;); <span class="comment">// 成功</span></div><div class="line"></div><div class="line"><span class="comment">//嵌套</span></div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  <span class="attr">p</span>: [</div><div class="line">    <span class="string">'Hello'</span>,</div><div class="line">    &#123; <span class="attr">y</span>: <span class="string">'World'</span> &#125;</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</div><div class="line">x <span class="comment">// "Hello"</span></div><div class="line">y <span class="comment">// "World"</span></div></pre></td></tr></table></figure></p>
<p>(3)字符串的解构赋值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</div><div class="line">a <span class="comment">// "h"</span></div><div class="line">b <span class="comment">// "e"</span></div><div class="line">c <span class="comment">// "l"</span></div><div class="line">d <span class="comment">// "l"</span></div><div class="line">e <span class="comment">// "o"</span></div><div class="line"></div><div class="line"><span class="comment">//对length属性解构赋值</span></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</div><div class="line">len <span class="comment">// 5</span></div></pre></td></tr></table></figure></p>
<h3 id="4-字符串的扩展"><a href="#4-字符串的扩展" class="headerlink" title="4.字符串的扩展"></a>4.字符串的扩展</h3><p>(1)includes(), startsWith(), endsWith()<br>includes()：返回布尔值，表示是否找到了参数字符串。<br>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。<br>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这三个方法都支持第二个参数，表示开始搜索的位置。</span></div><div class="line"><span class="keyword">var</span> s = <span class="string">'Hello world!'</span>;</div><div class="line"></div><div class="line">s.includes(<span class="string">'o'</span>) <span class="comment">// true</span></div><div class="line"></div><div class="line">s.startsWith(<span class="string">'world'</span>, <span class="number">6</span>) <span class="comment">// true</span></div><div class="line">s.endsWith(<span class="string">'Hello'</span>, <span class="number">5</span>) <span class="comment">// true</span></div><div class="line">s.includes(<span class="string">'Hello'</span>, <span class="number">6</span>) <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p>(2)repeat() 表示将原字符串重复n次。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></div><div class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></div><div class="line"><span class="string">'na'</span>.repeat(<span class="number">0</span>) <span class="comment">// ""</span></div><div class="line"><span class="string">'na'</span>.repeat(<span class="literal">NaN</span>) <span class="comment">// ""</span></div><div class="line"><span class="string">'na'</span>.repeat(<span class="number">-1</span>)<span class="comment">// RangeError</span></div></pre></td></tr></table></figure></p>
<p>(3)padStart()，padEnd()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//padStart的常见用途是为数值补全指定位数。下面代码生成10位的数值字符串。</span></div><div class="line"><span class="string">'1'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000001"</span></div><div class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000000012"</span></div><div class="line"><span class="string">'123456'</span>.padStart(<span class="number">10</span>, <span class="string">'0'</span>) <span class="comment">// "0000123456"</span></div><div class="line"></div><div class="line"><span class="comment">//另一个用途是提示字符串格式。</span></div><div class="line"><span class="string">'12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-MM-12"</span></div><div class="line"><span class="string">'09-12'</span>.padStart(<span class="number">10</span>, <span class="string">'YYYY-MM-DD'</span>) <span class="comment">// "YYYY-09-12"</span></div></pre></td></tr></table></figure></p>
<p>(4)模板字符串<br>模板字符串（template string）是增强版的字符串，用反引号（`）标识。<br>它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串中嵌入变量</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</div><div class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>,   </span></div><div class="line">how are you <span class="subst">$&#123;time&#125;</span>?`   </div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</div><div class="line"><span class="string">`<span class="subst">$&#123;obj.x + obj.y&#125;</span>`</span><span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">"Hello World"</span>;</div><div class="line">&#125;</div><div class="line"><span class="string">`foo <span class="subst">$&#123;fn()&#125;</span> bar`</span><span class="comment">// foo Hello World bar</span></div></pre></td></tr></table></figure></p>
<p>模板字符串甚至还能嵌套。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> tmpl = <span class="function"><span class="params">addrs</span> =&gt;</span> <span class="string">`</span></div><div class="line">  &lt;table&gt;</div><div class="line">  <span class="subst">$&#123;addrs.map(addr =&gt; <span class="string">`</span></span></div><div class="line">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class="line">    &lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</div><div class="line">  `).join(<span class="string">''</span>)&#125;</div><div class="line">  &lt;/table&gt;</div><div class="line">`;</div><div class="line"><span class="comment">//使用方法</span></div><div class="line"><span class="keyword">const</span> data = [</div><div class="line">    &#123; <span class="attr">first</span>: <span class="string">'&lt;Jane&gt;'</span>, <span class="attr">last</span>: <span class="string">'Bond'</span> &#125;,</div><div class="line">    &#123; <span class="attr">first</span>: <span class="string">'Lars'</span>, <span class="attr">last</span>: <span class="string">'&lt;Croft&gt;'</span> &#125;,</div><div class="line">];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(tmpl(data));</div><div class="line"><span class="comment">// &lt;table&gt;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class="line"><span class="comment">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></div><div class="line"><span class="comment">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// &lt;/table&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 写法一</span></div><div class="line"><span class="keyword">let</span> str = <span class="string">'return '</span> + <span class="string">'`Hello $&#123;name&#125;!`'</span>;</div><div class="line"><span class="keyword">let</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'name'</span>, str);</div><div class="line">func(<span class="string">'Jack'</span>) <span class="comment">// "Hello Jack!"</span></div><div class="line"></div><div class="line"><span class="comment">// 写法二</span></div><div class="line"><span class="keyword">let</span> str = <span class="string">'(name) =&gt; `Hello $&#123;name&#125;!`'</span>;</div><div class="line"><span class="keyword">let</span> func = <span class="built_in">eval</span>.call(<span class="literal">null</span>, str);</div><div class="line">func(<span class="string">'Jack'</span>) <span class="comment">// "Hello Jack!"</span></div></pre></td></tr></table></figure></p>
<h3 id="5-函数的扩展"><a href="#5-函数的扩展" class="headerlink" title="5.函数的扩展"></a>5.函数的扩展</h3><p>(1)函数的默认值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通常情况下，定义了默认值的参数，应该是函数的尾参数。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">'World'</span></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x, y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">log(<span class="string">'Hello'</span>) <span class="comment">// Hello World</span></div><div class="line"></div><div class="line"><span class="comment">//函数的 length 属性：将返回没有指定默认值的参数个数。</span></div><div class="line">log.length <span class="comment">//1</span></div></pre></td></tr></table></figure></p>
<p>(2)rest参数（形式为…变量名）<br>函数的length属性，不包括 rest 参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> val <span class="keyword">of</span> values) &#123;</div><div class="line">    sum += val;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>) <span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<p>(3)箭头函数<br>箭头左边是参数，右边是返回值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">v</span> =&gt;</span> v;</div><div class="line"><span class="comment">//等同于</span></div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> v;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>箭头函数有几个使用注意点。</p>
<p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p>
<p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p>
<p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p>
<p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//嵌套的箭头函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;<span class="attr">into</span>: <span class="function"><span class="keyword">function</span> (<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">after</span>: <span class="function"><span class="keyword">function</span> (<span class="params">afterValue</span>) </span>&#123;</div><div class="line">      array.splice(array.indexOf(afterValue) + <span class="number">1</span>, <span class="number">0</span>, value);</div><div class="line">      <span class="keyword">return</span> array;</div><div class="line">    &#125;&#125;;</div><div class="line">  &#125;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">insert(<span class="number">2</span>).into([<span class="number">1</span>, <span class="number">3</span>]).after(<span class="number">1</span>); <span class="comment">//[1, 2, 3]</span></div><div class="line"></div><div class="line"><span class="comment">//等同于</span></div><div class="line"><span class="keyword">let</span> insert = <span class="function">(<span class="params">value</span>) =&gt;</span> (&#123;<span class="attr">into</span>: <span class="function">(<span class="params">array</span>) =&gt;</span> (&#123;<span class="attr">after</span>: <span class="function">(<span class="params">afterValue</span>) =&gt;</span> &#123;</div><div class="line">  array.splice(array.indexOf(afterValue) + <span class="number">1</span>, <span class="number">0</span>, value);</div><div class="line">  <span class="keyword">return</span> array;</div><div class="line">&#125;&#125;)&#125;);</div><div class="line"></div><div class="line">insert(<span class="number">2</span>).into([<span class="number">1</span>, <span class="number">3</span>]).after(<span class="number">1</span>); <span class="comment">//[1, 2, 3]</span></div></pre></td></tr></table></figure>
<p>(4)尾调用优化<br>尾调用指某个函数的最后一步是调用另一个函数<br>“尾调用优化”（Tail call optimization），即只保留内层函数的调用帧。<br>如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> g(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>尾递归<br>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。</p>
<p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误（stack overflow）。<br>但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</p>
<h3 id="6-数组的扩展"><a href="#6-数组的扩展" class="headerlink" title="6.数组的扩展"></a>6.数组的扩展</h3><p>(1)扩展运算符是三个点（…）<br>该运算符主要用于函数调用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5 的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line">f.apply(<span class="literal">null</span>, args);</div><div class="line"></div><div class="line"><span class="comment">// ES6的写法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line">f(...args);</div></pre></td></tr></table></figure></p>
<p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部。（可用于翻页）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5的 写法</span></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</div><div class="line"></div><div class="line"><span class="comment">// ES6 的写法</span></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">arr1.push(...arr2);</div></pre></td></tr></table></figure></p>
<p>扩展运算符的应用：</p>
<p><1>合并数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>].concat(more)</div><div class="line"><span class="comment">// ES6</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, ...more]</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</div><div class="line"></div><div class="line"><span class="comment">// ES5的合并数组</span></div><div class="line">arr1.concat(arr2, arr3);</div><div class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div><div class="line"></div><div class="line"><span class="comment">// ES6的合并数组</span></div><div class="line">[...arr1, ...arr2, ...arr3]</div><div class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></div></pre></td></tr></table></figure></1></p>
<p><2>与解构赋值结合<br>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">first <span class="comment">// 1</span></div><div class="line">rest  <span class="comment">// [2, 3, 4, 5]</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> [first, ...rest] = [];</div><div class="line">first <span class="comment">// undefined</span></div><div class="line">rest  <span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> [first, ...rest] = [<span class="string">"foo"</span>];</div><div class="line">first  <span class="comment">// "foo"</span></div><div class="line">rest   <span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> [...butLast, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="comment">// 报错</span></div></pre></td></tr></table></figure></2></p>
<p><3>字符串<br>扩展运算符还可以将字符串转为真正的数组。<br>能够正确识别32位的Unicode字符。<br>正确返回字符串长度的函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[...<span class="string">'hello'</span>]</div><div class="line"><span class="comment">// [ "h", "e", "l", "l", "o" ]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">length</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> [...str].length;</div><div class="line">&#125;</div><div class="line"></div><div class="line">length(<span class="string">'x\uD83D\uDE80y'</span>) <span class="comment">// 3</span></div></pre></td></tr></table></figure></3></p>
<p>(2)Array.from()<br>Array.from方法用于将两类对象转为真正的数组：<br>类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NodeList对象</span></div><div class="line"><span class="keyword">let</span> ps = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</div><div class="line"><span class="built_in">Array</span>.from(ps).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(p);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// arguments对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>扩展运算符（…）也可以将某些数据结构转为数组。<br>区别在于：任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。</p>
<p>Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.from(arrayLike, x =&gt; x * x);</div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="built_in">Array</span>.from(arrayLike).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], (x) =&gt; x * x)</div><div class="line"><span class="comment">// [1, 4, 9]</span></div></pre></td></tr></table></figure></p>
<p>下面的例子是取出一组DOM节点的文本内容。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> spans = <span class="built_in">document</span>.querySelectorAll(<span class="string">'span.name'</span>);</div><div class="line"></div><div class="line"><span class="comment">// map()</span></div><div class="line"><span class="keyword">let</span> names1 = <span class="built_in">Array</span>.prototype.map.call(spans, s =&gt; s.textContent);</div><div class="line"></div><div class="line"><span class="comment">// Array.from()</span></div><div class="line"><span class="keyword">let</span> names2 = <span class="built_in">Array</span>.from(spans, s =&gt; s.textContent)</div></pre></td></tr></table></figure></p>
<p>下面的例子将数组中布尔值为false的成员转为0。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, , <span class="number">2</span>, , <span class="number">3</span>], (n) =&gt; n || <span class="number">0</span>)</div><div class="line"><span class="comment">// [1, 0, 2, 0, 3]</span></div></pre></td></tr></table></figure></p>
<p>(3)Array.of()<br>Array.of方法用于将一组值，转换为数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">11</span>, <span class="number">8</span>) <span class="comment">// [3,11,8]</span></div><div class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>) <span class="comment">// [3]</span></div><div class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>).length <span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<p>(4)数组实例的 find() 和 findIndex()<br>数组实例的find方法，用于找出第一个符合条件的数组成员。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)</div><div class="line"><span class="comment">// -5</span></div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</div><div class="line">&#125;) <span class="comment">// 10</span></div><div class="line"></div><div class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</div><div class="line">&#125;) <span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<p>(5)数组实例的fill()<br>fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>)</div><div class="line"><span class="comment">// [7, 7, 7]</span></div><div class="line"></div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="comment">// ['a', 7, 'c']</span></div></pre></td></tr></table></figure></p>
<p>(6)数组实例的 entries()，keys() 和 values()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(elem);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a'</span></div><div class="line"><span class="comment">// 'b'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index, elem);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0 "a"</span></div><div class="line"><span class="comment">// 1 "b"</span></div></pre></td></tr></table></figure></p>
<h3 id="7-对象的扩展"><a href="#7-对象的扩展" class="headerlink" title="7.对象的扩展"></a>7.对象的扩展</h3><p>(1)Object.is()<br>与严格比较运算符（===）的行为基本一致。<br>不同之处只有两个：一是+0不等于-0，二是NaN等于自身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></div><div class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></div><div class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>(2)Object.assign()<br>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。<br>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</div><div class="line"><span class="keyword">var</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</div><div class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></div></pre></td></tr></table></figure></p>
<p>Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。<br>Object.assign方法实行的是浅拷贝，而不是深拷贝。</p>
<p>Object.assign方法有很多用处。</p>
<p><1>为对象添加属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>, &#123;x, y&#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></1></p>
<p><2>为对象添加方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</div><div class="line">  someMethod(arg1, arg2) &#123;</div><div class="line">    ···</div><div class="line">  &#125;,</div><div class="line">  anotherMethod() &#123;</div><div class="line">    ···</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 等同于下面的写法</span></div><div class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</div><div class="line">  ···</div><div class="line">&#125;;</div><div class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  ···</div><div class="line">&#125;;</div></pre></td></tr></table></figure></2></p>
<p><3>克隆对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, origin);</div><div class="line">&#125;</div></pre></td></tr></table></figure></3></p>
<p><4>合并多个对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> merge =</div><div class="line">  <span class="function">(<span class="params">target, ...sources</span>) =&gt;</span> <span class="built_in">Object</span>.assign(target, ...sources);</div></pre></td></tr></table></figure></4></p>
<p><5>为属性指定默认值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> DEFAULTS = &#123;</div><div class="line">  <span class="attr">logLevel</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">outputFormat</span>: <span class="string">'html'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processContent</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</div><div class="line">  <span class="built_in">console</span>.log(options);</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></5></p>
<p>(3)属性的可枚举性<br>对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。<br>Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>)</div><div class="line"><span class="comment">//  &#123;</span></div><div class="line"><span class="comment">//    value: 123,</span></div><div class="line"><span class="comment">//    writable: true,</span></div><div class="line"><span class="comment">//    enumerable: true, 可枚举性</span></div><div class="line"><span class="comment">//    configurable: true</span></div><div class="line"><span class="comment">//  &#125;</span></div></pre></td></tr></table></figure></p>
<p>ES5 有三个操作会忽略enumerable为false的属性。<br>  for…in循环：只遍历对象自身的和继承的可枚举的属性<br>  Object.keys()：返回对象自身的所有可枚举的属性的键名<br>  JSON.stringify()：只串行化对象自身的可枚举的属性<br>ES6 新增了一个操作Object.assign()，会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。<br>尽量不要用for…in循环，而用Object.keys()代替。</p>
<p>(4)属性的遍历<br>ES6 一共有5种方法可以遍历对象的属性。</p>
<p><1>for…in</1></p>
<p>for…in循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p>
<p><2>Object.keys(obj)</2></p>
<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。</p>
<p><3>Object.getOwnPropertyNames(obj)</3></p>
<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。</p>
<p><4>Object.getOwnPropertySymbols(obj)</4></p>
<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有 Symbol 属性。</p>
<p><5>Reflect.ownKeys(obj)</5></p>
<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。</p>
<p>(5)<strong>proto</strong>属性<br>无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的<br>Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）代替。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> proto = &#123;&#125;;</div><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;;</div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, proto);</div><div class="line"></div><div class="line">proto.y = <span class="number">20</span>;</div><div class="line">proto.z = <span class="number">40</span>;</div><div class="line"></div><div class="line">obj.x <span class="comment">// 10</span></div><div class="line">obj.y <span class="comment">// 20</span></div><div class="line">obj.z <span class="comment">// 40</span></div></pre></td></tr></table></figure></p>
<p>(6)Object.keys()，Object.values()，Object.entries()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</div><div class="line"><span class="built_in">Object</span>.keys(obj)</div><div class="line"><span class="comment">// ["foo", "baz"]</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.values(obj)</div><div class="line"><span class="comment">// ["bar", 42]</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.entries(obj)</div><div class="line"><span class="comment">// [ ["foo", "bar"], ["baz", 42] ]</span></div></pre></td></tr></table></figure></p>
<p>(7)Null 传导运算符<br>如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。<br>比如，要读取message.body.user.firstName，安全的写法是写成下面这样。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> firstName = (message</div><div class="line">  &amp;&amp; message.body</div><div class="line">  &amp;&amp; message.body.user</div><div class="line">  &amp;&amp; message.body.user.firstName) || <span class="string">'default'</span>;</div><div class="line"></div><div class="line"><span class="comment">//这样的层层判断非常麻烦，因此现在有一个提案，引入了“Null 传导运算符”</span></div><div class="line"><span class="keyword">const</span> firstName = message?.body?.user?.firstName || <span class="string">'default'</span>;</div></pre></td></tr></table></figure></p>
<h3 id="8-Symbol"><a href="#8-Symbol" class="headerlink" title="8.Symbol"></a>8.Symbol</h3><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</div><div class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</div><div class="line"></div><div class="line">s1 <span class="comment">// Symbol(foo)</span></div><div class="line">s2 <span class="comment">// Symbol(bar)</span></div><div class="line"></div><div class="line">s1.toString() <span class="comment">// "Symbol(foo)"</span></div><div class="line">s2.toString() <span class="comment">// "Symbol(bar)"</span></div></pre></td></tr></table></figure></p>
<p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p>
<p>Symbol.for():重新使用同一个Symbol值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</div><div class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">'foo'</span>);</div><div class="line"></div><div class="line">s1 === s2 <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。</p>
<p>Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">Symbol</span>.keyFor(s1) <span class="comment">// "foo"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">Symbol</span>.keyFor(s2) <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<h3 id="9-Set和Map"><a href="#9-Set和Map" class="headerlink" title="9.Set和Map"></a>9.Set和Map</h3><p>(1)Set类似于数组，但是成员的值都是唯一的，没有重复的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例一</span></div><div class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</div><div class="line">[...set]</div><div class="line"><span class="comment">// [1, 2, 3, 4]</span></div><div class="line"></div><div class="line"><span class="comment">// 例二</span></div><div class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</div><div class="line">items.size <span class="comment">// 5</span></div><div class="line"></div><div class="line"><span class="comment">// 去除数组的重复成员</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">let</span> unique = [...new <span class="built_in">Set</span>(arr)];<span class="comment">// [3, 5, 2]</span></div></pre></td></tr></table></figure></p>
<p>Set的操作方法：<br>  add(value)：添加某个值，返回Set结构本身。<br>  delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>  has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>  clear()：清除所有成员，没有返回值。</p>
<p>Set的遍历方法：<br>  keys()：返回键名的遍历器<br>  values()：返回键值的遍历器<br>  entries()：返回键值对的遍历器<br>  forEach()：使用回调函数遍历每个成员</p>
<p>(2)WeakSet：<br>  结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别。<br>  首先，WeakSet 的成员只能是对象，而不能是其他类型的值。<br>  其次，WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</p>
<p>(3)Map<br>Map类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"><span class="keyword">const</span> o = &#123;<span class="attr">p</span>: <span class="string">'Hello World'</span>&#125;;</div><div class="line"></div><div class="line">m.set(o, <span class="string">'content'</span>)</div><div class="line">m.get(o) <span class="comment">// "content"</span></div><div class="line"></div><div class="line">m.has(o) <span class="comment">// true</span></div><div class="line">m.delete(o) <span class="comment">// true</span></div><div class="line">m.has(o) <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p>(4)WeakMap<br>  WeakMap与Map的区别有两点。<br>  首先，WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名。<br>  其次，WeakMap的键名所指向的对象，不计入垃圾回收机制。</p>
<h3 id="10-Promise"><a href="#10-Promise" class="headerlink" title="10.Promise"></a>10.Promise</h3><p>(1)Promise对象有以下两个特点：</p>
<p><1>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。</1></p>
<p><2>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="comment">// ... some code</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//Promise实例生成以后，可以用then方法分别指定Resolved状态和Reject状态的回调函数。</span></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="comment">// success</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="comment">// failure</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></2></p>
<p>(2)Promise.all()<br>Promise.all方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 生成一个Promise对象的数组</span></div><div class="line"><span class="keyword">var</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> getJSON(<span class="string">'/post/'</span> + id + <span class="string">".json"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span> (<span class="params">posts</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Promise.race类似Promise.all,区别在于Promise.race有一个实例率先改变状态，p的状态就跟着改变，Promise.all而是要所有实例都改变状态。</p>
<p>(3)Promise.resolve<br>作用是将现有对象转化为Promise对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'foo'</span>)</div><div class="line"><span class="comment">// 等价于</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="string">'foo'</span>))</div></pre></td></tr></table></figure></p>
<p>(4)应用于加载图片<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> preloadImage = <span class="function"><span class="keyword">function</span> (<span class="params">path</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</div><div class="line">    image.onload  = resolve;</div><div class="line">    image.onerror = reject;</div><div class="line">    image.src = path;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="11-Iterator"><a href="#11-Iterator" class="headerlink" title="11.Iterator"></a>11.Iterator</h3><p>(1)Iterator 的作用有三个：<br>一是为各种数据结构，提供一个统一的、简便的访问接口；<br>二是使得数据结构的成员能够按某种次序排列；<br>三是ES6创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费。</p>
<p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组的Symbol.iterator属性</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</div><div class="line"></div><div class="line">iter.next() <span class="comment">// &#123; value: 'a', done: false &#125;</span></div><div class="line">iter.next() <span class="comment">// &#123; value: 'b', done: false &#125;</span></div><div class="line">iter.next() <span class="comment">// &#123; value: 'c', done: false &#125;</span></div><div class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>
<p>原生具备 Iterator 接口的数据结构如下。<br>    Array<br>    Map<br>    Set<br>    String<br>    TypedArray<br>    函数的 arguments 对象</p>
<p>(2)for…of循环<br>一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，就可以用for…of循环遍历它的成员。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// red green blue</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//空对象obj部署了数组arr的Symbol.iterator属性</span></div><div class="line"><span class="keyword">const</span> obj = &#123;&#125;;</div><div class="line">obj[<span class="built_in">Symbol</span>.iterator] = arr[<span class="built_in">Symbol</span>.iterator].bind(arr);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v); <span class="comment">// red green blue</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>for…in循环读取键名，for…of循环读取键值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">in</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 0 1 2 3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> arr) &#123;</div><div class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// a b c d</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>计算生成的数据结构 entries(),keys(),values()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> arr.entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(pair);</div><div class="line">&#125;</div><div class="line"><span class="comment">// [0, 'a']</span></div><div class="line"><span class="comment">// [1, 'b']</span></div><div class="line"><span class="comment">// [2, 'c']</span></div></pre></td></tr></table></figure></p>
<p>与其他遍历语法的比较<br>for:最原始的写法，较为麻烦<br>forEach:数组内置的方法，无法中途跳出forEach循环，break命令或return命令都不能奏效。<br>for…in:主要用于遍历对象，不适合遍历数组，for…in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。<br>    某些情况下，for…in循环会以任意顺序遍历键名。</p>
<h3 id="12-Generator"><a href="#12-Generator" class="headerlink" title="12.Generator"></a>12.Generator</h3><p>(1)Generator 函数是一个状态机，封装了多个内部状态。<br>形式上，Generator 函数是一个普通函数，但是有两个特征。<br>一是，function关键字与函数名之间有一个星号；<br>二是，函数体内部使用yield表达式，定义不同的内部状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该函数有三个状态：hello，world 和 return 语句（结束执行）</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'hello'</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'world'</span>;</div><div class="line">  <span class="keyword">return</span> <span class="string">'ending'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//调用 Generator 函数后，该函数并不执行，返回的是遍历器对象</span></div><div class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</div><div class="line"></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: 'hello', done: false &#125;</span></div><div class="line"></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: 'world', done: false &#125;</span></div><div class="line"></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: 'ending', done: true &#125;</span></div><div class="line"></div><div class="line">hw.next()</div><div class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>
<p>(2)与 Iterator 接口的关系<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myIterable = &#123;&#125;;</div><div class="line">myIterable[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">[...myIterable] <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure></p>
<p>(3)Generator.prototype.return()<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> g = gen();</div><div class="line"></div><div class="line">g.next()        <span class="comment">// &#123; value: 1, done: false &#125;</span></div><div class="line">g.return(<span class="string">'foo'</span>) <span class="comment">// &#123; value: "foo", done: true &#125;</span></div><div class="line">g.next()        <span class="comment">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure></p>
<p>(4)yield* 表达式<br>用来在一个 Generator 函数里面执行另一个 Generator 函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</div><div class="line">  <span class="keyword">yield</span>* foo();</div><div class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> foo()) &#123;</div><div class="line">    <span class="keyword">yield</span> v;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> bar())&#123;</div><div class="line">  <span class="built_in">console</span>.log(v);</div><div class="line">&#125;</div><div class="line"><span class="comment">// "x"</span></div><div class="line"><span class="comment">// "a"</span></div><div class="line"><span class="comment">// "b"</span></div><div class="line"><span class="comment">// "y"</span></div></pre></td></tr></table></figure></p>
<p>(5)应用<br>通过 Generator 函数部署 Ajax 操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> request(<span class="string">"http://some.url"</span>);</div><div class="line">  <span class="keyword">var</span> resp = <span class="built_in">JSON</span>.parse(result);</div><div class="line">    <span class="built_in">console</span>.log(resp.value);</div><div class="line">&#125;</div><div class="line"><span class="comment">//makeAjaxCall函数中的next方法，必须加上response参数，因为yield表达式，本身是没有值的</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  makeAjaxCall(url, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">    it.next(response);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> it = main();</div><div class="line">it.next();</div></pre></td></tr></table></figure></p>
<p>控制流管理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//多步操作</span></div><div class="line">step1(<span class="function"><span class="keyword">function</span> (<span class="params">value1</span>) </span>&#123;</div><div class="line">  step2(value1, <span class="function"><span class="keyword">function</span>(<span class="params">value2</span>) </span>&#123;</div><div class="line">    step3(value2, <span class="function"><span class="keyword">function</span>(<span class="params">value3</span>) </span>&#123;</div><div class="line">      step4(value3, <span class="function"><span class="keyword">function</span>(<span class="params">value4</span>) </span>&#123;</div><div class="line">        <span class="comment">// Do something with value4</span></div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//采用 Promise 改写上面的代码。</span></div><div class="line"><span class="built_in">Promise</span>.resolve(step1)</div><div class="line">  .then(step2)</div><div class="line">  .then(step3)</div><div class="line">  .then(step4)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">value4</span>) </span>&#123;</div><div class="line">    <span class="comment">// Do something with value4</span></div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="comment">// Handle any error from step1 through step4</span></div><div class="line">  &#125;)</div><div class="line">  .done();</div><div class="line"></div><div class="line"><span class="comment">//Generator 函数可以进一步改善代码运行流程。（同步操作）</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">longRunningTask</span>(<span class="params">value1</span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">var</span> value2 = <span class="keyword">yield</span> step1(value1);</div><div class="line">    <span class="keyword">var</span> value3 = <span class="keyword">yield</span> step2(value2);</div><div class="line">    <span class="keyword">var</span> value4 = <span class="keyword">yield</span> step3(value3);</div><div class="line">    <span class="keyword">var</span> value5 = <span class="keyword">yield</span> step4(value4);</div><div class="line">    <span class="comment">// Do something with value4</span></div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="comment">// Handle any error from step1 through step4</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="13-async函数"><a href="#13-async函数" class="headerlink" title="13.async函数"></a>13.async函数</h3><p>async函数是Generator 函数的语法糖<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">fileName</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    fs.readFile(fileName, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (error) reject(error);</div><div class="line">      resolve(data);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> gen = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> f1 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/fstab'</span>);</div><div class="line">  <span class="keyword">var</span> f2 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/shells'</span>);</div><div class="line">  <span class="built_in">console</span>.log(f1.toString());</div><div class="line">  <span class="built_in">console</span>.log(f2.toString());</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//写成async函数，就是下面这样。</span></div><div class="line"><span class="keyword">var</span> asyncReadFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> f1 = <span class="keyword">await</span> readFile(<span class="string">'/etc/fstab'</span>);</div><div class="line">  <span class="keyword">var</span> f2 = <span class="keyword">await</span> readFile(<span class="string">'/etc/shells'</span>);</div><div class="line">  <span class="built_in">console</span>.log(f1.toString());</div><div class="line">  <span class="built_in">console</span>.log(f2.toString());</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>async函数对 Generator 函数的改进，体现在以下四点:</p>
<p><1>内置执行器<br>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。<br>var result = asyncReadFile();</1></p>
<p><2>更好的语义</2></p>
<p><3>更广的适用性</3></p>
<p><4>返回值是Promise</4></p>
<p>基本用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStockPriceByName</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> symbol = <span class="keyword">await</span> getStockSymbol(name);</div><div class="line">  <span class="keyword">var</span> stockPrice = <span class="keyword">await</span> getStockPrice(symbol);</div><div class="line">  <span class="keyword">return</span> stockPrice;</div><div class="line">&#125;</div><div class="line"></div><div class="line">getStockPriceByName(<span class="string">'goog'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>实例：按顺序完成异步操作：</p>
<p><1>Promise 的写法如下。（这种写法不太直观，可读性比较差。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logInOrder</span>(<span class="params">urls</span>) </span>&#123;</div><div class="line">  <span class="comment">// 远程读取所有URL</span></div><div class="line">  <span class="keyword">const</span> textPromises = urls.map(<span class="function"><span class="params">url</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> fetch(url).then(<span class="function"><span class="params">response</span> =&gt;</span> response.text());</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 按次序输出</span></div><div class="line">  textPromises.reduce(<span class="function">(<span class="params">chain, textPromise</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> chain.then(<span class="function"><span class="params">()</span> =&gt;</span> textPromise)</div><div class="line">      .then(<span class="function"><span class="params">text</span> =&gt;</span> <span class="built_in">console</span>.log(text));</div><div class="line">  &#125;, <span class="built_in">Promise</span>.resolve());</div><div class="line">&#125;</div></pre></td></tr></table></figure></1></p>
<p><2>async 函数实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">logInOrder</span>(<span class="params">urls</span>) </span>&#123;</div><div class="line">  <span class="comment">// 并发读取远程URL</span></div><div class="line">  <span class="keyword">const</span> textPromises = urls.map(<span class="keyword">async</span> url =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(url);</div><div class="line">    <span class="keyword">return</span> response.text();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 按次序输出</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> textPromise <span class="keyword">of</span> textPromises) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> textPromise);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></2></p>
<h3 id="14-Class"><a href="#14-Class" class="headerlink" title="14.Class"></a>14.Class</h3><p>(1).简介<br>class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//生成实例对象的传统方法是通过构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = x;</div><div class="line">  <span class="keyword">this</span>.y = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">//ES6写法</span></div><div class="line"><span class="comment">//定义类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">    <span class="keyword">this</span>.x = x;</div><div class="line">    <span class="keyword">this</span>.y = y;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//类的所有方法都定义在类的prototype属性上面</span></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(2).Class 的静态方法<br>加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> classMethod() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'hello'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Foo.classMethod() <span class="comment">// 'hello'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</div><div class="line">foo.classMethod()</div><div class="line"><span class="comment">// TypeError: foo.classMethod is not a function</span></div></pre></td></tr></table></figure></p>
<p>父类的静态方法，可以被子类继承。</p>
<p>(3)Class的继承<br>子类必须在constructor方法中调用super方法，否则新建实例时会报错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPoint</span> <span class="keyword">extends</span> <span class="title">Point</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(x, y, color) &#123;</div><div class="line">    <span class="keyword">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></div><div class="line">    <span class="keyword">this</span>.color = color;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toString() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color + <span class="string">' '</span> + <span class="keyword">super</span>.toString(); <span class="comment">// 调用父类的toString()</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><1>子类的<strong>proto</strong>属性，表示构造函数的继承，总是指向父类。</1></p>
<p><2>子类prototype属性的<strong>proto</strong>属性，表示方法的继承，总是指向父类的prototype属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.__proto__ === A <span class="comment">// true</span></div><div class="line">B.prototype.__proto__ === A.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure></2></p>
<h3 id="15-Decorator"><a href="#15-Decorator" class="headerlink" title="15.Decorator"></a>15.Decorator</h3><p>修饰器（Decorator）是一个函数，用来修改类的行为。<br>修饰器本质就是编译时执行的函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@testable</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestableClass</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">  target.isTestable = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MyTestableClass.isTestable <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testable</span>(<span class="params">isTestable</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</div><div class="line">    target.isTestable = isTestable;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@testable(<span class="literal">true</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestableClass</span> </span>&#123;&#125;</div><div class="line">MyTestableClass.isTestable <span class="comment">// true</span></div><div class="line"></div><div class="line">@testable(<span class="literal">false</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</div><div class="line">MyClass.isTestable <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结于：&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMAScript6入门&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-Babel转码器&quot;&gt;&lt;a href=&quot;#1-Babel
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用css3总结</title>
    <link href="http://yoursite.com/2017/02/17/css3/"/>
    <id>http://yoursite.com/2017/02/17/css3/</id>
    <published>2017-02-17T03:15:11.000Z</published>
    <updated>2017-02-17T05:56:40.069Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.w3school.com.cn/cssref/index.asp" target="_blank" rel="external">W3C手册在此</a></p>
<h3 id="1-圆角-—-border-radius"><a href="#1-圆角-—-border-radius" class="headerlink" title="1.圆角 — border-radius"></a>1.圆角 — border-radius</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="comment">/* 语法：border-radius: 1-4 length|% / 1-4 length|%;*/</span></div><div class="line">  <span class="attribute">-moz-border-radius</span>:<span class="number">3px</span>;</div><div class="line">  <span class="attribute">-webkit-border-radius</span>:<span class="number">3px</span>;</div><div class="line">  <span class="attribute">border-radius</span>:<span class="number">3px</span>;</div><div class="line"></div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span> <span class="number">1em</span> <span class="number">4em</span> / <span class="number">0.5em</span> <span class="number">3em</span>;</div><div class="line">  <span class="comment">/*等价于*/</span></div><div class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">2em</span> <span class="number">0.5em</span>;</div><div class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">1em</span> <span class="number">3em</span>;</div><div class="line">  <span class="attribute">border-bottom-right-radius</span>: <span class="number">4em</span> <span class="number">0.5em</span>;</div><div class="line">  <span class="attribute">border-bottom-left-radius</span>: <span class="number">1em</span> <span class="number">3em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-阴影-—-box-shadow"><a href="#2-阴影-—-box-shadow" class="headerlink" title="2.阴影 — box-shadow"></a>2.阴影 — box-shadow</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">  <span class="attribute">-webkit-box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#CCC</span>;  </div><div class="line">  <span class="attribute">-moz-box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#CCC</span>;  </div><div class="line">  <span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#CCC</span>;  </div><div class="line"></div><div class="line">  <span class="comment">/*语法:box-shadow: h-shadow v-shadow blur spread color inset</span></div><div class="line">   * h-shadow : 水平阴影位置（必需）</div><div class="line">   * v-shadow : 垂直阴影的位置 （必需）</div><div class="line">   * blur : 模糊距离</div><div class="line">   * spread : 阴影的尺寸</div><div class="line">   * color : 阴影的颜色</div><div class="line">   * inset : 将外部阴影 (outset) 改为内部阴影</div><div class="line">   */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-动画-—-animation"><a href="#3-动画-—-animation" class="headerlink" title="3.动画 — animation"></a>3.动画 — animation</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">keyframes</span> mymove</div><div class="line">&#123;</div><div class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> mymove /* Firefox */</div><div class="line">&#123;</div><div class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> mymove /* Safari 和 Chrome */</div><div class="line">&#123;</div><div class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> mymove /* Opera */</div><div class="line">&#123;</div><div class="line"><span class="selector-tag">from</span> &#123;<span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-tag">to</span> &#123;<span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">div</span></div><div class="line">&#123;</div><div class="line"><span class="attribute">animation</span>:mymove <span class="number">5s</span> infinite;</div><div class="line"><span class="attribute">-webkit-animation</span>:mymove <span class="number">5s</span> infinite; <span class="comment">/* Safari 和 Chrome */</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">*animation 属性是一个简写属性，用于设置六个动画属性：</div><div class="line">*animation-name 规定需要绑定到选择器的 keyframe 名称</div><div class="line">*animation-duration 规定完成动画所花费的时间，以秒或毫秒计</div><div class="line">*animation-timing-function 规定动画的速度曲线  linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n)</div><div class="line">*animation-delay 规定在动画开始之前的延迟</div><div class="line">*animation-iteration-count 规定动画应该播放的次数  n/infinite(循环播放)</div><div class="line">*animation-direction 规定是否应该轮流反向播放动画</div><div class="line">*/</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn/cssref/index.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C手册在此&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-圆角-—-border-radius&quot;&gt;&lt;a hre
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ajax的一些小技巧</title>
    <link href="http://yoursite.com/2017/02/16/ajax/"/>
    <id>http://yoursite.com/2017/02/16/ajax/</id>
    <published>2017-02-16T09:32:19.000Z</published>
    <updated>2017-02-16T09:50:10.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-利用html5-formData实现ajax上传文件"><a href="#1-利用html5-formData实现ajax上传文件" class="headerlink" title="1.利用html5 formData实现ajax上传文件"></a>1.利用html5 formData实现ajax上传文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"coverbg"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"uploadbgPic"</span> <span class="attr">action</span>=<span class="string">"url/uf"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">class</span>=<span class="string">"upload2"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#coverbg'</span>).on(<span class="string">'change'</span>,<span class="string">'.upload2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData($(<span class="string">"#uploadbgPic"</span>)[<span class="number">0</span>]);</div><div class="line">    <span class="comment">//console.log(formData)</span></div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: url + <span class="string">'/uf'</span> ,</div><div class="line">        <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">data</span>: formData,</div><div class="line">        <span class="attr">async</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">contentType</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">processData</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> data = result.data;</div><div class="line">            $(<span class="string">'#coverbg'</span>).find(<span class="string">'img'</span>).attr(<span class="string">'src'</span>,baseAccessUploadPathPc + data);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(err);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="2-递归运行解决ajax无顺序，不用for循环并发"><a href="#2-递归运行解决ajax无顺序，不用for循环并发" class="headerlink" title="2.递归运行解决ajax无顺序，不用for循环并发"></a>2.递归运行解决ajax无顺序，不用for循环并发</h3><p>如果要重复发起请求，for循环不能保证顺序。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">uploadPic</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(n);</div><div class="line">    formData.append(<span class="string">'file'</span>, file[n]);</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: ctx + <span class="string">'/uf'</span>,</div><div class="line">        <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">data</span>: formData,</div><div class="line">        <span class="attr">async</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">contentType</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">processData</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (result.suc) &#123;</div><div class="line">                 <span class="keyword">var</span> data = result.data;</div><div class="line">                 <span class="comment">/**</span></div><div class="line">                 * 数据处理</div><div class="line">                 */</div><div class="line">                 n++;</div><div class="line">                 <span class="keyword">if</span>(n&lt;file.length)uploadPic();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                 alert(result.msg)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(err);</div><div class="line">        &#125;</div><div class="line">     &#125;);</div><div class="line">&#125;)(n);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-利用html5-formData实现ajax上传文件&quot;&gt;&lt;a href=&quot;#1-利用html5-formData实现ajax上传文件&quot; class=&quot;headerlink&quot; title=&quot;1.利用html5 formData实现ajax上传文件&quot;&gt;&lt;/a&gt;1.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于vue的简易数字键盘</title>
    <link href="http://yoursite.com/2017/02/15/vue-keybord/"/>
    <id>http://yoursite.com/2017/02/15/vue-keybord/</id>
    <published>2017-02-15T03:51:31.000Z</published>
    <updated>2017-02-15T03:57:54.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于vue的简易数字键盘"><a href="#基于vue的简易数字键盘" class="headerlink" title="基于vue的简易数字键盘"></a>基于vue的简易数字键盘</h2><hr>
<p>完成时间：2017.02<br>核心技术：zepto,Aui,vue</p>
<h2 id="从小记app里提取出来的，代码有点乱"><a href="#从小记app里提取出来的，代码有点乱" class="headerlink" title="从小记app里提取出来的，代码有点乱"></a>从小记app里提取出来的，代码有点乱</h2><h2 id="先看效果图"><a href="#先看效果图" class="headerlink" title="先看效果图"></a>先看效果图</h2><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo.png" alt="图片"></p>
<p>核心代码：<br>事件没有用v-bind到组件上，因为移动端按键click会有300ms延迟，所以输入时会有延迟，用了apicloud的点击优化tap，或者用zepto的tap事件也行。<br>分类组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//分类组件</span></div><div class="line"><span class="keyword">var</span> classifyComponent = Vue.extend(&#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'#classifyComponent'</span>,</div><div class="line">    <span class="attr">props</span>: [<span class="string">'item'</span>,<span class="string">'index'</span>],</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">onActive</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            $(<span class="string">'#classify li'</span>).removeClass(<span class="string">'active'</span>);</div><div class="line">            <span class="keyword">this</span>.$el.className = <span class="string">"aui-pull-left active"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//分类实例</span></div><div class="line"><span class="keyword">var</span> classify = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#classify'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">          <span class="attr">classify</span>: expenditure</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">components</span>:&#123;</div><div class="line">          <span class="string">'classify-component'</span>: classifyComponent</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">         <span class="attr">addClassify</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>键盘组件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//键盘组件</span></div><div class="line"><span class="keyword">var</span> keybordComponent = Vue.extend(&#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">'#keybordComponent'</span>,</div><div class="line">      <span class="attr">data</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span>&#123;</div><div class="line">              </div><div class="line">          &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">props</span>: [<span class="string">'numbers'</span>],</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">          </div><div class="line">      &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//键盘实例</span></div><div class="line"><span class="keyword">var</span> keybord = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#keybord'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">          <span class="attr">numbers</span>: [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'c'</span>,<span class="number">0</span>,<span class="string">'.'</span>]</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">components</span>:&#123;</div><div class="line">          <span class="string">'keybord-component'</span>: keybordComponent</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">              <span class="attr">onComf</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                </div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>按键操作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyUp</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> count = amount.count;</div><div class="line">      <span class="keyword">var</span> num = $(obj).find(<span class="string">'span'</span>).text();</div><div class="line">      <span class="keyword">if</span>(num == <span class="string">'c'</span>)&#123;</div><div class="line">          amount.count = <span class="number">0</span>; </div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num == <span class="string">'.'</span>)&#123;</div><div class="line">          amount.count = count + num;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">         <span class="keyword">if</span>(count === <span class="number">0</span>||count === <span class="string">'0'</span>)&#123;</div><div class="line">             amount.count = num;</div><div class="line">         &#125;<span class="keyword">else</span>&#123;</div><div class="line">             amount.count = count + num;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onDelete</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> count = amount.count.toString();</div><div class="line">      <span class="keyword">if</span>(count.length == <span class="number">1</span>) &#123;</div><div class="line">          amount.count = <span class="number">0</span>;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">          amount.count = count.substr(<span class="number">0</span>,count.length<span class="number">-1</span>)</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/cry101/Some-little-projects/tree/master/vue" target="_blank" rel="external">从apicloud提取出来的源码地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基于vue的简易数字键盘&quot;&gt;&lt;a href=&quot;#基于vue的简易数字键盘&quot; class=&quot;headerlink&quot; title=&quot;基于vue的简易数字键盘&quot;&gt;&lt;/a&gt;基于vue的简易数字键盘&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;完成时间：2017.02&lt;br&gt;核心技术：zept
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于vue的简易日历</title>
    <link href="http://yoursite.com/2017/02/15/vue-calendar/"/>
    <id>http://yoursite.com/2017/02/15/vue-calendar/</id>
    <published>2017-02-15T03:33:29.000Z</published>
    <updated>2017-02-15T09:04:52.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于vue的简易日历"><a href="#基于vue的简易日历" class="headerlink" title="基于vue的简易日历"></a>基于vue的简易日历</h2><hr>
<p>完成时间：2017.02<br>核心技术：zepto,Aui,vue<br>从小记app里提取出来的，代码有点乱</p>
<hr>
<h2 id="先看效果图"><a href="#先看效果图" class="headerlink" title="先看效果图"></a>先看效果图</h2><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/vue/image/demo2.png" alt="图片"></p>
<p><a href="https://github.com/cry101/Some-little-projects/tree/master/vue-calendar" target="_blank" rel="external">点击查看webpack+vue-cli重写的</a><br>核心代码：HeaderCom.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"aui-bar aui-bar-nav"</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aui-title"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"triangle triangle-left"</span> <span class="attr">v-on:click</span>=<span class="string">"onReduce()"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"year"</span>&gt;</span>&#123;&#123; year &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>年<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"month"</span>&gt;</span>&#123;&#123; month &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>月</div><div class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"triangle triangle-right"</span> <span class="attr">v-on:click</span>=<span class="string">"onPlus()"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TableCom</span> <span class="attr">:year</span>=<span class="string">"year"</span> <span class="attr">:month</span>=<span class="string">"month"</span>&gt;</span><span class="tag">&lt;/<span class="name">TableCom</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> TableCom <span class="keyword">from</span> <span class="string">'components/TableCom'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">var</span> year = myDate.getFullYear();</div><div class="line"><span class="keyword">var</span> month = myDate.getMonth()+<span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'header'</span>,</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">year</span>: year,</div><div class="line">      <span class="attr">month</span> : month</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">    TableCom</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">      <span class="attr">onReduce</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span>(<span class="keyword">this</span>.month == <span class="number">1</span>)&#123;</div><div class="line">               <span class="keyword">this</span>.year = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.year)<span class="number">-1</span>;</div><div class="line">               <span class="keyword">this</span>.month = <span class="number">12</span>;</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">               <span class="keyword">this</span>.month =  <span class="built_in">parseInt</span>(<span class="keyword">this</span>.month)<span class="number">-1</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">onPlus</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span>(<span class="keyword">this</span>.month == <span class="number">12</span>)&#123;</div><div class="line">               <span class="keyword">this</span>.year = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.year)+<span class="number">1</span>;</div><div class="line">               <span class="keyword">this</span>.month = <span class="number">1</span>;</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">               <span class="keyword">this</span>.month = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.month)+<span class="number">1</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;           </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-id">#header</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.aui-bar-nav</span> &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">2.25rem</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#03a9f4</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.aui-bar</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">10</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">2.25rem</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.aui-bar-nav</span> <span class="selector-class">.aui-title</span> &#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">2.25rem</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">white-space</span>: nowrap;</div><div class="line">    <span class="attribute">right</span>: <span class="number">5rem</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">5rem</span>;</div><div class="line">    <span class="attribute">width</span>: auto;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.aui-bar-nav</span> <span class="selector-class">.aui-title</span>&#123;</div><div class="line">  <span class="attribute">right</span>: <span class="number">4rem</span>;<span class="attribute">left</span>: <span class="number">4rem</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.triangle</span>&#123;</div><div class="line">  <span class="attribute">position</span>:absolute;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span> .<span class="number">8rem</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.triangle-left</span>&#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.triangle-right</span>&#123;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.triangle</span> <span class="selector-tag">i</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.triangle-left</span> <span class="selector-tag">i</span>&#123;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">5px</span> solid transparent;</div><div class="line">    <span class="attribute">border-right</span>: <span class="number">10px</span> solid <span class="number">#79CDA9</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">5px</span> solid transparent;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.triangle-right</span> <span class="selector-tag">i</span>&#123;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">5px</span> solid transparent;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#79CDA9</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">5px</span> solid transparent;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>核心代码：TableCom.vue<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"calendar"</span> <span class="attr">id</span>=<span class="string">"calendar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"date-head clearfix"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>一<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>二<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>三<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>四<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>五<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>六<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"date-body clearfix"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-for</span>=<span class="string">"day in days"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;day&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">var</span> year = myDate.getFullYear();</div><div class="line"><span class="keyword">var</span> month = myDate.getMonth()+<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'TableCom'</span>,</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">days</span>: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">props</span>: [<span class="string">'year'</span>,<span class="string">'month'</span>],</div><div class="line">  <span class="attr">watch</span>: &#123;</div><div class="line">    <span class="attr">month</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> year = <span class="keyword">this</span>.year;</div><div class="line">        <span class="keyword">var</span> month = <span class="keyword">this</span>.month;</div><div class="line">        <span class="keyword">var</span> oDate0 = <span class="keyword">new</span> <span class="built_in">Date</span>( year , month , <span class="string">'0'</span> );</div><div class="line">        <span class="keyword">var</span> oDate1 = <span class="keyword">new</span> <span class="built_in">Date</span>( year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + <span class="string">'1'</span> );</div><div class="line">        <span class="keyword">var</span> oDateDays = oDate0.getDate();<span class="comment">//当前月的天数</span></div><div class="line">        <span class="keyword">var</span> oDateWeek = oDate1.getDay();<span class="comment">//当前月1号的星期</span></div><div class="line">        <span class="keyword">var</span> dayArr = [];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class="line">            dayArr.push(<span class="string">""</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class="line">            dayArr.push(j)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.days = dayArr</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> year = <span class="keyword">this</span>.year;</div><div class="line">      <span class="keyword">var</span> month = <span class="keyword">this</span>.month;</div><div class="line">      <span class="keyword">var</span> oDate0 = <span class="keyword">new</span> <span class="built_in">Date</span>( year , month , <span class="string">'0'</span> );</div><div class="line">      <span class="keyword">var</span> oDate1 = <span class="keyword">new</span> <span class="built_in">Date</span>( year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + <span class="string">'1'</span> );</div><div class="line">      <span class="keyword">var</span> oDateDays = oDate0.getDate();<span class="comment">//当前月的天数</span></div><div class="line">      <span class="keyword">var</span> oDateWeek = oDate1.getDay();<span class="comment">//当前月1号的星期</span></div><div class="line">      <span class="keyword">var</span> dayArr = [];</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class="line">          dayArr.push(<span class="string">""</span>)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class="line">          dayArr.push(j)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.days = dayArr          </div><div class="line">  &#125;,</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.calendar</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.calendar</span> <span class="selector-class">.date-head</span>&#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">2rem</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#79CDA9</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.calendar</span> <span class="selector-class">.date-head</span> <span class="selector-tag">th</span>&#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">height</span>: <span class="number">2rem</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">14.2%</span>;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">2rem</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.calendar</span> <span class="selector-class">.date-body</span> <span class="selector-tag">td</span>&#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">height</span>: <span class="number">3rem</span>;</div><div class="line">  <span class="attribute">line-height</span>: .<span class="number">7rem</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">14.2%</span>;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.calendar</span> <span class="selector-class">.date-body</span> <span class="selector-tag">td</span>&gt;<span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">padding-top</span>: .<span class="number">5rem</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.calendar</span> <span class="selector-class">.date-body</span> <span class="selector-tag">td</span>&gt;<span class="selector-tag">span</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: .<span class="number">6rem</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.calendar</span> <span class="selector-class">.date-body</span> <span class="selector-tag">td</span>&gt;<span class="selector-tag">span</span><span class="selector-class">.income</span>&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#8BD4B4</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.calendar</span> <span class="selector-class">.date-body</span> <span class="selector-tag">td</span>&gt;<span class="selector-tag">span</span><span class="selector-class">.expenditure</span>&#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#FB7189</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以下代码在apicloud中写的：<br>由于在apicloud中写的，本来应该头部日期和日历是个父子组件，可是apicloud中是win窗口open出frame窗口，所以就这样吧<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//日历实例</span></div><div class="line"><span class="keyword">var</span> calendar = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#calendar'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">          <span class="attr">days</span>: <span class="string">""</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          </div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">         </div><div class="line">      &#125;</div><div class="line">&#125;)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCalendar</span>(<span class="params">year , month</span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> oDate0 = <span class="keyword">new</span> <span class="built_in">Date</span>( year , month , <span class="string">'0'</span> );</div><div class="line">      <span class="keyword">var</span> oDate1 = <span class="keyword">new</span> <span class="built_in">Date</span>( year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + <span class="string">'1'</span> );</div><div class="line">      <span class="built_in">console</span>.log(oDate1)</div><div class="line">      <span class="keyword">var</span> oDateDays = oDate0.getDate();<span class="comment">//当前月的天数</span></div><div class="line">      <span class="keyword">var</span> oDateWeek = oDate1.getDay();<span class="comment">//当前月1号的星期</span></div><div class="line">      <span class="built_in">console</span>.log(oDateWeek)</div><div class="line">      <span class="keyword">var</span> dayArr = [];</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; oDateWeek ; i++)&#123;</div><div class="line">          dayArr.push(<span class="string">""</span>)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">1</span> ; j &lt;= oDateDays ; j++)&#123;</div><div class="line">          dayArr.push(j)</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">console</span>.log(dayArr)</div><div class="line">      calendar.days = dayArr</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>月份减一：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onReduce</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> year = <span class="built_in">document</span>.getElementById(<span class="string">'year'</span>).innerHTML;</div><div class="line">    <span class="keyword">var</span> month = <span class="built_in">document</span>.getElementById(<span class="string">'month'</span>).innerHTML;</div><div class="line">    <span class="keyword">if</span>(month == <span class="number">1</span>)&#123;</div><div class="line">         <span class="built_in">document</span>.getElementById(<span class="string">'year'</span>).innerHTML = <span class="built_in">parseInt</span>(year)<span class="number">-1</span>;</div><div class="line">         <span class="built_in">document</span>.getElementById(<span class="string">'month'</span>).innerHTML = <span class="number">12</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">         <span class="built_in">document</span>.getElementById(<span class="string">'month'</span>).innerHTML =  <span class="built_in">parseInt</span>(month)<span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    setCalendar(<span class="built_in">document</span>.getElementById(<span class="string">'year'</span>).innerHTML , <span class="built_in">document</span>.getElementById(<span class="string">'month'</span>).innerHTML)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>月份加一：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onPlus</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> year = <span class="built_in">document</span>.getElementById(<span class="string">'year'</span>).innerHTML;</div><div class="line">    <span class="keyword">var</span> month = <span class="built_in">document</span>.getElementById(<span class="string">'month'</span>).innerHTML;</div><div class="line">    <span class="keyword">if</span>(month == <span class="number">12</span>)&#123;</div><div class="line">         <span class="built_in">document</span>.getElementById(<span class="string">'year'</span>).innerHTML = <span class="built_in">parseInt</span>(year)+<span class="number">1</span>;</div><div class="line">         <span class="built_in">document</span>.getElementById(<span class="string">'month'</span>).innerHTML = <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">         <span class="built_in">document</span>.getElementById(<span class="string">'month'</span>).innerHTML = <span class="built_in">parseInt</span>(month)+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    setCalendar(<span class="built_in">document</span>.getElementById(<span class="string">'year'</span>).innerHTML , <span class="built_in">document</span>.getElementById(<span class="string">'month'</span>).innerHTML)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/cry101/Some-little-projects/tree/master/vue" target="_blank" rel="external">从apicloud提取出来的源码地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基于vue的简易日历&quot;&gt;&lt;a href=&quot;#基于vue的简易日历&quot; class=&quot;headerlink&quot; title=&quot;基于vue的简易日历&quot;&gt;&lt;/a&gt;基于vue的简易日历&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;完成时间：2017.02&lt;br&gt;核心技术：zepto,Aui,vu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小说app项目</title>
    <link href="http://yoursite.com/2017/02/15/pro-novel/"/>
    <id>http://yoursite.com/2017/02/15/pro-novel/</id>
    <published>2017-02-15T02:33:19.000Z</published>
    <updated>2017-02-15T02:40:43.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一本小说app项目"><a href="#一本小说app项目" class="headerlink" title="一本小说app项目"></a>一本小说app项目</h2><hr>
<p>完成时间：2017.01 - 2017.01<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>
<hr>
<h2 id="贴一些图好了"><a href="#贴一些图好了" class="headerlink" title="贴一些图好了"></a>贴一些图好了</h2><h3 id="首页，本地存储，vue组件："><a href="#首页，本地存储，vue组件：" class="headerlink" title="首页，本地存储，vue组件："></a>首页，本地存储，vue组件：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/1.PNG" alt="图片"></p>
<h3 id="置顶删除功能通过vue状态实现："><a href="#置顶删除功能通过vue状态实现：" class="headerlink" title="置顶删除功能通过vue状态实现："></a>置顶删除功能通过vue状态实现：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/2.PNG" alt="图片"></p>
<h3 id="搜索功能："><a href="#搜索功能：" class="headerlink" title="搜索功能："></a>搜索功能：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/3.PNG" alt="图片"></p>
<h3 id="小说分类："><a href="#小说分类：" class="headerlink" title="小说分类："></a>小说分类：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/4.PNG" alt="图片"></p>
<h3 id="小说详情，下载调用api："><a href="#小说详情，下载调用api：" class="headerlink" title="小说详情，下载调用api："></a>小说详情，下载调用api：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/5.PNG" alt="图片"></p>
<h3 id="阅读器，调用官方模块，菜单实现是再open一个frame："><a href="#阅读器，调用官方模块，菜单实现是再open一个frame：" class="headerlink" title="阅读器，调用官方模块，菜单实现是再open一个frame："></a>阅读器，调用官方模块，菜单实现是再open一个frame：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/yibenxiaoshuo/6.PNG" alt="图片"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一本小说app项目&quot;&gt;&lt;a href=&quot;#一本小说app项目&quot; class=&quot;headerlink&quot; title=&quot;一本小说app项目&quot;&gt;&lt;/a&gt;一本小说app项目&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;完成时间：2017.01 - 2017.01&lt;br&gt;核心技术：apiclo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>漫画app项目</title>
    <link href="http://yoursite.com/2017/02/14/pro-comic/"/>
    <id>http://yoursite.com/2017/02/14/pro-comic/</id>
    <published>2017-02-14T09:29:47.000Z</published>
    <updated>2017-02-14T10:23:54.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="趣漫画app项目"><a href="#趣漫画app项目" class="headerlink" title="趣漫画app项目"></a>趣漫画app项目</h2><hr>
<p>完成时间：2016.11 - 2016.12<br>核心技术：apicloud,jquery,Aui,vue,artTemplate</p>
<hr>
<h2 id="贴一些图好了"><a href="#贴一些图好了" class="headerlink" title="贴一些图好了"></a>贴一些图好了</h2><h3 id="首页，模板渲染，ajax等等："><a href="#首页，模板渲染，ajax等等：" class="headerlink" title="首页，模板渲染，ajax等等："></a>首页，模板渲染，ajax等等：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/1.PNG" alt="图片"></p>
<h3 id="下拉刷新："><a href="#下拉刷新：" class="headerlink" title="下拉刷新："></a>下拉刷新：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/2.PNG" alt="图片"></p>
<h3 id="上拉加载："><a href="#上拉加载：" class="headerlink" title="上拉加载："></a>上拉加载：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/3.PNG" alt="图片"></p>
<h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/4.PNG" alt="图片"></p>
<h3 id="最近更新："><a href="#最近更新：" class="headerlink" title="最近更新："></a>最近更新：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/7.PNG" alt="图片"></p>
<h3 id="热门排行："><a href="#热门排行：" class="headerlink" title="热门排行："></a>热门排行：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/8.PNG" alt="图片"></p>
<h3 id="其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了"><a href="#其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了" class="headerlink" title="其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了"></a>其他一些头像上传，拍照上传只是调用apicloud的接口，就没贴图了</h3><hr>
<h3 id="历史记录-localstorage-："><a href="#历史记录-localstorage-：" class="headerlink" title="历史记录(localstorage)："></a>历史记录(localstorage)：</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/5.PNG" alt="图片"></p>
<h3 id="登陆注册"><a href="#登陆注册" class="headerlink" title="登陆注册:"></a>登陆注册:</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/6.PNG" alt="图片"></p>
<hr>
<h3 id="漫画分集，正序逆序，vue状态实现"><a href="#漫画分集，正序逆序，vue状态实现" class="headerlink" title="漫画分集，正序逆序，vue状态实现:"></a>漫画分集，正序逆序，vue状态实现:</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/9.PNG" alt="图片"></p>
<hr>
<h3 id="简易的漫画阅读器-swiper"><a href="#简易的漫画阅读器-swiper" class="headerlink" title="简易的漫画阅读器(swiper):"></a>简易的漫画阅读器(swiper):</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/10.PNG" alt="图片"></p>
<h3 id="提示"><a href="#提示" class="headerlink" title="提示:"></a>提示:</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/11.PNG" alt="图片"></p>
<h3 id="分集"><a href="#分集" class="headerlink" title="分集:"></a>分集:</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/12.PNG" alt="图片"></p>
<hr>
<h3 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能:"></a>搜索功能:</h3><p><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/qumanhua/13.PNG" alt="图片"></p>
<h2 id="——"><a href="#——" class="headerlink" title="——"></a>——</h2><h1 id="动漫君app项目"><a href="#动漫君app项目" class="headerlink" title="动漫君app项目"></a>动漫君app项目</h1><hr>
<p>由于公司业务需要另改一个，核心功能一样，就是换套UI，简单贴几个图好了<br><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/1.PNG" alt="图片"><br><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/2.PNG" alt="图片"><br><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/3.PNG" alt="图片"><br><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/4.PNG" alt="图片"><br><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/5.PNG" alt="图片"><br><img src="https://raw.githubusercontent.com/cry101/Some-little-projects/master/image/dongmanjun/6.PNG" alt="图片"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;趣漫画app项目&quot;&gt;&lt;a href=&quot;#趣漫画app项目&quot; class=&quot;headerlink&quot; title=&quot;趣漫画app项目&quot;&gt;&lt;/a&gt;趣漫画app项目&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;完成时间：2016.11 - 2016.12&lt;br&gt;核心技术：apicloud,j
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于时间的JS</title>
    <link href="http://yoursite.com/2017/01/16/time/"/>
    <id>http://yoursite.com/2017/01/16/time/</id>
    <published>2017-01-16T09:52:20.000Z</published>
    <updated>2017-01-16T10:00:13.820Z</updated>
    
    <content type="html"><![CDATA[<p>时间函数加减 2015-10-23<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addByTransDate</span>(<span class="params">dateParameter, num</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> translateDate = <span class="string">""</span>, dateString = <span class="string">""</span>, monthString = <span class="string">""</span>, dayString = <span class="string">""</span>;</div><div class="line">    translateDate = dateParameter.replace(<span class="string">"-"</span>, <span class="string">"/"</span>).replace(<span class="string">"-"</span>, <span class="string">"/"</span>);</div><div class="line">    <span class="keyword">var</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(translateDate);</div><div class="line">    newDate = newDate.valueOf();</div><div class="line">    newDate = newDate + num * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line">    newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(newDate);</div><div class="line">    <span class="comment">//如果月份长度少于2，则前加 0 补位</span></div><div class="line">    <span class="keyword">if</span> ((newDate.getMonth() + <span class="number">1</span>).toString().length == <span class="number">1</span>) &#123;</div><div class="line">        monthString = <span class="number">0</span> + <span class="string">""</span> + (newDate.getMonth() + <span class="number">1</span>).toString();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        monthString = (newDate.getMonth() + <span class="number">1</span>).toString();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果天数长度少于2，则前加 0 补位</span></div><div class="line">    <span class="keyword">if</span> (newDate.getDate().toString().length == <span class="number">1</span>) &#123;</div><div class="line">        dayString = <span class="number">0</span> + <span class="string">""</span> + newDate.getDate().toString();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        dayString = newDate.getDate().toString();</div><div class="line">    &#125;</div><div class="line">    dateString = newDate.getFullYear() + <span class="string">"-"</span> + monthString + <span class="string">"-"</span> + dayString;</div><div class="line">    <span class="keyword">return</span> dateString;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceByTransDate</span>(<span class="params">dateParameter, num</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> translateDate = <span class="string">""</span>, dateString = <span class="string">""</span>, monthString = <span class="string">""</span>, dayString = <span class="string">""</span>;</div><div class="line">    translateDate = dateParameter.replace(<span class="string">"-"</span>, <span class="string">"/"</span>).replace(<span class="string">"-"</span>, <span class="string">"/"</span>);</div><div class="line">    <span class="keyword">var</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(translateDate);</div><div class="line">    newDate = newDate.valueOf();</div><div class="line">    newDate = newDate - num * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</div><div class="line">    newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(newDate);</div><div class="line">    <span class="comment">//如果月份长度少于2，则前加 0 补位</span></div><div class="line">    <span class="keyword">if</span> ((newDate.getMonth() + <span class="number">1</span>).toString().length == <span class="number">1</span>) &#123;</div><div class="line">        monthString = <span class="number">0</span> + <span class="string">""</span> + (newDate.getMonth() + <span class="number">1</span>).toString();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        monthString = (newDate.getMonth() + <span class="number">1</span>).toString();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//如果天数长度少于2，则前加 0 补位</span></div><div class="line">    <span class="keyword">if</span> (newDate.getDate().toString().length == <span class="number">1</span>) &#123;</div><div class="line">        dayString = <span class="number">0</span> + <span class="string">""</span> + newDate.getDate().toString();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        dayString = newDate.getDate().toString();</div><div class="line">    &#125;</div><div class="line">    dateString = newDate.getFullYear() + <span class="string">"-"</span> + monthString + <span class="string">"-"</span> + dayString;</div><div class="line">    <span class="keyword">return</span> dateString;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://www.cnblogs.com/carekee/articles/1678041.html" target="_blank" rel="external">http://www.cnblogs.com/carekee/articles/1678041.html</a><br>Js获取当前日期时间及其它操作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">myDate.getYear();        <span class="comment">//获取当前年份(2位)</span></div><div class="line">myDate.getFullYear();    <span class="comment">//获取完整的年份(4位,1970-????)</span></div><div class="line">myDate.getMonth();       <span class="comment">//获取当前月份(0-11,0代表1月)</span></div><div class="line">myDate.getDate();        <span class="comment">//获取当前日(1-31)</span></div><div class="line">myDate.getDay();         <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></div><div class="line">myDate.getTime();        <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)</span></div><div class="line">myDate.getHours();       <span class="comment">//获取当前小时数(0-23)</span></div><div class="line">myDate.getMinutes();     <span class="comment">//获取当前分钟数(0-59)</span></div><div class="line">myDate.getSeconds();     <span class="comment">//获取当前秒数(0-59)</span></div><div class="line">myDate.getMilliseconds();    <span class="comment">//获取当前毫秒数(0-999)</span></div><div class="line">myDate.toLocaleDateString();     <span class="comment">//获取当前日期</span></div><div class="line"><span class="keyword">var</span> mytime=myDate.toLocaleTimeString();     <span class="comment">//获取当前时间</span></div><div class="line">myDate.toLocaleString( );        <span class="comment">//获取日期与时间</span></div></pre></td></tr></table></figure>
<p>日期时间脚本库方法列表<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Date</span>.prototype.isLeapYear 判断闰年</div><div class="line"><span class="built_in">Date</span>.prototype.Format 日期格式化</div><div class="line"><span class="built_in">Date</span>.prototype.DateAdd 日期计算</div><div class="line"><span class="built_in">Date</span>.prototype.DateDiff 比较日期差</div><div class="line"><span class="built_in">Date</span>.prototype.toString 日期转字符串</div><div class="line"><span class="built_in">Date</span>.prototype.toArray 日期分割为数组</div><div class="line"><span class="built_in">Date</span>.prototype.DatePart 取日期的部分信息</div><div class="line"><span class="built_in">Date</span>.prototype.MaxDayOfDate 取日期所在月的最大天数</div><div class="line"><span class="built_in">Date</span>.prototype.WeekNumOfYear 判断日期所在年的第几周</div><div class="line">StringToDate 字符串转日期型</div><div class="line">IsValidDate 验证日期有效性</div><div class="line">CheckDateTime 完整日期时间检查</div><div class="line">daysBetween 日期天数差</div><div class="line"></div><div class="line">js代码：</div><div class="line"></div><div class="line"><span class="comment">//---------------------------------------------------  </span></div><div class="line"><span class="comment">// 判断闰年  </span></div><div class="line"><span class="comment">//---------------------------------------------------  </span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>.prototype.isLeapYear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)   </span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">return</span> (<span class="number">0</span>==<span class="keyword">this</span>.getYear()%<span class="number">4</span>&amp;&amp;((<span class="keyword">this</span>.getYear()%<span class="number">100</span>!=<span class="number">0</span>)||(<span class="keyword">this</span>.getYear()%<span class="number">400</span>==<span class="number">0</span>)));   </div><div class="line">&#125;   </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//---------------------------------------------------  </span></div><div class="line"><span class="comment">// 日期格式化  </span></div><div class="line"><span class="comment">// 格式 YYYY/yyyy/YY/yy 表示年份  </span></div><div class="line"><span class="comment">// MM/M 月份  </span></div><div class="line"><span class="comment">// W/w 星期  </span></div><div class="line"><span class="comment">// dd/DD/d/D 日期  </span></div><div class="line"><span class="comment">// hh/HH/h/H 时间  </span></div><div class="line"><span class="comment">// mm/m 分钟  </span></div><div class="line"><span class="comment">// ss/SS/s/S 秒  </span></div><div class="line"><span class="comment">//---------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>.prototype.Format = <span class="function"><span class="keyword">function</span>(<span class="params">formatStr</span>)   </span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> str = formatStr;   </div><div class="line">    <span class="keyword">var</span> Week = [<span class="string">'日'</span>,<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>];  </div><div class="line">  </div><div class="line">    str=str.replace(<span class="regexp">/yyyy|YYYY/</span>,<span class="keyword">this</span>.getFullYear());   </div><div class="line">    str=str.replace(<span class="regexp">/yy|YY/</span>,(<span class="keyword">this</span>.getYear() % <span class="number">100</span>)&gt;<span class="number">9</span>?(<span class="keyword">this</span>.getYear() % <span class="number">100</span>).toString():<span class="string">'0'</span> + (<span class="keyword">this</span>.getYear() % <span class="number">100</span>));   </div><div class="line">  </div><div class="line">    str=str.replace(<span class="regexp">/MM/</span>,<span class="keyword">this</span>.getMonth()&gt;<span class="number">9</span>?<span class="keyword">this</span>.getMonth().toString():<span class="string">'0'</span> + <span class="keyword">this</span>.getMonth());   </div><div class="line">    str=str.replace(<span class="regexp">/M/g</span>,<span class="keyword">this</span>.getMonth());   </div><div class="line">  </div><div class="line">    str=str.replace(<span class="regexp">/w|W/g</span>,Week[<span class="keyword">this</span>.getDay()]);   </div><div class="line">  </div><div class="line">    str=str.replace(<span class="regexp">/dd|DD/</span>,<span class="keyword">this</span>.getDate()&gt;<span class="number">9</span>?<span class="keyword">this</span>.getDate().toString():<span class="string">'0'</span> + <span class="keyword">this</span>.getDate());   </div><div class="line">    str=str.replace(<span class="regexp">/d|D/g</span>,<span class="keyword">this</span>.getDate());   </div><div class="line">  </div><div class="line">    str=str.replace(<span class="regexp">/hh|HH/</span>,<span class="keyword">this</span>.getHours()&gt;<span class="number">9</span>?<span class="keyword">this</span>.getHours().toString():<span class="string">'0'</span> + <span class="keyword">this</span>.getHours());   </div><div class="line">    str=str.replace(<span class="regexp">/h|H/g</span>,<span class="keyword">this</span>.getHours());   </div><div class="line">    str=str.replace(<span class="regexp">/mm/</span>,<span class="keyword">this</span>.getMinutes()&gt;<span class="number">9</span>?<span class="keyword">this</span>.getMinutes().toString():<span class="string">'0'</span> + <span class="keyword">this</span>.getMinutes());   </div><div class="line">    str=str.replace(<span class="regexp">/m/g</span>,<span class="keyword">this</span>.getMinutes());   </div><div class="line">  </div><div class="line">    str=str.replace(<span class="regexp">/ss|SS/</span>,<span class="keyword">this</span>.getSeconds()&gt;<span class="number">9</span>?<span class="keyword">this</span>.getSeconds().toString():<span class="string">'0'</span> + <span class="keyword">this</span>.getSeconds());   </div><div class="line">    str=str.replace(<span class="regexp">/s|S/g</span>,<span class="keyword">this</span>.getSeconds());   </div><div class="line">  </div><div class="line">    <span class="keyword">return</span> str;   </div><div class="line">&#125;   </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 求两个时间的天数差 日期格式为 YYYY-MM-dd   </span></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">daysBetween</span>(<span class="params">DateOne,DateTwo</span>)  </span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> OneMonth = DateOne.substring(<span class="number">5</span>,DateOne.lastIndexOf (<span class="string">'-'</span>));  </div><div class="line">    <span class="keyword">var</span> OneDay = DateOne.substring(DateOne.length,DateOne.lastIndexOf (<span class="string">'-'</span>)+<span class="number">1</span>);  </div><div class="line">    <span class="keyword">var</span> OneYear = DateOne.substring(<span class="number">0</span>,DateOne.indexOf (<span class="string">'-'</span>));  </div><div class="line">  </div><div class="line">    <span class="keyword">var</span> TwoMonth = DateTwo.substring(<span class="number">5</span>,DateTwo.lastIndexOf (<span class="string">'-'</span>));  </div><div class="line">    <span class="keyword">var</span> TwoDay = DateTwo.substring(DateTwo.length,DateTwo.lastIndexOf (<span class="string">'-'</span>)+<span class="number">1</span>);  </div><div class="line">    <span class="keyword">var</span> TwoYear = DateTwo.substring(<span class="number">0</span>,DateTwo.indexOf (<span class="string">'-'</span>));  </div><div class="line">  </div><div class="line">    <span class="keyword">var</span> cha=((<span class="built_in">Date</span>.parse(OneMonth+<span class="string">'/'</span>+OneDay+<span class="string">'/'</span>+OneYear)- <span class="built_in">Date</span>.parse(TwoMonth+<span class="string">'/'</span>+TwoDay+<span class="string">'/'</span>+TwoYear))/<span class="number">86400000</span>);   </div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs(cha);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">  </div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 日期计算  </span></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>.prototype.DateAdd = <span class="function"><span class="keyword">function</span>(<span class="params">strInterval, Number</span>) </span>&#123;   </div><div class="line">    <span class="keyword">var</span> dtTmp = <span class="keyword">this</span>;  </div><div class="line">    <span class="keyword">switch</span> (strInterval) &#123;   </div><div class="line">        <span class="keyword">case</span> <span class="string">'s'</span> :<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(dtTmp) + (<span class="number">1000</span> * <span class="built_in">Number</span>));  </div><div class="line">        <span class="keyword">case</span> <span class="string">'n'</span> :<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(dtTmp) + (<span class="number">60000</span> * <span class="built_in">Number</span>));  </div><div class="line">        <span class="keyword">case</span> <span class="string">'h'</span> :<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(dtTmp) + (<span class="number">3600000</span> * <span class="built_in">Number</span>));  </div><div class="line">        <span class="keyword">case</span> <span class="string">'d'</span> :<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(dtTmp) + (<span class="number">86400000</span> * <span class="built_in">Number</span>));  </div><div class="line">        <span class="keyword">case</span> <span class="string">'w'</span> :<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(dtTmp) + ((<span class="number">86400000</span> * <span class="number">7</span>) * <span class="built_in">Number</span>));  </div><div class="line">        <span class="keyword">case</span> <span class="string">'q'</span> :<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class="built_in">Number</span>*<span class="number">3</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class="line">        <span class="keyword">case</span> <span class="string">'m'</span> :<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(dtTmp.getFullYear(), (dtTmp.getMonth()) + <span class="built_in">Number</span>, dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class="line">        <span class="keyword">case</span> <span class="string">'y'</span> :<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>((dtTmp.getFullYear() + <span class="built_in">Number</span>), dtTmp.getMonth(), dtTmp.getDate(), dtTmp.getHours(), dtTmp.getMinutes(), dtTmp.getSeconds());  </div><div class="line">    &#125;  </div><div class="line">&#125; </div><div class="line"></div><div class="line">  </div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 比较日期差 dtEnd 格式为日期型或者有效日期格式字符串  </span></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>.prototype.DateDiff = <span class="function"><span class="keyword">function</span>(<span class="params">strInterval, dtEnd</span>) </span>&#123;   </div><div class="line">    <span class="keyword">var</span> dtStart = <span class="keyword">this</span>;  </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> dtEnd == <span class="string">'string'</span> )<span class="comment">//如果是字符串转换为日期型  </span></div><div class="line">    &#123;   </div><div class="line">        dtEnd = StringToDate(dtEnd);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">switch</span> (strInterval) &#123;   </div><div class="line">        <span class="keyword">case</span> <span class="string">'s'</span> :<span class="keyword">return</span> <span class="built_in">parseInt</span>((dtEnd - dtStart) / <span class="number">1000</span>);  </div><div class="line">        <span class="keyword">case</span> <span class="string">'n'</span> :<span class="keyword">return</span> <span class="built_in">parseInt</span>((dtEnd - dtStart) / <span class="number">60000</span>);  </div><div class="line">        <span class="keyword">case</span> <span class="string">'h'</span> :<span class="keyword">return</span> <span class="built_in">parseInt</span>((dtEnd - dtStart) / <span class="number">3600000</span>);  </div><div class="line">        <span class="keyword">case</span> <span class="string">'d'</span> :<span class="keyword">return</span> <span class="built_in">parseInt</span>((dtEnd - dtStart) / <span class="number">86400000</span>);  </div><div class="line">        <span class="keyword">case</span> <span class="string">'w'</span> :<span class="keyword">return</span> <span class="built_in">parseInt</span>((dtEnd - dtStart) / (<span class="number">86400000</span> * <span class="number">7</span>));  </div><div class="line">        <span class="keyword">case</span> <span class="string">'m'</span> :<span class="keyword">return</span> (dtEnd.getMonth()+<span class="number">1</span>)+((dtEnd.getFullYear()-dtStart.getFullYear())*<span class="number">12</span>) - (dtStart.getMonth()+<span class="number">1</span>);  </div><div class="line">        <span class="keyword">case</span> <span class="string">'y'</span> :<span class="keyword">return</span> dtEnd.getFullYear() - dtStart.getFullYear();  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line">  </div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 日期输出字符串，重载了系统的toString方法  </span></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="built_in">Date</span>.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params">showWeek</span>)  </span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> myDate= <span class="keyword">this</span>;  </div><div class="line">    <span class="keyword">var</span> str = myDate.toLocaleDateString();  </div><div class="line">    <span class="keyword">if</span> (showWeek)  </div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">var</span> Week = [<span class="string">'日'</span>,<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>];  </div><div class="line">        str += <span class="string">' 星期'</span> + Week[myDate.getDay()];  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> str;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 日期合法性验证  </span></div><div class="line"><span class="comment">//| 格式为：YYYY-MM-DD或YYYY/MM/DD  </span></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsValidDate</span>(<span class="params">DateStr</span>)   </span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> sDate=DateStr.replace(<span class="regexp">/(^\s+|\s+$)/g</span>,<span class="string">''</span>); <span class="comment">//去两边空格;   </span></div><div class="line">    <span class="keyword">if</span>(sDate==<span class="string">''</span>) <span class="keyword">return</span> <span class="literal">true</span>;   </div><div class="line">    <span class="comment">//如果格式满足YYYY-(/)MM-(/)DD或YYYY-(/)M-(/)DD或YYYY-(/)M-(/)D或YYYY-(/)MM-(/)D就替换为''   </span></div><div class="line">    <span class="comment">//数据库中，合法日期可以是:YYYY-MM/DD(2003-3/21),数据库会自动转换为YYYY-MM-DD格式   </span></div><div class="line">    <span class="keyword">var</span> s = sDate.replace(<span class="regexp">/[\d]&#123; 4,4 &#125;[\-/]&#123; 1 &#125;[\d]&#123; 1,2 &#125;[\-/]&#123; 1 &#125;[\d]&#123; 1,2 &#125;/g</span>,<span class="string">''</span>);   </div><div class="line">    <span class="keyword">if</span> (s==<span class="string">''</span>) <span class="comment">//说明格式满足YYYY-MM-DD或YYYY-M-DD或YYYY-M-D或YYYY-MM-D   </span></div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">var</span> t=<span class="keyword">new</span> <span class="built_in">Date</span>(sDate.replace(<span class="regexp">/\-/g</span>,<span class="string">'/'</span>));   </div><div class="line">        <span class="keyword">var</span> ar = sDate.split(<span class="regexp">/[-/:]/</span>);   </div><div class="line">        <span class="keyword">if</span>(ar[<span class="number">0</span>] != t.getYear() || ar[<span class="number">1</span>] != t.getMonth()+<span class="number">1</span> || ar[<span class="number">2</span>] != t.getDate())   </div><div class="line">        &#123;   </div><div class="line">            <span class="comment">//alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   </span></div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">        &#125;   </div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">else</span>   </div><div class="line">    &#123;   </div><div class="line">        <span class="comment">//alert('错误的日期格式！格式为：YYYY-MM-DD或YYYY/MM/DD。注意闰年。');   </span></div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;   </div><div class="line">&#125;  </div><div class="line"></div><div class="line">  </div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 日期时间检查  </span></div><div class="line"><span class="comment">//| 格式为：YYYY-MM-DD HH:MM:SS  </span></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckDateTime</span>(<span class="params">str</span>)  </span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^(\d+)-(\d&#123; 1,2 &#125;)-(\d&#123; 1,2 &#125;) (\d&#123; 1,2 &#125;):(\d&#123; 1,2 &#125;):(\d&#123; 1,2 &#125;)$/</span>;   </div><div class="line">    <span class="keyword">var</span> r = str.match(reg);   </div><div class="line">    <span class="keyword">if</span>(r==<span class="literal">null</span>)<span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">    r[<span class="number">2</span>]=r[<span class="number">2</span>]<span class="number">-1</span>;   </div><div class="line">    <span class="keyword">var</span> d= <span class="keyword">new</span> <span class="built_in">Date</span>(r[<span class="number">1</span>],r[<span class="number">2</span>],r[<span class="number">3</span>],r[<span class="number">4</span>],r[<span class="number">5</span>],r[<span class="number">6</span>]);   </div><div class="line">    <span class="keyword">if</span>(d.getFullYear()!=r[<span class="number">1</span>])<span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">    <span class="keyword">if</span>(d.getMonth()!=r[<span class="number">2</span>])<span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">    <span class="keyword">if</span>(d.getDate()!=r[<span class="number">3</span>])<span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">    <span class="keyword">if</span>(d.getHours()!=r[<span class="number">4</span>])<span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">    <span class="keyword">if</span>(d.getMinutes()!=r[<span class="number">5</span>])<span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">    <span class="keyword">if</span>(d.getSeconds()!=r[<span class="number">6</span>])<span class="keyword">return</span> <span class="literal">false</span>;   </div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;   </div><div class="line">&#125;   </div><div class="line"></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 把日期分割成数组  </span></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>.prototype.toArray = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> myDate = <span class="keyword">this</span>;  </div><div class="line">    <span class="keyword">var</span> myArray = <span class="built_in">Array</span>();  </div><div class="line">    myArray[<span class="number">0</span>] = myDate.getFullYear();  </div><div class="line">    myArray[<span class="number">1</span>] = myDate.getMonth();  </div><div class="line">    myArray[<span class="number">2</span>] = myDate.getDate();  </div><div class="line">    myArray[<span class="number">3</span>] = myDate.getHours();  </div><div class="line">    myArray[<span class="number">4</span>] = myDate.getMinutes();  </div><div class="line">    myArray[<span class="number">5</span>] = myDate.getSeconds();  </div><div class="line">    <span class="keyword">return</span> myArray;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 取得日期数据信息  </span></div><div class="line"><span class="comment">//| 参数 interval 表示数据类型  </span></div><div class="line"><span class="comment">//| y 年 m月 d日 w星期 ww周 h时 n分 s秒  </span></div><div class="line"><span class="comment">//+--------------------------------------------------- </span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>.prototype.DatePart = <span class="function"><span class="keyword">function</span>(<span class="params">interval</span>)  </span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> myDate = <span class="keyword">this</span>;  </div><div class="line">    <span class="keyword">var</span> partStr=<span class="string">''</span>;  </div><div class="line">    <span class="keyword">var</span> Week = [<span class="string">'日'</span>,<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>];  </div><div class="line">    <span class="keyword">switch</span> (interval)  </div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">case</span> <span class="string">'y'</span> :partStr = myDate.getFullYear();<span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> <span class="string">'m'</span> :partStr = myDate.getMonth()+<span class="number">1</span>;<span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> <span class="string">'d'</span> :partStr = myDate.getDate();<span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> <span class="string">'w'</span> :partStr = Week[myDate.getDay()];<span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> <span class="string">'ww'</span> :partStr = myDate.WeekNumOfYear();<span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> <span class="string">'h'</span> :partStr = myDate.getHours();<span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> <span class="string">'n'</span> :partStr = myDate.getMinutes();<span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> <span class="string">'s'</span> :partStr = myDate.getSeconds();<span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> partStr;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 取得当前日期所在月的最大天数  </span></div><div class="line"><span class="comment">//+--------------------------------------------------- </span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>.prototype.MaxDayOfDate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> myDate = <span class="keyword">this</span>;  </div><div class="line">    <span class="keyword">var</span> ary = myDate.toArray();  </div><div class="line">    <span class="keyword">var</span> date1 = (<span class="keyword">new</span> <span class="built_in">Date</span>(ary[<span class="number">0</span>],ary[<span class="number">1</span>]+<span class="number">1</span>,<span class="number">1</span>));  </div><div class="line">    <span class="keyword">var</span> date2 = date1.dateAdd(<span class="number">1</span>,<span class="string">'m'</span>,<span class="number">1</span>);  </div><div class="line">    <span class="keyword">var</span> result = dateDiff(date1.Format(<span class="string">'yyyy-MM-dd'</span>),date2.Format(<span class="string">'yyyy-MM-dd'</span>));  </div><div class="line">    <span class="keyword">return</span> result;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 取得当前日期所在周是一年中的第几周  </span></div><div class="line"><span class="comment">//+--------------------------------------------------- </span></div><div class="line"></div><div class="line"><span class="built_in">Date</span>.prototype.WeekNumOfYear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">var</span> myDate = <span class="keyword">this</span>;  </div><div class="line">    <span class="keyword">var</span> ary = myDate.toArray();  </div><div class="line">    <span class="keyword">var</span> year = ary[<span class="number">0</span>];  </div><div class="line">    <span class="keyword">var</span> month = ary[<span class="number">1</span>]+<span class="number">1</span>;  </div><div class="line">    <span class="keyword">var</span> day = ary[<span class="number">2</span>];  </div><div class="line">    <span class="built_in">document</span>.write(<span class="string">'&lt; script language=VBScript\&gt; \n'</span>);  </div><div class="line">    <span class="built_in">document</span>.write(<span class="string">'myDate = Datue('</span><span class="string">'+month+'</span>-<span class="string">'+day+'</span>-<span class="string">'+year+'</span><span class="string">') \n'</span>);  </div><div class="line">    <span class="built_in">document</span>.write(<span class="string">'result = DatePart('</span>ww<span class="string">', myDate) \n'</span>);  </div><div class="line">    <span class="built_in">document</span>.write(<span class="string">' \n'</span>);  </div><div class="line">    <span class="keyword">return</span> result;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">//+---------------------------------------------------  </span></div><div class="line"><span class="comment">//| 字符串转成日期类型   </span></div><div class="line"><span class="comment">//| 格式 MM/dd/YYYY MM-dd-YYYY YYYY/MM/dd YYYY-MM-dd  </span></div><div class="line"><span class="comment">//+---------------------------------------------------</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">StringToDate</span>(<span class="params">DateStr</span>)  </span></div><div class="line">&#123;   </div><div class="line">  </div><div class="line">    <span class="keyword">var</span> converted = <span class="built_in">Date</span>.parse(DateStr);  </div><div class="line">    <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(converted);  </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(myDate))  </div><div class="line">    &#123;   </div><div class="line">        <span class="comment">//var delimCahar = DateStr.indexOf('/')!=-1?'/':'-';  </span></div><div class="line">        <span class="keyword">var</span> arys= DateStr.split(<span class="string">'-'</span>);  </div><div class="line">        myDate = <span class="keyword">new</span> <span class="built_in">Date</span>(arys[<span class="number">0</span>],--arys[<span class="number">1</span>],arys[<span class="number">2</span>]);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> myDate;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>若要显示:当前日期加时间(如:2009-06-12 12:00)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CurentTime</span>(<span class="params"></span>)</span></div><div class="line">    &#123; </div><div class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">       </div><div class="line">        <span class="keyword">var</span> year = now.getFullYear();       <span class="comment">//年</span></div><div class="line">        <span class="keyword">var</span> month = now.getMonth() + <span class="number">1</span>;     <span class="comment">//月</span></div><div class="line">        <span class="keyword">var</span> day = now.getDate();            <span class="comment">//日</span></div><div class="line">       </div><div class="line">        <span class="keyword">var</span> hh = now.getHours();            <span class="comment">//时</span></div><div class="line">        <span class="keyword">var</span> mm = now.getMinutes();          <span class="comment">//分</span></div><div class="line">       </div><div class="line">        <span class="keyword">var</span> clock = year + <span class="string">"-"</span>;</div><div class="line">       </div><div class="line">        <span class="keyword">if</span>(month &lt; <span class="number">10</span>)</div><div class="line">            clock += <span class="string">"0"</span>;</div><div class="line">       </div><div class="line">        clock += month + <span class="string">"-"</span>;</div><div class="line">       </div><div class="line">        <span class="keyword">if</span>(day &lt; <span class="number">10</span>)</div><div class="line">            clock += <span class="string">"0"</span>;</div><div class="line">           </div><div class="line">        clock += day + <span class="string">" "</span>;</div><div class="line">       </div><div class="line">        <span class="keyword">if</span>(hh &lt; <span class="number">10</span>)</div><div class="line">            clock += <span class="string">"0"</span>;</div><div class="line">           </div><div class="line">        clock += hh + <span class="string">":"</span>;</div><div class="line">        <span class="keyword">if</span> (mm &lt; <span class="number">10</span>) clock += <span class="string">'0'</span>; </div><div class="line">        clock += mm; </div><div class="line">        <span class="keyword">return</span>(clock); </div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间函数加减 2015-10-23&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css命名</title>
    <link href="http://yoursite.com/2017/01/14/css-name/"/>
    <id>http://yoursite.com/2017/01/14/css-name/</id>
    <published>2017-01-14T05:57:04.000Z</published>
    <updated>2017-01-16T09:48:48.936Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">头：header</div><div class="line">内容：content/container　　</div><div class="line">尾：footer　　</div><div class="line">导航：nav　　</div><div class="line">侧栏：sidebar　　</div><div class="line">栏目：column　　</div><div class="line">页面外围控制整体佈局宽度：wrapper　　</div><div class="line">左右中：left right center　　</div><div class="line">登录条：loginbar　　</div><div class="line">标志：logo　　</div><div class="line">广告：banner　　</div><div class="line">页面主体：main　　</div><div class="line">热点：hot　　</div><div class="line">新闻：news　　</div><div class="line">下载：download　　</div><div class="line">子导航：subnav　　</div><div class="line">菜单：menu　　</div><div class="line">子菜单：submenu　　</div><div class="line">搜索：search　　</div><div class="line">友情链接：friendlink　　</div><div class="line">页脚：footer　　</div><div class="line">版权：copyright　　</div><div class="line">滚动：scroll　　</div><div class="line">内容：content　　</div><div class="line">标签：tags　　</div><div class="line">文章列表：list　　</div><div class="line">提示信息：msg　　</div><div class="line">小技巧：tips　　</div><div class="line">栏目标题：title　　</div><div class="line">加入：joinus　　</div><div class="line">指南：guide　　</div><div class="line">服务：service　　</div><div class="line">注册：regsiter　　</div><div class="line">状态：status　　</div><div class="line">投票：vote　　</div><div class="line">合作伙伴：partner　　</div><div class="line">导航：nav　　</div><div class="line">主导航：mainnav　　</div><div class="line">子导航：subnav　　</div><div class="line">顶导航：topnav　　</div><div class="line">边导航：sidebar　　</div><div class="line">左导航：leftsidebar　　</div><div class="line">右导航：rightsidebar　　</div><div class="line">菜单：menu　　</div><div class="line">子菜单：submenu　　</div><div class="line">标题: title　　</div><div class="line">摘要: summary</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSON.parse 和 JSON.stringify</title>
    <link href="http://yoursite.com/2017/01/14/JSON/"/>
    <id>http://yoursite.com/2017/01/14/JSON/</id>
    <published>2017-01-14T02:15:12.000Z</published>
    <updated>2017-01-14T02:21:08.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-parse用于从一个字符串中解析出json对象-如"><a href="#1-parse用于从一个字符串中解析出json对象-如" class="headerlink" title="1.parse用于从一个字符串中解析出json对象,如"></a>1.parse用于从一个字符串中解析出json对象,如</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'&#123;"name":"huangxiaojian","age":"23"&#125;'</span></div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">JSON</span>.parse(str)</div><div class="line"></div><div class="line"><span class="built_in">Object</span></div><div class="line"></div><div class="line">age: <span class="string">"23"</span></div><div class="line">name: <span class="string">"huangxiaojian"</span></div><div class="line">__proto__: <span class="built_in">Object</span></div></pre></td></tr></table></figure>
<p>注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。</p>
<h3 id="2-stringify-用于从一个对象解析出字符串，如"><a href="#2-stringify-用于从一个对象解析出字符串，如" class="headerlink" title="2.stringify()用于从一个对象解析出字符串，如"></a>2.stringify()用于从一个对象解析出字符串，如</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">JSON</span>.stringify(a)</div><div class="line"></div><div class="line"><span class="string">"&#123;"</span>a<span class="string">":1,"</span>b<span class="string">":2&#125;"</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-parse用于从一个字符串中解析出json对象-如&quot;&gt;&lt;a href=&quot;#1-parse用于从一个字符串中解析出json对象-如&quot; class=&quot;headerlink&quot; title=&quot;1.parse用于从一个字符串中解析出json对象,如&quot;&gt;&lt;/a&gt;1.par
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/01/12/hello-world/"/>
    <id>http://yoursite.com/2017/01/12/hello-world/</id>
    <published>2017-01-12T02:08:42.698Z</published>
    <updated>2017-01-12T02:08:42.720Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
